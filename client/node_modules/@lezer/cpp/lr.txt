
> @lezer/cpp@0.15.0 build-debug
> lezer-generator src/cpp.grammar --names -o src/parser && rollup -c

0: 
  RawString=s35,"("=s20,identifier/"bool"=s57,DestructorName=s26,"::"=s5,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s85,identifier/"__declspec"=s59,"{"=s45,"["=s25,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"virtual"=s37,identifier/"extern"=s60,identifier/"static"=s61,identifier/"register"=s61,identifier/"inline"=s61,identifier/"__attribute__"=s62,identifier/"__based"=s63,identifier/"throw"=s78,OperatorName=s26,identifier/"template"=s81,identifier/"typename"=s89,identifier/"class"=s88,identifier/"using"=s64,identifier/"__cdecl"=s84,identifier/"case"=s75,identifier/"default"=s76,identifier/"if"=s65,identifier/"switch"=s66,identifier/"do"=s67,identifier/"while"=s68,identifier/"for"=s69,identifier/"return"=s70,identifier/"break"=s71,identifier/"continue"=s72,identifier/"goto"=s73,identifier/"typedef"=s74,identifier/"try"=s77,identifier/"namespace"=s79,identifier/"static_assert"=s80,identifier/"explicit"=s82,identifier/"delete"=s93,identifier/"operator"=s83,identifier/"union"=s86,identifier/"enum"=s87,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s3,"[["=s10,"*"=s17,"&&"=s22,"&"=s21,";"=s31,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s23,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s6,TemplateType=s7,TypeIdentifier=s49,ScopedTypeIdentifier=s49,ScopedNamespaceIdentifier=s8,StructSpecifier=s48,MsDeclspecModifier=s14,Attribute=s11,CharLiteral=s56,AttributeSpecifier=s13,MsBasedModifier=s18,PointerDeclarator-1=s26,FunctionDeclarator-1=s27,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s24,TemplateFunction=s28,StructuredBindingDeclarator=s26,TemplateDeclaration=s42,AliasDeclaration=s42,Declaration=s42,FunctionDefinition=s42,CompoundStatement=s33,LinkageSpecification=s42,CaseStatement=s34,LabeledStatement=s33,StatementIdentifier=s30,ExpressionStatement=s33,CommaExpression=s32,IfStatement=s33,SwitchStatement=s33,DoStatement=s33,ParenthesizedExpression=s50,WhileStatement=s33,ForStatement=s33,ReturnStatement=s33,BreakStatement=s33,ContinueStatement=s33,GotoStatement=s33,TypeDefinition=s42,ForRangeLoop=s34,TryStatement=s34,ThrowStatement=s34,NamespaceDefinition=s42,UsingDeclaration=s42,StaticAssertDeclaration=s42,ConcatenatedString=s56,TemplateInstantiation=s42,FunctionDefinition-1=s42,ExplicitFunctionSpecifier=s37,FunctionDefinition-2=s42,OperatorCast=s39,Declaration-2=s42,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,Attribute+=s12,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+=s15,topLevelItem+=s44,(storageClassSpecifier | typeQualifier | AttributeSpecifier)+=s36,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,expression=s4,typeQualifier=s13,typeSpecifier=s16,declarationSpecifiers=s29,storageClassSpecifier=s13,declarator=s19,emptyDeclaration=s42,topLevelItem=s43,statement=s42,nonCaseStatement=s34,constructorOrDestructorDefinition=s38,operatorCastDefinition=s40,operatorCastDeclaration=s41
1: 
  MacroName=s99,pp<"include">=s94,pp<"define">=s95,pp<"if">=s96,pp<"ifdef">=s97,pp<"ifndef">=s97,pp<"else">=s98,pp<"endif">=s98,pp<"elif">=s96,PreprocDirectiveName=s96 | PreprocDirective=s100,Macro=s100
2: String -> stringLiteralStart · stringLiteralEnd,String -> stringLiteralStart · (stringLiteralContent | EscapeSequence)+ stringLiteralEnd
  EscapeSequence=s101,stringLiteralContent=s101,stringLiteralEnd=s103 | (stringLiteralContent | EscapeSequence)+=s102
3: Identifier -> identifier ·,NamespaceIdentifier -> identifier ·,TypeIdentifier -> identifier ·,StatementIdentifier -> identifier ·
  "("=Identifier(1),"("=TypeIdentifier(1),DestructorName=TypeIdentifier(1),"::"=NamespaceIdentifier(1),"<"=Identifier(1),"<"=TypeIdentifier(1),identifier/"const"=TypeIdentifier(1),identifier/"volatile"=TypeIdentifier(1),identifier/"restrict"=TypeIdentifier(1),identifier/"_Atomic"=TypeIdentifier(1),identifier/"mutable"=TypeIdentifier(1),identifier/"constexpr"=TypeIdentifier(1),identifier/"__declspec"=TypeIdentifier(1),","=Identifier(1),"{"=TypeIdentifier(1),"["=Identifier(1),"["=TypeIdentifier(1),incDec=Identifier(1),ArithOp<"+" | "-">=Identifier(1),ArithOp<"/" | "%">=Identifier(1),BitOp<"|">=Identifier(1),BitOp<"^">=Identifier(1),CompareOp<"==" | "!=">=Identifier(1),CompareOp<"<=" | ">=">=Identifier(1),"<"/"<"=Identifier(1),templateArgsEnd/">"=Identifier(1),BitOp<"<<" | ">>">=Identifier(1),UpdateOp=Identifier(1),identifier/"extern"=TypeIdentifier(1),identifier/"static"=TypeIdentifier(1),identifier/"register"=TypeIdentifier(1),identifier/"inline"=TypeIdentifier(1),identifier/"__attribute__"=TypeIdentifier(1),identifier/"__based"=TypeIdentifier(1),OperatorName=TypeIdentifier(1),identifier=TypeIdentifier(1),"?"=Identifier(1),":"=StatementIdentifier(1),"."=Identifier(1),"->"=Identifier(1),"..."=Identifier(1),"*"=Identifier(1),"*"=TypeIdentifier(1),"||"=Identifier(1),"&&"=Identifier(1),"&&"=TypeIdentifier(1),"&"=Identifier(1),"&"=TypeIdentifier(1),";"=Identifier(1),";"=TypeIdentifier(1),"="=Identifier(1),"}"=Identifier(1)
4: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,CommaExpression -> expression · "," expression,CommaExpression -> expression · "," CommaExpression,ExpressionStatement -> expression · ";",FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,","=s106,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112,";"=s107 | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
5: ScopedNamespaceIdentifier -> "::" · NamespaceIdentifier-1,ScopedTypeIdentifier -> "::" · TypeIdentifier-1,ScopedIdentifier -> "::" · Identifier-1,ScopedIdentifier -> "::" · OperatorName,ScopedIdentifier -> "::" · DestructorName,OperatorCast -> "::" · scopedIdentifier/"operator" declarationSpecifiers abstractDeclarator,NewExpression -> "::" · scopedIdentifier/"new" typeSpecifier,NewExpression -> "::" · scopedIdentifier/"new" typeSpecifier ArgumentList,NewExpression -> "::" · scopedIdentifier/"new" typeSpecifier InitializerList,NewExpression -> "::" · scopedIdentifier/"new" typeSpecifier NewDeclarator,NewExpression -> "::" · scopedIdentifier/"new" typeSpecifier NewDeclarator ArgumentList,NewExpression -> "::" · scopedIdentifier/"new" typeSpecifier NewDeclarator InitializerList,NewExpression -> "::" · scopedIdentifier/"new" ArgumentList typeSpecifier,NewExpression -> "::" · scopedIdentifier/"new" ArgumentList typeSpecifier ArgumentList,NewExpression -> "::" · scopedIdentifier/"new" ArgumentList typeSpecifier InitializerList,NewExpression -> "::" · scopedIdentifier/"new" ArgumentList typeSpecifier NewDeclarator,NewExpression -> "::" · scopedIdentifier/"new" ArgumentList typeSpecifier NewDeclarator ArgumentList,NewExpression -> "::" · scopedIdentifier/"new" ArgumentList typeSpecifier NewDeclarator InitializerList,DeleteExpression -> "::" · scopedIdentifier/"delete" expression,DeleteExpression -> "::" · scopedIdentifier/"delete" "[" "]" expression
  DestructorName=s128,OperatorName=s128,scopedIdentifier/"operator"=s129,scopedIdentifier/"new"=s130,scopedIdentifier/"delete"=s131,scopedIdentifier=s125 | NamespaceIdentifier-1=s126,TypeIdentifier-1=s127,Identifier-1=s128
6: ScopedNamespaceIdentifier -> NamespaceIdentifier · "::" NamespaceIdentifier-1,ScopedTypeIdentifier -> NamespaceIdentifier · "::" TypeIdentifier-1,ScopedIdentifier -> NamespaceIdentifier · "::" Identifier-1,ScopedIdentifier -> NamespaceIdentifier · "::" OperatorName,ScopedIdentifier -> NamespaceIdentifier · "::" DestructorName,OperatorCast -> NamespaceIdentifier · "::" scopedIdentifier/"operator" declarationSpecifiers abstractDeclarator
  "::"=s132
7: ScopedNamespaceIdentifier -> TemplateType · "::" NamespaceIdentifier-1,ScopedTypeIdentifier -> TemplateType · "::" TypeIdentifier-1,ScopedIdentifier -> TemplateType · "::" Identifier-1,ScopedIdentifier -> TemplateType · "::" OperatorName,ScopedIdentifier -> TemplateType · "::" DestructorName,typeSpecifier -> TemplateType ·,CompoundLiteralExpression -> TemplateType · InitializerList,OperatorCast -> TemplateType · "::" scopedIdentifier/"operator" declarationSpecifiers abstractDeclarator
  "::"=s132,"{"=s133,"("=typeSpecifier(1),DestructorName=typeSpecifier(1),identifier/"const"=typeSpecifier(1),identifier/"volatile"=typeSpecifier(1),identifier/"restrict"=typeSpecifier(1),identifier/"_Atomic"=typeSpecifier(1),identifier/"mutable"=typeSpecifier(1),identifier/"constexpr"=typeSpecifier(1),identifier/"__declspec"=typeSpecifier(1),"["=typeSpecifier(1),identifier/"extern"=typeSpecifier(1),identifier/"static"=typeSpecifier(1),identifier/"register"=typeSpecifier(1),identifier/"inline"=typeSpecifier(1),identifier/"__attribute__"=typeSpecifier(1),identifier/"__based"=typeSpecifier(1),OperatorName=typeSpecifier(1),identifier=typeSpecifier(1),"*"=typeSpecifier(1),"&&"=typeSpecifier(1),"&"=typeSpecifier(1),";"=typeSpecifier(1) | InitializerList=s134
8: ScopedNamespaceIdentifier -> ScopedNamespaceIdentifier · "::" NamespaceIdentifier-1,ScopedTypeIdentifier -> ScopedNamespaceIdentifier · "::" TypeIdentifier-1,ScopedIdentifier -> ScopedNamespaceIdentifier · "::" Identifier-1,ScopedIdentifier -> ScopedNamespaceIdentifier · "::" OperatorName,ScopedIdentifier -> ScopedNamespaceIdentifier · "::" DestructorName,AssignmentExpression -> ScopedNamespaceIdentifier · UpdateOp expression,AssignmentExpression -> ScopedNamespaceIdentifier · "=" expression,OperatorCast -> ScopedNamespaceIdentifier · "::" scopedIdentifier/"operator" declarationSpecifiers abstractDeclarator
  "::"=s132,UpdateOp=s135,"="=s135
9: CharLiteral -> charLiteralStart · EscapeSequence charLiteralEnd,CharLiteral -> charLiteralStart · charLiteralContent charLiteralEnd
  EscapeSequence=s136,charLiteralContent=s136
10: Attribute -> "[[" · commaSep<AttributeName AttributeArgs { "(" balancedTokens* ")" }?> "]]",Attribute -> "[[" · commaSep<AttributeName AttributeArgs { "(" balancedTokens* ")" }?> "..." "]]"
  attributeIdentifier=s137,"..."=commaSep<AttributeName AttributeArgs { "(" balancedTokens* ")" }?>(0),"]]"=commaSep<AttributeName AttributeArgs { "(" balancedTokens* ")" }?>(0) | AttributeName=s138,commaSep<AttributeName AttributeArgs { "(" balancedTokens* ")" }?>=s139
11: Attribute+ -> Attribute ·
  always Attribute+(1)
12: Attribute+ -> Attribute+ · Attribute+,emptyDeclaration -> Attribute+ · typeSpecifier ";",Declaration -> Attribute+ · declarationSpecifiers commaSep1<declarator | InitDeclarator> ";",FunctionDefinition -> Attribute+ · declarationSpecifiers declarator CompoundStatement,FunctionDefinition -> Attribute+ · identifier/"__cdecl" declarationSpecifiers declarator CompoundStatement
  identifier/"bool"=s48,"::"=s141,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s85,identifier/"__declspec"=s59,identifier/"extern"=s61,identifier/"static"=s61,identifier/"register"=s61,identifier/"inline"=s61,identifier/"__attribute__"=s62,identifier/"typename"=s89,identifier/"class"=s88,identifier/"__cdecl"=s148,identifier/"union"=s86,identifier/"enum"=s87,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140,"[["=s10 | NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,MsDeclspecModifier=s14,Attribute=s11,AttributeSpecifier=s14,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,Attribute+=s144,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+=s15,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeQualifier=s14,typeSpecifier=s145,declarationSpecifiers=s146,storageClassSpecifier=s14
13: (storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+ -> storageClassSpecifier ·,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+ -> typeQualifier ·,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+ -> AttributeSpecifier ·,(storageClassSpecifier | typeQualifier | AttributeSpecifier)+ -> storageClassSpecifier ·,(storageClassSpecifier | typeQualifier | AttributeSpecifier)+ -> typeQualifier ·,(storageClassSpecifier | typeQualifier | AttributeSpecifier)+ -> AttributeSpecifier ·
  "("=(storageClassSpecifier | typeQualifier | AttributeSpecifier)+(1),identifier/"bool"=(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+(1),DestructorName=(storageClassSpecifier | typeQualifier | AttributeSpecifier)+(1),"::"=(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+(1),"::"=(storageClassSpecifier | typeQualifier | AttributeSpecifier)+(1),identifier/"const"=(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+(1),identifier/"const"=(storageClassSpecifier | typeQualifier | AttributeSpecifier)+(1),identifier/"volatile"=(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+(1),identifier/"volatile"=(storageClassSpecifier | typeQualifier | AttributeSpecifier)+(1),identifier/"restrict"=(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+(1),identifier/"restrict"=(storageClassSpecifier | typeQualifier | AttributeSpecifier)+(1),identifier/"_Atomic"=(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+(1),identifier/"_Atomic"=(storageClassSpecifier | typeQualifier | AttributeSpecifier)+(1),identifier/"mutable"=(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+(1),identifier/"mutable"=(storageClassSpecifier | typeQualifier | AttributeSpecifier)+(1),identifier/"constexpr"=(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+(1),identifier/"constexpr"=(storageClassSpecifier | typeQualifier | AttributeSpecifier)+(1),identifier/"struct"=(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+(1),identifier/"__declspec"=(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+(1),"["=(storageClassSpecifier | typeQualifier | AttributeSpecifier)+(1),identifier/"virtual"=(storageClassSpecifier | typeQualifier | AttributeSpecifier)+(1),identifier/"extern"=(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+(1),identifier/"extern"=(storageClassSpecifier | typeQualifier | AttributeSpecifier)+(1),identifier/"static"=(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+(1),identifier/"static"=(storageClassSpecifier | typeQualifier | AttributeSpecifier)+(1),identifier/"register"=(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+(1),identifier/"register"=(storageClassSpecifier | typeQualifier | AttributeSpecifier)+(1),identifier/"inline"=(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+(1),identifier/"inline"=(storageClassSpecifier | typeQualifier | AttributeSpecifier)+(1),identifier/"__attribute__"=(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+(1),identifier/"__attribute__"=(storageClassSpecifier | typeQualifier | AttributeSpecifier)+(1),identifier/"__based"=(storageClassSpecifier | typeQualifier | AttributeSpecifier)+(1),OperatorName=(storageClassSpecifier | typeQualifier | AttributeSpecifier)+(1),identifier/"typename"=(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+(1),identifier/"class"=(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+(1),identifier/"explicit"=(storageClassSpecifier | typeQualifier | AttributeSpecifier)+(1),identifier/"operator"=(storageClassSpecifier | typeQualifier | AttributeSpecifier)+(1),identifier/"union"=(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+(1),identifier/"enum"=(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+(1),identifier/"signed"=(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+(1),identifier/"decltype"=(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+(1),identifier/"auto"=(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+(1),identifier=(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+(1),identifier=(storageClassSpecifier | typeQualifier | AttributeSpecifier)+(1),"*"=(storageClassSpecifier | typeQualifier | AttributeSpecifier)+(1),"&&"=(storageClassSpecifier | typeQualifier | AttributeSpecifier)+(1),"&"=(storageClassSpecifier | typeQualifier | AttributeSpecifier)+(1)
14: (storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+ -> storageClassSpecifier ·,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+ -> typeQualifier ·,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+ -> AttributeSpecifier ·,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+ -> MsDeclspecModifier ·
  always (storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+(1)
15: (storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+ -> (storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+ · (storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+,declarationSpecifiers -> (storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+ · typeSpecifier,declarationSpecifiers -> (storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+ · typeSpecifier (storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+
  identifier/"bool"=s48,"::"=s141,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s85,identifier/"__declspec"=s59,identifier/"extern"=s61,identifier/"static"=s61,identifier/"register"=s61,identifier/"inline"=s61,identifier/"__attribute__"=s62,identifier/"typename"=s89,identifier/"class"=s88,identifier/"union"=s86,identifier/"enum"=s87,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,MsDeclspecModifier=s14,AttributeSpecifier=s14,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+=s149,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeQualifier=s14,typeSpecifier=s150,storageClassSpecifier=s14
16: declarationSpecifiers -> typeSpecifier ·,declarationSpecifiers -> typeSpecifier · (storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+,emptyDeclaration -> typeSpecifier · ";"
  identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"__declspec"=s59,identifier/"extern"=s61,identifier/"static"=s61,identifier/"register"=s61,identifier/"inline"=s61,identifier/"__attribute__"=s62,";"=s152,"("=declarationSpecifiers(1),DestructorName=declarationSpecifiers(1),"::"=declarationSpecifiers(1),"["=declarationSpecifiers(1),identifier/"__based"=declarationSpecifiers(1),OperatorName=declarationSpecifiers(1),identifier=declarationSpecifiers(1),"*"=declarationSpecifiers(1),"&&"=declarationSpecifiers(1),"&"=declarationSpecifiers(1) | MsDeclspecModifier=s14,AttributeSpecifier=s14,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+=s151,typeQualifier=s14,storageClassSpecifier=s14
17: PointerDeclarator-1 -> "*" · declarator,PointerDeclarator-1 -> "*" · typeQualifier+ declarator,PointerDeclarator-1 -> "*" · msPointerModifier+ declarator,PointerDeclarator-1 -> "*" · msPointerModifier+ typeQualifier+ declarator,PointerExpression -> "*" · expression
  RawString=s35,"("=s20,identifier/"bool"=s164,DestructorName=s26,"::"=s155,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s25,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"__based"=s63,identifier/"__restrict"=s165,OperatorName=s26,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s17,"&&"=s22,"&"=s21,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s23,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,MsBasedModifier=s18,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s24,TemplateFunction=s28,StructuredBindingDeclarator=s26,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,typeQualifier+=s160,msPointerModifier+=s161,expression=s154,typeQualifier=s159,declarator=s162
18: PointerDeclarator-1 -> MsBasedModifier · "*" declarator,PointerDeclarator-1 -> MsBasedModifier · "*" typeQualifier+ declarator,PointerDeclarator-1 -> MsBasedModifier · "*" msPointerModifier+ declarator,PointerDeclarator-1 -> MsBasedModifier · "*" msPointerModifier+ typeQualifier+ declarator
  "*"=s166
19: FunctionDeclarator-1 -> declarator · ParameterList,FunctionDeclarator-1 -> declarator · ParameterList ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+ ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,ArrayDeclarator -> declarator · "[" "]",ArrayDeclarator -> declarator · "[" expression "]",ArrayDeclarator -> declarator · "[" "*" "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "]",ArrayDeclarator -> declarator · "[" typeQualifier+ expression "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "*" "]"
  "("=s169,"["=s168 | ParameterList=s167
20: ParenthesizedDeclarator -> "(" · declarator ")",ParenthesizedExpression -> "(" · expression ")",ParenthesizedExpression -> "(" · CommaExpression ")",CastExpression -> "(" · TypeDescriptor ")" expression,CompoundLiteralExpression -> "(" · TypeDescriptor ")" InitializerList
  RawString=s35,"("=s20,identifier/"bool"=s57,DestructorName=s26,"::"=s1067,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s1019,"["=s25,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"__based"=s63,OperatorName=s26,identifier/"typename"=s1027,identifier/"class"=s1026,identifier/"delete"=s93,identifier/"union"=s1021,identifier/"enum"=s1023,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s1057,"*"=s17,"&&"=s22,"&"=s21,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s23,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s1197,TemplateType=s171,TypeIdentifier=s49,ScopedTypeIdentifier=s49,ScopedNamespaceIdentifier=s1204,TypeDescriptor=s176,StructSpecifier=s48,CharLiteral=s56,MsBasedModifier=s18,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s24,TemplateFunction=s28,StructuredBindingDeclarator=s26,CommaExpression=s174,ParenthesizedExpression=s50,ConcatenatedString=s56,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,typeQualifier+=s172,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,expression=s170,typeQualifier=s159,typeSpecifier=s175,declarator=s173
21: ReferenceDeclarator -> "&" · declarator,PointerExpression -> "&" · expression
  RawString=s35,"("=s20,identifier/"bool"=s164,DestructorName=s26,"::"=s155,"["=s25,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"__based"=s63,OperatorName=s26,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s17,"&&"=s22,"&"=s21,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s23,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,MsBasedModifier=s18,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s24,TemplateFunction=s28,StructuredBindingDeclarator=s26,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s154,declarator=s177
22: ReferenceDeclarator -> "&" · declarator,ReferenceDeclarator -> "&&" · declarator
  "("=s180,DestructorName=s26,"::"=s178,"["=s182,identifier/"__based"=s63,OperatorName=s26,identifier=s153,"*"=s179,"&&"=s22,"&"=s22 | Identifier=s181,NamespaceIdentifier=s156,TemplateType=s156,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s156,MsBasedModifier=s18,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,declarator=s177
23: TemplateFunction -> Identifier · TemplateArgumentList,declarator -> Identifier ·,AssignmentExpression -> Identifier · UpdateOp expression,AssignmentExpression -> Identifier · "=" expression,expression -> Identifier ·
  "<"=s185,UpdateOp=s135,"="=s135,"("=expression(1),"("=declarator(1),","=expression(1),"["=expression(1),"["=declarator(1),incDec=expression(1),ArithOp<"+" | "-">=expression(1),ArithOp<"/" | "%">=expression(1),BitOp<"|">=expression(1),BitOp<"^">=expression(1),CompareOp<"==" | "!=">=expression(1),CompareOp<"<=" | ">=">=expression(1),"<"/"<"=expression(1),templateArgsEnd/">"=expression(1),BitOp<"<<" | ">>">=expression(1),"?"=expression(1),"."=expression(1),"->"=expression(1),"..."=expression(1),"*"=expression(1),"||"=expression(1),"&&"=expression(1),"&"=expression(1),";"=expression(1),")"=expression(1),")"=declarator(1),"}"=expression(1) | TemplateArgumentList=s184
24: TemplateFunction -> ScopedIdentifier · TemplateArgumentList,declarator -> ScopedIdentifier ·,expression -> ScopedIdentifier ·
  "<"=s185,"("=expression(1),"("=declarator(1),","=expression(1),"["=expression(1),"["=declarator(1),incDec=expression(1),ArithOp<"+" | "-">=expression(1),ArithOp<"/" | "%">=expression(1),BitOp<"|">=expression(1),BitOp<"^">=expression(1),CompareOp<"==" | "!=">=expression(1),CompareOp<"<=" | ">=">=expression(1),"<"/"<"=expression(1),templateArgsEnd/">"=expression(1),BitOp<"<<" | ">>">=expression(1),"?"=expression(1),"."=expression(1),"->"=expression(1),"..."=expression(1),"*"=expression(1),"||"=expression(1),"&&"=expression(1),"&"=expression(1),";"=expression(1),UpdateOp=expression(1),"="=expression(1),")"=expression(1),")"=declarator(1),"}"=expression(1) | TemplateArgumentList=s184
25: StructuredBindingDeclarator -> "[" · commaSep1<Identifier> "]",LambdaCaptureSpecifier -> "[" · "=" "]",LambdaCaptureSpecifier -> "[" · "=" "," commaSep1<expression> "]",LambdaCaptureSpecifier -> "[" · "&" "]",LambdaCaptureSpecifier -> "[" · "&" "," commaSep1<expression> "]",LambdaCaptureSpecifier -> "[" · commaSep1<expression> "]",LambdaCaptureSpecifier -> "[" · "]"
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s193,"]"=s196,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s192,charLiteralStart=s9,"="=s194,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s187,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s186,commaSep1<Identifier>=s189,commaSep1<expression>=s195
26: declarator -> PointerDeclarator-1 ·,declarator -> FunctionDeclarator-1 ·,declarator -> ArrayDeclarator ·,declarator -> ParenthesizedDeclarator ·,declarator -> ReferenceDeclarator ·,declarator -> TemplateFunction ·,declarator -> OperatorName ·,declarator -> DestructorName ·,declarator -> StructuredBindingDeclarator ·
  always declarator(1)
27: declarator -> FunctionDeclarator-1 ·,constructorOrDestructorDefinition -> FunctionDeclarator-1 · CompoundStatement,constructorOrDestructorDefinition -> FunctionDeclarator-1 · DefaultMethodClause,constructorOrDestructorDefinition -> FunctionDeclarator-1 · DeleteMethodClause,constructorOrDestructorDefinition -> FunctionDeclarator-1 · FieldInitializerList CompoundStatement,constructorOrDestructorDefinition -> FunctionDeclarator-1 · FieldInitializerList DefaultMethodClause,constructorOrDestructorDefinition -> FunctionDeclarator-1 · FieldInitializerList DeleteMethodClause
  "{"=s45,":"=s197,"="=s200,"("=declarator(1),"["=declarator(1) | CompoundStatement=s198,FieldInitializerList=s199,DefaultMethodClause=s198,DeleteMethodClause=s198
28: declarator -> TemplateFunction ·,expression -> TemplateFunction ·
  "("=expression(1),"("=declarator(1),","=expression(1),"["=expression(1),"["=declarator(1),incDec=expression(1),ArithOp<"+" | "-">=expression(1),ArithOp<"/" | "%">=expression(1),BitOp<"|">=expression(1),BitOp<"^">=expression(1),CompareOp<"==" | "!=">=expression(1),CompareOp<"<=" | ">=">=expression(1),"<"/"<"=expression(1),templateArgsEnd/">"=expression(1),BitOp<"<<" | ">>">=expression(1),"?"=expression(1),"."=expression(1),"->"=expression(1),"..."=expression(1),"*"=expression(1),"||"=expression(1),"&&"=expression(1),"&"=expression(1),";"=expression(1),UpdateOp=expression(1),"="=expression(1),")"=expression(1),")"=declarator(1),"}"=expression(1)
29: Declaration -> declarationSpecifiers · commaSep1<declarator | InitDeclarator> ";",FunctionDefinition -> declarationSpecifiers · declarator CompoundStatement
  "("=s180,DestructorName=s26,"::"=s1075,"["=s182,identifier/"__based"=s63,OperatorName=s26,identifier=s1058,"*"=s1079,"&&"=s1081,"&"=s1081 | Identifier=s181,NamespaceIdentifier=s1198,TemplateType=s1198,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s1198,MsBasedModifier=s1189,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,InitDeclarator=s202,declarator=s201,commaSep1<declarator | InitDeclarator>=s203
30: LabeledStatement -> StatementIdentifier · ":" statement
  ":"=s204
31: ExpressionStatement -> ";" ·
  always ExpressionStatement(1)
32: ExpressionStatement -> CommaExpression · ";"
  ";"=s107
33: nonCaseStatement -> LabeledStatement ·,nonCaseStatement -> CompoundStatement ·,nonCaseStatement -> ExpressionStatement ·,nonCaseStatement -> IfStatement ·,nonCaseStatement -> SwitchStatement ·,nonCaseStatement -> DoStatement ·,nonCaseStatement -> WhileStatement ·,nonCaseStatement -> ForStatement ·,nonCaseStatement -> ReturnStatement ·,nonCaseStatement -> BreakStatement ·,nonCaseStatement -> ContinueStatement ·,nonCaseStatement -> GotoStatement ·
  always nonCaseStatement(1)
34: statement -> CaseStatement ·,statement -> nonCaseStatement ·,statement -> ForRangeLoop ·,statement -> TryStatement ·,statement -> ThrowStatement ·
  always statement(1)
35: ConcatenatedString -> RawString · (RawString | String)+,ConcatenatedString -> String · (RawString | String)+,expression -> String ·,expression -> RawString ·
  RawString=s205,stringLiteralStart=s2,"("=expression(1),","=expression(1),"["=expression(1),incDec=expression(1),ArithOp<"+" | "-">=expression(1),ArithOp<"/" | "%">=expression(1),BitOp<"|">=expression(1),BitOp<"^">=expression(1),CompareOp<"==" | "!=">=expression(1),CompareOp<"<=" | ">=">=expression(1),"<"/"<"=expression(1),templateArgsEnd/">"=expression(1),BitOp<"<<" | ">>">=expression(1),"?"=expression(1),"."=expression(1),"->"=expression(1),"..."=expression(1),"*"=expression(1),"||"=expression(1),"&&"=expression(1),"&"=expression(1),";"=expression(1),UpdateOp=expression(1),"="=expression(1),")"=expression(1),"]"=expression(1),":"=expression(1),"}"=expression(1),templateArgsEndFallback=expression(1),templateArgsEnd=expression(1) | String=s205,(RawString | String)+=s206
36: (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ · (storageClassSpecifier | typeQualifier | AttributeSpecifier)+,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ · FunctionDeclarator-1 CompoundStatement,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ · FunctionDeclarator-1 DefaultMethodClause,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ · FunctionDeclarator-1 DeleteMethodClause,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ · FunctionDeclarator-1 FieldInitializerList CompoundStatement,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ · FunctionDeclarator-1 FieldInitializerList DefaultMethodClause,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ · FunctionDeclarator-1 FieldInitializerList DeleteMethodClause,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ · ExplicitFunctionSpecifier FunctionDeclarator-1 CompoundStatement,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ · ExplicitFunctionSpecifier FunctionDeclarator-1 DefaultMethodClause,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ · ExplicitFunctionSpecifier FunctionDeclarator-1 DeleteMethodClause,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ · ExplicitFunctionSpecifier FunctionDeclarator-1 FieldInitializerList CompoundStatement,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ · ExplicitFunctionSpecifier FunctionDeclarator-1 FieldInitializerList DefaultMethodClause,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ · ExplicitFunctionSpecifier FunctionDeclarator-1 FieldInitializerList DeleteMethodClause,operatorCastDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ · OperatorCast CompoundStatement,operatorCastDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ · OperatorCast DefaultMethodClause,operatorCastDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ · OperatorCast DeleteMethodClause,operatorCastDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ · ExplicitFunctionSpecifier OperatorCast CompoundStatement,operatorCastDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ · ExplicitFunctionSpecifier OperatorCast DefaultMethodClause,operatorCastDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ · ExplicitFunctionSpecifier OperatorCast DeleteMethodClause,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ · identifier/"virtual" FunctionDeclarator-1 CompoundStatement,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ · identifier/"virtual" FunctionDeclarator-1 DefaultMethodClause,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ · identifier/"virtual" FunctionDeclarator-1 DeleteMethodClause,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ · identifier/"virtual" FunctionDeclarator-1 FieldInitializerList CompoundStatement,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ · identifier/"virtual" FunctionDeclarator-1 FieldInitializerList DefaultMethodClause,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ · identifier/"virtual" FunctionDeclarator-1 FieldInitializerList DeleteMethodClause,operatorCastDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ · identifier/"virtual" OperatorCast CompoundStatement,operatorCastDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ · identifier/"virtual" OperatorCast DefaultMethodClause,operatorCastDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ · identifier/"virtual" OperatorCast DeleteMethodClause
  "("=s180,DestructorName=s26,"::"=s207,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s182,identifier/"virtual"=s212,identifier/"extern"=s61,identifier/"static"=s61,identifier/"register"=s61,identifier/"inline"=s61,identifier/"__attribute__"=s62,identifier/"__based"=s63,OperatorName=s26,identifier/"explicit"=s82,identifier/"operator"=s83,identifier=s153,"*"=s179,"&&"=s22,"&"=s22 | Identifier=s181,NamespaceIdentifier=s208,TemplateType=s208,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s208,AttributeSpecifier=s210,MsBasedModifier=s18,PointerDeclarator-1=s26,FunctionDeclarator-1=s209,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,ExplicitFunctionSpecifier=s212,OperatorCast=s213,(storageClassSpecifier | typeQualifier | AttributeSpecifier)+=s211,typeQualifier=s210,storageClassSpecifier=s210,declarator=s19
37: constructorOrDestructorDefinition -> ExplicitFunctionSpecifier · FunctionDeclarator-1 CompoundStatement,constructorOrDestructorDefinition -> ExplicitFunctionSpecifier · FunctionDeclarator-1 DefaultMethodClause,constructorOrDestructorDefinition -> ExplicitFunctionSpecifier · FunctionDeclarator-1 DeleteMethodClause,constructorOrDestructorDefinition -> ExplicitFunctionSpecifier · FunctionDeclarator-1 FieldInitializerList CompoundStatement,constructorOrDestructorDefinition -> ExplicitFunctionSpecifier · FunctionDeclarator-1 FieldInitializerList DefaultMethodClause,constructorOrDestructorDefinition -> ExplicitFunctionSpecifier · FunctionDeclarator-1 FieldInitializerList DeleteMethodClause,operatorCastDefinition -> ExplicitFunctionSpecifier · OperatorCast CompoundStatement,operatorCastDefinition -> ExplicitFunctionSpecifier · OperatorCast DefaultMethodClause,operatorCastDefinition -> ExplicitFunctionSpecifier · OperatorCast DeleteMethodClause,operatorCastDeclaration -> ExplicitFunctionSpecifier · OperatorCast ";",operatorCastDeclaration -> ExplicitFunctionSpecifier · OperatorCast "=" expression ";",constructorOrDestructorDefinition -> identifier/"virtual" · FunctionDeclarator-1 CompoundStatement,constructorOrDestructorDefinition -> identifier/"virtual" · FunctionDeclarator-1 DefaultMethodClause,constructorOrDestructorDefinition -> identifier/"virtual" · FunctionDeclarator-1 DeleteMethodClause,constructorOrDestructorDefinition -> identifier/"virtual" · FunctionDeclarator-1 FieldInitializerList CompoundStatement,constructorOrDestructorDefinition -> identifier/"virtual" · FunctionDeclarator-1 FieldInitializerList DefaultMethodClause,constructorOrDestructorDefinition -> identifier/"virtual" · FunctionDeclarator-1 FieldInitializerList DeleteMethodClause,operatorCastDefinition -> identifier/"virtual" · OperatorCast CompoundStatement,operatorCastDefinition -> identifier/"virtual" · OperatorCast DefaultMethodClause,operatorCastDefinition -> identifier/"virtual" · OperatorCast DeleteMethodClause,operatorCastDeclaration -> identifier/"virtual" · OperatorCast ";",operatorCastDeclaration -> identifier/"virtual" · OperatorCast "=" expression ";"
  "("=s180,DestructorName=s26,"::"=s207,"["=s182,identifier/"__based"=s63,OperatorName=s26,identifier/"operator"=s83,identifier=s153,"*"=s179,"&&"=s22,"&"=s22 | Identifier=s181,NamespaceIdentifier=s208,TemplateType=s208,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s208,MsBasedModifier=s18,PointerDeclarator-1=s26,FunctionDeclarator-1=s209,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,OperatorCast=s214,declarator=s19
38: FunctionDefinition-1 -> constructorOrDestructorDefinition ·
  always FunctionDefinition-1(1)
39: operatorCastDefinition -> OperatorCast · CompoundStatement,operatorCastDefinition -> OperatorCast · DefaultMethodClause,operatorCastDefinition -> OperatorCast · DeleteMethodClause,operatorCastDeclaration -> OperatorCast · ";",operatorCastDeclaration -> OperatorCast · "=" expression ";"
  "{"=s45,";"=s216,"="=s217 | CompoundStatement=s215,DefaultMethodClause=s215,DeleteMethodClause=s215
40: FunctionDefinition-2 -> operatorCastDefinition ·
  always FunctionDefinition-2(1)
41: Declaration-2 -> operatorCastDeclaration ·
  always Declaration-2(1)
42: topLevelItem -> FunctionDefinition ·,topLevelItem -> LinkageSpecification ·,topLevelItem -> Declaration ·,topLevelItem -> statement ·,topLevelItem -> TypeDefinition ·,topLevelItem -> emptyDeclaration ·,topLevelItem -> NamespaceDefinition ·,topLevelItem -> UsingDeclaration ·,topLevelItem -> AliasDeclaration ·,topLevelItem -> StaticAssertDeclaration ·,topLevelItem -> TemplateDeclaration ·,topLevelItem -> TemplateInstantiation ·,topLevelItem -> FunctionDefinition-1 ·,topLevelItem -> FunctionDefinition-2 ·,topLevelItem -> Declaration-2 ·
  always topLevelItem(1)
43: topLevelItem+ -> topLevelItem ·
  always topLevelItem+(1)
44: topLevelItem+ -> topLevelItem+ · topLevelItem+,@top -> topLevelItem+ ·
  RawString=s35,"("=s20,identifier/"bool"=s57,DestructorName=s26,"::"=s5,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s85,identifier/"__declspec"=s59,"{"=s45,"["=s25,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"virtual"=s37,identifier/"extern"=s60,identifier/"static"=s61,identifier/"register"=s61,identifier/"inline"=s61,identifier/"__attribute__"=s62,identifier/"__based"=s63,identifier/"throw"=s78,OperatorName=s26,identifier/"template"=s81,identifier/"typename"=s89,identifier/"class"=s88,identifier/"using"=s64,identifier/"__cdecl"=s84,identifier/"case"=s75,identifier/"default"=s76,identifier/"if"=s65,identifier/"switch"=s66,identifier/"do"=s67,identifier/"while"=s68,identifier/"for"=s69,identifier/"return"=s70,identifier/"break"=s71,identifier/"continue"=s72,identifier/"goto"=s73,identifier/"typedef"=s74,identifier/"try"=s77,identifier/"namespace"=s79,identifier/"static_assert"=s80,identifier/"explicit"=s82,identifier/"delete"=s93,identifier/"operator"=s83,identifier/"union"=s86,identifier/"enum"=s87,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s3,"[["=s10,"*"=s17,"&&"=s22,"&"=s21,";"=s31,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s23,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s6,TemplateType=s7,TypeIdentifier=s49,ScopedTypeIdentifier=s49,ScopedNamespaceIdentifier=s8,StructSpecifier=s48,MsDeclspecModifier=s14,Attribute=s11,CharLiteral=s56,AttributeSpecifier=s13,MsBasedModifier=s18,PointerDeclarator-1=s26,FunctionDeclarator-1=s27,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s24,TemplateFunction=s28,StructuredBindingDeclarator=s26,TemplateDeclaration=s42,AliasDeclaration=s42,Declaration=s42,FunctionDefinition=s42,CompoundStatement=s33,LinkageSpecification=s42,CaseStatement=s34,LabeledStatement=s33,StatementIdentifier=s30,ExpressionStatement=s33,CommaExpression=s32,IfStatement=s33,SwitchStatement=s33,DoStatement=s33,ParenthesizedExpression=s50,WhileStatement=s33,ForStatement=s33,ReturnStatement=s33,BreakStatement=s33,ContinueStatement=s33,GotoStatement=s33,TypeDefinition=s42,ForRangeLoop=s34,TryStatement=s34,ThrowStatement=s34,NamespaceDefinition=s42,UsingDeclaration=s42,StaticAssertDeclaration=s42,ConcatenatedString=s56,TemplateInstantiation=s42,FunctionDefinition-1=s42,ExplicitFunctionSpecifier=s37,FunctionDefinition-2=s42,OperatorCast=s39,Declaration-2=s42,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,Attribute+=s12,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+=s15,topLevelItem+=s218,(storageClassSpecifier | typeQualifier | AttributeSpecifier)+=s36,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,expression=s4,typeQualifier=s13,typeSpecifier=s16,declarationSpecifiers=s29,storageClassSpecifier=s13,declarator=s19,emptyDeclaration=s42,topLevelItem=s43,statement=s42,nonCaseStatement=s34,constructorOrDestructorDefinition=s38,operatorCastDefinition=s40,operatorCastDeclaration=s41
45: CompoundStatement -> "{" · "}",CompoundStatement -> "{" · topLevelItem+ "}"
  RawString=s35,"("=s20,identifier/"bool"=s57,DestructorName=s26,"::"=s5,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s85,identifier/"__declspec"=s59,"{"=s45,"}"=s220,"["=s25,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"virtual"=s37,identifier/"extern"=s60,identifier/"static"=s61,identifier/"register"=s61,identifier/"inline"=s61,identifier/"__attribute__"=s62,identifier/"__based"=s63,identifier/"throw"=s78,OperatorName=s26,identifier/"template"=s81,identifier/"typename"=s89,identifier/"class"=s88,identifier/"using"=s64,identifier/"__cdecl"=s84,identifier/"case"=s75,identifier/"default"=s76,identifier/"if"=s65,identifier/"switch"=s66,identifier/"do"=s67,identifier/"while"=s68,identifier/"for"=s69,identifier/"return"=s70,identifier/"break"=s71,identifier/"continue"=s72,identifier/"goto"=s73,identifier/"typedef"=s74,identifier/"try"=s77,identifier/"namespace"=s79,identifier/"static_assert"=s80,identifier/"explicit"=s82,identifier/"delete"=s93,identifier/"operator"=s83,identifier/"union"=s86,identifier/"enum"=s87,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s3,"[["=s10,"*"=s17,"&&"=s22,"&"=s21,";"=s31,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s23,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s6,TemplateType=s7,TypeIdentifier=s49,ScopedTypeIdentifier=s49,ScopedNamespaceIdentifier=s8,StructSpecifier=s48,MsDeclspecModifier=s14,Attribute=s11,CharLiteral=s56,AttributeSpecifier=s13,MsBasedModifier=s18,PointerDeclarator-1=s26,FunctionDeclarator-1=s27,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s24,TemplateFunction=s28,StructuredBindingDeclarator=s26,TemplateDeclaration=s42,AliasDeclaration=s42,Declaration=s42,FunctionDefinition=s42,CompoundStatement=s33,LinkageSpecification=s42,CaseStatement=s34,LabeledStatement=s33,StatementIdentifier=s30,ExpressionStatement=s33,CommaExpression=s32,IfStatement=s33,SwitchStatement=s33,DoStatement=s33,ParenthesizedExpression=s50,WhileStatement=s33,ForStatement=s33,ReturnStatement=s33,BreakStatement=s33,ContinueStatement=s33,GotoStatement=s33,TypeDefinition=s42,ForRangeLoop=s34,TryStatement=s34,ThrowStatement=s34,NamespaceDefinition=s42,UsingDeclaration=s42,StaticAssertDeclaration=s42,ConcatenatedString=s56,TemplateInstantiation=s42,FunctionDefinition-1=s42,ExplicitFunctionSpecifier=s37,FunctionDefinition-2=s42,OperatorCast=s39,Declaration-2=s42,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,Attribute+=s12,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+=s15,topLevelItem+=s219,(storageClassSpecifier | typeQualifier | AttributeSpecifier)+=s36,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,expression=s4,typeQualifier=s13,typeSpecifier=s16,declarationSpecifiers=s29,storageClassSpecifier=s13,declarator=s19,emptyDeclaration=s42,topLevelItem=s43,statement=s42,nonCaseStatement=s34,constructorOrDestructorDefinition=s38,operatorCastDefinition=s40,operatorCastDeclaration=s41
46: @specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+ -> identifier/"signed" ·
  always @specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+(1)
47: @specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+ -> @specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+ · @specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+,SizedTypeSpecifier -> @specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+ ·,SizedTypeSpecifier -> @specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+ · identifier/"bool"
  identifier/"bool"=s222,identifier/"signed"=s46,"("=SizedTypeSpecifier(1),DestructorName=SizedTypeSpecifier(1),"::"=SizedTypeSpecifier(1),identifier/"const"=SizedTypeSpecifier(1),identifier/"volatile"=SizedTypeSpecifier(1),identifier/"restrict"=SizedTypeSpecifier(1),identifier/"_Atomic"=SizedTypeSpecifier(1),identifier/"mutable"=SizedTypeSpecifier(1),identifier/"constexpr"=SizedTypeSpecifier(1),identifier/"__declspec"=SizedTypeSpecifier(1),"["=SizedTypeSpecifier(1),identifier/"extern"=SizedTypeSpecifier(1),identifier/"static"=SizedTypeSpecifier(1),identifier/"register"=SizedTypeSpecifier(1),identifier/"inline"=SizedTypeSpecifier(1),identifier/"__attribute__"=SizedTypeSpecifier(1),identifier/"__based"=SizedTypeSpecifier(1),OperatorName=SizedTypeSpecifier(1),identifier=SizedTypeSpecifier(1),"*"=SizedTypeSpecifier(1),"&&"=SizedTypeSpecifier(1),"&"=SizedTypeSpecifier(1),";"=SizedTypeSpecifier(1),")"=SizedTypeSpecifier(1),","=SizedTypeSpecifier(1),"{"=SizedTypeSpecifier(1),incDec=SizedTypeSpecifier(1),ArithOp<"+" | "-">=SizedTypeSpecifier(1),ArithOp<"/" | "%">=SizedTypeSpecifier(1),BitOp<"|">=SizedTypeSpecifier(1),BitOp<"^">=SizedTypeSpecifier(1),CompareOp<"==" | "!=">=SizedTypeSpecifier(1),CompareOp<"<=" | ">=">=SizedTypeSpecifier(1),"<"/"<"=SizedTypeSpecifier(1),templateArgsEnd/">"=SizedTypeSpecifier(1),BitOp<"<<" | ">>">=SizedTypeSpecifier(1),"?"=SizedTypeSpecifier(1),"."=SizedTypeSpecifier(1),"->"=SizedTypeSpecifier(1),"..."=SizedTypeSpecifier(1),"||"=SizedTypeSpecifier(1),UpdateOp=SizedTypeSpecifier(1),"="=SizedTypeSpecifier(1),templateArgsEndFallback=SizedTypeSpecifier(1),templateArgsEnd=SizedTypeSpecifier(1),"]"=SizedTypeSpecifier(1),":"=SizedTypeSpecifier(1),"}"=SizedTypeSpecifier(1),identifier/"final"=SizedTypeSpecifier(1),identifier/"noexcept"=SizedTypeSpecifier(1),identifier/"throw"=SizedTypeSpecifier(1) | @specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s221
48: typeSpecifier -> StructSpecifier ·,typeSpecifier -> UnionSpecifier ·,typeSpecifier -> EnumSpecifier ·,typeSpecifier -> ClassSpecifier ·,typeSpecifier -> DependentType ·,typeSpecifier -> Decltype ·,typeSpecifier -> SizedTypeSpecifier ·,typeSpecifier -> identifier/"bool" ·,typeSpecifier -> identifier/"auto" ·
  always typeSpecifier(1)
49: typeSpecifier -> ScopedTypeIdentifier ·,typeSpecifier -> TypeIdentifier ·,TemplateType -> TypeIdentifier · TemplateArgumentList,TemplateType -> ScopedTypeIdentifier · TemplateArgumentList,CompoundLiteralExpression -> TypeIdentifier · InitializerList,CompoundLiteralExpression -> ScopedTypeIdentifier · InitializerList
  "<"=s185,"{"=s133,"("=typeSpecifier(1),DestructorName=typeSpecifier(1),"::"=typeSpecifier(1),identifier/"const"=typeSpecifier(1),identifier/"volatile"=typeSpecifier(1),identifier/"restrict"=typeSpecifier(1),identifier/"_Atomic"=typeSpecifier(1),identifier/"mutable"=typeSpecifier(1),identifier/"constexpr"=typeSpecifier(1),identifier/"__declspec"=typeSpecifier(1),"["=typeSpecifier(1),identifier/"extern"=typeSpecifier(1),identifier/"static"=typeSpecifier(1),identifier/"register"=typeSpecifier(1),identifier/"inline"=typeSpecifier(1),identifier/"__attribute__"=typeSpecifier(1),identifier/"__based"=typeSpecifier(1),OperatorName=typeSpecifier(1),identifier=typeSpecifier(1),"*"=typeSpecifier(1),"&&"=typeSpecifier(1),"&"=typeSpecifier(1),";"=typeSpecifier(1),")"=typeSpecifier(1),templateArgsEndFallback=typeSpecifier(1),","=typeSpecifier(1),templateArgsEnd=typeSpecifier(1),"..."=typeSpecifier(1),"="=typeSpecifier(1) | TemplateArgumentList=s223,InitializerList=s134
50: AssignmentExpression -> CallExpression · UpdateOp expression,AssignmentExpression -> CallExpression · "=" expression,AssignmentExpression -> FieldExpression · UpdateOp expression,AssignmentExpression -> FieldExpression · "=" expression,AssignmentExpression -> PointerExpression · UpdateOp expression,AssignmentExpression -> PointerExpression · "=" expression,AssignmentExpression -> SubscriptExpression · UpdateOp expression,AssignmentExpression -> SubscriptExpression · "=" expression,AssignmentExpression -> ParenthesizedExpression · UpdateOp expression,AssignmentExpression -> ParenthesizedExpression · "=" expression,expression -> PointerExpression ·,expression -> SubscriptExpression ·,expression -> CallExpression ·,expression -> FieldExpression ·,expression -> ParenthesizedExpression ·
  UpdateOp=s135,"="=s135,"("=expression(1),","=expression(1),"["=expression(1),incDec=expression(1),ArithOp<"+" | "-">=expression(1),ArithOp<"/" | "%">=expression(1),BitOp<"|">=expression(1),BitOp<"^">=expression(1),CompareOp<"==" | "!=">=expression(1),CompareOp<"<=" | ">=">=expression(1),"<"/"<"=expression(1),templateArgsEnd/">"=expression(1),BitOp<"<<" | ">>">=expression(1),"?"=expression(1),"."=expression(1),"->"=expression(1),"..."=expression(1),"*"=expression(1),"||"=expression(1),"&&"=expression(1),"&"=expression(1),";"=expression(1),")"=expression(1),"]"=expression(1),"}"=expression(1),templateArgsEndFallback=expression(1),templateArgsEnd=expression(1)
51: UnaryExpression -> LogicOp<"!"> · expression,UnaryExpression -> ArithOp<"+" | "-"> · expression,UnaryExpression -> BitOp<"~"> · expression
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s224
52: UpdateExpression -> incDec · expression
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s226
53: True -> identifier/"TRUE" ·
  always True(1)
54: False -> identifier/"FALSE" ·
  always False(1)
55: LambdaExpression -> LambdaCaptureSpecifier · CompoundStatement,LambdaExpression -> LambdaCaptureSpecifier · AbstractFunctionDeclarator CompoundStatement
  "("=s231,"{"=s45,"["=s230,"*"=s227,"&&"=s232,"&"=s232 | ParameterList=s228,AbstractPointerDeclarator=s233,AbstractFunctionDeclarator=s234,AbstractArrayDeclarator=s233,AbstractParenthesizedDeclarator=s233,AbstractReferenceDeclarator=s233,CompoundStatement=s235,abstractDeclarator=s229
56: expression -> ConditionalExpression ·,expression -> AssignmentExpression ·,expression -> BinaryExpression ·,expression -> UnaryExpression ·,expression -> UpdateExpression ·,expression -> CastExpression ·,expression -> SizeofExpression ·,expression -> CompoundLiteralExpression ·,expression -> Number ·,expression -> True ·,expression -> False ·,expression -> ConcatenatedString ·,expression -> CharLiteral ·,expression -> TemplateFunction ·,expression -> NewExpression ·,expression -> DeleteExpression ·,expression -> LambdaExpression ·,expression -> ParameterPackExpansion-2 ·,expression -> identifier/"NULL" ·,expression -> identifier/"nullptr" ·,expression -> identifier/"this" ·
  always expression(1)
57: CallExpression -> identifier/"bool" · ArgumentList,typeSpecifier -> identifier/"bool" ·
  "("=s124,"("=typeSpecifier(1),DestructorName=typeSpecifier(1),"::"=typeSpecifier(1),identifier/"const"=typeSpecifier(1),identifier/"volatile"=typeSpecifier(1),identifier/"restrict"=typeSpecifier(1),identifier/"_Atomic"=typeSpecifier(1),identifier/"mutable"=typeSpecifier(1),identifier/"constexpr"=typeSpecifier(1),identifier/"__declspec"=typeSpecifier(1),"["=typeSpecifier(1),identifier/"extern"=typeSpecifier(1),identifier/"static"=typeSpecifier(1),identifier/"register"=typeSpecifier(1),identifier/"inline"=typeSpecifier(1),identifier/"__attribute__"=typeSpecifier(1),identifier/"__based"=typeSpecifier(1),OperatorName=typeSpecifier(1),identifier=typeSpecifier(1),"*"=typeSpecifier(1),"&&"=typeSpecifier(1),"&"=typeSpecifier(1),";"=typeSpecifier(1),")"=typeSpecifier(1),templateArgsEndFallback=typeSpecifier(1),","=typeSpecifier(1),templateArgsEnd=typeSpecifier(1),"..."=typeSpecifier(1),"="=typeSpecifier(1) | ArgumentList=s105
58: typeQualifier -> identifier/"const" ·,typeQualifier -> identifier/"volatile" ·,typeQualifier -> identifier/"restrict" ·,typeQualifier -> identifier/"_Atomic" ·,typeQualifier -> identifier/"mutable" ·,typeQualifier -> identifier/"constexpr" ·
  always typeQualifier(1)
59: MsDeclspecModifier -> identifier/"__declspec" · "(" Identifier ")"
  "("=s236
60: storageClassSpecifier -> identifier/"extern" ·,LinkageSpecification -> identifier/"extern" · String FunctionDefinition,LinkageSpecification -> identifier/"extern" · String Declaration,LinkageSpecification -> identifier/"extern" · String DeclarationList
  stringLiteralStart=s2,"("=storageClassSpecifier(1),identifier/"bool"=storageClassSpecifier(1),DestructorName=storageClassSpecifier(1),"::"=storageClassSpecifier(1),identifier/"const"=storageClassSpecifier(1),identifier/"volatile"=storageClassSpecifier(1),identifier/"restrict"=storageClassSpecifier(1),identifier/"_Atomic"=storageClassSpecifier(1),identifier/"mutable"=storageClassSpecifier(1),identifier/"constexpr"=storageClassSpecifier(1),identifier/"struct"=storageClassSpecifier(1),identifier/"__declspec"=storageClassSpecifier(1),"["=storageClassSpecifier(1),identifier/"virtual"=storageClassSpecifier(1),identifier/"extern"=storageClassSpecifier(1),identifier/"static"=storageClassSpecifier(1),identifier/"register"=storageClassSpecifier(1),identifier/"inline"=storageClassSpecifier(1),identifier/"__attribute__"=storageClassSpecifier(1),identifier/"__based"=storageClassSpecifier(1),OperatorName=storageClassSpecifier(1),identifier/"typename"=storageClassSpecifier(1),identifier/"class"=storageClassSpecifier(1),identifier/"explicit"=storageClassSpecifier(1),identifier/"operator"=storageClassSpecifier(1),identifier/"union"=storageClassSpecifier(1),identifier/"enum"=storageClassSpecifier(1),identifier/"signed"=storageClassSpecifier(1),identifier/"decltype"=storageClassSpecifier(1),identifier/"auto"=storageClassSpecifier(1),identifier=storageClassSpecifier(1),"*"=storageClassSpecifier(1),"&&"=storageClassSpecifier(1),"&"=storageClassSpecifier(1) | String=s237
61: storageClassSpecifier -> identifier/"extern" ·,storageClassSpecifier -> identifier/"static" ·,storageClassSpecifier -> identifier/"register" ·,storageClassSpecifier -> identifier/"inline" ·
  always storageClassSpecifier(1)
62: AttributeSpecifier -> identifier/"__attribute__" · "(" ArgumentList ")"
  "("=s238
63: MsBasedModifier -> identifier/"__based" · ArgumentList
  "("=s124 | ArgumentList=s239
64: AliasDeclaration -> identifier/"using" · TypeIdentifier "=" TypeDescriptor ";",UsingDeclaration -> identifier/"using" · Identifier ";",UsingDeclaration -> identifier/"using" · ScopedIdentifier ";",UsingDeclaration -> identifier/"using" · identifier/"namespace" Identifier ";",UsingDeclaration -> identifier/"using" · identifier/"namespace" ScopedIdentifier ";"
  "::"=s1076,identifier/"namespace"=s242,identifier=s1059 | Identifier=s241,NamespaceIdentifier=s1199,TemplateType=s1199,TypeIdentifier=s240,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s1199,ScopedIdentifier=s241
65: IfStatement -> identifier/"if" · ConditionClause statement,IfStatement -> identifier/"if" · ConditionClause statement identifier/"else" statement,IfStatement -> identifier/"if" · identifier/"constexpr" ConditionClause statement,IfStatement -> identifier/"if" · identifier/"constexpr" ConditionClause statement identifier/"else" statement
  "("=s243,identifier/"constexpr"=s245 | ConditionClause=s244
66: SwitchStatement -> identifier/"switch" · ConditionClause CompoundStatement
  "("=s243 | ConditionClause=s246
67: DoStatement -> identifier/"do" · statement identifier/"while" ParenthesizedExpression ";"
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"{"=s45,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"throw"=s78,identifier/"case"=s75,identifier/"default"=s76,identifier/"if"=s65,identifier/"switch"=s66,identifier/"do"=s67,identifier/"while"=s68,identifier/"for"=s69,identifier/"return"=s70,identifier/"break"=s71,identifier/"continue"=s72,identifier/"goto"=s73,identifier/"try"=s77,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s1017,"*"=s191,"&"=s191,";"=s31,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,CompoundStatement=s33,CaseStatement=s34,LabeledStatement=s33,StatementIdentifier=s30,ExpressionStatement=s33,CommaExpression=s32,IfStatement=s33,SwitchStatement=s33,DoStatement=s33,ParenthesizedExpression=s50,WhileStatement=s33,ForStatement=s33,ReturnStatement=s33,BreakStatement=s33,ContinueStatement=s33,GotoStatement=s33,ForRangeLoop=s34,TryStatement=s34,ThrowStatement=s34,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s4,statement=s247,nonCaseStatement=s34
68: WhileStatement -> identifier/"while" · ConditionClause statement
  "("=s243 | ConditionClause=s248
69: ForStatement -> identifier/"for" · "(" Declaration ";" ")" statement,ForStatement -> identifier/"for" · "(" Declaration ";" expression ")" statement,ForStatement -> identifier/"for" · "(" Declaration ";" CommaExpression ")" statement,ForStatement -> identifier/"for" · "(" Declaration expression ";" ")" statement,ForStatement -> identifier/"for" · "(" Declaration expression ";" expression ")" statement,ForStatement -> identifier/"for" · "(" Declaration expression ";" CommaExpression ")" statement,ForStatement -> identifier/"for" · "(" ";" ";" ")" statement,ForStatement -> identifier/"for" · "(" ";" ";" expression ")" statement,ForStatement -> identifier/"for" · "(" ";" ";" CommaExpression ")" statement,ForStatement -> identifier/"for" · "(" ";" expression ";" ")" statement,ForStatement -> identifier/"for" · "(" ";" expression ";" expression ")" statement,ForStatement -> identifier/"for" · "(" ";" expression ";" CommaExpression ")" statement,ForStatement -> identifier/"for" · "(" expression ";" ";" ")" statement,ForStatement -> identifier/"for" · "(" expression ";" ";" expression ")" statement,ForStatement -> identifier/"for" · "(" expression ";" ";" CommaExpression ")" statement,ForStatement -> identifier/"for" · "(" expression ";" expression ";" ")" statement,ForStatement -> identifier/"for" · "(" expression ";" expression ";" expression ")" statement,ForStatement -> identifier/"for" · "(" expression ";" expression ";" CommaExpression ")" statement,ForStatement -> identifier/"for" · "(" CommaExpression ";" ";" ")" statement,ForStatement -> identifier/"for" · "(" CommaExpression ";" ";" expression ")" statement,ForStatement -> identifier/"for" · "(" CommaExpression ";" ";" CommaExpression ")" statement,ForStatement -> identifier/"for" · "(" CommaExpression ";" expression ";" ")" statement,ForStatement -> identifier/"for" · "(" CommaExpression ";" expression ";" expression ")" statement,ForStatement -> identifier/"for" · "(" CommaExpression ";" expression ";" CommaExpression ")" statement,ForRangeLoop -> identifier/"for" · "(" declarationSpecifiers declarator ":" expression ")" statement,ForRangeLoop -> identifier/"for" · "(" declarationSpecifiers declarator ":" InitializerList ")" statement
  "("=s249
70: ReturnStatement -> identifier/"return" · ";",ReturnStatement -> identifier/"return" · expression ";",ReturnStatement -> identifier/"return" · CommaExpression ";",ReturnStatement -> identifier/"return" · InitializerList ";"
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"{"=s133,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,";"=s251,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,InitializerList=s252,CommaExpression=s252,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s250
71: BreakStatement -> identifier/"break" · ";"
  ";"=s253
72: ContinueStatement -> identifier/"continue" · ";"
  ";"=s254
73: GotoStatement -> identifier/"goto" · StatementIdentifier ";"
  identifier=s255 | StatementIdentifier=s256
74: TypeDefinition -> identifier/"typedef" · typeSpecifier commaSep1<typeDeclarator> ";",TypeDefinition -> identifier/"typedef" · typeQualifier+ typeSpecifier commaSep1<typeDeclarator> ";"
  identifier/"bool"=s48,"::"=s141,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s1019,identifier/"typename"=s1027,identifier/"class"=s1026,identifier/"union"=s1021,identifier/"enum"=s1023,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,typeQualifier+=s257,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeQualifier=s159,typeSpecifier=s258
75: CaseStatement -> identifier/"case" · expression ":",CaseStatement -> identifier/"case" · expression ":" ((nonCaseStatement | Declaration | TypeDefinition))+
  RawString=s35,"("=s1215,identifier/"bool"=s164,"::"=s1068,"["=s193,incDec=s1192,ArithOp<"+" | "-">=s1191,Number=s56,identifier/"delete"=s1032,LogicOp<"!">=s1191,BitOp<"~">=s1191,identifier/"sizeof"=s1196,identifier/"NULL"=s56,identifier/"new"=s1031,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s1084,"&"=s1084,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s1089,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s1190,FieldExpression=s1190,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s1071,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s1190,ConcatenatedString=s56,PointerExpression=s1190,SubscriptExpression=s1190,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s259
76: CaseStatement -> identifier/"default" · ":",CaseStatement -> identifier/"default" · ":" ((nonCaseStatement | Declaration | TypeDefinition))+
  ":"=s260
77: TryStatement -> identifier/"try" · CompoundStatement CatchClause+
  "{"=s45 | CompoundStatement=s261
78: ThrowStatement -> identifier/"throw" · ";",ThrowStatement -> identifier/"throw" · expression ";"
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,";"=s263,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s262
79: NamespaceDefinition -> identifier/"namespace" · DeclarationList,NamespaceDefinition -> identifier/"namespace" · Identifier DeclarationList
  "{"=s265,identifier=s264 | Identifier=s267,DeclarationList=s266
80: StaticAssertDeclaration -> identifier/"static_assert" · "(" expression ")" ";",StaticAssertDeclaration -> identifier/"static_assert" · "(" expression "," String ")" ";",StaticAssertDeclaration -> identifier/"static_assert" · "(" expression "," RawString ")" ";",StaticAssertDeclaration -> identifier/"static_assert" · "(" expression "," ConcatenatedString ")" ";"
  "("=s268
81: TemplateInstantiation -> identifier/"template" · declarator ";",TemplateInstantiation -> identifier/"template" · declarationSpecifiers declarator ";",TemplateDeclaration -> identifier/"template" · TemplateParameterList emptyDeclaration,TemplateDeclaration -> identifier/"template" · TemplateParameterList AliasDeclaration,TemplateDeclaration -> identifier/"template" · TemplateParameterList Declaration,TemplateDeclaration -> identifier/"template" · TemplateParameterList TemplateDeclaration,TemplateDeclaration -> identifier/"template" · TemplateParameterList FunctionDefinition,TemplateDeclaration -> identifier/"template" · TemplateParameterList FunctionDefinition-3,TemplateDeclaration -> identifier/"template" · TemplateParameterList FunctionDefinition-4
  "("=s180,identifier/"bool"=s48,DestructorName=s26,"::"=s1078,"<"=s272,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s85,identifier/"__declspec"=s59,"["=s182,identifier/"extern"=s61,identifier/"static"=s61,identifier/"register"=s61,identifier/"inline"=s61,identifier/"__attribute__"=s62,identifier/"__based"=s63,OperatorName=s26,identifier/"typename"=s89,identifier/"class"=s88,identifier/"union"=s86,identifier/"enum"=s87,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s1060,"*"=s179,"&&"=s22,"&"=s22 | Identifier=s181,NamespaceIdentifier=s1200,TemplateType=s269,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s1200,StructSpecifier=s48,MsDeclspecModifier=s14,AttributeSpecifier=s14,MsBasedModifier=s18,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,TemplateParameterList=s274,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+=s15,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeQualifier=s14,typeSpecifier=s270,declarationSpecifiers=s273,storageClassSpecifier=s14,declarator=s271
82: ExplicitFunctionSpecifier -> identifier/"explicit" ·,ExplicitFunctionSpecifier -> identifier/"explicit" · "(" expression ")"
  "("=s275,DestructorName=ExplicitFunctionSpecifier(1),"::"=ExplicitFunctionSpecifier(1),"["=ExplicitFunctionSpecifier(1),identifier/"__based"=ExplicitFunctionSpecifier(1),OperatorName=ExplicitFunctionSpecifier(1),identifier/"operator"=ExplicitFunctionSpecifier(1),identifier=ExplicitFunctionSpecifier(1),"*"=ExplicitFunctionSpecifier(1),"&&"=ExplicitFunctionSpecifier(1),"&"=ExplicitFunctionSpecifier(1)
83: OperatorCast -> identifier/"operator" · declarationSpecifiers abstractDeclarator
  identifier/"bool"=s48,"::"=s141,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s1019,identifier/"__declspec"=s59,identifier/"extern"=s61,identifier/"static"=s61,identifier/"register"=s61,identifier/"inline"=s61,identifier/"__attribute__"=s62,identifier/"typename"=s1027,identifier/"class"=s1026,identifier/"union"=s1021,identifier/"enum"=s1023,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,MsDeclspecModifier=s14,AttributeSpecifier=s14,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+=s1187,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeQualifier=s14,typeSpecifier=s270,declarationSpecifiers=s276,storageClassSpecifier=s14
84: FunctionDefinition -> identifier/"__cdecl" · declarationSpecifiers declarator CompoundStatement
  identifier/"bool"=s48,"::"=s141,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s85,identifier/"__declspec"=s59,identifier/"extern"=s61,identifier/"static"=s61,identifier/"register"=s61,identifier/"inline"=s61,identifier/"__attribute__"=s62,identifier/"typename"=s89,identifier/"class"=s88,identifier/"union"=s86,identifier/"enum"=s87,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,MsDeclspecModifier=s14,AttributeSpecifier=s14,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+=s15,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeQualifier=s14,typeSpecifier=s270,declarationSpecifiers=s277,storageClassSpecifier=s14
85: StructSpecifier -> identifier/"struct" · className,StructSpecifier -> identifier/"struct" · FieldDeclarationList,StructSpecifier -> identifier/"struct" · BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" · identifier/"final" BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · className FieldDeclarationList,StructSpecifier -> identifier/"struct" · className BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · className identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" · className identifier/"final" BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier className,StructSpecifier -> identifier/"struct" · MsDeclspecModifier FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier identifier/"final" BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier className FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier className BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier className identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier className identifier/"final" BaseClassClause FieldDeclarationList
  "::"=s141,identifier/"__declspec"=s59,identifier/"final"=s285,"{"=s281,identifier=s140,":"=s280 | NamespaceIdentifier=s142,TemplateType=s278,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,MsDeclspecModifier=s286,BaseClassClause=s284,FieldDeclarationList=s283,className=s282
86: UnionSpecifier -> identifier/"union" · className,UnionSpecifier -> identifier/"union" · FieldDeclarationList,UnionSpecifier -> identifier/"union" · BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" · identifier/"final" BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · className FieldDeclarationList,UnionSpecifier -> identifier/"union" · className BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · className identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" · className identifier/"final" BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier className,UnionSpecifier -> identifier/"union" · MsDeclspecModifier FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier identifier/"final" BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier className FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier className BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier className identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier className identifier/"final" BaseClassClause FieldDeclarationList
  "::"=s141,identifier/"__declspec"=s59,identifier/"final"=s290,"{"=s281,identifier=s140,":"=s280 | NamespaceIdentifier=s142,TemplateType=s278,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,MsDeclspecModifier=s291,BaseClassClause=s289,FieldDeclarationList=s288,className=s287
87: EnumSpecifier -> identifier/"enum" · className,EnumSpecifier -> identifier/"enum" · className EnumeratorList,EnumSpecifier -> identifier/"enum" · className enumBaseClause,EnumSpecifier -> identifier/"enum" · className enumBaseClause EnumeratorList,EnumSpecifier -> identifier/"enum" · EnumeratorList,EnumSpecifier -> identifier/"enum" · identifier/"class" className,EnumSpecifier -> identifier/"enum" · identifier/"class" className EnumeratorList,EnumSpecifier -> identifier/"enum" · identifier/"class" className enumBaseClause,EnumSpecifier -> identifier/"enum" · identifier/"class" className enumBaseClause EnumeratorList,EnumSpecifier -> identifier/"enum" · identifier/"class" EnumeratorList,EnumSpecifier -> identifier/"enum" · identifier/"struct" className,EnumSpecifier -> identifier/"enum" · identifier/"struct" className EnumeratorList,EnumSpecifier -> identifier/"enum" · identifier/"struct" className enumBaseClause,EnumSpecifier -> identifier/"enum" · identifier/"struct" className enumBaseClause EnumeratorList,EnumSpecifier -> identifier/"enum" · identifier/"struct" EnumeratorList
  "::"=s141,identifier/"struct"=s295,"{"=s292,identifier/"class"=s295,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s278,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,EnumeratorList=s294,className=s293
88: ClassSpecifier -> identifier/"class" · className,ClassSpecifier -> identifier/"class" · FieldDeclarationList,ClassSpecifier -> identifier/"class" · BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" · identifier/"final" BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · className FieldDeclarationList,ClassSpecifier -> identifier/"class" · className BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · className identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" · className identifier/"final" BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier className,ClassSpecifier -> identifier/"class" · MsDeclspecModifier FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier identifier/"final" BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier className FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier className BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier className identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier className identifier/"final" BaseClassClause FieldDeclarationList
  "::"=s141,identifier/"__declspec"=s59,identifier/"final"=s299,"{"=s281,identifier=s140,":"=s280 | NamespaceIdentifier=s142,TemplateType=s278,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,MsDeclspecModifier=s300,BaseClassClause=s298,FieldDeclarationList=s297,className=s296
89: DependentType -> identifier/"typename" · typeSpecifier
  identifier/"bool"=s48,"::"=s141,identifier/"struct"=s85,identifier/"typename"=s89,identifier/"class"=s88,identifier/"union"=s86,identifier/"enum"=s87,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeSpecifier=s301
90: Decltype -> identifier/"decltype" · "(" expression ")"
  "("=s302
91: SizeofExpression -> identifier/"sizeof" · expression,SizeofExpression -> identifier/"sizeof" · _anon-4,SizeofExpression -> identifier/"sizeof" · "..." "(" Identifier ")"
  RawString=s35,"("=s304,identifier/"bool"=s164,"::"=s155,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"..."=s306,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s303,_anon-4=s305
92: NewExpression -> identifier/"new" · typeSpecifier,NewExpression -> identifier/"new" · typeSpecifier ArgumentList,NewExpression -> identifier/"new" · typeSpecifier InitializerList,NewExpression -> identifier/"new" · typeSpecifier NewDeclarator,NewExpression -> identifier/"new" · typeSpecifier NewDeclarator ArgumentList,NewExpression -> identifier/"new" · typeSpecifier NewDeclarator InitializerList,NewExpression -> identifier/"new" · ArgumentList typeSpecifier,NewExpression -> identifier/"new" · ArgumentList typeSpecifier ArgumentList,NewExpression -> identifier/"new" · ArgumentList typeSpecifier InitializerList,NewExpression -> identifier/"new" · ArgumentList typeSpecifier NewDeclarator,NewExpression -> identifier/"new" · ArgumentList typeSpecifier NewDeclarator ArgumentList,NewExpression -> identifier/"new" · ArgumentList typeSpecifier NewDeclarator InitializerList
  "("=s124,identifier/"bool"=s48,"::"=s141,identifier/"struct"=s1239,identifier/"typename"=s1251,identifier/"class"=s1248,identifier/"union"=s1243,identifier/"enum"=s1246,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140 | ArgumentList=s308,NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeSpecifier=s307
93: DeleteExpression -> identifier/"delete" · expression,DeleteExpression -> identifier/"delete" · "[" "]" expression
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s310,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s309
94: PreprocDirective -> pp<"include"> · String "\n",PreprocDirective -> pp<"include"> · SystemLibString "\n",PreprocDirective -> pp<"include"> · Identifier "\n",PreprocDirective -> pp<"include"> · Identifier ArgumentList "\n"
  SystemLibString=s311,stringLiteralStart=s2,identifier=s264 | String=s311,Identifier=s312
95: PreprocDirective -> pp<"define"> · Identifier PreprocArg "\n",PreprocDirective -> pp<"define"> · Identifier preprocParams PreprocArg "\n"
  identifier=s264 | Identifier=s313
96: PreprocDirective -> pp<"if"> · PreprocArg "\n",PreprocDirective -> pp<"elif"> · PreprocArg "\n",PreprocDirective -> PreprocDirectiveName · PreprocArg "\n"
  PreprocArg=s311
97: PreprocDirective -> pp<"ifdef"> · Identifier "\n",PreprocDirective -> pp<"ifndef"> · Identifier "\n"
  identifier=s264 | Identifier=s311
98: PreprocDirective -> pp<"else"> · "\n",PreprocDirective -> pp<"endif"> · "\n"
  "\n"=s314
99: Macro -> MacroName ·,Macro -> MacroName · ArgumentList,Macro -> MacroName · whitespace,Macro -> MacroName · whitespace ArgumentList
  "("=s124,whitespace=s316,␄=Macro(1) | ArgumentList=s315
100: %mainskip -> PreprocDirective ·,%mainskip -> Macro ·
  always %mainskip(1)
101: (stringLiteralContent | EscapeSequence)+ -> stringLiteralContent ·,(stringLiteralContent | EscapeSequence)+ -> EscapeSequence ·
  always (stringLiteralContent | EscapeSequence)+(1)
102: (stringLiteralContent | EscapeSequence)+ -> (stringLiteralContent | EscapeSequence)+ · (stringLiteralContent | EscapeSequence)+,String -> stringLiteralStart (stringLiteralContent | EscapeSequence)+ · stringLiteralEnd
  EscapeSequence=s101,stringLiteralContent=s101,stringLiteralEnd=s318 | (stringLiteralContent | EscapeSequence)+=s317
103: String -> stringLiteralStart stringLiteralEnd ·
  always String(2)
104: ConditionalExpression -> expression "?" · expression ":" expression
  RawString=s35,"("=s1215,identifier/"bool"=s164,"::"=s1068,"["=s193,incDec=s1192,ArithOp<"+" | "-">=s1191,Number=s56,identifier/"delete"=s1032,LogicOp<"!">=s1191,BitOp<"~">=s1191,identifier/"sizeof"=s1196,identifier/"NULL"=s56,identifier/"new"=s1031,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s1084,"&"=s1084,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s1089,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s1190,FieldExpression=s1190,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s1071,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s1190,ConcatenatedString=s56,PointerExpression=s1190,SubscriptExpression=s1190,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s319
105: CallExpression -> expression ArgumentList ·,CallExpression -> identifier/"bool" ArgumentList ·
  always CallExpression(2)
106: CommaExpression -> expression "," · expression,CommaExpression -> expression "," · CommaExpression
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,CommaExpression=s321,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s320
107: ExpressionStatement -> expression ";" ·,ExpressionStatement -> CommaExpression ";" ·
  always ExpressionStatement(2)
108: FieldExpression -> expression "." · FieldIdentifier,FieldExpression -> expression "->" · FieldIdentifier,FieldExpression -> expression "." · DestructorName,FieldExpression -> expression "." · TemplateMethod,FieldExpression -> expression "->" · DestructorName,FieldExpression -> expression "->" · TemplateMethod
  DestructorName=s327,"::"=s323,identifier=s322 | FieldIdentifier=s325,TemplateMethod=s327,ScopedFieldIdentifier=s326,NamespaceIdentifier=s324,TemplateType=s324,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s324
109: SubscriptExpression -> expression "[" · expression "]"
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s328
110: ArithOp-1 -> "*" ·
  always ArithOp-1(1)
111: LogicOp-1 -> "||" ·,LogicOp-1 -> "&&" ·
  always LogicOp-1(1)
112: BitOp-1 -> "&" ·
  always BitOp-1(1)
113: BinaryExpression -> expression ArithOp<"+" | "-"> · expression
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s329
114: BinaryExpression -> expression ArithOp-1 · expression,BinaryExpression -> expression ArithOp<"/" | "%"> · expression
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s330
115: BinaryExpression -> expression LogicOp-1 · expression
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s331
116: BinaryExpression -> expression BitOp<"|"> · expression
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s332
117: BinaryExpression -> expression BitOp<"^"> · expression
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s333
118: BinaryExpression -> expression BitOp-1 · expression
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s334
119: BinaryExpression -> expression CompareOp<"==" | "!="> · expression
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s335
120: BinaryExpression -> expression CompareOp<"<=" | ">="> · expression,BinaryExpression -> expression "<"/"<" · expression,BinaryExpression -> expression templateArgsEnd/">" · expression
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s336
121: BinaryExpression -> expression BitOp<"<<" | ">>"> · expression
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s337
122: BinaryExpression -> expression incDec · expression,UpdateExpression -> expression incDec ·
  RawString=s35,identifier/"bool"=s164,"::"=s155,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54,"("=UpdateExpression(2),","=UpdateExpression(2),"["=UpdateExpression(2),incDec=UpdateExpression(2),ArithOp<"+" | "-">=UpdateExpression(2),ArithOp<"/" | "%">=UpdateExpression(2),BitOp<"|">=UpdateExpression(2),BitOp<"^">=UpdateExpression(2),CompareOp<"==" | "!=">=UpdateExpression(2),CompareOp<"<=" | ">=">=UpdateExpression(2),"<"/"<"=UpdateExpression(2),templateArgsEnd/">"=UpdateExpression(2),BitOp<"<<" | ">>">=UpdateExpression(2),"?"=UpdateExpression(2),"."=UpdateExpression(2),"->"=UpdateExpression(2),"..."=UpdateExpression(2),"*"=UpdateExpression(2),"||"=UpdateExpression(2),"&&"=UpdateExpression(2),"&"=UpdateExpression(2),";"=UpdateExpression(2),UpdateOp=UpdateExpression(2),"="=UpdateExpression(2),")"=UpdateExpression(2),"]"=UpdateExpression(2),"}"=UpdateExpression(2),templateArgsEndFallback=UpdateExpression(2),templateArgsEnd=UpdateExpression(2) | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ConcatenatedString=s56,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,ParameterPackExpansion-2=s56,expression=s338
123: ParameterPackExpansion-2 -> expression "..." ·
  always ParameterPackExpansion-2(2)
124: ArgumentList -> "(" · commaSep<expression | InitializerList> ")"
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"{"=s133,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54,")"=commaSep<expression | InitializerList>(0) | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,InitializerList=s340,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,commaSep<expression | InitializerList>=s341,expression=s339
125: NamespaceIdentifier-1 -> scopedIdentifier ·,TypeIdentifier-1 -> scopedIdentifier ·,Identifier-1 -> scopedIdentifier ·
  "("=TypeIdentifier-1(1),"("=Identifier-1(1),DestructorName=TypeIdentifier-1(1),"::"=NamespaceIdentifier-1(1),"<"=TypeIdentifier-1(1),"<"=Identifier-1(1),identifier/"const"=TypeIdentifier-1(1),identifier/"volatile"=TypeIdentifier-1(1),identifier/"restrict"=TypeIdentifier-1(1),identifier/"_Atomic"=TypeIdentifier-1(1),identifier/"mutable"=TypeIdentifier-1(1),identifier/"constexpr"=TypeIdentifier-1(1),identifier/"__declspec"=TypeIdentifier-1(1),","=Identifier-1(1),"{"=TypeIdentifier-1(1),"["=TypeIdentifier-1(1),"["=Identifier-1(1),incDec=Identifier-1(1),ArithOp<"+" | "-">=Identifier-1(1),ArithOp<"/" | "%">=Identifier-1(1),BitOp<"|">=Identifier-1(1),BitOp<"^">=Identifier-1(1),CompareOp<"==" | "!=">=Identifier-1(1),CompareOp<"<=" | ">=">=Identifier-1(1),"<"/"<"=Identifier-1(1),templateArgsEnd/">"=Identifier-1(1),BitOp<"<<" | ">>">=Identifier-1(1),UpdateOp=NamespaceIdentifier-1(1),identifier/"extern"=TypeIdentifier-1(1),identifier/"static"=TypeIdentifier-1(1),identifier/"register"=TypeIdentifier-1(1),identifier/"inline"=TypeIdentifier-1(1),identifier/"__attribute__"=TypeIdentifier-1(1),identifier/"__based"=TypeIdentifier-1(1),OperatorName=TypeIdentifier-1(1),identifier=TypeIdentifier-1(1),"?"=Identifier-1(1),"."=Identifier-1(1),"->"=Identifier-1(1),"..."=Identifier-1(1),"*"=TypeIdentifier-1(1),"*"=Identifier-1(1),"||"=Identifier-1(1),"&&"=TypeIdentifier-1(1),"&&"=Identifier-1(1),"&"=TypeIdentifier-1(1),"&"=Identifier-1(1),";"=TypeIdentifier-1(1),";"=Identifier-1(1),"="=NamespaceIdentifier-1(1),")"=TypeIdentifier-1(1),")"=Identifier-1(1),"}"=Identifier-1(1)
126: ScopedNamespaceIdentifier -> "::" NamespaceIdentifier-1 ·
  always ScopedNamespaceIdentifier(2)
127: ScopedTypeIdentifier -> "::" TypeIdentifier-1 ·
  always ScopedTypeIdentifier(2)
128: ScopedIdentifier -> "::" Identifier-1 ·,ScopedIdentifier -> "::" OperatorName ·,ScopedIdentifier -> "::" DestructorName ·
  always ScopedIdentifier(2)
129: OperatorCast -> "::" scopedIdentifier/"operator" · declarationSpecifiers abstractDeclarator
  identifier/"bool"=s48,"::"=s141,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s1019,identifier/"__declspec"=s59,identifier/"extern"=s61,identifier/"static"=s61,identifier/"register"=s61,identifier/"inline"=s61,identifier/"__attribute__"=s62,identifier/"typename"=s1027,identifier/"class"=s1026,identifier/"union"=s1021,identifier/"enum"=s1023,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,MsDeclspecModifier=s14,AttributeSpecifier=s14,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+=s1187,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeQualifier=s14,typeSpecifier=s270,declarationSpecifiers=s342,storageClassSpecifier=s14
130: NewExpression -> "::" scopedIdentifier/"new" · typeSpecifier,NewExpression -> "::" scopedIdentifier/"new" · typeSpecifier ArgumentList,NewExpression -> "::" scopedIdentifier/"new" · typeSpecifier InitializerList,NewExpression -> "::" scopedIdentifier/"new" · typeSpecifier NewDeclarator,NewExpression -> "::" scopedIdentifier/"new" · typeSpecifier NewDeclarator ArgumentList,NewExpression -> "::" scopedIdentifier/"new" · typeSpecifier NewDeclarator InitializerList,NewExpression -> "::" scopedIdentifier/"new" · ArgumentList typeSpecifier,NewExpression -> "::" scopedIdentifier/"new" · ArgumentList typeSpecifier ArgumentList,NewExpression -> "::" scopedIdentifier/"new" · ArgumentList typeSpecifier InitializerList,NewExpression -> "::" scopedIdentifier/"new" · ArgumentList typeSpecifier NewDeclarator,NewExpression -> "::" scopedIdentifier/"new" · ArgumentList typeSpecifier NewDeclarator ArgumentList,NewExpression -> "::" scopedIdentifier/"new" · ArgumentList typeSpecifier NewDeclarator InitializerList
  "("=s124,identifier/"bool"=s48,"::"=s141,identifier/"struct"=s1239,identifier/"typename"=s1251,identifier/"class"=s1248,identifier/"union"=s1243,identifier/"enum"=s1246,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140 | ArgumentList=s344,NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeSpecifier=s343
131: DeleteExpression -> "::" scopedIdentifier/"delete" · expression,DeleteExpression -> "::" scopedIdentifier/"delete" · "[" "]" expression
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s346,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s345
132: ScopedNamespaceIdentifier -> NamespaceIdentifier "::" · NamespaceIdentifier-1,ScopedNamespaceIdentifier -> TemplateType "::" · NamespaceIdentifier-1,ScopedNamespaceIdentifier -> ScopedNamespaceIdentifier "::" · NamespaceIdentifier-1,ScopedTypeIdentifier -> NamespaceIdentifier "::" · TypeIdentifier-1,ScopedTypeIdentifier -> TemplateType "::" · TypeIdentifier-1,ScopedTypeIdentifier -> ScopedNamespaceIdentifier "::" · TypeIdentifier-1,ScopedIdentifier -> NamespaceIdentifier "::" · Identifier-1,ScopedIdentifier -> NamespaceIdentifier "::" · OperatorName,ScopedIdentifier -> NamespaceIdentifier "::" · DestructorName,ScopedIdentifier -> TemplateType "::" · Identifier-1,ScopedIdentifier -> TemplateType "::" · OperatorName,ScopedIdentifier -> TemplateType "::" · DestructorName,ScopedIdentifier -> ScopedNamespaceIdentifier "::" · Identifier-1,ScopedIdentifier -> ScopedNamespaceIdentifier "::" · OperatorName,ScopedIdentifier -> ScopedNamespaceIdentifier "::" · DestructorName,OperatorCast -> NamespaceIdentifier "::" · scopedIdentifier/"operator" declarationSpecifiers abstractDeclarator,OperatorCast -> TemplateType "::" · scopedIdentifier/"operator" declarationSpecifiers abstractDeclarator,OperatorCast -> ScopedNamespaceIdentifier "::" · scopedIdentifier/"operator" declarationSpecifiers abstractDeclarator
  DestructorName=s349,OperatorName=s349,scopedIdentifier/"operator"=s350,scopedIdentifier=s125 | NamespaceIdentifier-1=s347,TypeIdentifier-1=s348,Identifier-1=s349
133: InitializerList -> "{" · commaSepTrailing<InitializerPair | expression | InitializerList> "}"
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"{"=s133,"["=s352,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"."=s353,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54,"}"=commaSepTrailing<InitializerPair | expression | InitializerList>(0) | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,InitializerList=s356,InitializerPair=s356,SubscriptDesignator=s354,FieldDesignator=s354,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,(SubscriptDesignator | FieldDesignator)+=s355,expression=s351,commaSepTrailing<InitializerPair | expression | InitializerList>=s357
134: CompoundLiteralExpression -> TypeIdentifier InitializerList ·,CompoundLiteralExpression -> TemplateType InitializerList ·,CompoundLiteralExpression -> ScopedTypeIdentifier InitializerList ·
  always CompoundLiteralExpression(2)
135: AssignmentExpression -> Identifier UpdateOp · expression,AssignmentExpression -> Identifier "=" · expression,AssignmentExpression -> CallExpression UpdateOp · expression,AssignmentExpression -> CallExpression "=" · expression,AssignmentExpression -> FieldExpression UpdateOp · expression,AssignmentExpression -> FieldExpression "=" · expression,AssignmentExpression -> PointerExpression UpdateOp · expression,AssignmentExpression -> PointerExpression "=" · expression,AssignmentExpression -> SubscriptExpression UpdateOp · expression,AssignmentExpression -> SubscriptExpression "=" · expression,AssignmentExpression -> ParenthesizedExpression UpdateOp · expression,AssignmentExpression -> ParenthesizedExpression "=" · expression,AssignmentExpression -> ScopedNamespaceIdentifier UpdateOp · expression,AssignmentExpression -> ScopedNamespaceIdentifier "=" · expression
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s358
136: CharLiteral -> charLiteralStart EscapeSequence · charLiteralEnd,CharLiteral -> charLiteralStart charLiteralContent · charLiteralEnd
  charLiteralEnd=s359
137: AttributeName -> attributeIdentifier ·,AttributeName -> attributeIdentifier · ("::" attributeIdentifier)+
  "::"=s360,"("=AttributeName(1),","=AttributeName(1),"..."=AttributeName(1),"]]"=AttributeName(1) | ("::" attributeIdentifier)+=s361
138: commaSep<AttributeName AttributeArgs { "(" balancedTokens* ")" }?> -> AttributeName ·,commaSep<AttributeName AttributeArgs { "(" balancedTokens* ")" }?> -> AttributeName · ("," AttributeName AttributeArgs { "(" balancedTokens* ")" }?)+,commaSep<AttributeName AttributeArgs { "(" balancedTokens* ")" }?> -> AttributeName · AttributeArgs,commaSep<AttributeName AttributeArgs { "(" balancedTokens* ")" }?> -> AttributeName · AttributeArgs ("," AttributeName AttributeArgs { "(" balancedTokens* ")" }?)+
  "("=s362,","=s363,"..."=commaSep<AttributeName AttributeArgs { "(" balancedTokens* ")" }?>(1),"]]"=commaSep<AttributeName AttributeArgs { "(" balancedTokens* ")" }?>(1) | AttributeArgs=s365,("," AttributeName AttributeArgs { "(" balancedTokens* ")" }?)+=s364
139: Attribute -> "[[" commaSep<AttributeName AttributeArgs { "(" balancedTokens* ")" }?> · "]]",Attribute -> "[[" commaSep<AttributeName AttributeArgs { "(" balancedTokens* ")" }?> · "..." "]]"
  "..."=s367,"]]"=s366
140: NamespaceIdentifier -> identifier ·,TypeIdentifier -> identifier ·
  "("=TypeIdentifier(1),DestructorName=TypeIdentifier(1),"::"=NamespaceIdentifier(1),"<"=TypeIdentifier(1),identifier/"const"=TypeIdentifier(1),identifier/"volatile"=TypeIdentifier(1),identifier/"restrict"=TypeIdentifier(1),identifier/"_Atomic"=TypeIdentifier(1),identifier/"mutable"=TypeIdentifier(1),identifier/"constexpr"=TypeIdentifier(1),identifier/"__declspec"=TypeIdentifier(1),"["=TypeIdentifier(1),identifier/"extern"=TypeIdentifier(1),identifier/"static"=TypeIdentifier(1),identifier/"register"=TypeIdentifier(1),identifier/"inline"=TypeIdentifier(1),identifier/"__attribute__"=TypeIdentifier(1),identifier/"__based"=TypeIdentifier(1),OperatorName=TypeIdentifier(1),identifier=TypeIdentifier(1),"*"=TypeIdentifier(1),"&&"=TypeIdentifier(1),"&"=TypeIdentifier(1),";"=TypeIdentifier(1),identifier/"final"=TypeIdentifier(1),"{"=TypeIdentifier(1),":"=TypeIdentifier(1),","=TypeIdentifier(1),incDec=TypeIdentifier(1),ArithOp<"+" | "-">=TypeIdentifier(1),ArithOp<"/" | "%">=TypeIdentifier(1),BitOp<"|">=TypeIdentifier(1),BitOp<"^">=TypeIdentifier(1),CompareOp<"==" | "!=">=TypeIdentifier(1),CompareOp<"<=" | ">=">=TypeIdentifier(1),"<"/"<"=TypeIdentifier(1),templateArgsEnd/">"=TypeIdentifier(1),BitOp<"<<" | ">>">=TypeIdentifier(1),"?"=TypeIdentifier(1),"."=TypeIdentifier(1),"->"=TypeIdentifier(1),"..."=TypeIdentifier(1),"||"=TypeIdentifier(1),UpdateOp=TypeIdentifier(1),"="=TypeIdentifier(1),")"=TypeIdentifier(1),"]"=TypeIdentifier(1),templateArgsEndFallback=TypeIdentifier(1),templateArgsEnd=TypeIdentifier(1),"}"=TypeIdentifier(1),identifier/"noexcept"=TypeIdentifier(1),identifier/"throw"=TypeIdentifier(1)
141: ScopedNamespaceIdentifier -> "::" · NamespaceIdentifier-1,ScopedTypeIdentifier -> "::" · TypeIdentifier-1
  scopedIdentifier=s368 | NamespaceIdentifier-1=s126,TypeIdentifier-1=s127
142: ScopedNamespaceIdentifier -> NamespaceIdentifier · "::" NamespaceIdentifier-1,ScopedNamespaceIdentifier -> TemplateType · "::" NamespaceIdentifier-1,ScopedNamespaceIdentifier -> ScopedNamespaceIdentifier · "::" NamespaceIdentifier-1,ScopedTypeIdentifier -> NamespaceIdentifier · "::" TypeIdentifier-1,ScopedTypeIdentifier -> TemplateType · "::" TypeIdentifier-1,ScopedTypeIdentifier -> ScopedNamespaceIdentifier · "::" TypeIdentifier-1
  "::"=s369
143: ScopedNamespaceIdentifier -> TemplateType · "::" NamespaceIdentifier-1,ScopedTypeIdentifier -> TemplateType · "::" TypeIdentifier-1,typeSpecifier -> TemplateType ·
  "::"=s369,"("=typeSpecifier(1),DestructorName=typeSpecifier(1),identifier/"const"=typeSpecifier(1),identifier/"volatile"=typeSpecifier(1),identifier/"restrict"=typeSpecifier(1),identifier/"_Atomic"=typeSpecifier(1),identifier/"mutable"=typeSpecifier(1),identifier/"constexpr"=typeSpecifier(1),identifier/"__declspec"=typeSpecifier(1),"["=typeSpecifier(1),identifier/"extern"=typeSpecifier(1),identifier/"static"=typeSpecifier(1),identifier/"register"=typeSpecifier(1),identifier/"inline"=typeSpecifier(1),identifier/"__attribute__"=typeSpecifier(1),identifier/"__based"=typeSpecifier(1),OperatorName=typeSpecifier(1),identifier=typeSpecifier(1),"*"=typeSpecifier(1),"&&"=typeSpecifier(1),"&"=typeSpecifier(1),";"=typeSpecifier(1),","=typeSpecifier(1),"{"=typeSpecifier(1),incDec=typeSpecifier(1),ArithOp<"+" | "-">=typeSpecifier(1),ArithOp<"/" | "%">=typeSpecifier(1),BitOp<"|">=typeSpecifier(1),BitOp<"^">=typeSpecifier(1),CompareOp<"==" | "!=">=typeSpecifier(1),CompareOp<"<=" | ">=">=typeSpecifier(1),"<"/"<"=typeSpecifier(1),templateArgsEnd/">"=typeSpecifier(1),BitOp<"<<" | ">>">=typeSpecifier(1),"?"=typeSpecifier(1),"."=typeSpecifier(1),"->"=typeSpecifier(1),"..."=typeSpecifier(1),"||"=typeSpecifier(1),UpdateOp=typeSpecifier(1),"="=typeSpecifier(1),")"=typeSpecifier(1),"]"=typeSpecifier(1),":"=typeSpecifier(1),templateArgsEndFallback=typeSpecifier(1),templateArgsEnd=typeSpecifier(1),"}"=typeSpecifier(1),identifier/"final"=typeSpecifier(1),identifier/"noexcept"=typeSpecifier(1),identifier/"throw"=typeSpecifier(1)
144: Attribute+ -> Attribute+ · Attribute+,Attribute+ -> Attribute+ Attribute+ ·
  always Attribute+(2)
145: declarationSpecifiers -> typeSpecifier ·,declarationSpecifiers -> typeSpecifier · (storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+,emptyDeclaration -> Attribute+ typeSpecifier · ";"
  identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"__declspec"=s59,identifier/"extern"=s61,identifier/"static"=s61,identifier/"register"=s61,identifier/"inline"=s61,identifier/"__attribute__"=s62,";"=s370,"("=declarationSpecifiers(1),DestructorName=declarationSpecifiers(1),"::"=declarationSpecifiers(1),"["=declarationSpecifiers(1),identifier/"__based"=declarationSpecifiers(1),OperatorName=declarationSpecifiers(1),identifier=declarationSpecifiers(1),"*"=declarationSpecifiers(1),"&&"=declarationSpecifiers(1),"&"=declarationSpecifiers(1) | MsDeclspecModifier=s14,AttributeSpecifier=s14,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+=s151,typeQualifier=s14,storageClassSpecifier=s14
146: Declaration -> Attribute+ declarationSpecifiers · commaSep1<declarator | InitDeclarator> ";",FunctionDefinition -> Attribute+ declarationSpecifiers · declarator CompoundStatement
  "("=s180,DestructorName=s26,"::"=s1075,"["=s182,identifier/"__based"=s63,OperatorName=s26,identifier=s1058,"*"=s1079,"&&"=s1081,"&"=s1081 | Identifier=s181,NamespaceIdentifier=s1198,TemplateType=s1198,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s1198,MsBasedModifier=s1189,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,InitDeclarator=s202,declarator=s371,commaSep1<declarator | InitDeclarator>=s372
147: typeSpecifier -> ScopedTypeIdentifier ·,typeSpecifier -> TypeIdentifier ·,TemplateType -> TypeIdentifier · TemplateArgumentList,TemplateType -> ScopedTypeIdentifier · TemplateArgumentList
  "<"=s185,"("=typeSpecifier(1),DestructorName=typeSpecifier(1),"::"=typeSpecifier(1),identifier/"const"=typeSpecifier(1),identifier/"volatile"=typeSpecifier(1),identifier/"restrict"=typeSpecifier(1),identifier/"_Atomic"=typeSpecifier(1),identifier/"mutable"=typeSpecifier(1),identifier/"constexpr"=typeSpecifier(1),identifier/"__declspec"=typeSpecifier(1),"["=typeSpecifier(1),identifier/"extern"=typeSpecifier(1),identifier/"static"=typeSpecifier(1),identifier/"register"=typeSpecifier(1),identifier/"inline"=typeSpecifier(1),identifier/"__attribute__"=typeSpecifier(1),identifier/"__based"=typeSpecifier(1),OperatorName=typeSpecifier(1),identifier=typeSpecifier(1),"*"=typeSpecifier(1),"&&"=typeSpecifier(1),"&"=typeSpecifier(1),";"=typeSpecifier(1),","=typeSpecifier(1),"{"=typeSpecifier(1),incDec=typeSpecifier(1),ArithOp<"+" | "-">=typeSpecifier(1),ArithOp<"/" | "%">=typeSpecifier(1),BitOp<"|">=typeSpecifier(1),BitOp<"^">=typeSpecifier(1),CompareOp<"==" | "!=">=typeSpecifier(1),CompareOp<"<=" | ">=">=typeSpecifier(1),"<"/"<"=typeSpecifier(1),templateArgsEnd/">"=typeSpecifier(1),BitOp<"<<" | ">>">=typeSpecifier(1),"?"=typeSpecifier(1),"."=typeSpecifier(1),"->"=typeSpecifier(1),"..."=typeSpecifier(1),"||"=typeSpecifier(1),UpdateOp=typeSpecifier(1),"="=typeSpecifier(1),")"=typeSpecifier(1),"]"=typeSpecifier(1),":"=typeSpecifier(1),templateArgsEndFallback=typeSpecifier(1),templateArgsEnd=typeSpecifier(1),"}"=typeSpecifier(1),identifier/"final"=typeSpecifier(1),identifier/"noexcept"=typeSpecifier(1),identifier/"throw"=typeSpecifier(1) | TemplateArgumentList=s223
148: FunctionDefinition -> Attribute+ identifier/"__cdecl" · declarationSpecifiers declarator CompoundStatement
  identifier/"bool"=s48,"::"=s141,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s85,identifier/"__declspec"=s59,identifier/"extern"=s61,identifier/"static"=s61,identifier/"register"=s61,identifier/"inline"=s61,identifier/"__attribute__"=s62,identifier/"typename"=s89,identifier/"class"=s88,identifier/"union"=s86,identifier/"enum"=s87,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,MsDeclspecModifier=s14,AttributeSpecifier=s14,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+=s15,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeQualifier=s14,typeSpecifier=s270,declarationSpecifiers=s373,storageClassSpecifier=s14
149: (storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+ -> (storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+ · (storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+ -> (storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+ (storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+ ·
  always (storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+(2)
150: declarationSpecifiers -> (storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+ typeSpecifier ·,declarationSpecifiers -> (storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+ typeSpecifier · (storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+
  identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"__declspec"=s59,identifier/"extern"=s61,identifier/"static"=s61,identifier/"register"=s61,identifier/"inline"=s61,identifier/"__attribute__"=s62,"("=declarationSpecifiers(2),DestructorName=declarationSpecifiers(2),"::"=declarationSpecifiers(2),"["=declarationSpecifiers(2),identifier/"__based"=declarationSpecifiers(2),OperatorName=declarationSpecifiers(2),identifier=declarationSpecifiers(2),"*"=declarationSpecifiers(2),"&&"=declarationSpecifiers(2),"&"=declarationSpecifiers(2),")"=declarationSpecifiers(2),","=declarationSpecifiers(2),"..."=declarationSpecifiers(2),"="=declarationSpecifiers(2),templateArgsEndFallback=declarationSpecifiers(2),templateArgsEnd=declarationSpecifiers(2),"{"=declarationSpecifiers(2),":"=declarationSpecifiers(2),";"=declarationSpecifiers(2) | MsDeclspecModifier=s14,AttributeSpecifier=s14,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+=s374,typeQualifier=s14,storageClassSpecifier=s14
151: (storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+ -> (storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+ · (storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+,declarationSpecifiers -> typeSpecifier (storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+ ·
  identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"__declspec"=s59,identifier/"extern"=s61,identifier/"static"=s61,identifier/"register"=s61,identifier/"inline"=s61,identifier/"__attribute__"=s62,"("=declarationSpecifiers(2),DestructorName=declarationSpecifiers(2),"::"=declarationSpecifiers(2),"["=declarationSpecifiers(2),identifier/"__based"=declarationSpecifiers(2),OperatorName=declarationSpecifiers(2),identifier=declarationSpecifiers(2),"*"=declarationSpecifiers(2),"&&"=declarationSpecifiers(2),"&"=declarationSpecifiers(2),")"=declarationSpecifiers(2),","=declarationSpecifiers(2),"..."=declarationSpecifiers(2),"="=declarationSpecifiers(2),templateArgsEndFallback=declarationSpecifiers(2),templateArgsEnd=declarationSpecifiers(2),"{"=declarationSpecifiers(2),":"=declarationSpecifiers(2),";"=declarationSpecifiers(2) | MsDeclspecModifier=s14,AttributeSpecifier=s14,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+=s149,typeQualifier=s14,storageClassSpecifier=s14
152: emptyDeclaration -> typeSpecifier ";" ·
  always emptyDeclaration(2)
153: Identifier -> identifier ·,NamespaceIdentifier -> identifier ·,TypeIdentifier -> identifier ·
  "("=Identifier(1),"::"=NamespaceIdentifier(1),"<"=Identifier(1),"<"=TypeIdentifier(1),","=Identifier(1),"{"=TypeIdentifier(1),"["=Identifier(1),incDec=Identifier(1),ArithOp<"+" | "-">=Identifier(1),ArithOp<"/" | "%">=Identifier(1),BitOp<"|">=Identifier(1),BitOp<"^">=Identifier(1),CompareOp<"==" | "!=">=Identifier(1),CompareOp<"<=" | ">=">=Identifier(1),"<"/"<"=Identifier(1),templateArgsEnd/">"=Identifier(1),BitOp<"<<" | ">>">=Identifier(1),UpdateOp=Identifier(1),"?"=Identifier(1),"."=Identifier(1),"->"=Identifier(1),"..."=Identifier(1),"*"=Identifier(1),"||"=Identifier(1),"&&"=Identifier(1),"&"=Identifier(1),";"=Identifier(1),"="=Identifier(1),"]"=Identifier(1),":"=Identifier(1),")"=Identifier(1),"}"=Identifier(1),templateArgsEndFallback=Identifier(1),templateArgsEnd=Identifier(1)
154: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,PointerExpression -> "*" expression ·,PointerExpression -> "&" expression ·,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,incDec=s122,"."=s108,"->"=s108,","=PointerExpression(2),ArithOp<"+" | "-">=PointerExpression(2),ArithOp<"/" | "%">=PointerExpression(2),BitOp<"|">=PointerExpression(2),BitOp<"^">=PointerExpression(2),CompareOp<"==" | "!=">=PointerExpression(2),CompareOp<"<=" | ">=">=PointerExpression(2),"<"/"<"=PointerExpression(2),templateArgsEnd/">"=PointerExpression(2),BitOp<"<<" | ">>">=PointerExpression(2),UpdateOp=PointerExpression(2),"?"=PointerExpression(2),"..."=PointerExpression(2),"*"=PointerExpression(2),"||"=PointerExpression(2),"&&"=PointerExpression(2),"&"=PointerExpression(2),";"=PointerExpression(2),"="=PointerExpression(2),")"=PointerExpression(2),"]"=PointerExpression(2),"}"=PointerExpression(2),templateArgsEndFallback=PointerExpression(2),templateArgsEnd=PointerExpression(2) | ArgumentList=s105
155: ScopedNamespaceIdentifier -> "::" · NamespaceIdentifier-1,ScopedTypeIdentifier -> "::" · TypeIdentifier-1,ScopedIdentifier -> "::" · Identifier-1,ScopedIdentifier -> "::" · OperatorName,ScopedIdentifier -> "::" · DestructorName,NewExpression -> "::" · scopedIdentifier/"new" typeSpecifier,NewExpression -> "::" · scopedIdentifier/"new" typeSpecifier ArgumentList,NewExpression -> "::" · scopedIdentifier/"new" typeSpecifier InitializerList,NewExpression -> "::" · scopedIdentifier/"new" typeSpecifier NewDeclarator,NewExpression -> "::" · scopedIdentifier/"new" typeSpecifier NewDeclarator ArgumentList,NewExpression -> "::" · scopedIdentifier/"new" typeSpecifier NewDeclarator InitializerList,NewExpression -> "::" · scopedIdentifier/"new" ArgumentList typeSpecifier,NewExpression -> "::" · scopedIdentifier/"new" ArgumentList typeSpecifier ArgumentList,NewExpression -> "::" · scopedIdentifier/"new" ArgumentList typeSpecifier InitializerList,NewExpression -> "::" · scopedIdentifier/"new" ArgumentList typeSpecifier NewDeclarator,NewExpression -> "::" · scopedIdentifier/"new" ArgumentList typeSpecifier NewDeclarator ArgumentList,NewExpression -> "::" · scopedIdentifier/"new" ArgumentList typeSpecifier NewDeclarator InitializerList,DeleteExpression -> "::" · scopedIdentifier/"delete" expression,DeleteExpression -> "::" · scopedIdentifier/"delete" "[" "]" expression
  DestructorName=s128,OperatorName=s128,scopedIdentifier/"new"=s130,scopedIdentifier/"delete"=s131,scopedIdentifier=s1043 | NamespaceIdentifier-1=s126,TypeIdentifier-1=s127,Identifier-1=s128
156: ScopedNamespaceIdentifier -> NamespaceIdentifier · "::" NamespaceIdentifier-1,ScopedNamespaceIdentifier -> TemplateType · "::" NamespaceIdentifier-1,ScopedNamespaceIdentifier -> ScopedNamespaceIdentifier · "::" NamespaceIdentifier-1,ScopedTypeIdentifier -> NamespaceIdentifier · "::" TypeIdentifier-1,ScopedTypeIdentifier -> TemplateType · "::" TypeIdentifier-1,ScopedTypeIdentifier -> ScopedNamespaceIdentifier · "::" TypeIdentifier-1,ScopedIdentifier -> NamespaceIdentifier · "::" Identifier-1,ScopedIdentifier -> NamespaceIdentifier · "::" OperatorName,ScopedIdentifier -> NamespaceIdentifier · "::" DestructorName,ScopedIdentifier -> TemplateType · "::" Identifier-1,ScopedIdentifier -> TemplateType · "::" OperatorName,ScopedIdentifier -> TemplateType · "::" DestructorName,ScopedIdentifier -> ScopedNamespaceIdentifier · "::" Identifier-1,ScopedIdentifier -> ScopedNamespaceIdentifier · "::" OperatorName,ScopedIdentifier -> ScopedNamespaceIdentifier · "::" DestructorName
  "::"=s375
157: ScopedNamespaceIdentifier -> TemplateType · "::" NamespaceIdentifier-1,ScopedTypeIdentifier -> TemplateType · "::" TypeIdentifier-1,ScopedIdentifier -> TemplateType · "::" Identifier-1,ScopedIdentifier -> TemplateType · "::" OperatorName,ScopedIdentifier -> TemplateType · "::" DestructorName,CompoundLiteralExpression -> TemplateType · InitializerList
  "::"=s375,"{"=s133 | InitializerList=s134
158: ScopedNamespaceIdentifier -> ScopedNamespaceIdentifier · "::" NamespaceIdentifier-1,ScopedTypeIdentifier -> ScopedNamespaceIdentifier · "::" TypeIdentifier-1,ScopedIdentifier -> ScopedNamespaceIdentifier · "::" Identifier-1,ScopedIdentifier -> ScopedNamespaceIdentifier · "::" OperatorName,ScopedIdentifier -> ScopedNamespaceIdentifier · "::" DestructorName,AssignmentExpression -> ScopedNamespaceIdentifier · UpdateOp expression,AssignmentExpression -> ScopedNamespaceIdentifier · "=" expression
  "::"=s375,UpdateOp=s135,"="=s135
159: typeQualifier+ -> typeQualifier ·
  always typeQualifier+(1)
160: typeQualifier+ -> typeQualifier+ · typeQualifier+,PointerDeclarator-1 -> "*" typeQualifier+ · declarator
  "("=s180,DestructorName=s26,"::"=s178,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s182,identifier/"__based"=s63,OperatorName=s26,identifier=s153,"*"=s179,"&&"=s22,"&"=s22 | Identifier=s181,NamespaceIdentifier=s156,TemplateType=s156,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s156,MsBasedModifier=s18,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,typeQualifier+=s376,typeQualifier=s159,declarator=s377
161: msPointerModifier+ -> msPointerModifier+ · msPointerModifier+,PointerDeclarator-1 -> "*" msPointerModifier+ · declarator,PointerDeclarator-1 -> "*" msPointerModifier+ · typeQualifier+ declarator
  "("=s180,DestructorName=s26,"::"=s178,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s182,identifier/"__based"=s63,identifier/"__restrict"=s165,OperatorName=s26,identifier=s153,"*"=s179,"&&"=s22,"&"=s22 | Identifier=s181,NamespaceIdentifier=s156,TemplateType=s156,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s156,MsBasedModifier=s18,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,typeQualifier+=s378,msPointerModifier+=s379,typeQualifier=s159,declarator=s377
162: PointerDeclarator-1 -> "*" declarator ·,FunctionDeclarator-1 -> declarator · ParameterList,FunctionDeclarator-1 -> declarator · ParameterList ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+ ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,ArrayDeclarator -> declarator · "[" "]",ArrayDeclarator -> declarator · "[" expression "]",ArrayDeclarator -> declarator · "[" "*" "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "]",ArrayDeclarator -> declarator · "[" typeQualifier+ expression "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "*" "]"
  "("=s169,"["=s168,")"=PointerDeclarator-1(2),";"=PointerDeclarator-1(2),","=PointerDeclarator-1(2),"="=PointerDeclarator-1(2),templateArgsEndFallback=PointerDeclarator-1(2),templateArgsEnd=PointerDeclarator-1(2) | ParameterList=s1210
163: TemplateType -> TypeIdentifier · TemplateArgumentList,TemplateType -> ScopedTypeIdentifier · TemplateArgumentList,CompoundLiteralExpression -> TypeIdentifier · InitializerList,CompoundLiteralExpression -> ScopedTypeIdentifier · InitializerList
  "<"=s185,"{"=s133 | TemplateArgumentList=s223,InitializerList=s134
164: CallExpression -> identifier/"bool" · ArgumentList
  "("=s124 | ArgumentList=s105
165: msPointerModifier+ -> identifier/"__restrict" ·
  always msPointerModifier+(1)
166: PointerDeclarator-1 -> MsBasedModifier "*" · declarator,PointerDeclarator-1 -> MsBasedModifier "*" · typeQualifier+ declarator,PointerDeclarator-1 -> MsBasedModifier "*" · msPointerModifier+ declarator,PointerDeclarator-1 -> MsBasedModifier "*" · msPointerModifier+ typeQualifier+ declarator
  "("=s180,DestructorName=s26,"::"=s178,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s182,identifier/"__based"=s63,identifier/"__restrict"=s165,OperatorName=s26,identifier=s153,"*"=s179,"&&"=s22,"&"=s22 | Identifier=s181,NamespaceIdentifier=s156,TemplateType=s156,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s156,MsBasedModifier=s18,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,typeQualifier+=s378,msPointerModifier+=s380,typeQualifier=s159,declarator=s377
167: FunctionDeclarator-1 -> declarator ParameterList ·,FunctionDeclarator-1 -> declarator ParameterList · ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,FunctionDeclarator-1 -> declarator ParameterList · AttributeSpecifier+,FunctionDeclarator-1 -> declarator ParameterList · AttributeSpecifier+ ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+
  identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"final"=s384,identifier/"__attribute__"=s62,identifier/"noexcept"=s386,identifier/"throw"=s387,"->"=s383,"("=FunctionDeclarator-1(2),"{"=FunctionDeclarator-1(2),"["=FunctionDeclarator-1(2),":"=FunctionDeclarator-1(2),"="=FunctionDeclarator-1(2),";"=FunctionDeclarator-1(2),","=FunctionDeclarator-1(2) | AttributeSpecifier=s381,Noexcept=s384,ThrowSpecifier=s384,TrailingReturnType=s384,AttributeSpecifier+=s382,((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+=s385,typeQualifier=s384
168: ArrayDeclarator -> declarator "[" · "]",ArrayDeclarator -> declarator "[" · expression "]",ArrayDeclarator -> declarator "[" · "*" "]",ArrayDeclarator -> declarator "[" · typeQualifier+ "]",ArrayDeclarator -> declarator "[" · typeQualifier+ expression "]",ArrayDeclarator -> declarator "[" · typeQualifier+ "*" "]"
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s193,"]"=s390,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s391,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,typeQualifier+=s389,expression=s388,typeQualifier=s159
169: ParameterList -> "(" · commaSep<ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "..."> ")"
  identifier/"bool"=s48,"::"=s141,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s85,identifier/"__declspec"=s59,identifier/"extern"=s61,identifier/"static"=s61,identifier/"register"=s61,identifier/"inline"=s61,identifier/"__attribute__"=s62,identifier/"typename"=s89,identifier/"class"=s88,identifier/"union"=s86,identifier/"enum"=s87,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140,"..."=s394,"[["=s10,")"=commaSep<ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "...">(0) | NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,MsDeclspecModifier=s14,Attribute=s11,AttributeSpecifier=s14,ParameterDeclaration=s394,OptionalParameterDeclaration=s394,VariadicParameterDeclaration=s394,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,Attribute+=s392,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+=s15,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeQualifier=s14,typeSpecifier=s270,declarationSpecifiers=s393,storageClassSpecifier=s14,commaSep<ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "...">=s395
170: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,CommaExpression -> expression · "," expression,CommaExpression -> expression · "," CommaExpression,ParenthesizedExpression -> "(" expression · ")",FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,")"=s396,","=s106,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112 | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
171: ScopedNamespaceIdentifier -> TemplateType · "::" NamespaceIdentifier-1,ScopedTypeIdentifier -> TemplateType · "::" TypeIdentifier-1,ScopedIdentifier -> TemplateType · "::" Identifier-1,ScopedIdentifier -> TemplateType · "::" OperatorName,ScopedIdentifier -> TemplateType · "::" DestructorName,typeSpecifier -> TemplateType ·,CompoundLiteralExpression -> TemplateType · InitializerList
  "::"=s1130,"{"=s133,"("=typeSpecifier(1),identifier/"const"=typeSpecifier(1),identifier/"volatile"=typeSpecifier(1),identifier/"restrict"=typeSpecifier(1),identifier/"_Atomic"=typeSpecifier(1),identifier/"mutable"=typeSpecifier(1),identifier/"constexpr"=typeSpecifier(1),")"=typeSpecifier(1),"["=typeSpecifier(1),"*"=typeSpecifier(1),"&&"=typeSpecifier(1),"&"=typeSpecifier(1) | InitializerList=s134
172: typeQualifier+ -> typeQualifier+ · typeQualifier+,TypeDescriptor -> typeQualifier+ · typeSpecifier,TypeDescriptor -> typeQualifier+ · typeSpecifier abstractDeclarator,TypeDescriptor -> typeQualifier+ · typeSpecifier typeQualifier+,TypeDescriptor -> typeQualifier+ · typeSpecifier typeQualifier+ abstractDeclarator
  identifier/"bool"=s48,"::"=s141,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s1019,identifier/"typename"=s1027,identifier/"class"=s1026,identifier/"union"=s1021,identifier/"enum"=s1023,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,typeQualifier+=s376,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeQualifier=s159,typeSpecifier=s397
173: FunctionDeclarator-1 -> declarator · ParameterList,FunctionDeclarator-1 -> declarator · ParameterList ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+ ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,ArrayDeclarator -> declarator · "[" "]",ArrayDeclarator -> declarator · "[" expression "]",ArrayDeclarator -> declarator · "[" "*" "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "]",ArrayDeclarator -> declarator · "[" typeQualifier+ expression "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "*" "]",ParenthesizedDeclarator -> "(" declarator · ")"
  "("=s169,")"=s398,"["=s168 | ParameterList=s1210
174: ParenthesizedExpression -> "(" CommaExpression · ")"
  ")"=s396
175: TypeDescriptor -> typeSpecifier ·,TypeDescriptor -> typeSpecifier · abstractDeclarator,TypeDescriptor -> typeSpecifier · typeQualifier+,TypeDescriptor -> typeSpecifier · typeQualifier+ abstractDeclarator
  "("=s231,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s230,"*"=s227,"&&"=s232,"&"=s232,")"=TypeDescriptor(1),templateArgsEndFallback=TypeDescriptor(1),","=TypeDescriptor(1),templateArgsEnd=TypeDescriptor(1),"..."=TypeDescriptor(1),";"=TypeDescriptor(1) | ParameterList=s1284,AbstractPointerDeclarator=s233,AbstractFunctionDeclarator=s233,AbstractArrayDeclarator=s233,AbstractParenthesizedDeclarator=s233,AbstractReferenceDeclarator=s233,typeQualifier+=s399,typeQualifier=s159,abstractDeclarator=s400
176: CastExpression -> "(" TypeDescriptor · ")" expression,CompoundLiteralExpression -> "(" TypeDescriptor · ")" InitializerList
  ")"=s401
177: FunctionDeclarator-1 -> declarator · ParameterList,FunctionDeclarator-1 -> declarator · ParameterList ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+ ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,ArrayDeclarator -> declarator · "[" "]",ArrayDeclarator -> declarator · "[" expression "]",ArrayDeclarator -> declarator · "[" "*" "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "]",ArrayDeclarator -> declarator · "[" typeQualifier+ expression "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "*" "]",ReferenceDeclarator -> "&" declarator ·,ReferenceDeclarator -> "&&" declarator ·
  "("=s169,"["=s168,")"=ReferenceDeclarator(2),";"=ReferenceDeclarator(2),","=ReferenceDeclarator(2),"="=ReferenceDeclarator(2),templateArgsEndFallback=ReferenceDeclarator(2),templateArgsEnd=ReferenceDeclarator(2) | ParameterList=s1210
178: ScopedNamespaceIdentifier -> "::" · NamespaceIdentifier-1,ScopedTypeIdentifier -> "::" · TypeIdentifier-1,ScopedIdentifier -> "::" · Identifier-1,ScopedIdentifier -> "::" · OperatorName,ScopedIdentifier -> "::" · DestructorName
  DestructorName=s128,OperatorName=s128,scopedIdentifier=s1043 | NamespaceIdentifier-1=s126,TypeIdentifier-1=s127,Identifier-1=s128
179: PointerDeclarator-1 -> "*" · declarator,PointerDeclarator-1 -> "*" · typeQualifier+ declarator,PointerDeclarator-1 -> "*" · msPointerModifier+ declarator,PointerDeclarator-1 -> "*" · msPointerModifier+ typeQualifier+ declarator
  "("=s180,DestructorName=s26,"::"=s178,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s182,identifier/"__based"=s63,identifier/"__restrict"=s165,OperatorName=s26,identifier=s153,"*"=s179,"&&"=s22,"&"=s22 | Identifier=s181,NamespaceIdentifier=s156,TemplateType=s156,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s156,MsBasedModifier=s18,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,typeQualifier+=s160,msPointerModifier+=s161,typeQualifier=s159,declarator=s162
180: ParenthesizedDeclarator -> "(" · declarator ")"
  "("=s180,DestructorName=s26,"::"=s178,"["=s182,identifier/"__based"=s63,OperatorName=s26,identifier=s153,"*"=s179,"&&"=s22,"&"=s22 | Identifier=s181,NamespaceIdentifier=s156,TemplateType=s156,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s156,MsBasedModifier=s18,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,declarator=s173
181: TemplateFunction -> Identifier · TemplateArgumentList,TemplateFunction -> ScopedIdentifier · TemplateArgumentList,declarator -> Identifier ·,declarator -> ScopedIdentifier ·
  "<"=s185,"("=declarator(1),"["=declarator(1),","=declarator(1),"{"=declarator(1),";"=declarator(1),"="=declarator(1),")"=declarator(1),":"=declarator(1),templateArgsEndFallback=declarator(1),templateArgsEnd=declarator(1) | TemplateArgumentList=s184
182: StructuredBindingDeclarator -> "[" · commaSep1<Identifier> "]"
  identifier=s264 | Identifier=s403,commaSep1<Identifier>=s189
183: TemplateType -> TypeIdentifier · TemplateArgumentList,TemplateType -> ScopedTypeIdentifier · TemplateArgumentList
  "<"=s185 | TemplateArgumentList=s223
184: TemplateFunction -> Identifier TemplateArgumentList ·,TemplateFunction -> ScopedIdentifier TemplateArgumentList ·
  always TemplateFunction(2)
185: TemplateArgumentList -> "<" · commaSep<_anon[@dynamicPrecedence=3] { TypeDescriptor } | ParameterPackExpansion[@dynamicPrecedence=2] { TypeDescriptor "..." } | _anon[@dynamicPrecedence=1] { expression }> templateArgsEnd,TemplateArgumentList -> "<" · commaSep<_anon[@dynamicPrecedence=3] { TypeDescriptor } | ParameterPackExpansion[@dynamicPrecedence=2] { TypeDescriptor "..." } | _anon[@dynamicPrecedence=1] { expression }> templateArgsEndFallback
  RawString=s35,"("=s190,identifier/"bool"=s57,"::"=s1069,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s1019,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"typename"=s1027,identifier/"class"=s1026,identifier/"delete"=s93,identifier/"union"=s1021,identifier/"enum"=s1023,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s1061,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54,templateArgsEndFallback=commaSep<_anon[@dynamicPrecedence=3] { TypeDescriptor } | ParameterPackExpansion[@dynamicPrecedence=2] { TypeDescriptor "..." } | _anon[@dynamicPrecedence=1] { expression }>(0),templateArgsEnd=commaSep<_anon[@dynamicPrecedence=3] { TypeDescriptor } | ParameterPackExpansion[@dynamicPrecedence=2] { TypeDescriptor "..." } | _anon[@dynamicPrecedence=1] { expression }>(0) | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s1202,TemplateType=s1211,TypeIdentifier=s49,ScopedTypeIdentifier=s49,ScopedNamespaceIdentifier=s1205,TypeDescriptor=s405,StructSpecifier=s48,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,ParameterPackExpansion=s406,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,typeQualifier+=s172,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,expression=s404,commaSep<_anon[@dynamicPrecedence=3] { TypeDescriptor } | ParameterPackExpansion[@dynamicPrecedence=2] { TypeDescriptor "..." } | _anon[@dynamicPrecedence=1] { expression }>=s407,_anon=s406,typeQualifier=s159,typeSpecifier=s175,_anon-1=s406
186: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,commaSep1<expression> -> expression ·,commaSep1<expression> -> expression · ("," expression)+,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,","=s408,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112,"]"=commaSep1<expression>(1) | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118,("," expression)+=s409
187: TemplateFunction -> Identifier · TemplateArgumentList,commaSep1<Identifier> -> Identifier ·,commaSep1<Identifier> -> Identifier · ("," Identifier)+,AssignmentExpression -> Identifier · UpdateOp expression,AssignmentExpression -> Identifier · "=" expression,expression -> Identifier ·
  "<"=s185,","=s410,UpdateOp=s135,"="=s135,"("=expression(1),","=expression(1),"["=expression(1),"]"=expression(1),"]"=commaSep1<Identifier>(1),incDec=expression(1),ArithOp<"+" | "-">=expression(1),ArithOp<"/" | "%">=expression(1),BitOp<"|">=expression(1),BitOp<"^">=expression(1),CompareOp<"==" | "!=">=expression(1),CompareOp<"<=" | ">=">=expression(1),"<"/"<"=expression(1),templateArgsEnd/">"=expression(1),BitOp<"<<" | ">>">=expression(1),"?"=expression(1),"."=expression(1),"->"=expression(1),"..."=expression(1),"*"=expression(1),"||"=expression(1),"&&"=expression(1),"&"=expression(1) | TemplateArgumentList=s184,("," Identifier)+=s411
188: TemplateFunction -> ScopedIdentifier · TemplateArgumentList,expression -> ScopedIdentifier ·
  "<"=s185,"("=expression(1),","=expression(1),"["=expression(1),"]"=expression(1),incDec=expression(1),ArithOp<"+" | "-">=expression(1),ArithOp<"/" | "%">=expression(1),BitOp<"|">=expression(1),BitOp<"^">=expression(1),CompareOp<"==" | "!=">=expression(1),CompareOp<"<=" | ">=">=expression(1),"<"/"<"=expression(1),templateArgsEnd/">"=expression(1),BitOp<"<<" | ">>">=expression(1),"?"=expression(1),"."=expression(1),"->"=expression(1),"..."=expression(1),"*"=expression(1),"||"=expression(1),"&&"=expression(1),"&"=expression(1),";"=expression(1),":"=expression(1),")"=expression(1),"}"=expression(1),UpdateOp=expression(1),"="=expression(1),templateArgsEndFallback=expression(1),templateArgsEnd=expression(1) | TemplateArgumentList=s184
189: StructuredBindingDeclarator -> "[" commaSep1<Identifier> · "]"
  "]"=s412
190: ParenthesizedExpression -> "(" · expression ")",ParenthesizedExpression -> "(" · CommaExpression ")",CastExpression -> "(" · TypeDescriptor ")" expression,CompoundLiteralExpression -> "(" · TypeDescriptor ")" InitializerList
  RawString=s35,"("=s190,identifier/"bool"=s57,"::"=s1067,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s1019,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"typename"=s1027,identifier/"class"=s1026,identifier/"delete"=s93,identifier/"union"=s1021,identifier/"enum"=s1023,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s1057,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s1197,TemplateType=s171,TypeIdentifier=s49,ScopedTypeIdentifier=s49,ScopedNamespaceIdentifier=s1204,TypeDescriptor=s176,StructSpecifier=s48,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,CommaExpression=s174,ParenthesizedExpression=s50,ConcatenatedString=s56,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,typeQualifier+=s172,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,expression=s170,typeQualifier=s159,typeSpecifier=s175
191: PointerExpression -> "*" · expression,PointerExpression -> "&" · expression
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s154
192: PointerExpression -> "&" · expression,LambdaCaptureSpecifier -> "[" "&" · "]",LambdaCaptureSpecifier -> "[" "&" · "," commaSep1<expression> "]"
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,","=s414,"["=s193,"]"=s413,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s154
193: LambdaCaptureSpecifier -> "[" · "=" "]",LambdaCaptureSpecifier -> "[" · "=" "," commaSep1<expression> "]",LambdaCaptureSpecifier -> "[" · "&" "]",LambdaCaptureSpecifier -> "[" · "&" "," commaSep1<expression> "]",LambdaCaptureSpecifier -> "[" · commaSep1<expression> "]",LambdaCaptureSpecifier -> "[" · "]"
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s193,"]"=s196,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s192,charLiteralStart=s9,"="=s194,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s186,commaSep1<expression>=s195
194: LambdaCaptureSpecifier -> "[" "=" · "]",LambdaCaptureSpecifier -> "[" "=" · "," commaSep1<expression> "]"
  ","=s414,"]"=s413
195: LambdaCaptureSpecifier -> "[" commaSep1<expression> · "]"
  "]"=s413
196: LambdaCaptureSpecifier -> "[" "]" ·
  always LambdaCaptureSpecifier(2)
197: FieldInitializerList -> ":" · commaSep1<FieldInitializer>
  "::"=s1222,identifier=s1116 | FieldIdentifier=s415,ScopedFieldIdentifier=s415,NamespaceIdentifier=s1223,TemplateType=s1223,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s1223,FieldInitializer=s416,commaSep1<FieldInitializer>=s417
198: constructorOrDestructorDefinition -> FunctionDeclarator-1 CompoundStatement ·,constructorOrDestructorDefinition -> FunctionDeclarator-1 DefaultMethodClause ·,constructorOrDestructorDefinition -> FunctionDeclarator-1 DeleteMethodClause ·
  always constructorOrDestructorDefinition(2)
199: constructorOrDestructorDefinition -> FunctionDeclarator-1 FieldInitializerList · CompoundStatement,constructorOrDestructorDefinition -> FunctionDeclarator-1 FieldInitializerList · DefaultMethodClause,constructorOrDestructorDefinition -> FunctionDeclarator-1 FieldInitializerList · DeleteMethodClause
  "{"=s45,"="=s200 | CompoundStatement=s418,DefaultMethodClause=s418,DeleteMethodClause=s418
200: DefaultMethodClause -> "=" · identifier/"default" ";",DeleteMethodClause -> "=" · identifier/"delete" ";"
  identifier/"default"=s419,identifier/"delete"=s420
201: FunctionDeclarator-1 -> declarator · ParameterList,FunctionDeclarator-1 -> declarator · ParameterList ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+ ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,ArrayDeclarator -> declarator · "[" "]",ArrayDeclarator -> declarator · "[" expression "]",ArrayDeclarator -> declarator · "[" "*" "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "]",ArrayDeclarator -> declarator · "[" typeQualifier+ expression "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "*" "]",InitDeclarator -> declarator · "=" InitializerList,InitDeclarator -> declarator · "=" expression,InitDeclarator -> declarator · ArgumentList,InitDeclarator -> declarator · InitializerList,commaSep1<declarator | InitDeclarator> -> declarator ·,commaSep1<declarator | InitDeclarator> -> declarator · ("," (declarator | InitDeclarator))+,FunctionDefinition -> declarationSpecifiers declarator · CompoundStatement
  "("=s421,","=s425,"{"=s422,"["=s168,"="=s423,";"=commaSep1<declarator | InitDeclarator>(1) | ArgumentList=s424,ParameterList=s1300,InitializerList=s424,CompoundStatement=s427,("," (declarator | InitDeclarator))+=s426
202: commaSep1<declarator | InitDeclarator> -> InitDeclarator ·,commaSep1<declarator | InitDeclarator> -> InitDeclarator · ("," (declarator | InitDeclarator))+
  ","=s425,";"=commaSep1<declarator | InitDeclarator>(1) | ("," (declarator | InitDeclarator))+=s426
203: Declaration -> declarationSpecifiers commaSep1<declarator | InitDeclarator> · ";"
  ";"=s428
204: LabeledStatement -> StatementIdentifier ":" · statement
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"{"=s45,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"throw"=s78,identifier/"case"=s75,identifier/"default"=s76,identifier/"if"=s65,identifier/"switch"=s66,identifier/"do"=s67,identifier/"while"=s68,identifier/"for"=s69,identifier/"return"=s70,identifier/"break"=s71,identifier/"continue"=s72,identifier/"goto"=s73,identifier/"try"=s77,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s1017,"*"=s191,"&"=s191,";"=s31,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,CompoundStatement=s33,CaseStatement=s34,LabeledStatement=s33,StatementIdentifier=s30,ExpressionStatement=s33,CommaExpression=s32,IfStatement=s33,SwitchStatement=s33,DoStatement=s33,ParenthesizedExpression=s50,WhileStatement=s33,ForStatement=s33,ReturnStatement=s33,BreakStatement=s33,ContinueStatement=s33,GotoStatement=s33,ForRangeLoop=s34,TryStatement=s34,ThrowStatement=s34,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s4,statement=s429,nonCaseStatement=s34
205: (RawString | String)+ -> RawString ·,(RawString | String)+ -> String ·
  always (RawString | String)+(1)
206: (RawString | String)+ -> (RawString | String)+ · (RawString | String)+,ConcatenatedString -> RawString (RawString | String)+ ·,ConcatenatedString -> String (RawString | String)+ ·
  RawString=s205,stringLiteralStart=s2,"("=ConcatenatedString(2),","=ConcatenatedString(2),"["=ConcatenatedString(2),incDec=ConcatenatedString(2),ArithOp<"+" | "-">=ConcatenatedString(2),ArithOp<"/" | "%">=ConcatenatedString(2),BitOp<"|">=ConcatenatedString(2),BitOp<"^">=ConcatenatedString(2),CompareOp<"==" | "!=">=ConcatenatedString(2),CompareOp<"<=" | ">=">=ConcatenatedString(2),"<"/"<"=ConcatenatedString(2),templateArgsEnd/">"=ConcatenatedString(2),BitOp<"<<" | ">>">=ConcatenatedString(2),"?"=ConcatenatedString(2),"."=ConcatenatedString(2),"->"=ConcatenatedString(2),"..."=ConcatenatedString(2),"*"=ConcatenatedString(2),"||"=ConcatenatedString(2),"&&"=ConcatenatedString(2),"&"=ConcatenatedString(2),";"=ConcatenatedString(2),UpdateOp=ConcatenatedString(2),"="=ConcatenatedString(2),")"=ConcatenatedString(2),"]"=ConcatenatedString(2),":"=ConcatenatedString(2),"}"=ConcatenatedString(2),templateArgsEndFallback=ConcatenatedString(2),templateArgsEnd=ConcatenatedString(2) | String=s205,(RawString | String)+=s430
207: ScopedNamespaceIdentifier -> "::" · NamespaceIdentifier-1,ScopedTypeIdentifier -> "::" · TypeIdentifier-1,ScopedIdentifier -> "::" · Identifier-1,ScopedIdentifier -> "::" · OperatorName,ScopedIdentifier -> "::" · DestructorName,OperatorCast -> "::" · scopedIdentifier/"operator" declarationSpecifiers abstractDeclarator
  DestructorName=s128,OperatorName=s128,scopedIdentifier/"operator"=s129,scopedIdentifier=s1043 | NamespaceIdentifier-1=s126,TypeIdentifier-1=s127,Identifier-1=s128
208: ScopedNamespaceIdentifier -> NamespaceIdentifier · "::" NamespaceIdentifier-1,ScopedNamespaceIdentifier -> TemplateType · "::" NamespaceIdentifier-1,ScopedNamespaceIdentifier -> ScopedNamespaceIdentifier · "::" NamespaceIdentifier-1,ScopedTypeIdentifier -> NamespaceIdentifier · "::" TypeIdentifier-1,ScopedTypeIdentifier -> TemplateType · "::" TypeIdentifier-1,ScopedTypeIdentifier -> ScopedNamespaceIdentifier · "::" TypeIdentifier-1,ScopedIdentifier -> NamespaceIdentifier · "::" Identifier-1,ScopedIdentifier -> NamespaceIdentifier · "::" OperatorName,ScopedIdentifier -> NamespaceIdentifier · "::" DestructorName,ScopedIdentifier -> TemplateType · "::" Identifier-1,ScopedIdentifier -> TemplateType · "::" OperatorName,ScopedIdentifier -> TemplateType · "::" DestructorName,ScopedIdentifier -> ScopedNamespaceIdentifier · "::" Identifier-1,ScopedIdentifier -> ScopedNamespaceIdentifier · "::" OperatorName,ScopedIdentifier -> ScopedNamespaceIdentifier · "::" DestructorName,OperatorCast -> NamespaceIdentifier · "::" scopedIdentifier/"operator" declarationSpecifiers abstractDeclarator,OperatorCast -> TemplateType · "::" scopedIdentifier/"operator" declarationSpecifiers abstractDeclarator,OperatorCast -> ScopedNamespaceIdentifier · "::" scopedIdentifier/"operator" declarationSpecifiers abstractDeclarator
  "::"=s1053
209: declarator -> FunctionDeclarator-1 ·,constructorOrDestructorDefinition -> ExplicitFunctionSpecifier FunctionDeclarator-1 · CompoundStatement,constructorOrDestructorDefinition -> ExplicitFunctionSpecifier FunctionDeclarator-1 · DefaultMethodClause,constructorOrDestructorDefinition -> ExplicitFunctionSpecifier FunctionDeclarator-1 · DeleteMethodClause,constructorOrDestructorDefinition -> ExplicitFunctionSpecifier FunctionDeclarator-1 · FieldInitializerList CompoundStatement,constructorOrDestructorDefinition -> ExplicitFunctionSpecifier FunctionDeclarator-1 · FieldInitializerList DefaultMethodClause,constructorOrDestructorDefinition -> ExplicitFunctionSpecifier FunctionDeclarator-1 · FieldInitializerList DeleteMethodClause,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ FunctionDeclarator-1 · CompoundStatement,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ FunctionDeclarator-1 · DefaultMethodClause,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ FunctionDeclarator-1 · DeleteMethodClause,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ FunctionDeclarator-1 · FieldInitializerList CompoundStatement,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ FunctionDeclarator-1 · FieldInitializerList DefaultMethodClause,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ FunctionDeclarator-1 · FieldInitializerList DeleteMethodClause,constructorOrDestructorDefinition -> identifier/"virtual" FunctionDeclarator-1 · CompoundStatement,constructorOrDestructorDefinition -> identifier/"virtual" FunctionDeclarator-1 · DefaultMethodClause,constructorOrDestructorDefinition -> identifier/"virtual" FunctionDeclarator-1 · DeleteMethodClause,constructorOrDestructorDefinition -> identifier/"virtual" FunctionDeclarator-1 · FieldInitializerList CompoundStatement,constructorOrDestructorDefinition -> identifier/"virtual" FunctionDeclarator-1 · FieldInitializerList DefaultMethodClause,constructorOrDestructorDefinition -> identifier/"virtual" FunctionDeclarator-1 · FieldInitializerList DeleteMethodClause
  "{"=s45,":"=s197,"="=s200,"("=declarator(1),"["=declarator(1) | CompoundStatement=s418,FieldInitializerList=s431,DefaultMethodClause=s418,DeleteMethodClause=s418
210: (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ -> storageClassSpecifier ·,(storageClassSpecifier | typeQualifier | AttributeSpecifier)+ -> typeQualifier ·,(storageClassSpecifier | typeQualifier | AttributeSpecifier)+ -> AttributeSpecifier ·
  always (storageClassSpecifier | typeQualifier | AttributeSpecifier)+(1)
211: (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ · (storageClassSpecifier | typeQualifier | AttributeSpecifier)+,(storageClassSpecifier | typeQualifier | AttributeSpecifier)+ -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ ·
  always (storageClassSpecifier | typeQualifier | AttributeSpecifier)+(2)
212: constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ ExplicitFunctionSpecifier · FunctionDeclarator-1 CompoundStatement,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ ExplicitFunctionSpecifier · FunctionDeclarator-1 DefaultMethodClause,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ ExplicitFunctionSpecifier · FunctionDeclarator-1 DeleteMethodClause,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ ExplicitFunctionSpecifier · FunctionDeclarator-1 FieldInitializerList CompoundStatement,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ ExplicitFunctionSpecifier · FunctionDeclarator-1 FieldInitializerList DefaultMethodClause,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ ExplicitFunctionSpecifier · FunctionDeclarator-1 FieldInitializerList DeleteMethodClause,operatorCastDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ ExplicitFunctionSpecifier · OperatorCast CompoundStatement,operatorCastDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ ExplicitFunctionSpecifier · OperatorCast DefaultMethodClause,operatorCastDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ ExplicitFunctionSpecifier · OperatorCast DeleteMethodClause,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ identifier/"virtual" · FunctionDeclarator-1 CompoundStatement,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ identifier/"virtual" · FunctionDeclarator-1 DefaultMethodClause,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ identifier/"virtual" · FunctionDeclarator-1 DeleteMethodClause,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ identifier/"virtual" · FunctionDeclarator-1 FieldInitializerList CompoundStatement,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ identifier/"virtual" · FunctionDeclarator-1 FieldInitializerList DefaultMethodClause,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ identifier/"virtual" · FunctionDeclarator-1 FieldInitializerList DeleteMethodClause,operatorCastDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ identifier/"virtual" · OperatorCast CompoundStatement,operatorCastDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ identifier/"virtual" · OperatorCast DefaultMethodClause,operatorCastDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ identifier/"virtual" · OperatorCast DeleteMethodClause
  "("=s180,DestructorName=s26,"::"=s207,"["=s182,identifier/"__based"=s63,OperatorName=s26,identifier/"operator"=s83,identifier=s153,"*"=s179,"&&"=s22,"&"=s22 | Identifier=s181,NamespaceIdentifier=s208,TemplateType=s208,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s208,MsBasedModifier=s18,PointerDeclarator-1=s26,FunctionDeclarator-1=s432,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,OperatorCast=s433,declarator=s19
213: operatorCastDefinition -> ExplicitFunctionSpecifier OperatorCast · CompoundStatement,operatorCastDefinition -> ExplicitFunctionSpecifier OperatorCast · DefaultMethodClause,operatorCastDefinition -> ExplicitFunctionSpecifier OperatorCast · DeleteMethodClause,operatorCastDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ OperatorCast · CompoundStatement,operatorCastDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ OperatorCast · DefaultMethodClause,operatorCastDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ OperatorCast · DeleteMethodClause,operatorCastDefinition -> identifier/"virtual" OperatorCast · CompoundStatement,operatorCastDefinition -> identifier/"virtual" OperatorCast · DefaultMethodClause,operatorCastDefinition -> identifier/"virtual" OperatorCast · DeleteMethodClause
  "{"=s45,"="=s200 | CompoundStatement=s434,DefaultMethodClause=s434,DeleteMethodClause=s434
214: operatorCastDefinition -> ExplicitFunctionSpecifier OperatorCast · CompoundStatement,operatorCastDefinition -> ExplicitFunctionSpecifier OperatorCast · DefaultMethodClause,operatorCastDefinition -> ExplicitFunctionSpecifier OperatorCast · DeleteMethodClause,operatorCastDeclaration -> ExplicitFunctionSpecifier OperatorCast · ";",operatorCastDeclaration -> ExplicitFunctionSpecifier OperatorCast · "=" expression ";",operatorCastDefinition -> identifier/"virtual" OperatorCast · CompoundStatement,operatorCastDefinition -> identifier/"virtual" OperatorCast · DefaultMethodClause,operatorCastDefinition -> identifier/"virtual" OperatorCast · DeleteMethodClause,operatorCastDeclaration -> identifier/"virtual" OperatorCast · ";",operatorCastDeclaration -> identifier/"virtual" OperatorCast · "=" expression ";"
  "{"=s45,";"=s435,"="=s436 | CompoundStatement=s434,DefaultMethodClause=s434,DeleteMethodClause=s434
215: operatorCastDefinition -> OperatorCast CompoundStatement ·,operatorCastDefinition -> OperatorCast DefaultMethodClause ·,operatorCastDefinition -> OperatorCast DeleteMethodClause ·
  always operatorCastDefinition(2)
216: operatorCastDeclaration -> OperatorCast ";" ·
  always operatorCastDeclaration(2)
217: operatorCastDeclaration -> OperatorCast "=" · expression ";",DefaultMethodClause -> "=" · identifier/"default" ";",DeleteMethodClause -> "=" · identifier/"delete" ";"
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"default"=s419,identifier/"delete"=s438,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s437
218: topLevelItem+ -> topLevelItem+ · topLevelItem+,topLevelItem+ -> topLevelItem+ topLevelItem+ ·
  always topLevelItem+(2)
219: topLevelItem+ -> topLevelItem+ · topLevelItem+,CompoundStatement -> "{" topLevelItem+ · "}"
  RawString=s35,"("=s20,identifier/"bool"=s57,DestructorName=s26,"::"=s5,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s85,identifier/"__declspec"=s59,"{"=s45,"}"=s439,"["=s25,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"virtual"=s37,identifier/"extern"=s60,identifier/"static"=s61,identifier/"register"=s61,identifier/"inline"=s61,identifier/"__attribute__"=s62,identifier/"__based"=s63,identifier/"throw"=s78,OperatorName=s26,identifier/"template"=s81,identifier/"typename"=s89,identifier/"class"=s88,identifier/"using"=s64,identifier/"__cdecl"=s84,identifier/"case"=s75,identifier/"default"=s76,identifier/"if"=s65,identifier/"switch"=s66,identifier/"do"=s67,identifier/"while"=s68,identifier/"for"=s69,identifier/"return"=s70,identifier/"break"=s71,identifier/"continue"=s72,identifier/"goto"=s73,identifier/"typedef"=s74,identifier/"try"=s77,identifier/"namespace"=s79,identifier/"static_assert"=s80,identifier/"explicit"=s82,identifier/"delete"=s93,identifier/"operator"=s83,identifier/"union"=s86,identifier/"enum"=s87,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s3,"[["=s10,"*"=s17,"&&"=s22,"&"=s21,";"=s31,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s23,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s6,TemplateType=s7,TypeIdentifier=s49,ScopedTypeIdentifier=s49,ScopedNamespaceIdentifier=s8,StructSpecifier=s48,MsDeclspecModifier=s14,Attribute=s11,CharLiteral=s56,AttributeSpecifier=s13,MsBasedModifier=s18,PointerDeclarator-1=s26,FunctionDeclarator-1=s27,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s24,TemplateFunction=s28,StructuredBindingDeclarator=s26,TemplateDeclaration=s42,AliasDeclaration=s42,Declaration=s42,FunctionDefinition=s42,CompoundStatement=s33,LinkageSpecification=s42,CaseStatement=s34,LabeledStatement=s33,StatementIdentifier=s30,ExpressionStatement=s33,CommaExpression=s32,IfStatement=s33,SwitchStatement=s33,DoStatement=s33,ParenthesizedExpression=s50,WhileStatement=s33,ForStatement=s33,ReturnStatement=s33,BreakStatement=s33,ContinueStatement=s33,GotoStatement=s33,TypeDefinition=s42,ForRangeLoop=s34,TryStatement=s34,ThrowStatement=s34,NamespaceDefinition=s42,UsingDeclaration=s42,StaticAssertDeclaration=s42,ConcatenatedString=s56,TemplateInstantiation=s42,FunctionDefinition-1=s42,ExplicitFunctionSpecifier=s37,FunctionDefinition-2=s42,OperatorCast=s39,Declaration-2=s42,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,Attribute+=s12,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+=s15,topLevelItem+=s218,(storageClassSpecifier | typeQualifier | AttributeSpecifier)+=s36,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,expression=s4,typeQualifier=s13,typeSpecifier=s16,declarationSpecifiers=s29,storageClassSpecifier=s13,declarator=s19,emptyDeclaration=s42,topLevelItem=s43,statement=s42,nonCaseStatement=s34,constructorOrDestructorDefinition=s38,operatorCastDefinition=s40,operatorCastDeclaration=s41
220: CompoundStatement -> "{" "}" ·
  always CompoundStatement(2)
221: @specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+ -> @specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+ · @specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+ -> @specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+ @specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+ ·
  always @specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+(2)
222: SizedTypeSpecifier -> @specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+ identifier/"bool" ·
  always SizedTypeSpecifier(2)
223: TemplateType -> TypeIdentifier TemplateArgumentList ·,TemplateType -> ScopedTypeIdentifier TemplateArgumentList ·
  always TemplateType(2)
224: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UnaryExpression -> LogicOp<"!"> expression ·,UnaryExpression -> ArithOp<"+" | "-"> expression ·,UnaryExpression -> BitOp<"~"> expression ·,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,"."=s108,"->"=s108,","=UnaryExpression(2),incDec=UnaryExpression(2),ArithOp<"+" | "-">=UnaryExpression(2),ArithOp<"/" | "%">=UnaryExpression(2),BitOp<"|">=UnaryExpression(2),BitOp<"^">=UnaryExpression(2),CompareOp<"==" | "!=">=UnaryExpression(2),CompareOp<"<=" | ">=">=UnaryExpression(2),"<"/"<"=UnaryExpression(2),templateArgsEnd/">"=UnaryExpression(2),BitOp<"<<" | ">>">=UnaryExpression(2),"?"=UnaryExpression(2),"..."=UnaryExpression(2),"*"=UnaryExpression(2),"||"=UnaryExpression(2),"&&"=UnaryExpression(2),"&"=UnaryExpression(2),";"=UnaryExpression(2),UpdateOp=UnaryExpression(2),"="=UnaryExpression(2),")"=UnaryExpression(2),"]"=UnaryExpression(2),":"=UnaryExpression(2),"}"=UnaryExpression(2),templateArgsEndFallback=UnaryExpression(2),templateArgsEnd=UnaryExpression(2) | ArgumentList=s105
225: TemplateFunction -> Identifier · TemplateArgumentList,AssignmentExpression -> Identifier · UpdateOp expression,AssignmentExpression -> Identifier · "=" expression,expression -> Identifier ·
  "<"=s185,UpdateOp=s135,"="=s135,"("=expression(1),","=expression(1),"["=expression(1),incDec=expression(1),ArithOp<"+" | "-">=expression(1),ArithOp<"/" | "%">=expression(1),BitOp<"|">=expression(1),BitOp<"^">=expression(1),CompareOp<"==" | "!=">=expression(1),CompareOp<"<=" | ">=">=expression(1),"<"/"<"=expression(1),templateArgsEnd/">"=expression(1),BitOp<"<<" | ">>">=expression(1),"?"=expression(1),"."=expression(1),"->"=expression(1),"..."=expression(1),"*"=expression(1),"||"=expression(1),"&&"=expression(1),"&"=expression(1),";"=expression(1),"]"=expression(1),")"=expression(1),"}"=expression(1),templateArgsEndFallback=expression(1),templateArgsEnd=expression(1) | TemplateArgumentList=s184
226: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> incDec expression ·,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,incDec=s122,"."=s108,"->"=s108,","=UpdateExpression(2),ArithOp<"+" | "-">=UpdateExpression(2),ArithOp<"/" | "%">=UpdateExpression(2),BitOp<"|">=UpdateExpression(2),BitOp<"^">=UpdateExpression(2),CompareOp<"==" | "!=">=UpdateExpression(2),CompareOp<"<=" | ">=">=UpdateExpression(2),"<"/"<"=UpdateExpression(2),templateArgsEnd/">"=UpdateExpression(2),BitOp<"<<" | ">>">=UpdateExpression(2),"?"=UpdateExpression(2),"..."=UpdateExpression(2),"*"=UpdateExpression(2),"||"=UpdateExpression(2),"&&"=UpdateExpression(2),"&"=UpdateExpression(2),";"=UpdateExpression(2),UpdateOp=UpdateExpression(2),"="=UpdateExpression(2),")"=UpdateExpression(2),"]"=UpdateExpression(2),"}"=UpdateExpression(2),templateArgsEndFallback=UpdateExpression(2),templateArgsEnd=UpdateExpression(2) | ArgumentList=s105
227: AbstractPointerDeclarator -> "*" ·,AbstractPointerDeclarator -> "*" · abstractDeclarator,AbstractPointerDeclarator -> "*" · (typeQualifier)+,AbstractPointerDeclarator -> "*" · (typeQualifier)+ abstractDeclarator
  "("=s231,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s230,"*"=s227,"&&"=s232,"&"=s232,")"=AbstractPointerDeclarator(1),templateArgsEndFallback=AbstractPointerDeclarator(1),","=AbstractPointerDeclarator(1),templateArgsEnd=AbstractPointerDeclarator(1),"..."=AbstractPointerDeclarator(1),";"=AbstractPointerDeclarator(1) | ParameterList=s1284,AbstractPointerDeclarator=s233,AbstractFunctionDeclarator=s233,AbstractArrayDeclarator=s233,AbstractParenthesizedDeclarator=s233,AbstractReferenceDeclarator=s233,(typeQualifier)+=s441,typeQualifier=s440,abstractDeclarator=s442
228: AbstractFunctionDeclarator -> ParameterList ·,AbstractFunctionDeclarator -> ParameterList · TrailingReturnType,AbstractFunctionDeclarator -> ParameterList · (typeQualifier | Noexcept | ThrowSpecifier)+,AbstractFunctionDeclarator -> ParameterList · (typeQualifier | Noexcept | ThrowSpecifier)+ TrailingReturnType
  identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"noexcept"=s386,identifier/"throw"=s387,"->"=s1141,"("=AbstractFunctionDeclarator(1),"{"=AbstractFunctionDeclarator(1),"["=AbstractFunctionDeclarator(1),";"=AbstractFunctionDeclarator(1),"="=AbstractFunctionDeclarator(1) | Noexcept=s443,ThrowSpecifier=s443,TrailingReturnType=s445,(typeQualifier | Noexcept | ThrowSpecifier)+=s444,typeQualifier=s443
229: AbstractFunctionDeclarator -> abstractDeclarator · ParameterList,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList TrailingReturnType,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+ TrailingReturnType,AbstractArrayDeclarator -> abstractDeclarator · "[" "]",AbstractArrayDeclarator -> abstractDeclarator · "[" expression "]",AbstractArrayDeclarator -> abstractDeclarator · "[" "*" "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ expression "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ "*" "]"
  "("=s169,"["=s447 | ParameterList=s446
230: AbstractArrayDeclarator -> "[" · "]",AbstractArrayDeclarator -> "[" · expression "]",AbstractArrayDeclarator -> "[" · "*" "]",AbstractArrayDeclarator -> "[" · typeQualifier+ "]",AbstractArrayDeclarator -> "[" · typeQualifier+ expression "]",AbstractArrayDeclarator -> "[" · typeQualifier+ "*" "]"
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s193,"]"=s450,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s451,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,typeQualifier+=s449,expression=s448,typeQualifier=s159
231: AbstractParenthesizedDeclarator -> "(" · abstractDeclarator ")",ParameterList -> "(" · commaSep<ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "..."> ")"
  "("=s231,identifier/"bool"=s48,"::"=s141,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s85,identifier/"__declspec"=s59,"["=s230,identifier/"extern"=s61,identifier/"static"=s61,identifier/"register"=s61,identifier/"inline"=s61,identifier/"__attribute__"=s62,identifier/"typename"=s89,identifier/"class"=s88,identifier/"union"=s86,identifier/"enum"=s87,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140,"..."=s394,"[["=s10,"*"=s227,"&&"=s232,"&"=s232,")"=commaSep<ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "...">(0) | NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,MsDeclspecModifier=s14,Attribute=s11,AttributeSpecifier=s14,ParameterList=s1284,ParameterDeclaration=s394,AbstractPointerDeclarator=s233,AbstractFunctionDeclarator=s233,AbstractArrayDeclarator=s233,AbstractParenthesizedDeclarator=s233,AbstractReferenceDeclarator=s233,OptionalParameterDeclaration=s394,VariadicParameterDeclaration=s394,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,Attribute+=s392,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+=s15,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeQualifier=s14,typeSpecifier=s270,declarationSpecifiers=s393,storageClassSpecifier=s14,commaSep<ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "...">=s395,abstractDeclarator=s452
232: AbstractReferenceDeclarator -> "&" ·,AbstractReferenceDeclarator -> "&" · abstractDeclarator,AbstractReferenceDeclarator -> "&&" ·,AbstractReferenceDeclarator -> "&&" · abstractDeclarator
  "("=s231,"["=s230,"*"=s227,"&&"=s232,"&"=s232,")"=AbstractReferenceDeclarator(1),templateArgsEndFallback=AbstractReferenceDeclarator(1),","=AbstractReferenceDeclarator(1),templateArgsEnd=AbstractReferenceDeclarator(1),"..."=AbstractReferenceDeclarator(1),";"=AbstractReferenceDeclarator(1) | ParameterList=s1284,AbstractPointerDeclarator=s233,AbstractFunctionDeclarator=s233,AbstractArrayDeclarator=s233,AbstractParenthesizedDeclarator=s233,AbstractReferenceDeclarator=s233,abstractDeclarator=s453
233: abstractDeclarator -> AbstractPointerDeclarator ·,abstractDeclarator -> AbstractFunctionDeclarator ·,abstractDeclarator -> AbstractArrayDeclarator ·,abstractDeclarator -> AbstractParenthesizedDeclarator ·,abstractDeclarator -> AbstractReferenceDeclarator ·
  always abstractDeclarator(1)
234: abstractDeclarator -> AbstractFunctionDeclarator ·,LambdaExpression -> LambdaCaptureSpecifier AbstractFunctionDeclarator · CompoundStatement
  "{"=s45,"("=abstractDeclarator(1),"["=abstractDeclarator(1) | CompoundStatement=s454
235: LambdaExpression -> LambdaCaptureSpecifier CompoundStatement ·
  always LambdaExpression(2)
236: MsDeclspecModifier -> identifier/"__declspec" "(" · Identifier ")"
  identifier=s264 | Identifier=s455
237: LinkageSpecification -> identifier/"extern" String · FunctionDefinition,LinkageSpecification -> identifier/"extern" String · Declaration,LinkageSpecification -> identifier/"extern" String · DeclarationList
  identifier/"bool"=s48,"::"=s141,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s85,identifier/"__declspec"=s59,"{"=s265,identifier/"extern"=s61,identifier/"static"=s61,identifier/"register"=s61,identifier/"inline"=s61,identifier/"__attribute__"=s62,identifier/"typename"=s89,identifier/"class"=s88,identifier/"__cdecl"=s84,identifier/"union"=s86,identifier/"enum"=s87,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140,"[["=s10 | NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,MsDeclspecModifier=s14,Attribute=s11,AttributeSpecifier=s14,Declaration=s457,FunctionDefinition=s457,DeclarationList=s457,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,Attribute+=s456,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+=s15,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeQualifier=s14,typeSpecifier=s270,declarationSpecifiers=s29,storageClassSpecifier=s14
238: AttributeSpecifier -> identifier/"__attribute__" "(" · ArgumentList ")"
  "("=s124 | ArgumentList=s458
239: MsBasedModifier -> identifier/"__based" ArgumentList ·
  always MsBasedModifier(2)
240: TemplateType -> TypeIdentifier · TemplateArgumentList,AliasDeclaration -> identifier/"using" TypeIdentifier · "=" TypeDescriptor ";"
  "<"=s185,"="=s459 | TemplateArgumentList=s223
241: UsingDeclaration -> identifier/"using" Identifier · ";",UsingDeclaration -> identifier/"using" ScopedIdentifier · ";"
  ";"=s460
242: UsingDeclaration -> identifier/"using" identifier/"namespace" · Identifier ";",UsingDeclaration -> identifier/"using" identifier/"namespace" · ScopedIdentifier ";"
  "::"=s1076,identifier=s1059 | Identifier=s461,NamespaceIdentifier=s1199,TemplateType=s1199,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s1199,ScopedIdentifier=s461
243: ConditionClause -> "(" · expression ")",ConditionClause -> "(" · CommaExpression ")",ConditionClause -> "(" · Declaration expression ")",ConditionClause -> "(" · Declaration CommaExpression ")",ConditionClause -> "(" · ExpressionStatement expression ")",ConditionClause -> "(" · ExpressionStatement CommaExpression ")",ConditionClause -> "(" · Declaration-1 ")"
  RawString=s35,"("=s190,identifier/"bool"=s57,"::"=s1070,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s85,identifier/"__declspec"=s59,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"extern"=s61,identifier/"static"=s61,identifier/"register"=s61,identifier/"inline"=s61,identifier/"__attribute__"=s62,identifier/"typename"=s89,identifier/"class"=s88,identifier/"delete"=s93,identifier/"union"=s86,identifier/"enum"=s87,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s1063,"[["=s10,"*"=s191,"&"=s191,";"=s31,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s1203,TemplateType=s1212,TypeIdentifier=s49,ScopedTypeIdentifier=s49,ScopedNamespaceIdentifier=s1206,StructSpecifier=s48,MsDeclspecModifier=s14,Attribute=s11,CharLiteral=s56,AttributeSpecifier=s14,ScopedIdentifier=s188,TemplateFunction=s56,Declaration=s466,ExpressionStatement=s466,CommaExpression=s465,Declaration-1=s467,ParenthesizedExpression=s50,ConcatenatedString=s56,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,Attribute+=s463,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+=s15,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,expression=s462,typeQualifier=s14,typeSpecifier=s270,declarationSpecifiers=s464,storageClassSpecifier=s14
244: IfStatement -> identifier/"if" ConditionClause · statement,IfStatement -> identifier/"if" ConditionClause · statement identifier/"else" statement
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"{"=s45,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"throw"=s78,identifier/"case"=s75,identifier/"default"=s76,identifier/"if"=s65,identifier/"switch"=s66,identifier/"do"=s67,identifier/"while"=s68,identifier/"for"=s69,identifier/"return"=s70,identifier/"break"=s71,identifier/"continue"=s72,identifier/"goto"=s73,identifier/"try"=s77,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s1017,"*"=s191,"&"=s191,";"=s31,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,CompoundStatement=s33,CaseStatement=s34,LabeledStatement=s33,StatementIdentifier=s30,ExpressionStatement=s33,CommaExpression=s32,IfStatement=s33,SwitchStatement=s33,DoStatement=s33,ParenthesizedExpression=s50,WhileStatement=s33,ForStatement=s33,ReturnStatement=s33,BreakStatement=s33,ContinueStatement=s33,GotoStatement=s33,ForRangeLoop=s34,TryStatement=s34,ThrowStatement=s34,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s4,statement=s468,nonCaseStatement=s34
245: IfStatement -> identifier/"if" identifier/"constexpr" · ConditionClause statement,IfStatement -> identifier/"if" identifier/"constexpr" · ConditionClause statement identifier/"else" statement
  "("=s243 | ConditionClause=s469
246: SwitchStatement -> identifier/"switch" ConditionClause · CompoundStatement
  "{"=s45 | CompoundStatement=s470
247: DoStatement -> identifier/"do" statement · identifier/"while" ParenthesizedExpression ";"
  identifier/"while"=s471
248: WhileStatement -> identifier/"while" ConditionClause · statement
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"{"=s45,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"throw"=s78,identifier/"case"=s75,identifier/"default"=s76,identifier/"if"=s65,identifier/"switch"=s66,identifier/"do"=s67,identifier/"while"=s68,identifier/"for"=s69,identifier/"return"=s70,identifier/"break"=s71,identifier/"continue"=s72,identifier/"goto"=s73,identifier/"try"=s77,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s1017,"*"=s191,"&"=s191,";"=s31,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,CompoundStatement=s33,CaseStatement=s34,LabeledStatement=s33,StatementIdentifier=s30,ExpressionStatement=s33,CommaExpression=s32,IfStatement=s33,SwitchStatement=s33,DoStatement=s33,ParenthesizedExpression=s50,WhileStatement=s33,ForStatement=s33,ReturnStatement=s33,BreakStatement=s33,ContinueStatement=s33,GotoStatement=s33,ForRangeLoop=s34,TryStatement=s34,ThrowStatement=s34,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s4,statement=s472,nonCaseStatement=s34
249: ForStatement -> identifier/"for" "(" · Declaration ";" ")" statement,ForStatement -> identifier/"for" "(" · Declaration ";" expression ")" statement,ForStatement -> identifier/"for" "(" · Declaration ";" CommaExpression ")" statement,ForStatement -> identifier/"for" "(" · Declaration expression ";" ")" statement,ForStatement -> identifier/"for" "(" · Declaration expression ";" expression ")" statement,ForStatement -> identifier/"for" "(" · Declaration expression ";" CommaExpression ")" statement,ForStatement -> identifier/"for" "(" · ";" ";" ")" statement,ForStatement -> identifier/"for" "(" · ";" ";" expression ")" statement,ForStatement -> identifier/"for" "(" · ";" ";" CommaExpression ")" statement,ForStatement -> identifier/"for" "(" · ";" expression ";" ")" statement,ForStatement -> identifier/"for" "(" · ";" expression ";" expression ")" statement,ForStatement -> identifier/"for" "(" · ";" expression ";" CommaExpression ")" statement,ForStatement -> identifier/"for" "(" · expression ";" ";" ")" statement,ForStatement -> identifier/"for" "(" · expression ";" ";" expression ")" statement,ForStatement -> identifier/"for" "(" · expression ";" ";" CommaExpression ")" statement,ForStatement -> identifier/"for" "(" · expression ";" expression ";" ")" statement,ForStatement -> identifier/"for" "(" · expression ";" expression ";" expression ")" statement,ForStatement -> identifier/"for" "(" · expression ";" expression ";" CommaExpression ")" statement,ForStatement -> identifier/"for" "(" · CommaExpression ";" ";" ")" statement,ForStatement -> identifier/"for" "(" · CommaExpression ";" ";" expression ")" statement,ForStatement -> identifier/"for" "(" · CommaExpression ";" ";" CommaExpression ")" statement,ForStatement -> identifier/"for" "(" · CommaExpression ";" expression ";" ")" statement,ForStatement -> identifier/"for" "(" · CommaExpression ";" expression ";" expression ")" statement,ForStatement -> identifier/"for" "(" · CommaExpression ";" expression ";" CommaExpression ")" statement,ForRangeLoop -> identifier/"for" "(" · declarationSpecifiers declarator ":" expression ")" statement,ForRangeLoop -> identifier/"for" "(" · declarationSpecifiers declarator ":" InitializerList ")" statement
  RawString=s35,"("=s190,identifier/"bool"=s57,"::"=s1070,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s85,identifier/"__declspec"=s59,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"extern"=s61,identifier/"static"=s61,identifier/"register"=s61,identifier/"inline"=s61,identifier/"__attribute__"=s62,identifier/"typename"=s89,identifier/"class"=s88,identifier/"delete"=s93,identifier/"union"=s86,identifier/"enum"=s87,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s1057,"[["=s10,"*"=s191,"&"=s191,";"=s475,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s1203,TemplateType=s1212,TypeIdentifier=s49,ScopedTypeIdentifier=s49,ScopedNamespaceIdentifier=s1206,StructSpecifier=s48,MsDeclspecModifier=s14,Attribute=s11,CharLiteral=s56,AttributeSpecifier=s14,ScopedIdentifier=s188,TemplateFunction=s56,Declaration=s475,CommaExpression=s476,ParenthesizedExpression=s50,ConcatenatedString=s56,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,Attribute+=s463,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+=s15,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,expression=s473,typeQualifier=s14,typeSpecifier=s270,declarationSpecifiers=s474,storageClassSpecifier=s14
250: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,CommaExpression -> expression · "," expression,CommaExpression -> expression · "," CommaExpression,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "...",ReturnStatement -> identifier/"return" expression · ";"
  "("=s124,","=s106,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112,";"=s477 | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
251: ReturnStatement -> identifier/"return" ";" ·
  always ReturnStatement(2)
252: ReturnStatement -> identifier/"return" CommaExpression · ";",ReturnStatement -> identifier/"return" InitializerList · ";"
  ";"=s477
253: BreakStatement -> identifier/"break" ";" ·
  always BreakStatement(2)
254: ContinueStatement -> identifier/"continue" ";" ·
  always ContinueStatement(2)
255: StatementIdentifier -> identifier ·
  always StatementIdentifier(1)
256: GotoStatement -> identifier/"goto" StatementIdentifier · ";"
  ";"=s478
257: typeQualifier+ -> typeQualifier+ · typeQualifier+,TypeDefinition -> identifier/"typedef" typeQualifier+ · typeSpecifier commaSep1<typeDeclarator> ";"
  identifier/"bool"=s48,"::"=s141,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s1019,identifier/"typename"=s1027,identifier/"class"=s1026,identifier/"union"=s1021,identifier/"enum"=s1023,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,typeQualifier+=s376,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeQualifier=s159,typeSpecifier=s479
258: TypeDefinition -> identifier/"typedef" typeSpecifier · commaSep1<typeDeclarator> ";"
  "("=s484,identifier/"__based"=s63,identifier=s480,"*"=s481 | TypeIdentifier=s485,MsBasedModifier=s482,PointerDeclarator-2=s485,FunctionDeclarator-2=s485,ArrayDeclarator-2=s485,ParenthesizedDeclarator-2=s485,commaSep1<typeDeclarator>=s486,typeDeclarator=s483
259: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "...",CaseStatement -> identifier/"case" expression · ":",CaseStatement -> identifier/"case" expression · ":" ((nonCaseStatement | Declaration | TypeDefinition))+
  "("=s124,"["=s109,incDec=s1042,ArithOp<"+" | "-">=s1033,ArithOp<"/" | "%">=s1034,BitOp<"|">=s1036,BitOp<"^">=s1037,CompareOp<"==" | "!=">=s1039,CompareOp<"<=" | ">=">=s1040,"<"/"<"=s1040,templateArgsEnd/">"=s1040,BitOp<"<<" | ">>">=s1041,"?"=s1282,":"=s487,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112 | ArgumentList=s105,ArithOp-1=s1034,LogicOp-1=s1035,BitOp-1=s1038
260: CaseStatement -> identifier/"default" ":" ·,CaseStatement -> identifier/"default" ":" · ((nonCaseStatement | Declaration | TypeDefinition))+
  RawString=s35,"("=s190,identifier/"bool"=s57,"::"=s1070,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s85,identifier/"__declspec"=s59,"{"=s45,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"extern"=s61,identifier/"static"=s61,identifier/"register"=s61,identifier/"inline"=s61,identifier/"__attribute__"=s62,identifier/"typename"=s89,identifier/"class"=s88,identifier/"if"=s65,identifier/"switch"=s66,identifier/"do"=s67,identifier/"while"=s68,identifier/"for"=s491,identifier/"return"=s70,identifier/"break"=s71,identifier/"continue"=s72,identifier/"goto"=s73,identifier/"typedef"=s74,identifier/"delete"=s93,identifier/"union"=s86,identifier/"enum"=s87,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s1018,"[["=s10,"*"=s191,"&"=s191,";"=s31,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54,DestructorName=CaseStatement(2),identifier/"virtual"=CaseStatement(2),identifier/"__based"=CaseStatement(2),identifier/"throw"=CaseStatement(2),OperatorName=CaseStatement(2),identifier/"template"=CaseStatement(2),identifier/"using"=CaseStatement(2),identifier/"__cdecl"=CaseStatement(2),identifier/"case"=CaseStatement(2),identifier/"default"=CaseStatement(2),identifier/"try"=CaseStatement(2),identifier/"namespace"=CaseStatement(2),identifier/"static_assert"=CaseStatement(2),identifier/"explicit"=CaseStatement(2),identifier/"operator"=CaseStatement(2),␄=CaseStatement(2),"&&"=CaseStatement(2),"}"=CaseStatement(2),identifier/"else"=CaseStatement(2) | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s1203,TemplateType=s1212,TypeIdentifier=s49,ScopedTypeIdentifier=s49,ScopedNamespaceIdentifier=s1206,StructSpecifier=s48,MsDeclspecModifier=s14,Attribute=s11,CharLiteral=s56,AttributeSpecifier=s14,ScopedIdentifier=s188,TemplateFunction=s56,Declaration=s489,CompoundStatement=s33,LabeledStatement=s33,StatementIdentifier=s30,ExpressionStatement=s33,CommaExpression=s32,IfStatement=s33,SwitchStatement=s33,DoStatement=s33,ParenthesizedExpression=s50,WhileStatement=s33,ForStatement=s33,ReturnStatement=s33,BreakStatement=s33,ContinueStatement=s33,GotoStatement=s33,TypeDefinition=s489,ConcatenatedString=s56,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,Attribute+=s463,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+=s15,((nonCaseStatement | Declaration | TypeDefinition))+=s490,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,expression=s4,typeQualifier=s14,typeSpecifier=s270,declarationSpecifiers=s488,storageClassSpecifier=s14,nonCaseStatement=s489
261: TryStatement -> identifier/"try" CompoundStatement · CatchClause+
  identifier/"catch"=s494 | CatchClause=s492,CatchClause+=s493
262: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "...",ThrowStatement -> identifier/"throw" expression · ";"
  "("=s124,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112,";"=s495 | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
263: ThrowStatement -> identifier/"throw" ";" ·
  always ThrowStatement(2)
264: Identifier -> identifier ·
  always Identifier(1)
265: DeclarationList -> "{" · "}",DeclarationList -> "{" · topLevelItem+ "}"
  RawString=s35,"("=s20,identifier/"bool"=s57,DestructorName=s26,"::"=s5,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s85,identifier/"__declspec"=s59,"{"=s45,"}"=s496,"["=s25,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"virtual"=s37,identifier/"extern"=s60,identifier/"static"=s61,identifier/"register"=s61,identifier/"inline"=s61,identifier/"__attribute__"=s62,identifier/"__based"=s63,identifier/"throw"=s78,OperatorName=s26,identifier/"template"=s81,identifier/"typename"=s89,identifier/"class"=s88,identifier/"using"=s64,identifier/"__cdecl"=s84,identifier/"case"=s75,identifier/"default"=s76,identifier/"if"=s65,identifier/"switch"=s66,identifier/"do"=s67,identifier/"while"=s68,identifier/"for"=s69,identifier/"return"=s70,identifier/"break"=s71,identifier/"continue"=s72,identifier/"goto"=s73,identifier/"typedef"=s74,identifier/"try"=s77,identifier/"namespace"=s79,identifier/"static_assert"=s80,identifier/"explicit"=s82,identifier/"delete"=s93,identifier/"operator"=s83,identifier/"union"=s86,identifier/"enum"=s87,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s3,"[["=s10,"*"=s17,"&&"=s22,"&"=s21,";"=s31,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s23,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s6,TemplateType=s7,TypeIdentifier=s49,ScopedTypeIdentifier=s49,ScopedNamespaceIdentifier=s8,StructSpecifier=s48,MsDeclspecModifier=s14,Attribute=s11,CharLiteral=s56,AttributeSpecifier=s13,MsBasedModifier=s18,PointerDeclarator-1=s26,FunctionDeclarator-1=s27,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s24,TemplateFunction=s28,StructuredBindingDeclarator=s26,TemplateDeclaration=s42,AliasDeclaration=s42,Declaration=s42,FunctionDefinition=s42,CompoundStatement=s33,LinkageSpecification=s42,CaseStatement=s34,LabeledStatement=s33,StatementIdentifier=s30,ExpressionStatement=s33,CommaExpression=s32,IfStatement=s33,SwitchStatement=s33,DoStatement=s33,ParenthesizedExpression=s50,WhileStatement=s33,ForStatement=s33,ReturnStatement=s33,BreakStatement=s33,ContinueStatement=s33,GotoStatement=s33,TypeDefinition=s42,ForRangeLoop=s34,TryStatement=s34,ThrowStatement=s34,NamespaceDefinition=s42,UsingDeclaration=s42,StaticAssertDeclaration=s42,ConcatenatedString=s56,TemplateInstantiation=s42,FunctionDefinition-1=s42,ExplicitFunctionSpecifier=s37,FunctionDefinition-2=s42,OperatorCast=s39,Declaration-2=s42,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,Attribute+=s12,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+=s15,topLevelItem+=s497,(storageClassSpecifier | typeQualifier | AttributeSpecifier)+=s36,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,expression=s4,typeQualifier=s13,typeSpecifier=s16,declarationSpecifiers=s29,storageClassSpecifier=s13,declarator=s19,emptyDeclaration=s42,topLevelItem=s43,statement=s42,nonCaseStatement=s34,constructorOrDestructorDefinition=s38,operatorCastDefinition=s40,operatorCastDeclaration=s41
266: NamespaceDefinition -> identifier/"namespace" DeclarationList ·
  always NamespaceDefinition(2)
267: NamespaceDefinition -> identifier/"namespace" Identifier · DeclarationList
  "{"=s265 | DeclarationList=s498
268: StaticAssertDeclaration -> identifier/"static_assert" "(" · expression ")" ";",StaticAssertDeclaration -> identifier/"static_assert" "(" · expression "," String ")" ";",StaticAssertDeclaration -> identifier/"static_assert" "(" · expression "," RawString ")" ";",StaticAssertDeclaration -> identifier/"static_assert" "(" · expression "," ConcatenatedString ")" ";"
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s499
269: ScopedNamespaceIdentifier -> TemplateType · "::" NamespaceIdentifier-1,ScopedTypeIdentifier -> TemplateType · "::" TypeIdentifier-1,ScopedIdentifier -> TemplateType · "::" Identifier-1,ScopedIdentifier -> TemplateType · "::" OperatorName,ScopedIdentifier -> TemplateType · "::" DestructorName,typeSpecifier -> TemplateType ·
  "::"=s1133,"("=typeSpecifier(1),DestructorName=typeSpecifier(1),identifier/"const"=typeSpecifier(1),identifier/"volatile"=typeSpecifier(1),identifier/"restrict"=typeSpecifier(1),identifier/"_Atomic"=typeSpecifier(1),identifier/"mutable"=typeSpecifier(1),identifier/"constexpr"=typeSpecifier(1),identifier/"__declspec"=typeSpecifier(1),"["=typeSpecifier(1),identifier/"extern"=typeSpecifier(1),identifier/"static"=typeSpecifier(1),identifier/"register"=typeSpecifier(1),identifier/"inline"=typeSpecifier(1),identifier/"__attribute__"=typeSpecifier(1),identifier/"__based"=typeSpecifier(1),OperatorName=typeSpecifier(1),identifier=typeSpecifier(1),"*"=typeSpecifier(1),"&&"=typeSpecifier(1),"&"=typeSpecifier(1)
270: declarationSpecifiers -> typeSpecifier ·,declarationSpecifiers -> typeSpecifier · (storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+
  identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"__declspec"=s59,identifier/"extern"=s61,identifier/"static"=s61,identifier/"register"=s61,identifier/"inline"=s61,identifier/"__attribute__"=s62,"("=declarationSpecifiers(1),DestructorName=declarationSpecifiers(1),"::"=declarationSpecifiers(1),"["=declarationSpecifiers(1),identifier/"__based"=declarationSpecifiers(1),OperatorName=declarationSpecifiers(1),identifier=declarationSpecifiers(1),"*"=declarationSpecifiers(1),"&&"=declarationSpecifiers(1),"&"=declarationSpecifiers(1),")"=declarationSpecifiers(1),","=declarationSpecifiers(1),"..."=declarationSpecifiers(1),"="=declarationSpecifiers(1),templateArgsEndFallback=declarationSpecifiers(1),templateArgsEnd=declarationSpecifiers(1),"{"=declarationSpecifiers(1),":"=declarationSpecifiers(1),";"=declarationSpecifiers(1) | MsDeclspecModifier=s14,AttributeSpecifier=s14,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+=s151,typeQualifier=s14,storageClassSpecifier=s14
271: FunctionDeclarator-1 -> declarator · ParameterList,FunctionDeclarator-1 -> declarator · ParameterList ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+ ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,ArrayDeclarator -> declarator · "[" "]",ArrayDeclarator -> declarator · "[" expression "]",ArrayDeclarator -> declarator · "[" "*" "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "]",ArrayDeclarator -> declarator · "[" typeQualifier+ expression "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "*" "]",TemplateInstantiation -> identifier/"template" declarator · ";"
  "("=s169,"["=s168,";"=s500 | ParameterList=s1210
272: TemplateParameterList -> "<" · commaSep<templateParameter> templateArgsEnd,TemplateParameterList -> "<" · commaSep<templateParameter> templateArgsEndFallback
  identifier/"bool"=s48,"::"=s141,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s85,identifier/"__declspec"=s59,identifier/"extern"=s61,identifier/"static"=s61,identifier/"register"=s61,identifier/"inline"=s61,identifier/"__attribute__"=s62,identifier/"template"=s506,identifier/"typename"=s504,identifier/"class"=s505,identifier/"union"=s86,identifier/"enum"=s87,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140,"[["=s10,templateArgsEndFallback=commaSep<templateParameter>(0),templateArgsEnd=commaSep<templateParameter>(0) | NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,MsDeclspecModifier=s14,Attribute=s11,AttributeSpecifier=s14,ParameterDeclaration=s501,OptionalParameterDeclaration=s501,VariadicParameterDeclaration=s501,TypeParameterDeclaration=s501,OptionalTypeParameterDeclaration=s501,VariadicTypeParameterDeclaration=s501,TemplateTemplateParameterDeclaration=s501,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,Attribute+=s392,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+=s15,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeQualifier=s14,typeSpecifier=s270,declarationSpecifiers=s393,storageClassSpecifier=s14,commaSep<templateParameter>=s503,templateParameter=s502
273: TemplateInstantiation -> identifier/"template" declarationSpecifiers · declarator ";"
  "("=s180,DestructorName=s26,"::"=s178,"["=s182,identifier/"__based"=s63,OperatorName=s26,identifier=s153,"*"=s179,"&&"=s22,"&"=s22 | Identifier=s181,NamespaceIdentifier=s156,TemplateType=s156,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s156,MsBasedModifier=s18,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,declarator=s507
274: TemplateDeclaration -> identifier/"template" TemplateParameterList · emptyDeclaration,TemplateDeclaration -> identifier/"template" TemplateParameterList · AliasDeclaration,TemplateDeclaration -> identifier/"template" TemplateParameterList · Declaration,TemplateDeclaration -> identifier/"template" TemplateParameterList · TemplateDeclaration,TemplateDeclaration -> identifier/"template" TemplateParameterList · FunctionDefinition,TemplateDeclaration -> identifier/"template" TemplateParameterList · FunctionDefinition-3,TemplateDeclaration -> identifier/"template" TemplateParameterList · FunctionDefinition-4
  "("=s180,identifier/"bool"=s48,DestructorName=s26,"::"=s1085,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s85,identifier/"__declspec"=s59,"["=s182,identifier/"virtual"=s509,identifier/"extern"=s61,identifier/"static"=s61,identifier/"register"=s61,identifier/"inline"=s61,identifier/"__attribute__"=s62,identifier/"__based"=s63,OperatorName=s26,identifier/"template"=s514,identifier/"typename"=s89,identifier/"class"=s88,identifier/"using"=s513,identifier/"__cdecl"=s84,identifier/"explicit"=s82,identifier/"operator"=s83,identifier/"union"=s86,identifier/"enum"=s87,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s1065,"[["=s10,"*"=s179,"&&"=s22,"&"=s22 | Identifier=s181,NamespaceIdentifier=s1087,TemplateType=s508,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s1087,StructSpecifier=s48,MsDeclspecModifier=s14,Attribute=s11,AttributeSpecifier=s13,MsBasedModifier=s18,PointerDeclarator-1=s26,FunctionDeclarator-1=s27,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,TemplateDeclaration=s515,AliasDeclaration=s515,Declaration=s515,FunctionDefinition=s515,ExplicitFunctionSpecifier=s509,OperatorCast=s510,FunctionDefinition-3=s515,FunctionDefinition-4=s515,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,Attribute+=s12,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+=s15,(storageClassSpecifier | typeQualifier | AttributeSpecifier)+=s36,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeQualifier=s13,typeSpecifier=s16,declarationSpecifiers=s29,storageClassSpecifier=s13,declarator=s19,emptyDeclaration=s515,constructorOrDestructorDefinition=s511,operatorCastDefinition=s512
275: ExplicitFunctionSpecifier -> identifier/"explicit" "(" · expression ")"
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s516
276: OperatorCast -> identifier/"operator" declarationSpecifiers · abstractDeclarator
  "("=s231,"["=s230,"*"=s1304,"&&"=s1285,"&"=s1285 | ParameterList=s228,AbstractPointerDeclarator=s233,AbstractFunctionDeclarator=s233,AbstractArrayDeclarator=s233,AbstractParenthesizedDeclarator=s233,AbstractReferenceDeclarator=s233,abstractDeclarator=s517
277: FunctionDefinition -> identifier/"__cdecl" declarationSpecifiers · declarator CompoundStatement
  "("=s180,DestructorName=s26,"::"=s1075,"["=s182,identifier/"__based"=s63,OperatorName=s26,identifier=s1058,"*"=s1079,"&&"=s1081,"&"=s1081 | Identifier=s181,NamespaceIdentifier=s1198,TemplateType=s1198,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s1198,MsBasedModifier=s1189,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,declarator=s518
278: ScopedNamespaceIdentifier -> TemplateType · "::" NamespaceIdentifier-1,ScopedTypeIdentifier -> TemplateType · "::" TypeIdentifier-1,className -> TemplateType ·
  always className(1)
279: className -> TypeIdentifier ·,className -> ScopedTypeIdentifier ·,TemplateType -> TypeIdentifier · TemplateArgumentList,TemplateType -> ScopedTypeIdentifier · TemplateArgumentList
  "<"=s185,"("=className(1),DestructorName=className(1),"::"=className(1),identifier/"const"=className(1),identifier/"volatile"=className(1),identifier/"restrict"=className(1),identifier/"_Atomic"=className(1),identifier/"mutable"=className(1),identifier/"constexpr"=className(1),identifier/"__declspec"=className(1),identifier/"final"=className(1),"{"=className(1),"["=className(1),identifier/"extern"=className(1),identifier/"static"=className(1),identifier/"register"=className(1),identifier/"inline"=className(1),identifier/"__attribute__"=className(1),identifier/"__based"=className(1),OperatorName=className(1),identifier=className(1),":"=className(1),"*"=className(1),"&&"=className(1),"&"=className(1),";"=className(1),")"=className(1),","=className(1),"..."=className(1),incDec=className(1),ArithOp<"+" | "-">=className(1),ArithOp<"/" | "%">=className(1),BitOp<"|">=className(1),BitOp<"^">=className(1),CompareOp<"==" | "!=">=className(1),CompareOp<"<=" | ">=">=className(1),"<"/"<"=className(1),templateArgsEnd/">"=className(1),BitOp<"<<" | ">>">=className(1),"?"=className(1),"."=className(1),"->"=className(1),"||"=className(1),UpdateOp=className(1),"="=className(1),templateArgsEndFallback=className(1),templateArgsEnd=className(1),"]"=className(1),"}"=className(1),identifier/"noexcept"=className(1),identifier/"throw"=className(1) | TemplateArgumentList=s223
280: BaseClassClause -> ":" · commaSep1<access? className "..."?>
  "::"=s141,identifier/"public"=s521,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s402,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,className=s519,commaSep1<access? className "..."?>=s520
281: FieldDeclarationList -> "{" · "}",FieldDeclarationList -> "{" · fieldDeclarationListItem+ "}"
  "("=s180,identifier/"bool"=s48,DestructorName=s26,"::"=s1086,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s1193,identifier/"__declspec"=s59,identifier/"public"=s535,"}"=s532,"["=s182,identifier/"virtual"=s533,identifier/"extern"=s61,identifier/"static"=s61,identifier/"register"=s61,identifier/"inline"=s61,identifier/"__attribute__"=s62,identifier/"__based"=s63,OperatorName=s26,identifier/"template"=s514,identifier/"typename"=s1030,identifier/"class"=s1195,identifier/"using"=s64,identifier/"typedef"=s74,identifier/"static_assert"=s80,identifier/"explicit"=s82,identifier/"operator"=s83,identifier/"friend"=s534,identifier/"union"=s1194,identifier/"enum"=s1025,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s1064,"[["=s10,"*"=s179,"&&"=s22,"&"=s22 | Identifier=s181,NamespaceIdentifier=s1088,TemplateType=s1147,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s1088,StructSpecifier=s48,MsDeclspecModifier=s14,FieldDeclaration=s529,Attribute=s11,AttributeSpecifier=s13,MsBasedModifier=s18,PointerDeclarator-1=s26,FunctionDeclarator-1=s523,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,TemplateDeclaration=s529,AliasDeclaration=s529,TypeDefinition=s529,UsingDeclaration=s529,StaticAssertDeclaration=s529,ExplicitFunctionSpecifier=s525,OperatorCast=s39,FunctionDefinition-5=s529,FunctionDefinition-6=s529,Declaration-3=s529,FunctionDefinition-7=s529,Declaration-4=s529,FriendDeclaration=s529,AccessSpecifier=s529,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,fieldDeclarationListItem+=s531,Attribute+=s522,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+=s1188,(storageClassSpecifier | typeQualifier | AttributeSpecifier)+=s36,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeQualifier=s13,typeSpecifier=s270,fieldDeclarationListItem=s530,declarationSpecifiers=s524,storageClassSpecifier=s13,declarator=s19,constructorOrDestructorDefinition=s526,operatorCastDefinition=s527,operatorCastDeclaration=s528
282: StructSpecifier -> identifier/"struct" className ·,StructSpecifier -> identifier/"struct" className · FieldDeclarationList,StructSpecifier -> identifier/"struct" className · BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" className · identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" className · identifier/"final" BaseClassClause FieldDeclarationList
  identifier/"final"=s538,"{"=s281,":"=s280,"("=StructSpecifier(2),DestructorName=StructSpecifier(2),"::"=StructSpecifier(2),identifier/"const"=StructSpecifier(2),identifier/"volatile"=StructSpecifier(2),identifier/"restrict"=StructSpecifier(2),identifier/"_Atomic"=StructSpecifier(2),identifier/"mutable"=StructSpecifier(2),identifier/"constexpr"=StructSpecifier(2),identifier/"__declspec"=StructSpecifier(2),"["=StructSpecifier(2),identifier/"extern"=StructSpecifier(2),identifier/"static"=StructSpecifier(2),identifier/"register"=StructSpecifier(2),identifier/"inline"=StructSpecifier(2),identifier/"__attribute__"=StructSpecifier(2),identifier/"__based"=StructSpecifier(2),OperatorName=StructSpecifier(2),identifier=StructSpecifier(2),"*"=StructSpecifier(2),"&&"=StructSpecifier(2),"&"=StructSpecifier(2),";"=StructSpecifier(2),")"=StructSpecifier(2),","=StructSpecifier(2),"..."=StructSpecifier(2),"="=StructSpecifier(2),templateArgsEndFallback=StructSpecifier(2),templateArgsEnd=StructSpecifier(2) | BaseClassClause=s537,FieldDeclarationList=s536
283: StructSpecifier -> identifier/"struct" className ·,StructSpecifier -> identifier/"struct" FieldDeclarationList ·,StructSpecifier -> identifier/"struct" className · FieldDeclarationList,StructSpecifier -> identifier/"struct" className · BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" className · identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" className · identifier/"final" BaseClassClause FieldDeclarationList
  always StructSpecifier(2)
284: StructSpecifier -> identifier/"struct" BaseClassClause · FieldDeclarationList
  "{"=s281 | FieldDeclarationList=s536
285: StructSpecifier -> identifier/"struct" identifier/"final" · FieldDeclarationList,StructSpecifier -> identifier/"struct" identifier/"final" · BaseClassClause FieldDeclarationList
  "{"=s281,":"=s280 | BaseClassClause=s537,FieldDeclarationList=s536
286: StructSpecifier -> identifier/"struct" MsDeclspecModifier · className,StructSpecifier -> identifier/"struct" MsDeclspecModifier · FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · identifier/"final" BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · className FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · className BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · className identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · className identifier/"final" BaseClassClause FieldDeclarationList
  "::"=s141,identifier/"final"=s538,"{"=s281,identifier=s140,":"=s280 | NamespaceIdentifier=s142,TemplateType=s278,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,BaseClassClause=s537,FieldDeclarationList=s536,className=s539
287: UnionSpecifier -> identifier/"union" className ·,UnionSpecifier -> identifier/"union" className · FieldDeclarationList,UnionSpecifier -> identifier/"union" className · BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" className · identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" className · identifier/"final" BaseClassClause FieldDeclarationList
  identifier/"final"=s542,"{"=s281,":"=s280,"("=UnionSpecifier(2),DestructorName=UnionSpecifier(2),"::"=UnionSpecifier(2),identifier/"const"=UnionSpecifier(2),identifier/"volatile"=UnionSpecifier(2),identifier/"restrict"=UnionSpecifier(2),identifier/"_Atomic"=UnionSpecifier(2),identifier/"mutable"=UnionSpecifier(2),identifier/"constexpr"=UnionSpecifier(2),identifier/"__declspec"=UnionSpecifier(2),"["=UnionSpecifier(2),identifier/"extern"=UnionSpecifier(2),identifier/"static"=UnionSpecifier(2),identifier/"register"=UnionSpecifier(2),identifier/"inline"=UnionSpecifier(2),identifier/"__attribute__"=UnionSpecifier(2),identifier/"__based"=UnionSpecifier(2),OperatorName=UnionSpecifier(2),identifier=UnionSpecifier(2),"*"=UnionSpecifier(2),"&&"=UnionSpecifier(2),"&"=UnionSpecifier(2),";"=UnionSpecifier(2),")"=UnionSpecifier(2),","=UnionSpecifier(2),"..."=UnionSpecifier(2),"="=UnionSpecifier(2),templateArgsEndFallback=UnionSpecifier(2),templateArgsEnd=UnionSpecifier(2) | BaseClassClause=s541,FieldDeclarationList=s540
288: UnionSpecifier -> identifier/"union" className ·,UnionSpecifier -> identifier/"union" FieldDeclarationList ·,UnionSpecifier -> identifier/"union" className · FieldDeclarationList,UnionSpecifier -> identifier/"union" className · BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" className · identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" className · identifier/"final" BaseClassClause FieldDeclarationList
  always UnionSpecifier(2)
289: UnionSpecifier -> identifier/"union" BaseClassClause · FieldDeclarationList
  "{"=s281 | FieldDeclarationList=s540
290: UnionSpecifier -> identifier/"union" identifier/"final" · FieldDeclarationList,UnionSpecifier -> identifier/"union" identifier/"final" · BaseClassClause FieldDeclarationList
  "{"=s281,":"=s280 | BaseClassClause=s541,FieldDeclarationList=s540
291: UnionSpecifier -> identifier/"union" MsDeclspecModifier · className,UnionSpecifier -> identifier/"union" MsDeclspecModifier · FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · identifier/"final" BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · className FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · className BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · className identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · className identifier/"final" BaseClassClause FieldDeclarationList
  "::"=s141,identifier/"final"=s542,"{"=s281,identifier=s140,":"=s280 | NamespaceIdentifier=s142,TemplateType=s278,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,BaseClassClause=s541,FieldDeclarationList=s540,className=s543
292: EnumeratorList -> "{" · commaSepTrailing<Enumerator> "}"
  identifier=s264,"}"=commaSepTrailing<Enumerator>(0) | Identifier=s544,Enumerator=s545,commaSepTrailing<Enumerator>=s546
293: EnumSpecifier -> identifier/"enum" className ·,EnumSpecifier -> identifier/"enum" className · EnumeratorList,EnumSpecifier -> identifier/"enum" className · enumBaseClause,EnumSpecifier -> identifier/"enum" className · enumBaseClause EnumeratorList
  "{"=s292,":"=s547,"("=EnumSpecifier(2),DestructorName=EnumSpecifier(2),"::"=EnumSpecifier(2),identifier/"const"=EnumSpecifier(2),identifier/"volatile"=EnumSpecifier(2),identifier/"restrict"=EnumSpecifier(2),identifier/"_Atomic"=EnumSpecifier(2),identifier/"mutable"=EnumSpecifier(2),identifier/"constexpr"=EnumSpecifier(2),identifier/"__declspec"=EnumSpecifier(2),"["=EnumSpecifier(2),identifier/"extern"=EnumSpecifier(2),identifier/"static"=EnumSpecifier(2),identifier/"register"=EnumSpecifier(2),identifier/"inline"=EnumSpecifier(2),identifier/"__attribute__"=EnumSpecifier(2),identifier/"__based"=EnumSpecifier(2),OperatorName=EnumSpecifier(2),identifier=EnumSpecifier(2),"*"=EnumSpecifier(2),"&&"=EnumSpecifier(2),"&"=EnumSpecifier(2),";"=EnumSpecifier(2),")"=EnumSpecifier(2),","=EnumSpecifier(2),"..."=EnumSpecifier(2),"="=EnumSpecifier(2),templateArgsEndFallback=EnumSpecifier(2),templateArgsEnd=EnumSpecifier(2),identifier/"final"=EnumSpecifier(2),identifier/"noexcept"=EnumSpecifier(2),identifier/"throw"=EnumSpecifier(2),"->"=EnumSpecifier(2) | EnumeratorList=s548,enumBaseClause=s549
294: EnumSpecifier -> identifier/"enum" className ·,EnumSpecifier -> identifier/"enum" className · EnumeratorList,EnumSpecifier -> identifier/"enum" className · enumBaseClause,EnumSpecifier -> identifier/"enum" className · enumBaseClause EnumeratorList,EnumSpecifier -> identifier/"enum" EnumeratorList ·
  always EnumSpecifier(2)
295: EnumSpecifier -> identifier/"enum" identifier/"class" · className,EnumSpecifier -> identifier/"enum" identifier/"class" · className EnumeratorList,EnumSpecifier -> identifier/"enum" identifier/"class" · className enumBaseClause,EnumSpecifier -> identifier/"enum" identifier/"class" · className enumBaseClause EnumeratorList,EnumSpecifier -> identifier/"enum" identifier/"class" · EnumeratorList,EnumSpecifier -> identifier/"enum" identifier/"struct" · className,EnumSpecifier -> identifier/"enum" identifier/"struct" · className EnumeratorList,EnumSpecifier -> identifier/"enum" identifier/"struct" · className enumBaseClause,EnumSpecifier -> identifier/"enum" identifier/"struct" · className enumBaseClause EnumeratorList,EnumSpecifier -> identifier/"enum" identifier/"struct" · EnumeratorList
  "::"=s141,"{"=s292,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s278,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,EnumeratorList=s548,className=s550
296: ClassSpecifier -> identifier/"class" className ·,ClassSpecifier -> identifier/"class" className · FieldDeclarationList,ClassSpecifier -> identifier/"class" className · BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" className · identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" className · identifier/"final" BaseClassClause FieldDeclarationList
  identifier/"final"=s553,"{"=s281,":"=s280,"("=ClassSpecifier(2),DestructorName=ClassSpecifier(2),"::"=ClassSpecifier(2),identifier/"const"=ClassSpecifier(2),identifier/"volatile"=ClassSpecifier(2),identifier/"restrict"=ClassSpecifier(2),identifier/"_Atomic"=ClassSpecifier(2),identifier/"mutable"=ClassSpecifier(2),identifier/"constexpr"=ClassSpecifier(2),identifier/"__declspec"=ClassSpecifier(2),"["=ClassSpecifier(2),identifier/"extern"=ClassSpecifier(2),identifier/"static"=ClassSpecifier(2),identifier/"register"=ClassSpecifier(2),identifier/"inline"=ClassSpecifier(2),identifier/"__attribute__"=ClassSpecifier(2),identifier/"__based"=ClassSpecifier(2),OperatorName=ClassSpecifier(2),identifier=ClassSpecifier(2),"*"=ClassSpecifier(2),"&&"=ClassSpecifier(2),"&"=ClassSpecifier(2),";"=ClassSpecifier(2),")"=ClassSpecifier(2),","=ClassSpecifier(2),"..."=ClassSpecifier(2),"="=ClassSpecifier(2),templateArgsEndFallback=ClassSpecifier(2),templateArgsEnd=ClassSpecifier(2) | BaseClassClause=s552,FieldDeclarationList=s551
297: ClassSpecifier -> identifier/"class" FieldDeclarationList ·
  always ClassSpecifier(2)
298: ClassSpecifier -> identifier/"class" BaseClassClause · FieldDeclarationList
  "{"=s281 | FieldDeclarationList=s551
299: ClassSpecifier -> identifier/"class" identifier/"final" · FieldDeclarationList,ClassSpecifier -> identifier/"class" identifier/"final" · BaseClassClause FieldDeclarationList
  "{"=s281,":"=s280 | BaseClassClause=s552,FieldDeclarationList=s551
300: ClassSpecifier -> identifier/"class" MsDeclspecModifier · className,ClassSpecifier -> identifier/"class" MsDeclspecModifier · FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier · BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier · identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier · identifier/"final" BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier · className FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier · className BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier · className identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier · className identifier/"final" BaseClassClause FieldDeclarationList
  "::"=s141,identifier/"final"=s553,"{"=s281,identifier=s140,":"=s280 | NamespaceIdentifier=s142,TemplateType=s278,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,BaseClassClause=s552,FieldDeclarationList=s551,className=s554
301: DependentType -> identifier/"typename" typeSpecifier ·
  always DependentType(2)
302: Decltype -> identifier/"decltype" "(" · expression ")"
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s555
303: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "...",SizeofExpression -> identifier/"sizeof" expression ·
  "("=s124,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"<<" | ">>">=s121,"."=s108,"->"=s108,"*"=s110,","=SizeofExpression(2),BitOp<"|">=SizeofExpression(2),BitOp<"^">=SizeofExpression(2),CompareOp<"==" | "!=">=SizeofExpression(2),CompareOp<"<=" | ">=">=SizeofExpression(2),"<"/"<"=SizeofExpression(2),templateArgsEnd/">"=SizeofExpression(2),"?"=SizeofExpression(2),"..."=SizeofExpression(2),"||"=SizeofExpression(2),"&&"=SizeofExpression(2),"&"=SizeofExpression(2),";"=SizeofExpression(2),UpdateOp=SizeofExpression(2),"="=SizeofExpression(2),")"=SizeofExpression(2),"]"=SizeofExpression(2),"}"=SizeofExpression(2),templateArgsEndFallback=SizeofExpression(2),templateArgsEnd=SizeofExpression(2) | ArgumentList=s105,ArithOp-1=s114
304: ParenthesizedExpression -> "(" · expression ")",ParenthesizedExpression -> "(" · CommaExpression ")",CastExpression -> "(" · TypeDescriptor ")" expression,_anon-4 -> "(" · TypeDescriptor ")",CompoundLiteralExpression -> "(" · TypeDescriptor ")" InitializerList
  RawString=s35,"("=s190,identifier/"bool"=s57,"::"=s1067,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s1019,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"typename"=s1027,identifier/"class"=s1026,identifier/"delete"=s93,identifier/"union"=s1021,identifier/"enum"=s1023,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s1057,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s1197,TemplateType=s171,TypeIdentifier=s49,ScopedTypeIdentifier=s49,ScopedNamespaceIdentifier=s1204,TypeDescriptor=s556,StructSpecifier=s48,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,CommaExpression=s174,ParenthesizedExpression=s50,ConcatenatedString=s56,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,typeQualifier+=s172,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,expression=s170,typeQualifier=s159,typeSpecifier=s175
305: SizeofExpression -> identifier/"sizeof" _anon-4 ·
  always SizeofExpression(2)
306: SizeofExpression -> identifier/"sizeof" "..." · "(" Identifier ")"
  "("=s557
307: NewExpression -> identifier/"new" typeSpecifier ·,NewExpression -> identifier/"new" typeSpecifier · ArgumentList,NewExpression -> identifier/"new" typeSpecifier · InitializerList,NewExpression -> identifier/"new" typeSpecifier · NewDeclarator,NewExpression -> identifier/"new" typeSpecifier · NewDeclarator ArgumentList,NewExpression -> identifier/"new" typeSpecifier · NewDeclarator InitializerList
  "("=s124,"{"=s133,"["=s558,","=NewExpression(2),incDec=NewExpression(2),ArithOp<"+" | "-">=NewExpression(2),ArithOp<"/" | "%">=NewExpression(2),BitOp<"|">=NewExpression(2),BitOp<"^">=NewExpression(2),CompareOp<"==" | "!=">=NewExpression(2),CompareOp<"<=" | ">=">=NewExpression(2),"<"/"<"=NewExpression(2),templateArgsEnd/">"=NewExpression(2),BitOp<"<<" | ">>">=NewExpression(2),"?"=NewExpression(2),"."=NewExpression(2),"->"=NewExpression(2),"..."=NewExpression(2),"*"=NewExpression(2),"||"=NewExpression(2),"&&"=NewExpression(2),"&"=NewExpression(2),";"=NewExpression(2),UpdateOp=NewExpression(2),"="=NewExpression(2),")"=NewExpression(2),"]"=NewExpression(2),":"=NewExpression(2),"}"=NewExpression(2),templateArgsEndFallback=NewExpression(2),templateArgsEnd=NewExpression(2) | ArgumentList=s559,InitializerList=s559,NewDeclarator=s560
308: NewExpression -> identifier/"new" ArgumentList · typeSpecifier,NewExpression -> identifier/"new" ArgumentList · typeSpecifier ArgumentList,NewExpression -> identifier/"new" ArgumentList · typeSpecifier InitializerList,NewExpression -> identifier/"new" ArgumentList · typeSpecifier NewDeclarator,NewExpression -> identifier/"new" ArgumentList · typeSpecifier NewDeclarator ArgumentList,NewExpression -> identifier/"new" ArgumentList · typeSpecifier NewDeclarator InitializerList
  identifier/"bool"=s48,"::"=s141,identifier/"struct"=s1239,identifier/"typename"=s1251,identifier/"class"=s1248,identifier/"union"=s1243,identifier/"enum"=s1246,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeSpecifier=s343
309: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "...",DeleteExpression -> identifier/"delete" expression ·
  "("=s124,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112,","=DeleteExpression(2),";"=DeleteExpression(2),UpdateOp=DeleteExpression(2),"="=DeleteExpression(2),")"=DeleteExpression(2),"]"=DeleteExpression(2),"}"=DeleteExpression(2),templateArgsEndFallback=DeleteExpression(2),templateArgsEnd=DeleteExpression(2) | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
310: LambdaCaptureSpecifier -> "[" · "=" "]",LambdaCaptureSpecifier -> "[" · "=" "," commaSep1<expression> "]",LambdaCaptureSpecifier -> "[" · "&" "]",LambdaCaptureSpecifier -> "[" · "&" "," commaSep1<expression> "]",LambdaCaptureSpecifier -> "[" · commaSep1<expression> "]",LambdaCaptureSpecifier -> "[" · "]",DeleteExpression -> identifier/"delete" "[" · "]" expression
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s193,"]"=s561,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s192,charLiteralStart=s9,"="=s194,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s186,commaSep1<expression>=s195
311: PreprocDirective -> pp<"include"> String · "\n",PreprocDirective -> pp<"include"> SystemLibString · "\n",PreprocDirective -> pp<"if"> PreprocArg · "\n",PreprocDirective -> pp<"ifdef"> Identifier · "\n",PreprocDirective -> pp<"ifndef"> Identifier · "\n",PreprocDirective -> pp<"elif"> PreprocArg · "\n",PreprocDirective -> PreprocDirectiveName PreprocArg · "\n"
  "\n"=s562
312: PreprocDirective -> pp<"include"> Identifier · "\n",PreprocDirective -> pp<"include"> Identifier · ArgumentList "\n"
  "("=s124,"\n"=s562 | ArgumentList=s563
313: PreprocDirective -> pp<"define"> Identifier · PreprocArg "\n",PreprocDirective -> pp<"define"> Identifier · preprocParams PreprocArg "\n"
  "("=s564,PreprocArg=s563 | preprocParams=s565
314: PreprocDirective -> pp<"else"> "\n" ·,PreprocDirective -> pp<"endif"> "\n" ·
  always PreprocDirective(2)
315: Macro -> MacroName ArgumentList ·
  always Macro(2)
316: Macro -> MacroName whitespace ·,Macro -> MacroName whitespace · ArgumentList
  "("=s124,␄=Macro(2) | ArgumentList=s566
317: (stringLiteralContent | EscapeSequence)+ -> (stringLiteralContent | EscapeSequence)+ · (stringLiteralContent | EscapeSequence)+,(stringLiteralContent | EscapeSequence)+ -> (stringLiteralContent | EscapeSequence)+ (stringLiteralContent | EscapeSequence)+ ·
  always (stringLiteralContent | EscapeSequence)+(2)
318: String -> stringLiteralStart (stringLiteralContent | EscapeSequence)+ stringLiteralEnd ·
  always String(3)
319: ConditionalExpression -> expression · "?" expression ":" expression,ConditionalExpression -> expression "?" expression · ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,incDec=s1042,ArithOp<"+" | "-">=s1033,ArithOp<"/" | "%">=s1034,BitOp<"|">=s1036,BitOp<"^">=s1037,CompareOp<"==" | "!=">=s1039,CompareOp<"<=" | ">=">=s1040,"<"/"<"=s1040,templateArgsEnd/">"=s1040,BitOp<"<<" | ">>">=s1041,"?"=s1282,":"=s567,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112 | ArgumentList=s105,ArithOp-1=s1034,LogicOp-1=s1035,BitOp-1=s1038
320: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,CommaExpression -> expression · "," expression,CommaExpression -> expression "," expression ·,CommaExpression -> expression · "," CommaExpression,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,","=s106,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112,";"=CommaExpression(3),")"=CommaExpression(3) | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
321: CommaExpression -> expression "," CommaExpression ·
  always CommaExpression(3)
322: FieldIdentifier -> identifier ·,NamespaceIdentifier -> identifier ·,TypeIdentifier -> identifier ·
  "("=FieldIdentifier(1),"::"=NamespaceIdentifier(1),"<"=FieldIdentifier(1),"<"=TypeIdentifier(1),","=FieldIdentifier(1),"["=FieldIdentifier(1),incDec=FieldIdentifier(1),ArithOp<"+" | "-">=FieldIdentifier(1),ArithOp<"/" | "%">=FieldIdentifier(1),BitOp<"|">=FieldIdentifier(1),BitOp<"^">=FieldIdentifier(1),CompareOp<"==" | "!=">=FieldIdentifier(1),CompareOp<"<=" | ">=">=FieldIdentifier(1),"<"/"<"=FieldIdentifier(1),templateArgsEnd/">"=FieldIdentifier(1),BitOp<"<<" | ">>">=FieldIdentifier(1),UpdateOp=FieldIdentifier(1),"?"=FieldIdentifier(1),"."=FieldIdentifier(1),"->"=FieldIdentifier(1),"..."=FieldIdentifier(1),"*"=FieldIdentifier(1),"||"=FieldIdentifier(1),"&&"=FieldIdentifier(1),"&"=FieldIdentifier(1),";"=FieldIdentifier(1),"="=FieldIdentifier(1),")"=FieldIdentifier(1),"]"=FieldIdentifier(1),":"=FieldIdentifier(1),"{"=FieldIdentifier(1),"}"=FieldIdentifier(1),templateArgsEndFallback=FieldIdentifier(1),templateArgsEnd=FieldIdentifier(1)
323: ScopedNamespaceIdentifier -> "::" · NamespaceIdentifier-1,ScopedTypeIdentifier -> "::" · TypeIdentifier-1,ScopedFieldIdentifier -> "::" · FieldIdentifier-1,ScopedFieldIdentifier -> "::" · OperatorName,ScopedFieldIdentifier -> "::" · DestructorName
  DestructorName=s569,OperatorName=s569,scopedIdentifier=s568 | NamespaceIdentifier-1=s126,TypeIdentifier-1=s127,FieldIdentifier-1=s569
324: ScopedNamespaceIdentifier -> NamespaceIdentifier · "::" NamespaceIdentifier-1,ScopedNamespaceIdentifier -> TemplateType · "::" NamespaceIdentifier-1,ScopedNamespaceIdentifier -> ScopedNamespaceIdentifier · "::" NamespaceIdentifier-1,ScopedTypeIdentifier -> NamespaceIdentifier · "::" TypeIdentifier-1,ScopedTypeIdentifier -> TemplateType · "::" TypeIdentifier-1,ScopedTypeIdentifier -> ScopedNamespaceIdentifier · "::" TypeIdentifier-1,ScopedFieldIdentifier -> NamespaceIdentifier · "::" FieldIdentifier-1,ScopedFieldIdentifier -> NamespaceIdentifier · "::" OperatorName,ScopedFieldIdentifier -> NamespaceIdentifier · "::" DestructorName,ScopedFieldIdentifier -> TemplateType · "::" FieldIdentifier-1,ScopedFieldIdentifier -> TemplateType · "::" OperatorName,ScopedFieldIdentifier -> TemplateType · "::" DestructorName,ScopedFieldIdentifier -> ScopedNamespaceIdentifier · "::" FieldIdentifier-1,ScopedFieldIdentifier -> ScopedNamespaceIdentifier · "::" OperatorName,ScopedFieldIdentifier -> ScopedNamespaceIdentifier · "::" DestructorName
  "::"=s570
325: TemplateMethod -> FieldIdentifier · TemplateArgumentList,FieldExpression -> expression "." FieldIdentifier ·,FieldExpression -> expression "->" FieldIdentifier ·
  "<"=s185,"("=FieldExpression(3),","=FieldExpression(3),"["=FieldExpression(3),incDec=FieldExpression(3),ArithOp<"+" | "-">=FieldExpression(3),ArithOp<"/" | "%">=FieldExpression(3),BitOp<"|">=FieldExpression(3),BitOp<"^">=FieldExpression(3),CompareOp<"==" | "!=">=FieldExpression(3),CompareOp<"<=" | ">=">=FieldExpression(3),"<"/"<"=FieldExpression(3),templateArgsEnd/">"=FieldExpression(3),BitOp<"<<" | ">>">=FieldExpression(3),UpdateOp=FieldExpression(3),"?"=FieldExpression(3),"."=FieldExpression(3),"->"=FieldExpression(3),"..."=FieldExpression(3),"*"=FieldExpression(3),"||"=FieldExpression(3),"&&"=FieldExpression(3),"&"=FieldExpression(3),";"=FieldExpression(3),"="=FieldExpression(3),")"=FieldExpression(3),"]"=FieldExpression(3),":"=FieldExpression(3),"}"=FieldExpression(3),templateArgsEndFallback=FieldExpression(3),templateArgsEnd=FieldExpression(3) | TemplateArgumentList=s571
326: TemplateMethod -> ScopedFieldIdentifier · TemplateArgumentList
  "<"=s185 | TemplateArgumentList=s571
327: FieldExpression -> expression "." DestructorName ·,FieldExpression -> expression "." TemplateMethod ·,FieldExpression -> expression "->" DestructorName ·,FieldExpression -> expression "->" TemplateMethod ·
  always FieldExpression(3)
328: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",SubscriptExpression -> expression "[" expression · "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,"]"=s572,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112 | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
329: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression ArithOp<"+" | "-"> expression ·,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,incDec=s122,ArithOp<"/" | "%">=s114,"."=s108,"->"=s108,"*"=s110,","=BinaryExpression(3),ArithOp<"+" | "-">=BinaryExpression(3),BitOp<"|">=BinaryExpression(3),BitOp<"^">=BinaryExpression(3),CompareOp<"==" | "!=">=BinaryExpression(3),CompareOp<"<=" | ">=">=BinaryExpression(3),"<"/"<"=BinaryExpression(3),templateArgsEnd/">"=BinaryExpression(3),BitOp<"<<" | ">>">=BinaryExpression(3),"?"=BinaryExpression(3),"..."=BinaryExpression(3),"||"=BinaryExpression(3),"&&"=BinaryExpression(3),"&"=BinaryExpression(3),";"=BinaryExpression(3),UpdateOp=BinaryExpression(3),"="=BinaryExpression(3),")"=BinaryExpression(3),"]"=BinaryExpression(3),"}"=BinaryExpression(3),templateArgsEndFallback=BinaryExpression(3),templateArgsEnd=BinaryExpression(3) | ArgumentList=s105,ArithOp-1=s114
330: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression ArithOp-1 expression ·,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression ArithOp<"/" | "%"> expression ·,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,incDec=s122,"."=s108,"->"=s108,","=BinaryExpression(3),ArithOp<"+" | "-">=BinaryExpression(3),ArithOp<"/" | "%">=BinaryExpression(3),BitOp<"|">=BinaryExpression(3),BitOp<"^">=BinaryExpression(3),CompareOp<"==" | "!=">=BinaryExpression(3),CompareOp<"<=" | ">=">=BinaryExpression(3),"<"/"<"=BinaryExpression(3),templateArgsEnd/">"=BinaryExpression(3),BitOp<"<<" | ">>">=BinaryExpression(3),"?"=BinaryExpression(3),"..."=BinaryExpression(3),"*"=BinaryExpression(3),"||"=BinaryExpression(3),"&&"=BinaryExpression(3),"&"=BinaryExpression(3),";"=BinaryExpression(3),UpdateOp=BinaryExpression(3),"="=BinaryExpression(3),")"=BinaryExpression(3),"]"=BinaryExpression(3),"}"=BinaryExpression(3),templateArgsEndFallback=BinaryExpression(3),templateArgsEnd=BinaryExpression(3) | ArgumentList=s105
331: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression LogicOp-1 expression ·,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"."=s108,"->"=s108,"*"=s110,"&"=s112,","=BinaryExpression(3),"?"=BinaryExpression(3),"..."=BinaryExpression(3),"||"=BinaryExpression(3),"&&"=BinaryExpression(3),";"=BinaryExpression(3),UpdateOp=BinaryExpression(3),"="=BinaryExpression(3),")"=BinaryExpression(3),"]"=BinaryExpression(3),"}"=BinaryExpression(3),templateArgsEndFallback=BinaryExpression(3),templateArgsEnd=BinaryExpression(3) | ArgumentList=s105,ArithOp-1=s114,BitOp-1=s118
332: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression BitOp<"|"> expression ·,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"."=s108,"->"=s108,"*"=s110,"&"=s112,","=BinaryExpression(3),BitOp<"|">=BinaryExpression(3),"?"=BinaryExpression(3),"..."=BinaryExpression(3),"||"=BinaryExpression(3),"&&"=BinaryExpression(3),";"=BinaryExpression(3),UpdateOp=BinaryExpression(3),"="=BinaryExpression(3),")"=BinaryExpression(3),"]"=BinaryExpression(3),"}"=BinaryExpression(3),templateArgsEndFallback=BinaryExpression(3),templateArgsEnd=BinaryExpression(3) | ArgumentList=s105,ArithOp-1=s114,BitOp-1=s118
333: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression BitOp<"^"> expression ·,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"."=s108,"->"=s108,"*"=s110,"&"=s112,","=BinaryExpression(3),BitOp<"|">=BinaryExpression(3),BitOp<"^">=BinaryExpression(3),"?"=BinaryExpression(3),"..."=BinaryExpression(3),"||"=BinaryExpression(3),"&&"=BinaryExpression(3),";"=BinaryExpression(3),UpdateOp=BinaryExpression(3),"="=BinaryExpression(3),")"=BinaryExpression(3),"]"=BinaryExpression(3),"}"=BinaryExpression(3),templateArgsEndFallback=BinaryExpression(3),templateArgsEnd=BinaryExpression(3) | ArgumentList=s105,ArithOp-1=s114,BitOp-1=s118
334: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression BitOp-1 expression ·,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"."=s108,"->"=s108,"*"=s110,","=BinaryExpression(3),BitOp<"|">=BinaryExpression(3),BitOp<"^">=BinaryExpression(3),"?"=BinaryExpression(3),"..."=BinaryExpression(3),"||"=BinaryExpression(3),"&&"=BinaryExpression(3),"&"=BinaryExpression(3),";"=BinaryExpression(3),UpdateOp=BinaryExpression(3),"="=BinaryExpression(3),")"=BinaryExpression(3),"]"=BinaryExpression(3),"}"=BinaryExpression(3),templateArgsEndFallback=BinaryExpression(3),templateArgsEnd=BinaryExpression(3) | ArgumentList=s105,ArithOp-1=s114
335: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression CompareOp<"==" | "!="> expression ·,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"."=s108,"->"=s108,"*"=s110,","=BinaryExpression(3),BitOp<"|">=BinaryExpression(3),BitOp<"^">=BinaryExpression(3),CompareOp<"==" | "!=">=BinaryExpression(3),"?"=BinaryExpression(3),"..."=BinaryExpression(3),"||"=BinaryExpression(3),"&&"=BinaryExpression(3),"&"=BinaryExpression(3),";"=BinaryExpression(3),UpdateOp=BinaryExpression(3),"="=BinaryExpression(3),")"=BinaryExpression(3),"]"=BinaryExpression(3),"}"=BinaryExpression(3),templateArgsEndFallback=BinaryExpression(3),templateArgsEnd=BinaryExpression(3) | ArgumentList=s105,ArithOp-1=s114
336: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression CompareOp<"<=" | ">="> expression ·,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression "<"/"<" expression ·,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression templateArgsEnd/">" expression ·,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"<<" | ">>">=s121,"."=s108,"->"=s108,"*"=s110,","=BinaryExpression(3),BitOp<"|">=BinaryExpression(3),BitOp<"^">=BinaryExpression(3),CompareOp<"==" | "!=">=BinaryExpression(3),CompareOp<"<=" | ">=">=BinaryExpression(3),"<"/"<"=BinaryExpression(3),templateArgsEnd/">"=BinaryExpression(3),"?"=BinaryExpression(3),"..."=BinaryExpression(3),"||"=BinaryExpression(3),"&&"=BinaryExpression(3),"&"=BinaryExpression(3),";"=BinaryExpression(3),UpdateOp=BinaryExpression(3),"="=BinaryExpression(3),")"=BinaryExpression(3),"]"=BinaryExpression(3),"}"=BinaryExpression(3),templateArgsEndFallback=BinaryExpression(3),templateArgsEnd=BinaryExpression(3) | ArgumentList=s105,ArithOp-1=s114
337: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression BitOp<"<<" | ">>"> expression ·,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,"."=s108,"->"=s108,"*"=s110,","=BinaryExpression(3),BitOp<"|">=BinaryExpression(3),BitOp<"^">=BinaryExpression(3),CompareOp<"==" | "!=">=BinaryExpression(3),CompareOp<"<=" | ">=">=BinaryExpression(3),"<"/"<"=BinaryExpression(3),templateArgsEnd/">"=BinaryExpression(3),BitOp<"<<" | ">>">=BinaryExpression(3),"?"=BinaryExpression(3),"..."=BinaryExpression(3),"||"=BinaryExpression(3),"&&"=BinaryExpression(3),"&"=BinaryExpression(3),";"=BinaryExpression(3),UpdateOp=BinaryExpression(3),"="=BinaryExpression(3),")"=BinaryExpression(3),"]"=BinaryExpression(3),"}"=BinaryExpression(3),templateArgsEndFallback=BinaryExpression(3),templateArgsEnd=BinaryExpression(3) | ArgumentList=s105,ArithOp-1=s114
338: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,BinaryExpression -> expression incDec expression ·,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"."=s108,"->"=s108,"*"=s110,"||"=s111,"&&"=s111,"&"=s112,","=BinaryExpression(3),"?"=BinaryExpression(3),"..."=BinaryExpression(3),";"=BinaryExpression(3),UpdateOp=BinaryExpression(3),"="=BinaryExpression(3),")"=BinaryExpression(3),"]"=BinaryExpression(3),"}"=BinaryExpression(3),templateArgsEndFallback=BinaryExpression(3),templateArgsEnd=BinaryExpression(3) | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
339: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "...",commaSep<expression | InitializerList> -> expression ·,commaSep<expression | InitializerList> -> expression · ("," (expression | InitializerList))+
  "("=s124,","=s573,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112,")"=commaSep<expression | InitializerList>(1) | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118,("," (expression | InitializerList))+=s574
340: commaSep<expression | InitializerList> -> InitializerList ·,commaSep<expression | InitializerList> -> InitializerList · ("," (expression | InitializerList))+
  ","=s573,")"=commaSep<expression | InitializerList>(1) | ("," (expression | InitializerList))+=s574
341: ArgumentList -> "(" commaSep<expression | InitializerList> · ")"
  ")"=s575
342: OperatorCast -> "::" scopedIdentifier/"operator" declarationSpecifiers · abstractDeclarator
  "("=s231,"["=s230,"*"=s1304,"&&"=s1285,"&"=s1285 | ParameterList=s228,AbstractPointerDeclarator=s233,AbstractFunctionDeclarator=s233,AbstractArrayDeclarator=s233,AbstractParenthesizedDeclarator=s233,AbstractReferenceDeclarator=s233,abstractDeclarator=s576
343: NewExpression -> "::" scopedIdentifier/"new" typeSpecifier ·,NewExpression -> "::" scopedIdentifier/"new" typeSpecifier · ArgumentList,NewExpression -> "::" scopedIdentifier/"new" typeSpecifier · InitializerList,NewExpression -> "::" scopedIdentifier/"new" typeSpecifier · NewDeclarator,NewExpression -> "::" scopedIdentifier/"new" typeSpecifier · NewDeclarator ArgumentList,NewExpression -> "::" scopedIdentifier/"new" typeSpecifier · NewDeclarator InitializerList,NewExpression -> identifier/"new" ArgumentList typeSpecifier ·,NewExpression -> identifier/"new" ArgumentList typeSpecifier · ArgumentList,NewExpression -> identifier/"new" ArgumentList typeSpecifier · InitializerList,NewExpression -> identifier/"new" ArgumentList typeSpecifier · NewDeclarator,NewExpression -> identifier/"new" ArgumentList typeSpecifier · NewDeclarator ArgumentList,NewExpression -> identifier/"new" ArgumentList typeSpecifier · NewDeclarator InitializerList
  "("=s124,"{"=s133,"["=s558,","=NewExpression(3),incDec=NewExpression(3),ArithOp<"+" | "-">=NewExpression(3),ArithOp<"/" | "%">=NewExpression(3),BitOp<"|">=NewExpression(3),BitOp<"^">=NewExpression(3),CompareOp<"==" | "!=">=NewExpression(3),CompareOp<"<=" | ">=">=NewExpression(3),"<"/"<"=NewExpression(3),templateArgsEnd/">"=NewExpression(3),BitOp<"<<" | ">>">=NewExpression(3),"?"=NewExpression(3),"."=NewExpression(3),"->"=NewExpression(3),"..."=NewExpression(3),"*"=NewExpression(3),"||"=NewExpression(3),"&&"=NewExpression(3),"&"=NewExpression(3),";"=NewExpression(3),UpdateOp=NewExpression(3),"="=NewExpression(3),")"=NewExpression(3),"]"=NewExpression(3),":"=NewExpression(3),"}"=NewExpression(3),templateArgsEndFallback=NewExpression(3),templateArgsEnd=NewExpression(3) | ArgumentList=s577,InitializerList=s577,NewDeclarator=s578
344: NewExpression -> "::" scopedIdentifier/"new" ArgumentList · typeSpecifier,NewExpression -> "::" scopedIdentifier/"new" ArgumentList · typeSpecifier ArgumentList,NewExpression -> "::" scopedIdentifier/"new" ArgumentList · typeSpecifier InitializerList,NewExpression -> "::" scopedIdentifier/"new" ArgumentList · typeSpecifier NewDeclarator,NewExpression -> "::" scopedIdentifier/"new" ArgumentList · typeSpecifier NewDeclarator ArgumentList,NewExpression -> "::" scopedIdentifier/"new" ArgumentList · typeSpecifier NewDeclarator InitializerList
  identifier/"bool"=s48,"::"=s141,identifier/"struct"=s1239,identifier/"typename"=s1251,identifier/"class"=s1248,identifier/"union"=s1243,identifier/"enum"=s1246,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeSpecifier=s579
345: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "...",DeleteExpression -> "::" scopedIdentifier/"delete" expression ·
  "("=s124,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112,","=DeleteExpression(3),";"=DeleteExpression(3),UpdateOp=DeleteExpression(3),"="=DeleteExpression(3),")"=DeleteExpression(3),"]"=DeleteExpression(3),"}"=DeleteExpression(3),templateArgsEndFallback=DeleteExpression(3),templateArgsEnd=DeleteExpression(3) | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
346: LambdaCaptureSpecifier -> "[" · "=" "]",LambdaCaptureSpecifier -> "[" · "=" "," commaSep1<expression> "]",LambdaCaptureSpecifier -> "[" · "&" "]",LambdaCaptureSpecifier -> "[" · "&" "," commaSep1<expression> "]",LambdaCaptureSpecifier -> "[" · commaSep1<expression> "]",LambdaCaptureSpecifier -> "[" · "]",DeleteExpression -> "::" scopedIdentifier/"delete" "[" · "]" expression
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s193,"]"=s580,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s192,charLiteralStart=s9,"="=s194,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s186,commaSep1<expression>=s195
347: ScopedNamespaceIdentifier -> NamespaceIdentifier "::" NamespaceIdentifier-1 ·,ScopedNamespaceIdentifier -> TemplateType "::" NamespaceIdentifier-1 ·,ScopedNamespaceIdentifier -> ScopedNamespaceIdentifier "::" NamespaceIdentifier-1 ·
  always ScopedNamespaceIdentifier(3)
348: ScopedTypeIdentifier -> NamespaceIdentifier "::" TypeIdentifier-1 ·,ScopedTypeIdentifier -> TemplateType "::" TypeIdentifier-1 ·,ScopedTypeIdentifier -> ScopedNamespaceIdentifier "::" TypeIdentifier-1 ·
  always ScopedTypeIdentifier(3)
349: ScopedIdentifier -> NamespaceIdentifier "::" Identifier-1 ·,ScopedIdentifier -> NamespaceIdentifier "::" OperatorName ·,ScopedIdentifier -> NamespaceIdentifier "::" DestructorName ·,ScopedIdentifier -> TemplateType "::" Identifier-1 ·,ScopedIdentifier -> TemplateType "::" OperatorName ·,ScopedIdentifier -> TemplateType "::" DestructorName ·,ScopedIdentifier -> ScopedNamespaceIdentifier "::" Identifier-1 ·,ScopedIdentifier -> ScopedNamespaceIdentifier "::" OperatorName ·,ScopedIdentifier -> ScopedNamespaceIdentifier "::" DestructorName ·
  always ScopedIdentifier(3)
350: OperatorCast -> NamespaceIdentifier "::" scopedIdentifier/"operator" · declarationSpecifiers abstractDeclarator,OperatorCast -> TemplateType "::" scopedIdentifier/"operator" · declarationSpecifiers abstractDeclarator,OperatorCast -> ScopedNamespaceIdentifier "::" scopedIdentifier/"operator" · declarationSpecifiers abstractDeclarator
  identifier/"bool"=s48,"::"=s141,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s1019,identifier/"__declspec"=s59,identifier/"extern"=s61,identifier/"static"=s61,identifier/"register"=s61,identifier/"inline"=s61,identifier/"__attribute__"=s62,identifier/"typename"=s1027,identifier/"class"=s1026,identifier/"union"=s1021,identifier/"enum"=s1023,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,MsDeclspecModifier=s14,AttributeSpecifier=s14,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+=s1187,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeQualifier=s14,typeSpecifier=s270,declarationSpecifiers=s581,storageClassSpecifier=s14
351: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,commaSepTrailing<InitializerPair | expression | InitializerList> -> expression ·,commaSepTrailing<InitializerPair | expression | InitializerList> -> expression · ("," (InitializerPair | expression | InitializerList)?)+,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,","=s582,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112,"}"=commaSepTrailing<InitializerPair | expression | InitializerList>(1) | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118,("," (InitializerPair | expression | InitializerList)?)+=s583
352: SubscriptDesignator -> "[" · expression "]",LambdaCaptureSpecifier -> "[" · "=" "]",LambdaCaptureSpecifier -> "[" · "=" "," commaSep1<expression> "]",LambdaCaptureSpecifier -> "[" · "&" "]",LambdaCaptureSpecifier -> "[" · "&" "," commaSep1<expression> "]",LambdaCaptureSpecifier -> "[" · commaSep1<expression> "]",LambdaCaptureSpecifier -> "[" · "]"
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s193,"]"=s196,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s192,charLiteralStart=s9,"="=s194,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s584,commaSep1<expression>=s195
353: FieldDesignator -> "." · FieldIdentifier
  identifier=s585 | FieldIdentifier=s586
354: (SubscriptDesignator | FieldDesignator)+ -> SubscriptDesignator ·,(SubscriptDesignator | FieldDesignator)+ -> FieldDesignator ·
  always (SubscriptDesignator | FieldDesignator)+(1)
355: (SubscriptDesignator | FieldDesignator)+ -> (SubscriptDesignator | FieldDesignator)+ · (SubscriptDesignator | FieldDesignator)+,InitializerPair -> (SubscriptDesignator | FieldDesignator)+ · "=" expression,InitializerPair -> (SubscriptDesignator | FieldDesignator)+ · "=" InitializerList
  "["=s587,"."=s353,"="=s589 | SubscriptDesignator=s354,FieldDesignator=s354,(SubscriptDesignator | FieldDesignator)+=s588
356: commaSepTrailing<InitializerPair | expression | InitializerList> -> InitializerPair ·,commaSepTrailing<InitializerPair | expression | InitializerList> -> InitializerPair · ("," (InitializerPair | expression | InitializerList)?)+,commaSepTrailing<InitializerPair | expression | InitializerList> -> InitializerList ·,commaSepTrailing<InitializerPair | expression | InitializerList> -> InitializerList · ("," (InitializerPair | expression | InitializerList)?)+
  ","=s582,"}"=commaSepTrailing<InitializerPair | expression | InitializerList>(1) | ("," (InitializerPair | expression | InitializerList)?)+=s583
357: InitializerList -> "{" commaSepTrailing<InitializerPair | expression | InitializerList> · "}"
  "}"=s590
358: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",AssignmentExpression -> Identifier UpdateOp expression ·,AssignmentExpression -> Identifier "=" expression ·,AssignmentExpression -> CallExpression UpdateOp expression ·,AssignmentExpression -> CallExpression "=" expression ·,AssignmentExpression -> FieldExpression UpdateOp expression ·,AssignmentExpression -> FieldExpression "=" expression ·,AssignmentExpression -> PointerExpression UpdateOp expression ·,AssignmentExpression -> PointerExpression "=" expression ·,AssignmentExpression -> SubscriptExpression UpdateOp expression ·,AssignmentExpression -> SubscriptExpression "=" expression ·,AssignmentExpression -> ParenthesizedExpression UpdateOp expression ·,AssignmentExpression -> ParenthesizedExpression "=" expression ·,AssignmentExpression -> ScopedNamespaceIdentifier UpdateOp expression ·,AssignmentExpression -> ScopedNamespaceIdentifier "=" expression ·,BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112,","=AssignmentExpression(3),"?"=AssignmentExpression(3),";"=AssignmentExpression(3),UpdateOp=AssignmentExpression(3),"="=AssignmentExpression(3),")"=AssignmentExpression(3),"]"=AssignmentExpression(3),"}"=AssignmentExpression(3),templateArgsEndFallback=AssignmentExpression(3),templateArgsEnd=AssignmentExpression(3) | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
359: CharLiteral -> charLiteralStart EscapeSequence charLiteralEnd ·,CharLiteral -> charLiteralStart charLiteralContent charLiteralEnd ·
  always CharLiteral(3)
360: ("::" attributeIdentifier)+ -> "::" · attributeIdentifier
  attributeIdentifier=s591
361: ("::" attributeIdentifier)+ -> ("::" attributeIdentifier)+ · ("::" attributeIdentifier)+,AttributeName -> attributeIdentifier ("::" attributeIdentifier)+ ·
  "::"=s360,"("=AttributeName(2),","=AttributeName(2),"..."=AttributeName(2),"]]"=AttributeName(2) | ("::" attributeIdentifier)+=s592
362: AttributeArgs -> "(" · ")",AttributeArgs -> "(" · balancedTokens+ ")"
  RawString=s599,"("=s598,"::"=s599,")"=s602,","=s599,"{"=s596,attributeIdentifier=s599,"["=s597,incDec=s599,ArithOp<"+" | "-">=s599,ArithOp<"/" | "%">=s599,BitOp<"|">=s599,BitOp<"^">=s599,CompareOp<"==" | "!=">=s599,CompareOp<"<=" | ">=">=s599,"<"/"<"=s599,templateArgsEnd/">"=s599,BitOp<"<<" | ">>">=s599,UpdateOp=s599,Number=s599,stringLiteralStart=s2,":"=s599,"."=s599,"->"=s599,"..."=s599,"*"=s593,"||"=s594,"&&"=s594,"&"=s595,";"=s599,charLiteralStart=s9 | String=s599,ArithOp=s599,LogicOp=s599,BitOp=s599,CharLiteral=s599,balancedTokens+=s601,balancedTokens=s600
363: ("," AttributeName AttributeArgs { "(" balancedTokens* ")" }?)+ -> "," · AttributeName,("," AttributeName AttributeArgs { "(" balancedTokens* ")" }?)+ -> "," · AttributeName AttributeArgs-1
  attributeIdentifier=s137 | AttributeName=s603
364: ("," AttributeName AttributeArgs { "(" balancedTokens* ")" }?)+ -> ("," AttributeName AttributeArgs { "(" balancedTokens* ")" }?)+ · ("," AttributeName AttributeArgs { "(" balancedTokens* ")" }?)+,commaSep<AttributeName AttributeArgs { "(" balancedTokens* ")" }?> -> AttributeName ("," AttributeName AttributeArgs { "(" balancedTokens* ")" }?)+ ·
  ","=s363,"..."=commaSep<AttributeName AttributeArgs { "(" balancedTokens* ")" }?>(2),"]]"=commaSep<AttributeName AttributeArgs { "(" balancedTokens* ")" }?>(2) | ("," AttributeName AttributeArgs { "(" balancedTokens* ")" }?)+=s604
365: commaSep<AttributeName AttributeArgs { "(" balancedTokens* ")" }?> -> AttributeName AttributeArgs ·,commaSep<AttributeName AttributeArgs { "(" balancedTokens* ")" }?> -> AttributeName AttributeArgs · ("," AttributeName AttributeArgs { "(" balancedTokens* ")" }?)+
  ","=s363,"..."=commaSep<AttributeName AttributeArgs { "(" balancedTokens* ")" }?>(2),"]]"=commaSep<AttributeName AttributeArgs { "(" balancedTokens* ")" }?>(2) | ("," AttributeName AttributeArgs { "(" balancedTokens* ")" }?)+=s605
366: Attribute -> "[[" commaSep<AttributeName AttributeArgs { "(" balancedTokens* ")" }?> "]]" ·
  always Attribute(3)
367: Attribute -> "[[" commaSep<AttributeName AttributeArgs { "(" balancedTokens* ")" }?> "..." · "]]"
  "]]"=s606
368: NamespaceIdentifier-1 -> scopedIdentifier ·,TypeIdentifier-1 -> scopedIdentifier ·
  "("=TypeIdentifier-1(1),DestructorName=TypeIdentifier-1(1),"::"=NamespaceIdentifier-1(1),"<"=TypeIdentifier-1(1),identifier/"const"=TypeIdentifier-1(1),identifier/"volatile"=TypeIdentifier-1(1),identifier/"restrict"=TypeIdentifier-1(1),identifier/"_Atomic"=TypeIdentifier-1(1),identifier/"mutable"=TypeIdentifier-1(1),identifier/"constexpr"=TypeIdentifier-1(1),identifier/"__declspec"=TypeIdentifier-1(1),"["=TypeIdentifier-1(1),identifier/"extern"=TypeIdentifier-1(1),identifier/"static"=TypeIdentifier-1(1),identifier/"register"=TypeIdentifier-1(1),identifier/"inline"=TypeIdentifier-1(1),identifier/"__attribute__"=TypeIdentifier-1(1),identifier/"__based"=TypeIdentifier-1(1),OperatorName=TypeIdentifier-1(1),identifier=TypeIdentifier-1(1),"*"=TypeIdentifier-1(1),"&&"=TypeIdentifier-1(1),"&"=TypeIdentifier-1(1),";"=TypeIdentifier-1(1),identifier/"final"=TypeIdentifier-1(1),"{"=TypeIdentifier-1(1),":"=TypeIdentifier-1(1),","=TypeIdentifier-1(1),incDec=TypeIdentifier-1(1),ArithOp<"+" | "-">=TypeIdentifier-1(1),ArithOp<"/" | "%">=TypeIdentifier-1(1),BitOp<"|">=TypeIdentifier-1(1),BitOp<"^">=TypeIdentifier-1(1),CompareOp<"==" | "!=">=TypeIdentifier-1(1),CompareOp<"<=" | ">=">=TypeIdentifier-1(1),"<"/"<"=TypeIdentifier-1(1),templateArgsEnd/">"=TypeIdentifier-1(1),BitOp<"<<" | ">>">=TypeIdentifier-1(1),"?"=TypeIdentifier-1(1),"."=TypeIdentifier-1(1),"->"=TypeIdentifier-1(1),"..."=TypeIdentifier-1(1),"||"=TypeIdentifier-1(1),UpdateOp=TypeIdentifier-1(1),"="=TypeIdentifier-1(1),")"=TypeIdentifier-1(1),"]"=TypeIdentifier-1(1),templateArgsEndFallback=TypeIdentifier-1(1),templateArgsEnd=TypeIdentifier-1(1),"}"=TypeIdentifier-1(1),identifier/"noexcept"=TypeIdentifier-1(1),identifier/"throw"=TypeIdentifier-1(1)
369: ScopedNamespaceIdentifier -> NamespaceIdentifier "::" · NamespaceIdentifier-1,ScopedNamespaceIdentifier -> TemplateType "::" · NamespaceIdentifier-1,ScopedNamespaceIdentifier -> ScopedNamespaceIdentifier "::" · NamespaceIdentifier-1,ScopedTypeIdentifier -> NamespaceIdentifier "::" · TypeIdentifier-1,ScopedTypeIdentifier -> TemplateType "::" · TypeIdentifier-1,ScopedTypeIdentifier -> ScopedNamespaceIdentifier "::" · TypeIdentifier-1
  scopedIdentifier=s368 | NamespaceIdentifier-1=s347,TypeIdentifier-1=s348
370: emptyDeclaration -> Attribute+ typeSpecifier ";" ·
  always emptyDeclaration(3)
371: FunctionDeclarator-1 -> declarator · ParameterList,FunctionDeclarator-1 -> declarator · ParameterList ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+ ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,ArrayDeclarator -> declarator · "[" "]",ArrayDeclarator -> declarator · "[" expression "]",ArrayDeclarator -> declarator · "[" "*" "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "]",ArrayDeclarator -> declarator · "[" typeQualifier+ expression "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "*" "]",InitDeclarator -> declarator · "=" InitializerList,InitDeclarator -> declarator · "=" expression,InitDeclarator -> declarator · ArgumentList,InitDeclarator -> declarator · InitializerList,commaSep1<declarator | InitDeclarator> -> declarator ·,commaSep1<declarator | InitDeclarator> -> declarator · ("," (declarator | InitDeclarator))+,FunctionDefinition -> Attribute+ declarationSpecifiers declarator · CompoundStatement
  "("=s421,","=s425,"{"=s422,"["=s168,"="=s423,";"=commaSep1<declarator | InitDeclarator>(1) | ArgumentList=s424,ParameterList=s1300,InitializerList=s424,CompoundStatement=s607,("," (declarator | InitDeclarator))+=s426
372: Declaration -> Attribute+ declarationSpecifiers commaSep1<declarator | InitDeclarator> · ";"
  ";"=s608
373: FunctionDefinition -> Attribute+ identifier/"__cdecl" declarationSpecifiers · declarator CompoundStatement
  "("=s180,DestructorName=s26,"::"=s1075,"["=s182,identifier/"__based"=s63,OperatorName=s26,identifier=s1058,"*"=s1079,"&&"=s1081,"&"=s1081 | Identifier=s181,NamespaceIdentifier=s1198,TemplateType=s1198,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s1198,MsBasedModifier=s1189,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,declarator=s609
374: (storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+ -> (storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+ · (storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+,declarationSpecifiers -> (storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+ typeSpecifier (storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+ ·
  identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"__declspec"=s59,identifier/"extern"=s61,identifier/"static"=s61,identifier/"register"=s61,identifier/"inline"=s61,identifier/"__attribute__"=s62,"("=declarationSpecifiers(3),DestructorName=declarationSpecifiers(3),"::"=declarationSpecifiers(3),"["=declarationSpecifiers(3),identifier/"__based"=declarationSpecifiers(3),OperatorName=declarationSpecifiers(3),identifier=declarationSpecifiers(3),"*"=declarationSpecifiers(3),"&&"=declarationSpecifiers(3),"&"=declarationSpecifiers(3),")"=declarationSpecifiers(3),","=declarationSpecifiers(3),"..."=declarationSpecifiers(3),"="=declarationSpecifiers(3),templateArgsEndFallback=declarationSpecifiers(3),templateArgsEnd=declarationSpecifiers(3),"{"=declarationSpecifiers(3),":"=declarationSpecifiers(3),";"=declarationSpecifiers(3) | MsDeclspecModifier=s14,AttributeSpecifier=s14,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+=s149,typeQualifier=s14,storageClassSpecifier=s14
375: ScopedNamespaceIdentifier -> NamespaceIdentifier "::" · NamespaceIdentifier-1,ScopedNamespaceIdentifier -> TemplateType "::" · NamespaceIdentifier-1,ScopedNamespaceIdentifier -> ScopedNamespaceIdentifier "::" · NamespaceIdentifier-1,ScopedTypeIdentifier -> NamespaceIdentifier "::" · TypeIdentifier-1,ScopedTypeIdentifier -> TemplateType "::" · TypeIdentifier-1,ScopedTypeIdentifier -> ScopedNamespaceIdentifier "::" · TypeIdentifier-1,ScopedIdentifier -> NamespaceIdentifier "::" · Identifier-1,ScopedIdentifier -> NamespaceIdentifier "::" · OperatorName,ScopedIdentifier -> NamespaceIdentifier "::" · DestructorName,ScopedIdentifier -> TemplateType "::" · Identifier-1,ScopedIdentifier -> TemplateType "::" · OperatorName,ScopedIdentifier -> TemplateType "::" · DestructorName,ScopedIdentifier -> ScopedNamespaceIdentifier "::" · Identifier-1,ScopedIdentifier -> ScopedNamespaceIdentifier "::" · OperatorName,ScopedIdentifier -> ScopedNamespaceIdentifier "::" · DestructorName
  DestructorName=s349,OperatorName=s349,scopedIdentifier=s1043 | NamespaceIdentifier-1=s347,TypeIdentifier-1=s348,Identifier-1=s349
376: typeQualifier+ -> typeQualifier+ · typeQualifier+,typeQualifier+ -> typeQualifier+ typeQualifier+ ·
  always typeQualifier+(2)
377: PointerDeclarator-1 -> "*" typeQualifier+ declarator ·,PointerDeclarator-1 -> "*" msPointerModifier+ declarator ·,PointerDeclarator-1 -> MsBasedModifier "*" declarator ·,FunctionDeclarator-1 -> declarator · ParameterList,FunctionDeclarator-1 -> declarator · ParameterList ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+ ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,ArrayDeclarator -> declarator · "[" "]",ArrayDeclarator -> declarator · "[" expression "]",ArrayDeclarator -> declarator · "[" "*" "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "]",ArrayDeclarator -> declarator · "[" typeQualifier+ expression "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "*" "]"
  "("=s169,"["=s168,")"=PointerDeclarator-1(3),";"=PointerDeclarator-1(3),","=PointerDeclarator-1(3),"="=PointerDeclarator-1(3),templateArgsEndFallback=PointerDeclarator-1(3),templateArgsEnd=PointerDeclarator-1(3) | ParameterList=s1210
378: typeQualifier+ -> typeQualifier+ · typeQualifier+,PointerDeclarator-1 -> "*" msPointerModifier+ typeQualifier+ · declarator,PointerDeclarator-1 -> MsBasedModifier "*" typeQualifier+ · declarator
  "("=s180,DestructorName=s26,"::"=s178,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s182,identifier/"__based"=s63,OperatorName=s26,identifier=s153,"*"=s179,"&&"=s22,"&"=s22 | Identifier=s181,NamespaceIdentifier=s156,TemplateType=s156,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s156,MsBasedModifier=s18,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,typeQualifier+=s376,typeQualifier=s159,declarator=s610
379: msPointerModifier+ -> msPointerModifier+ · msPointerModifier+,msPointerModifier+ -> msPointerModifier+ msPointerModifier+ ·
  always msPointerModifier+(2)
380: msPointerModifier+ -> msPointerModifier+ · msPointerModifier+,PointerDeclarator-1 -> MsBasedModifier "*" msPointerModifier+ · declarator,PointerDeclarator-1 -> MsBasedModifier "*" msPointerModifier+ · typeQualifier+ declarator
  "("=s180,DestructorName=s26,"::"=s178,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s182,identifier/"__based"=s63,identifier/"__restrict"=s165,OperatorName=s26,identifier=s153,"*"=s179,"&&"=s22,"&"=s22 | Identifier=s181,NamespaceIdentifier=s156,TemplateType=s156,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s156,MsBasedModifier=s18,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,typeQualifier+=s611,msPointerModifier+=s379,typeQualifier=s159,declarator=s610
381: AttributeSpecifier+ -> AttributeSpecifier ·
  always AttributeSpecifier+(1)
382: AttributeSpecifier+ -> AttributeSpecifier+ · AttributeSpecifier+,FunctionDeclarator-1 -> declarator ParameterList AttributeSpecifier+ ·,FunctionDeclarator-1 -> declarator ParameterList AttributeSpecifier+ · ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+
  identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"final"=s384,identifier/"__attribute__"=s62,identifier/"noexcept"=s386,identifier/"throw"=s387,"->"=s383,"("=FunctionDeclarator-1(3),"{"=FunctionDeclarator-1(3),"["=FunctionDeclarator-1(3),":"=FunctionDeclarator-1(3),"="=FunctionDeclarator-1(3),";"=FunctionDeclarator-1(3),","=FunctionDeclarator-1(3) | AttributeSpecifier=s381,Noexcept=s384,ThrowSpecifier=s384,TrailingReturnType=s384,AttributeSpecifier+=s612,((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+=s613,typeQualifier=s384
383: TrailingReturnType -> "->" · typeSpecifier,TrailingReturnType -> "->" · typeSpecifier abstractDeclarator,TrailingReturnType -> "->" · typeQualifier typeSpecifier,TrailingReturnType -> "->" · typeQualifier typeSpecifier abstractDeclarator
  identifier/"bool"=s48,"::"=s141,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s1020,identifier/"typename"=s1028,identifier/"class"=s1249,identifier/"union"=s1022,identifier/"enum"=s1024,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeQualifier=s615,typeSpecifier=s614
384: ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+ -> typeQualifier ·,((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+ -> Noexcept ·,((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+ -> ThrowSpecifier ·,((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+ -> TrailingReturnType ·,((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+ -> identifier/"final" ·
  always ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+(1)
385: ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+ -> ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+ · ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,FunctionDeclarator-1 -> declarator ParameterList ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+ ·
  identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"final"=s384,identifier/"noexcept"=s386,identifier/"throw"=s387,"->"=s383,"("=FunctionDeclarator-1(3),"{"=FunctionDeclarator-1(3),"["=FunctionDeclarator-1(3),":"=FunctionDeclarator-1(3),"="=FunctionDeclarator-1(3),";"=FunctionDeclarator-1(3),","=FunctionDeclarator-1(3) | Noexcept=s384,ThrowSpecifier=s384,TrailingReturnType=s384,((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+=s616,typeQualifier=s384
386: Noexcept -> identifier/"noexcept" ·,Noexcept -> identifier/"noexcept" · "(" ")",Noexcept -> identifier/"noexcept" · "(" expression ")"
  "("=s617,identifier/"const"=Noexcept(1),identifier/"volatile"=Noexcept(1),identifier/"restrict"=Noexcept(1),identifier/"_Atomic"=Noexcept(1),identifier/"mutable"=Noexcept(1),identifier/"constexpr"=Noexcept(1),identifier/"final"=Noexcept(1),"{"=Noexcept(1),"["=Noexcept(1),identifier/"noexcept"=Noexcept(1),identifier/"throw"=Noexcept(1),":"=Noexcept(1),"->"=Noexcept(1),"="=Noexcept(1),")"=Noexcept(1),","=Noexcept(1),";"=Noexcept(1),templateArgsEndFallback=Noexcept(1),templateArgsEnd=Noexcept(1),"..."=Noexcept(1)
387: ThrowSpecifier -> identifier/"throw" · "(" commaSep<TypeDescriptor> ")"
  "("=s618
388: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,ArrayDeclarator -> declarator "[" expression · "]",FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,"]"=s619,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112 | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
389: typeQualifier+ -> typeQualifier+ · typeQualifier+,ArrayDeclarator -> declarator "[" typeQualifier+ · "]",ArrayDeclarator -> declarator "[" typeQualifier+ · expression "]",ArrayDeclarator -> declarator "[" typeQualifier+ · "*" "]"
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s193,"]"=s619,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s621,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,typeQualifier+=s376,expression=s620,typeQualifier=s159
390: ArrayDeclarator -> declarator "[" "]" ·
  always ArrayDeclarator(3)
391: ArrayDeclarator -> declarator "[" "*" · "]",PointerExpression -> "*" · expression
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s193,"]"=s619,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s154
392: Attribute+ -> Attribute+ · Attribute+,ParameterDeclaration -> Attribute+ · declarationSpecifiers,ParameterDeclaration -> Attribute+ · declarationSpecifiers declarator,ParameterDeclaration -> Attribute+ · declarationSpecifiers abstractDeclarator
  identifier/"bool"=s48,"::"=s141,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s85,identifier/"__declspec"=s59,identifier/"extern"=s61,identifier/"static"=s61,identifier/"register"=s61,identifier/"inline"=s61,identifier/"__attribute__"=s62,identifier/"typename"=s89,identifier/"class"=s88,identifier/"union"=s86,identifier/"enum"=s87,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140,"[["=s10 | NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,MsDeclspecModifier=s14,Attribute=s11,AttributeSpecifier=s14,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,Attribute+=s144,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+=s15,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeQualifier=s14,typeSpecifier=s270,declarationSpecifiers=s622,storageClassSpecifier=s14
393: ParameterDeclaration -> declarationSpecifiers ·,ParameterDeclaration -> declarationSpecifiers · declarator,ParameterDeclaration -> declarationSpecifiers · abstractDeclarator,OptionalParameterDeclaration -> declarationSpecifiers · "=" expression,OptionalParameterDeclaration -> declarationSpecifiers · declarator "=" expression,VariadicParameterDeclaration -> declarationSpecifiers · VariadicDeclarator,VariadicParameterDeclaration -> declarationSpecifiers · ReferenceDeclarator-1
  "("=s626,DestructorName=s26,"::"=s1075,"["=s625,identifier/"__based"=s63,OperatorName=s26,identifier=s153,"..."=s630,"*"=s623,"&&"=s627,"&"=s627,"="=s629,")"=ParameterDeclaration(1),","=ParameterDeclaration(1),templateArgsEndFallback=ParameterDeclaration(1),templateArgsEnd=ParameterDeclaration(1) | Identifier=s181,NamespaceIdentifier=s1198,TemplateType=s1198,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s1198,MsBasedModifier=s1281,ParameterList=s1284,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,AbstractPointerDeclarator=s233,AbstractFunctionDeclarator=s233,AbstractArrayDeclarator=s233,AbstractParenthesizedDeclarator=s233,AbstractReferenceDeclarator=s233,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,VariadicDeclarator=s631,ReferenceDeclarator-1=s631,declarator=s628,abstractDeclarator=s624
394: commaSep<ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "..."> -> ParameterDeclaration ·,commaSep<ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "..."> -> ParameterDeclaration · ("," (ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "..."))+,commaSep<ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "..."> -> OptionalParameterDeclaration ·,commaSep<ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "..."> -> OptionalParameterDeclaration · ("," (ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "..."))+,commaSep<ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "..."> -> VariadicParameterDeclaration ·,commaSep<ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "..."> -> VariadicParameterDeclaration · ("," (ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "..."))+,commaSep<ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "..."> -> "..." ·,commaSep<ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "..."> -> "..." · ("," (ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "..."))+
  ","=s632,")"=commaSep<ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "...">(1) | ("," (ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "..."))+=s633
395: ParameterList -> "(" commaSep<ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "..."> · ")"
  ")"=s634
396: ParenthesizedExpression -> "(" expression ")" ·,ParenthesizedExpression -> "(" CommaExpression ")" ·
  always ParenthesizedExpression(3)
397: TypeDescriptor -> typeQualifier+ typeSpecifier ·,TypeDescriptor -> typeQualifier+ typeSpecifier · abstractDeclarator,TypeDescriptor -> typeQualifier+ typeSpecifier · typeQualifier+,TypeDescriptor -> typeQualifier+ typeSpecifier · typeQualifier+ abstractDeclarator
  "("=s231,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s230,"*"=s227,"&&"=s232,"&"=s232,")"=TypeDescriptor(2),templateArgsEndFallback=TypeDescriptor(2),","=TypeDescriptor(2),templateArgsEnd=TypeDescriptor(2),"..."=TypeDescriptor(2),";"=TypeDescriptor(2) | ParameterList=s1284,AbstractPointerDeclarator=s233,AbstractFunctionDeclarator=s233,AbstractArrayDeclarator=s233,AbstractParenthesizedDeclarator=s233,AbstractReferenceDeclarator=s233,typeQualifier+=s635,typeQualifier=s159,abstractDeclarator=s636
398: ParenthesizedDeclarator -> "(" declarator ")" ·
  always ParenthesizedDeclarator(3)
399: typeQualifier+ -> typeQualifier+ · typeQualifier+,TypeDescriptor -> typeSpecifier typeQualifier+ ·,TypeDescriptor -> typeSpecifier typeQualifier+ · abstractDeclarator
  "("=s231,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s230,"*"=s227,"&&"=s232,"&"=s232,")"=TypeDescriptor(2),templateArgsEndFallback=TypeDescriptor(2),","=TypeDescriptor(2),templateArgsEnd=TypeDescriptor(2),"..."=TypeDescriptor(2),";"=TypeDescriptor(2) | ParameterList=s1284,AbstractPointerDeclarator=s233,AbstractFunctionDeclarator=s233,AbstractArrayDeclarator=s233,AbstractParenthesizedDeclarator=s233,AbstractReferenceDeclarator=s233,typeQualifier+=s376,typeQualifier=s159,abstractDeclarator=s636
400: AbstractFunctionDeclarator -> abstractDeclarator · ParameterList,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList TrailingReturnType,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+ TrailingReturnType,AbstractArrayDeclarator -> abstractDeclarator · "[" "]",AbstractArrayDeclarator -> abstractDeclarator · "[" expression "]",AbstractArrayDeclarator -> abstractDeclarator · "[" "*" "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ expression "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ "*" "]",TypeDescriptor -> typeSpecifier abstractDeclarator ·
  "("=s169,"["=s447,")"=TypeDescriptor(2),templateArgsEndFallback=TypeDescriptor(2),","=TypeDescriptor(2),templateArgsEnd=TypeDescriptor(2),"..."=TypeDescriptor(2),";"=TypeDescriptor(2) | ParameterList=s1289
401: CastExpression -> "(" TypeDescriptor ")" · expression,CompoundLiteralExpression -> "(" TypeDescriptor ")" · InitializerList
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"{"=s133,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,InitializerList=s638,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s637
402: ScopedNamespaceIdentifier -> TemplateType · "::" NamespaceIdentifier-1,ScopedTypeIdentifier -> TemplateType · "::" TypeIdentifier-1,className -> TemplateType ·
  "::"=s369,"("=className(1),identifier/"const"=className(1),identifier/"volatile"=className(1),identifier/"restrict"=className(1),identifier/"_Atomic"=className(1),identifier/"mutable"=className(1),identifier/"constexpr"=className(1),")"=className(1),identifier/"final"=className(1),"{"=className(1),"["=className(1),":"=className(1),"*"=className(1),"&&"=className(1),"&"=className(1),identifier/"__based"=className(1),identifier=className(1),identifier/"__declspec"=className(1),identifier/"extern"=className(1),identifier/"static"=className(1),identifier/"register"=className(1),identifier/"inline"=className(1),identifier/"__attribute__"=className(1),","=className(1),"..."=className(1),incDec=className(1),ArithOp<"+" | "-">=className(1),ArithOp<"/" | "%">=className(1),BitOp<"|">=className(1),BitOp<"^">=className(1),CompareOp<"==" | "!=">=className(1),CompareOp<"<=" | ">=">=className(1),"<"/"<"=className(1),templateArgsEnd/">"=className(1),BitOp<"<<" | ">>">=className(1),"?"=className(1),"."=className(1),"->"=className(1),"||"=className(1),";"=className(1),UpdateOp=className(1),"="=className(1),templateArgsEndFallback=className(1),templateArgsEnd=className(1),"]"=className(1),"}"=className(1),identifier/"noexcept"=className(1),identifier/"throw"=className(1)
403: commaSep1<Identifier> -> Identifier ·,commaSep1<Identifier> -> Identifier · ("," Identifier)+
  ","=s410,"]"=commaSep1<Identifier>(1) | ("," Identifier)+=s411
404: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,_anon-1 -> expression ·,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112,templateArgsEndFallback=_anon-1(1),","=_anon-1(1),templateArgsEnd=_anon-1(1) | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
405: _anon -> TypeDescriptor ·,ParameterPackExpansion -> TypeDescriptor · "..."
  "..."=s639,templateArgsEndFallback=_anon(1),","=_anon(1),templateArgsEnd=_anon(1)
406: commaSep<_anon[@dynamicPrecedence=3] { TypeDescriptor } | ParameterPackExpansion[@dynamicPrecedence=2] { TypeDescriptor "..." } | _anon[@dynamicPrecedence=1] { expression }> -> _anon ·,commaSep<_anon[@dynamicPrecedence=3] { TypeDescriptor } | ParameterPackExpansion[@dynamicPrecedence=2] { TypeDescriptor "..." } | _anon[@dynamicPrecedence=1] { expression }> -> _anon · ("," (_anon[@dynamicPrecedence=3] { TypeDescriptor } | ParameterPackExpansion[@dynamicPrecedence=2] { TypeDescriptor "..." } | _anon[@dynamicPrecedence=1] { expression }))+,commaSep<_anon[@dynamicPrecedence=3] { TypeDescriptor } | ParameterPackExpansion[@dynamicPrecedence=2] { TypeDescriptor "..." } | _anon[@dynamicPrecedence=1] { expression }> -> ParameterPackExpansion ·,commaSep<_anon[@dynamicPrecedence=3] { TypeDescriptor } | ParameterPackExpansion[@dynamicPrecedence=2] { TypeDescriptor "..." } | _anon[@dynamicPrecedence=1] { expression }> -> ParameterPackExpansion · ("," (_anon[@dynamicPrecedence=3] { TypeDescriptor } | ParameterPackExpansion[@dynamicPrecedence=2] { TypeDescriptor "..." } | _anon[@dynamicPrecedence=1] { expression }))+,commaSep<_anon[@dynamicPrecedence=3] { TypeDescriptor } | ParameterPackExpansion[@dynamicPrecedence=2] { TypeDescriptor "..." } | _anon[@dynamicPrecedence=1] { expression }> -> _anon-1 ·,commaSep<_anon[@dynamicPrecedence=3] { TypeDescriptor } | ParameterPackExpansion[@dynamicPrecedence=2] { TypeDescriptor "..." } | _anon[@dynamicPrecedence=1] { expression }> -> _anon-1 · ("," (_anon[@dynamicPrecedence=3] { TypeDescriptor } | ParameterPackExpansion[@dynamicPrecedence=2] { TypeDescriptor "..." } | _anon[@dynamicPrecedence=1] { expression }))+
  ","=s640,templateArgsEndFallback=commaSep<_anon[@dynamicPrecedence=3] { TypeDescriptor } | ParameterPackExpansion[@dynamicPrecedence=2] { TypeDescriptor "..." } | _anon[@dynamicPrecedence=1] { expression }>(1),templateArgsEnd=commaSep<_anon[@dynamicPrecedence=3] { TypeDescriptor } | ParameterPackExpansion[@dynamicPrecedence=2] { TypeDescriptor "..." } | _anon[@dynamicPrecedence=1] { expression }>(1) | ("," (_anon[@dynamicPrecedence=3] { TypeDescriptor } | ParameterPackExpansion[@dynamicPrecedence=2] { TypeDescriptor "..." } | _anon[@dynamicPrecedence=1] { expression }))+=s641
407: TemplateArgumentList -> "<" commaSep<_anon[@dynamicPrecedence=3] { TypeDescriptor } | ParameterPackExpansion[@dynamicPrecedence=2] { TypeDescriptor "..." } | _anon[@dynamicPrecedence=1] { expression }> · templateArgsEnd,TemplateArgumentList -> "<" commaSep<_anon[@dynamicPrecedence=3] { TypeDescriptor } | ParameterPackExpansion[@dynamicPrecedence=2] { TypeDescriptor "..." } | _anon[@dynamicPrecedence=1] { expression }> · templateArgsEndFallback
  templateArgsEndFallback=s642,templateArgsEnd=s642
408: ("," expression)+ -> "," · expression
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s643
409: ("," expression)+ -> ("," expression)+ · ("," expression)+,commaSep1<expression> -> expression ("," expression)+ ·
  ","=s408,"]"=commaSep1<expression>(2) | ("," expression)+=s644
410: ("," Identifier)+ -> "," · Identifier
  identifier=s264 | Identifier=s645
411: ("," Identifier)+ -> ("," Identifier)+ · ("," Identifier)+,commaSep1<Identifier> -> Identifier ("," Identifier)+ ·
  ","=s410,"]"=commaSep1<Identifier>(2) | ("," Identifier)+=s646
412: StructuredBindingDeclarator -> "[" commaSep1<Identifier> "]" ·
  always StructuredBindingDeclarator(3)
413: LambdaCaptureSpecifier -> "[" "=" "]" ·,LambdaCaptureSpecifier -> "[" "&" "]" ·,LambdaCaptureSpecifier -> "[" commaSep1<expression> "]" ·
  always LambdaCaptureSpecifier(3)
414: LambdaCaptureSpecifier -> "[" "=" "," · commaSep1<expression> "]",LambdaCaptureSpecifier -> "[" "&" "," · commaSep1<expression> "]"
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s186,commaSep1<expression>=s647
415: FieldInitializer -> FieldIdentifier · InitializerList,FieldInitializer -> FieldIdentifier · InitializerList "...",FieldInitializer -> FieldIdentifier · ArgumentList,FieldInitializer -> FieldIdentifier · ArgumentList "...",FieldInitializer -> ScopedFieldIdentifier · InitializerList,FieldInitializer -> ScopedFieldIdentifier · InitializerList "...",FieldInitializer -> ScopedFieldIdentifier · ArgumentList,FieldInitializer -> ScopedFieldIdentifier · ArgumentList "..."
  "("=s124,"{"=s133 | ArgumentList=s648,InitializerList=s648
416: commaSep1<FieldInitializer> -> FieldInitializer ·,commaSep1<FieldInitializer> -> FieldInitializer · ("," FieldInitializer)+
  ","=s649,"{"=commaSep1<FieldInitializer>(1),"="=commaSep1<FieldInitializer>(1) | ("," FieldInitializer)+=s650
417: FieldInitializerList -> ":" commaSep1<FieldInitializer> ·
  always FieldInitializerList(2)
418: constructorOrDestructorDefinition -> FunctionDeclarator-1 FieldInitializerList CompoundStatement ·,constructorOrDestructorDefinition -> FunctionDeclarator-1 FieldInitializerList DefaultMethodClause ·,constructorOrDestructorDefinition -> FunctionDeclarator-1 FieldInitializerList DeleteMethodClause ·,constructorOrDestructorDefinition -> ExplicitFunctionSpecifier FunctionDeclarator-1 CompoundStatement ·,constructorOrDestructorDefinition -> ExplicitFunctionSpecifier FunctionDeclarator-1 DefaultMethodClause ·,constructorOrDestructorDefinition -> ExplicitFunctionSpecifier FunctionDeclarator-1 DeleteMethodClause ·,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ FunctionDeclarator-1 CompoundStatement ·,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ FunctionDeclarator-1 DefaultMethodClause ·,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ FunctionDeclarator-1 DeleteMethodClause ·,constructorOrDestructorDefinition -> identifier/"virtual" FunctionDeclarator-1 CompoundStatement ·,constructorOrDestructorDefinition -> identifier/"virtual" FunctionDeclarator-1 DefaultMethodClause ·,constructorOrDestructorDefinition -> identifier/"virtual" FunctionDeclarator-1 DeleteMethodClause ·
  always constructorOrDestructorDefinition(3)
419: DefaultMethodClause -> "=" identifier/"default" · ";"
  ";"=s651
420: DeleteMethodClause -> "=" identifier/"delete" · ";"
  ";"=s652
421: ParameterList -> "(" · commaSep<ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "..."> ")",ArgumentList -> "(" · commaSep<expression | InitializerList> ")"
  RawString=s35,"("=s190,identifier/"bool"=s57,"::"=s1069,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s85,identifier/"__declspec"=s59,"{"=s133,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"extern"=s61,identifier/"static"=s61,identifier/"register"=s61,identifier/"inline"=s61,identifier/"__attribute__"=s62,identifier/"typename"=s89,identifier/"class"=s88,identifier/"delete"=s93,identifier/"union"=s86,identifier/"enum"=s87,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s1062,"..."=s394,"[["=s10,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54,")"=commaSep<expression | InitializerList>(0),")"=commaSep<ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "...">(0) | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s1202,TemplateType=s1211,TypeIdentifier=s49,ScopedTypeIdentifier=s49,ScopedNamespaceIdentifier=s1205,StructSpecifier=s48,MsDeclspecModifier=s14,Attribute=s11,CharLiteral=s56,AttributeSpecifier=s14,ParameterDeclaration=s394,ScopedIdentifier=s188,TemplateFunction=s56,OptionalParameterDeclaration=s394,VariadicParameterDeclaration=s394,InitializerList=s340,ParenthesizedExpression=s50,ConcatenatedString=s56,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,Attribute+=s392,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+=s15,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,commaSep<expression | InitializerList>=s341,expression=s339,typeQualifier=s14,typeSpecifier=s270,declarationSpecifiers=s393,storageClassSpecifier=s14,commaSep<ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "...">=s395
422: InitializerList -> "{" · commaSepTrailing<InitializerPair | expression | InitializerList> "}",CompoundStatement -> "{" · "}",CompoundStatement -> "{" · topLevelItem+ "}"
  RawString=s35,"("=s20,identifier/"bool"=s57,DestructorName=s26,"::"=s5,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s85,identifier/"__declspec"=s59,"{"=s422,"}"=s220,"["=s654,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"virtual"=s37,identifier/"extern"=s60,identifier/"static"=s61,identifier/"register"=s61,identifier/"inline"=s61,identifier/"__attribute__"=s62,identifier/"__based"=s63,identifier/"throw"=s78,OperatorName=s26,identifier/"template"=s81,identifier/"typename"=s89,identifier/"class"=s88,identifier/"using"=s64,identifier/"__cdecl"=s84,identifier/"case"=s75,identifier/"default"=s76,identifier/"if"=s65,identifier/"switch"=s66,identifier/"do"=s67,identifier/"while"=s68,identifier/"for"=s69,identifier/"return"=s70,identifier/"break"=s71,identifier/"continue"=s72,identifier/"goto"=s73,identifier/"typedef"=s74,identifier/"try"=s77,identifier/"namespace"=s79,identifier/"static_assert"=s80,identifier/"explicit"=s82,identifier/"delete"=s93,identifier/"operator"=s83,identifier/"union"=s86,identifier/"enum"=s87,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s3,"."=s353,"[["=s10,"*"=s17,"&&"=s22,"&"=s21,";"=s31,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s23,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s6,TemplateType=s7,TypeIdentifier=s49,ScopedTypeIdentifier=s49,ScopedNamespaceIdentifier=s8,StructSpecifier=s48,MsDeclspecModifier=s14,Attribute=s11,CharLiteral=s56,AttributeSpecifier=s13,MsBasedModifier=s18,PointerDeclarator-1=s26,FunctionDeclarator-1=s27,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s24,TemplateFunction=s28,StructuredBindingDeclarator=s26,InitializerList=s356,InitializerPair=s356,SubscriptDesignator=s354,FieldDesignator=s354,TemplateDeclaration=s42,AliasDeclaration=s42,Declaration=s42,FunctionDefinition=s42,CompoundStatement=s33,LinkageSpecification=s42,CaseStatement=s34,LabeledStatement=s33,StatementIdentifier=s30,ExpressionStatement=s33,CommaExpression=s32,IfStatement=s33,SwitchStatement=s33,DoStatement=s33,ParenthesizedExpression=s50,WhileStatement=s33,ForStatement=s33,ReturnStatement=s33,BreakStatement=s33,ContinueStatement=s33,GotoStatement=s33,TypeDefinition=s42,ForRangeLoop=s34,TryStatement=s34,ThrowStatement=s34,NamespaceDefinition=s42,UsingDeclaration=s42,StaticAssertDeclaration=s42,ConcatenatedString=s56,TemplateInstantiation=s42,FunctionDefinition-1=s42,ExplicitFunctionSpecifier=s37,FunctionDefinition-2=s42,OperatorCast=s39,Declaration-2=s42,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,Attribute+=s12,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+=s15,(SubscriptDesignator | FieldDesignator)+=s355,topLevelItem+=s219,(storageClassSpecifier | typeQualifier | AttributeSpecifier)+=s36,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,expression=s653,typeQualifier=s13,typeSpecifier=s16,declarationSpecifiers=s29,storageClassSpecifier=s13,declarator=s19,commaSepTrailing<InitializerPair | expression | InitializerList>=s357,emptyDeclaration=s42,topLevelItem=s43,statement=s42,nonCaseStatement=s34,constructorOrDestructorDefinition=s38,operatorCastDefinition=s40,operatorCastDeclaration=s41
423: InitDeclarator -> declarator "=" · InitializerList,InitDeclarator -> declarator "=" · expression
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"{"=s133,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,InitializerList=s656,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s655
424: InitDeclarator -> declarator ArgumentList ·,InitDeclarator -> declarator InitializerList ·
  always InitDeclarator(2)
425: ("," (declarator | InitDeclarator))+ -> "," · declarator,("," (declarator | InitDeclarator))+ -> "," · InitDeclarator
  "("=s180,DestructorName=s26,"::"=s1075,"["=s182,identifier/"__based"=s63,OperatorName=s26,identifier=s1058,"*"=s1079,"&&"=s1081,"&"=s1081 | Identifier=s181,NamespaceIdentifier=s1198,TemplateType=s1198,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s1198,MsBasedModifier=s1189,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,InitDeclarator=s658,declarator=s657
426: ("," (declarator | InitDeclarator))+ -> ("," (declarator | InitDeclarator))+ · ("," (declarator | InitDeclarator))+,commaSep1<declarator | InitDeclarator> -> declarator ("," (declarator | InitDeclarator))+ ·,commaSep1<declarator | InitDeclarator> -> InitDeclarator ("," (declarator | InitDeclarator))+ ·
  ","=s425,";"=commaSep1<declarator | InitDeclarator>(2) | ("," (declarator | InitDeclarator))+=s659
427: FunctionDefinition -> declarationSpecifiers declarator CompoundStatement ·
  always FunctionDefinition(3)
428: Declaration -> declarationSpecifiers commaSep1<declarator | InitDeclarator> ";" ·
  always Declaration(3)
429: LabeledStatement -> StatementIdentifier ":" statement ·
  always LabeledStatement(3)
430: (RawString | String)+ -> (RawString | String)+ · (RawString | String)+,(RawString | String)+ -> (RawString | String)+ (RawString | String)+ ·
  always (RawString | String)+(2)
431: constructorOrDestructorDefinition -> ExplicitFunctionSpecifier FunctionDeclarator-1 FieldInitializerList · CompoundStatement,constructorOrDestructorDefinition -> ExplicitFunctionSpecifier FunctionDeclarator-1 FieldInitializerList · DefaultMethodClause,constructorOrDestructorDefinition -> ExplicitFunctionSpecifier FunctionDeclarator-1 FieldInitializerList · DeleteMethodClause,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ FunctionDeclarator-1 FieldInitializerList · CompoundStatement,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ FunctionDeclarator-1 FieldInitializerList · DefaultMethodClause,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ FunctionDeclarator-1 FieldInitializerList · DeleteMethodClause,constructorOrDestructorDefinition -> identifier/"virtual" FunctionDeclarator-1 FieldInitializerList · CompoundStatement,constructorOrDestructorDefinition -> identifier/"virtual" FunctionDeclarator-1 FieldInitializerList · DefaultMethodClause,constructorOrDestructorDefinition -> identifier/"virtual" FunctionDeclarator-1 FieldInitializerList · DeleteMethodClause
  "{"=s45,"="=s200 | CompoundStatement=s660,DefaultMethodClause=s660,DeleteMethodClause=s660
432: declarator -> FunctionDeclarator-1 ·,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ ExplicitFunctionSpecifier FunctionDeclarator-1 · CompoundStatement,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ ExplicitFunctionSpecifier FunctionDeclarator-1 · DefaultMethodClause,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ ExplicitFunctionSpecifier FunctionDeclarator-1 · DeleteMethodClause,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ ExplicitFunctionSpecifier FunctionDeclarator-1 · FieldInitializerList CompoundStatement,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ ExplicitFunctionSpecifier FunctionDeclarator-1 · FieldInitializerList DefaultMethodClause,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ ExplicitFunctionSpecifier FunctionDeclarator-1 · FieldInitializerList DeleteMethodClause,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ identifier/"virtual" FunctionDeclarator-1 · CompoundStatement,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ identifier/"virtual" FunctionDeclarator-1 · DefaultMethodClause,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ identifier/"virtual" FunctionDeclarator-1 · DeleteMethodClause,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ identifier/"virtual" FunctionDeclarator-1 · FieldInitializerList CompoundStatement,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ identifier/"virtual" FunctionDeclarator-1 · FieldInitializerList DefaultMethodClause,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ identifier/"virtual" FunctionDeclarator-1 · FieldInitializerList DeleteMethodClause
  "{"=s45,":"=s197,"="=s200,"("=declarator(1),"["=declarator(1) | CompoundStatement=s660,FieldInitializerList=s661,DefaultMethodClause=s660,DeleteMethodClause=s660
433: operatorCastDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ ExplicitFunctionSpecifier OperatorCast · CompoundStatement,operatorCastDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ ExplicitFunctionSpecifier OperatorCast · DefaultMethodClause,operatorCastDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ ExplicitFunctionSpecifier OperatorCast · DeleteMethodClause,operatorCastDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ identifier/"virtual" OperatorCast · CompoundStatement,operatorCastDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ identifier/"virtual" OperatorCast · DefaultMethodClause,operatorCastDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ identifier/"virtual" OperatorCast · DeleteMethodClause
  "{"=s45,"="=s200 | CompoundStatement=s662,DefaultMethodClause=s662,DeleteMethodClause=s662
434: operatorCastDefinition -> ExplicitFunctionSpecifier OperatorCast CompoundStatement ·,operatorCastDefinition -> ExplicitFunctionSpecifier OperatorCast DefaultMethodClause ·,operatorCastDefinition -> ExplicitFunctionSpecifier OperatorCast DeleteMethodClause ·,operatorCastDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ OperatorCast CompoundStatement ·,operatorCastDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ OperatorCast DefaultMethodClause ·,operatorCastDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ OperatorCast DeleteMethodClause ·,operatorCastDefinition -> identifier/"virtual" OperatorCast CompoundStatement ·,operatorCastDefinition -> identifier/"virtual" OperatorCast DefaultMethodClause ·,operatorCastDefinition -> identifier/"virtual" OperatorCast DeleteMethodClause ·
  always operatorCastDefinition(3)
435: operatorCastDeclaration -> ExplicitFunctionSpecifier OperatorCast ";" ·,operatorCastDeclaration -> identifier/"virtual" OperatorCast ";" ·
  always operatorCastDeclaration(3)
436: operatorCastDeclaration -> ExplicitFunctionSpecifier OperatorCast "=" · expression ";",DefaultMethodClause -> "=" · identifier/"default" ";",DeleteMethodClause -> "=" · identifier/"delete" ";",operatorCastDeclaration -> identifier/"virtual" OperatorCast "=" · expression ";"
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"default"=s419,identifier/"delete"=s438,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s663
437: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,operatorCastDeclaration -> OperatorCast "=" expression · ";",FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112,";"=s664 | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
438: DeleteMethodClause -> "=" identifier/"delete" · ";",DeleteExpression -> identifier/"delete" · expression,DeleteExpression -> identifier/"delete" · "[" "]" expression
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s310,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,";"=s652,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s309
439: CompoundStatement -> "{" topLevelItem+ "}" ·
  always CompoundStatement(3)
440: (typeQualifier)+ -> typeQualifier ·
  always (typeQualifier)+(1)
441: (typeQualifier)+ -> (typeQualifier)+ · (typeQualifier)+,AbstractPointerDeclarator -> "*" (typeQualifier)+ ·,AbstractPointerDeclarator -> "*" (typeQualifier)+ · abstractDeclarator
  "("=s231,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s230,"*"=s227,"&&"=s232,"&"=s232,")"=AbstractPointerDeclarator(2),","=AbstractPointerDeclarator(2),templateArgsEndFallback=AbstractPointerDeclarator(2),templateArgsEnd=AbstractPointerDeclarator(2),"..."=AbstractPointerDeclarator(2),";"=AbstractPointerDeclarator(2) | ParameterList=s1284,AbstractPointerDeclarator=s233,AbstractFunctionDeclarator=s233,AbstractArrayDeclarator=s233,AbstractParenthesizedDeclarator=s233,AbstractReferenceDeclarator=s233,(typeQualifier)+=s665,typeQualifier=s440,abstractDeclarator=s666
442: AbstractPointerDeclarator -> "*" abstractDeclarator ·,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList TrailingReturnType,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+ TrailingReturnType,AbstractArrayDeclarator -> abstractDeclarator · "[" "]",AbstractArrayDeclarator -> abstractDeclarator · "[" expression "]",AbstractArrayDeclarator -> abstractDeclarator · "[" "*" "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ expression "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ "*" "]"
  "("=s169,"["=s447,")"=AbstractPointerDeclarator(2),","=AbstractPointerDeclarator(2),templateArgsEndFallback=AbstractPointerDeclarator(2),templateArgsEnd=AbstractPointerDeclarator(2),"..."=AbstractPointerDeclarator(2),";"=AbstractPointerDeclarator(2) | ParameterList=s1289
443: (typeQualifier | Noexcept | ThrowSpecifier)+ -> typeQualifier ·,(typeQualifier | Noexcept | ThrowSpecifier)+ -> Noexcept ·,(typeQualifier | Noexcept | ThrowSpecifier)+ -> ThrowSpecifier ·
  always (typeQualifier | Noexcept | ThrowSpecifier)+(1)
444: (typeQualifier | Noexcept | ThrowSpecifier)+ -> (typeQualifier | Noexcept | ThrowSpecifier)+ · (typeQualifier | Noexcept | ThrowSpecifier)+,AbstractFunctionDeclarator -> ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+ ·,AbstractFunctionDeclarator -> ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+ · TrailingReturnType
  identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"noexcept"=s386,identifier/"throw"=s387,"->"=s1141,"("=AbstractFunctionDeclarator(2),"{"=AbstractFunctionDeclarator(2),"["=AbstractFunctionDeclarator(2),";"=AbstractFunctionDeclarator(2),"="=AbstractFunctionDeclarator(2) | Noexcept=s443,ThrowSpecifier=s443,TrailingReturnType=s668,(typeQualifier | Noexcept | ThrowSpecifier)+=s667,typeQualifier=s443
445: (typeQualifier | Noexcept | ThrowSpecifier)+ -> (typeQualifier | Noexcept | ThrowSpecifier)+ · (typeQualifier | Noexcept | ThrowSpecifier)+,AbstractFunctionDeclarator -> ParameterList TrailingReturnType ·,AbstractFunctionDeclarator -> ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+ ·,AbstractFunctionDeclarator -> ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+ · TrailingReturnType,AbstractFunctionDeclarator -> abstractDeclarator ParameterList ·,AbstractFunctionDeclarator -> abstractDeclarator ParameterList · TrailingReturnType,AbstractFunctionDeclarator -> abstractDeclarator ParameterList · (typeQualifier | Noexcept | ThrowSpecifier)+,AbstractFunctionDeclarator -> abstractDeclarator ParameterList · (typeQualifier | Noexcept | ThrowSpecifier)+ TrailingReturnType
  always AbstractFunctionDeclarator(2)
446: AbstractFunctionDeclarator -> abstractDeclarator ParameterList ·,AbstractFunctionDeclarator -> abstractDeclarator ParameterList · TrailingReturnType,AbstractFunctionDeclarator -> abstractDeclarator ParameterList · (typeQualifier | Noexcept | ThrowSpecifier)+,AbstractFunctionDeclarator -> abstractDeclarator ParameterList · (typeQualifier | Noexcept | ThrowSpecifier)+ TrailingReturnType
  identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"noexcept"=s386,identifier/"throw"=s387,"->"=s1141,"("=AbstractFunctionDeclarator(2),"{"=AbstractFunctionDeclarator(2),"["=AbstractFunctionDeclarator(2),";"=AbstractFunctionDeclarator(2),"="=AbstractFunctionDeclarator(2) | Noexcept=s443,ThrowSpecifier=s443,TrailingReturnType=s668,(typeQualifier | Noexcept | ThrowSpecifier)+=s669,typeQualifier=s443
447: AbstractArrayDeclarator -> abstractDeclarator "[" · "]",AbstractArrayDeclarator -> abstractDeclarator "[" · expression "]",AbstractArrayDeclarator -> abstractDeclarator "[" · "*" "]",AbstractArrayDeclarator -> abstractDeclarator "[" · typeQualifier+ "]",AbstractArrayDeclarator -> abstractDeclarator "[" · typeQualifier+ expression "]",AbstractArrayDeclarator -> abstractDeclarator "[" · typeQualifier+ "*" "]"
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s193,"]"=s672,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s673,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,typeQualifier+=s671,expression=s670,typeQualifier=s159
448: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,AbstractArrayDeclarator -> "[" expression · "]",FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,"]"=s672,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112 | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
449: typeQualifier+ -> typeQualifier+ · typeQualifier+,AbstractArrayDeclarator -> "[" typeQualifier+ · "]",AbstractArrayDeclarator -> "[" typeQualifier+ · expression "]",AbstractArrayDeclarator -> "[" typeQualifier+ · "*" "]"
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s193,"]"=s672,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s673,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,typeQualifier+=s376,expression=s670,typeQualifier=s159
450: AbstractArrayDeclarator -> "[" "]" ·
  always AbstractArrayDeclarator(2)
451: AbstractArrayDeclarator -> "[" "*" · "]",PointerExpression -> "*" · expression
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s193,"]"=s672,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s154
452: AbstractFunctionDeclarator -> abstractDeclarator · ParameterList,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList TrailingReturnType,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+ TrailingReturnType,AbstractArrayDeclarator -> abstractDeclarator · "[" "]",AbstractArrayDeclarator -> abstractDeclarator · "[" expression "]",AbstractArrayDeclarator -> abstractDeclarator · "[" "*" "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ expression "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ "*" "]",AbstractParenthesizedDeclarator -> "(" abstractDeclarator · ")"
  "("=s169,")"=s674,"["=s447 | ParameterList=s1289
453: AbstractFunctionDeclarator -> abstractDeclarator · ParameterList,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList TrailingReturnType,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+ TrailingReturnType,AbstractArrayDeclarator -> abstractDeclarator · "[" "]",AbstractArrayDeclarator -> abstractDeclarator · "[" expression "]",AbstractArrayDeclarator -> abstractDeclarator · "[" "*" "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ expression "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ "*" "]",AbstractReferenceDeclarator -> "&" abstractDeclarator ·,AbstractReferenceDeclarator -> "&&" abstractDeclarator ·
  "("=s169,"["=s447,")"=AbstractReferenceDeclarator(2),","=AbstractReferenceDeclarator(2),templateArgsEndFallback=AbstractReferenceDeclarator(2),templateArgsEnd=AbstractReferenceDeclarator(2),"..."=AbstractReferenceDeclarator(2),";"=AbstractReferenceDeclarator(2) | ParameterList=s1289
454: LambdaExpression -> LambdaCaptureSpecifier AbstractFunctionDeclarator CompoundStatement ·
  always LambdaExpression(3)
455: MsDeclspecModifier -> identifier/"__declspec" "(" Identifier · ")"
  ")"=s675
456: Attribute+ -> Attribute+ · Attribute+,Declaration -> Attribute+ · declarationSpecifiers commaSep1<declarator | InitDeclarator> ";",FunctionDefinition -> Attribute+ · declarationSpecifiers declarator CompoundStatement,FunctionDefinition -> Attribute+ · identifier/"__cdecl" declarationSpecifiers declarator CompoundStatement
  identifier/"bool"=s48,"::"=s141,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s85,identifier/"__declspec"=s59,identifier/"extern"=s61,identifier/"static"=s61,identifier/"register"=s61,identifier/"inline"=s61,identifier/"__attribute__"=s62,identifier/"typename"=s89,identifier/"class"=s88,identifier/"__cdecl"=s148,identifier/"union"=s86,identifier/"enum"=s87,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140,"[["=s10 | NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,MsDeclspecModifier=s14,Attribute=s11,AttributeSpecifier=s14,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,Attribute+=s144,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+=s15,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeQualifier=s14,typeSpecifier=s270,declarationSpecifiers=s146,storageClassSpecifier=s14
457: LinkageSpecification -> identifier/"extern" String FunctionDefinition ·,LinkageSpecification -> identifier/"extern" String Declaration ·,LinkageSpecification -> identifier/"extern" String DeclarationList ·
  always LinkageSpecification(3)
458: AttributeSpecifier -> identifier/"__attribute__" "(" ArgumentList · ")"
  ")"=s676
459: AliasDeclaration -> identifier/"using" TypeIdentifier "=" · TypeDescriptor ";"
  identifier/"bool"=s48,"::"=s141,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s1019,identifier/"typename"=s1027,identifier/"class"=s1026,identifier/"union"=s1021,identifier/"enum"=s1023,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,TypeDescriptor=s677,StructSpecifier=s48,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,typeQualifier+=s172,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeQualifier=s159,typeSpecifier=s175
460: UsingDeclaration -> identifier/"using" Identifier ";" ·,UsingDeclaration -> identifier/"using" ScopedIdentifier ";" ·
  always UsingDeclaration(3)
461: UsingDeclaration -> identifier/"using" identifier/"namespace" Identifier · ";",UsingDeclaration -> identifier/"using" identifier/"namespace" ScopedIdentifier · ";"
  ";"=s678
462: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,CommaExpression -> expression · "," expression,CommaExpression -> expression · "," CommaExpression,ExpressionStatement -> expression · ";",ConditionClause -> "(" expression · ")",FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,")"=s679,","=s106,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112,";"=s107 | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
463: Attribute+ -> Attribute+ · Attribute+,Declaration -> Attribute+ · declarationSpecifiers commaSep1<declarator | InitDeclarator> ";"
  identifier/"bool"=s48,"::"=s141,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s85,identifier/"__declspec"=s59,identifier/"extern"=s61,identifier/"static"=s61,identifier/"register"=s61,identifier/"inline"=s61,identifier/"__attribute__"=s62,identifier/"typename"=s89,identifier/"class"=s88,identifier/"union"=s86,identifier/"enum"=s87,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140,"[["=s10 | NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,MsDeclspecModifier=s14,Attribute=s11,AttributeSpecifier=s14,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,Attribute+=s144,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+=s15,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeQualifier=s14,typeSpecifier=s270,declarationSpecifiers=s680,storageClassSpecifier=s14
464: Declaration -> declarationSpecifiers · commaSep1<declarator | InitDeclarator> ";",Declaration-1 -> declarationSpecifiers · declarator "=" expression,Declaration-1 -> declarationSpecifiers · declarator InitializerList
  "("=s180,DestructorName=s26,"::"=s1075,"["=s182,identifier/"__based"=s63,OperatorName=s26,identifier=s1058,"*"=s1079,"&&"=s1081,"&"=s1081 | Identifier=s181,NamespaceIdentifier=s1198,TemplateType=s1198,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s1198,MsBasedModifier=s1189,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,InitDeclarator=s202,declarator=s681,commaSep1<declarator | InitDeclarator>=s203
465: ExpressionStatement -> CommaExpression · ";",ConditionClause -> "(" CommaExpression · ")"
  ")"=s679,";"=s107
466: ConditionClause -> "(" Declaration · expression ")",ConditionClause -> "(" Declaration · CommaExpression ")",ConditionClause -> "(" ExpressionStatement · expression ")",ConditionClause -> "(" ExpressionStatement · CommaExpression ")"
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,CommaExpression=s683,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s682
467: ConditionClause -> "(" Declaration-1 · ")"
  ")"=s679
468: IfStatement -> identifier/"if" ConditionClause statement ·,IfStatement -> identifier/"if" ConditionClause statement · identifier/"else" statement
  identifier/"else"=s684,RawString=IfStatement(3),"("=IfStatement(3),identifier/"bool"=IfStatement(3),DestructorName=IfStatement(3),"::"=IfStatement(3),identifier/"const"=IfStatement(3),identifier/"volatile"=IfStatement(3),identifier/"restrict"=IfStatement(3),identifier/"_Atomic"=IfStatement(3),identifier/"mutable"=IfStatement(3),identifier/"constexpr"=IfStatement(3),identifier/"struct"=IfStatement(3),identifier/"__declspec"=IfStatement(3),"{"=IfStatement(3),"["=IfStatement(3),incDec=IfStatement(3),ArithOp<"+" | "-">=IfStatement(3),Number=IfStatement(3),identifier/"virtual"=IfStatement(3),identifier/"extern"=IfStatement(3),identifier/"static"=IfStatement(3),identifier/"register"=IfStatement(3),identifier/"inline"=IfStatement(3),identifier/"__attribute__"=IfStatement(3),identifier/"__based"=IfStatement(3),identifier/"throw"=IfStatement(3),OperatorName=IfStatement(3),identifier/"template"=IfStatement(3),identifier/"typename"=IfStatement(3),identifier/"class"=IfStatement(3),identifier/"using"=IfStatement(3),identifier/"__cdecl"=IfStatement(3),identifier/"case"=IfStatement(3),identifier/"default"=IfStatement(3),identifier/"if"=IfStatement(3),identifier/"switch"=IfStatement(3),identifier/"do"=IfStatement(3),identifier/"while"=IfStatement(3),identifier/"for"=IfStatement(3),identifier/"return"=IfStatement(3),identifier/"break"=IfStatement(3),identifier/"continue"=IfStatement(3),identifier/"goto"=IfStatement(3),identifier/"typedef"=IfStatement(3),identifier/"try"=IfStatement(3),identifier/"namespace"=IfStatement(3),identifier/"static_assert"=IfStatement(3),identifier/"explicit"=IfStatement(3),identifier/"delete"=IfStatement(3),identifier/"operator"=IfStatement(3),identifier/"union"=IfStatement(3),identifier/"enum"=IfStatement(3),identifier/"signed"=IfStatement(3),identifier/"decltype"=IfStatement(3),identifier/"auto"=IfStatement(3),LogicOp<"!">=IfStatement(3),BitOp<"~">=IfStatement(3),identifier/"sizeof"=IfStatement(3),identifier/"NULL"=IfStatement(3),identifier/"new"=IfStatement(3),identifier/"nullptr"=IfStatement(3),identifier/"this"=IfStatement(3),␄=IfStatement(3),stringLiteralStart=IfStatement(3),identifier=IfStatement(3),"[["=IfStatement(3),"*"=IfStatement(3),"&&"=IfStatement(3),"&"=IfStatement(3),";"=IfStatement(3),charLiteralStart=IfStatement(3),identifier/"TRUE"=IfStatement(3),identifier/"FALSE"=IfStatement(3),"}"=IfStatement(3)
469: IfStatement -> identifier/"if" identifier/"constexpr" ConditionClause · statement,IfStatement -> identifier/"if" identifier/"constexpr" ConditionClause · statement identifier/"else" statement
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"{"=s45,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"throw"=s78,identifier/"case"=s75,identifier/"default"=s76,identifier/"if"=s65,identifier/"switch"=s66,identifier/"do"=s67,identifier/"while"=s68,identifier/"for"=s69,identifier/"return"=s70,identifier/"break"=s71,identifier/"continue"=s72,identifier/"goto"=s73,identifier/"try"=s77,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s1017,"*"=s191,"&"=s191,";"=s31,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,CompoundStatement=s33,CaseStatement=s34,LabeledStatement=s33,StatementIdentifier=s30,ExpressionStatement=s33,CommaExpression=s32,IfStatement=s33,SwitchStatement=s33,DoStatement=s33,ParenthesizedExpression=s50,WhileStatement=s33,ForStatement=s33,ReturnStatement=s33,BreakStatement=s33,ContinueStatement=s33,GotoStatement=s33,ForRangeLoop=s34,TryStatement=s34,ThrowStatement=s34,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s4,statement=s685,nonCaseStatement=s34
470: SwitchStatement -> identifier/"switch" ConditionClause CompoundStatement ·
  always SwitchStatement(3)
471: DoStatement -> identifier/"do" statement identifier/"while" · ParenthesizedExpression ";"
  "("=s686 | ParenthesizedExpression=s687
472: WhileStatement -> identifier/"while" ConditionClause statement ·
  always WhileStatement(3)
473: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,CommaExpression -> expression · "," expression,CommaExpression -> expression · "," CommaExpression,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "...",ForStatement -> identifier/"for" "(" expression · ";" ";" ")" statement,ForStatement -> identifier/"for" "(" expression · ";" ";" expression ")" statement,ForStatement -> identifier/"for" "(" expression · ";" ";" CommaExpression ")" statement,ForStatement -> identifier/"for" "(" expression · ";" expression ";" ")" statement,ForStatement -> identifier/"for" "(" expression · ";" expression ";" expression ")" statement,ForStatement -> identifier/"for" "(" expression · ";" expression ";" CommaExpression ")" statement
  "("=s124,","=s106,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112,";"=s688 | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
474: Declaration -> declarationSpecifiers · commaSep1<declarator | InitDeclarator> ";",ForRangeLoop -> identifier/"for" "(" declarationSpecifiers · declarator ":" expression ")" statement,ForRangeLoop -> identifier/"for" "(" declarationSpecifiers · declarator ":" InitializerList ")" statement
  "("=s180,DestructorName=s26,"::"=s1075,"["=s182,identifier/"__based"=s63,OperatorName=s26,identifier=s1058,"*"=s1256,"&&"=s1257,"&"=s1257 | Identifier=s181,NamespaceIdentifier=s1198,TemplateType=s1198,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s1198,MsBasedModifier=s1299,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,InitDeclarator=s202,declarator=s689,commaSep1<declarator | InitDeclarator>=s203
475: ForStatement -> identifier/"for" "(" Declaration · ";" ")" statement,ForStatement -> identifier/"for" "(" Declaration · ";" expression ")" statement,ForStatement -> identifier/"for" "(" Declaration · ";" CommaExpression ")" statement,ForStatement -> identifier/"for" "(" Declaration · expression ";" ")" statement,ForStatement -> identifier/"for" "(" Declaration · expression ";" expression ")" statement,ForStatement -> identifier/"for" "(" Declaration · expression ";" CommaExpression ")" statement,ForStatement -> identifier/"for" "(" ";" · ";" ")" statement,ForStatement -> identifier/"for" "(" ";" · ";" expression ")" statement,ForStatement -> identifier/"for" "(" ";" · ";" CommaExpression ")" statement,ForStatement -> identifier/"for" "(" ";" · expression ";" ")" statement,ForStatement -> identifier/"for" "(" ";" · expression ";" expression ")" statement,ForStatement -> identifier/"for" "(" ";" · expression ";" CommaExpression ")" statement
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,";"=s691,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s690
476: ForStatement -> identifier/"for" "(" CommaExpression · ";" ";" ")" statement,ForStatement -> identifier/"for" "(" CommaExpression · ";" ";" expression ")" statement,ForStatement -> identifier/"for" "(" CommaExpression · ";" ";" CommaExpression ")" statement,ForStatement -> identifier/"for" "(" CommaExpression · ";" expression ";" ")" statement,ForStatement -> identifier/"for" "(" CommaExpression · ";" expression ";" expression ")" statement,ForStatement -> identifier/"for" "(" CommaExpression · ";" expression ";" CommaExpression ")" statement
  ";"=s688
477: ReturnStatement -> identifier/"return" expression ";" ·,ReturnStatement -> identifier/"return" CommaExpression ";" ·,ReturnStatement -> identifier/"return" InitializerList ";" ·
  always ReturnStatement(3)
478: GotoStatement -> identifier/"goto" StatementIdentifier ";" ·
  always GotoStatement(3)
479: TypeDefinition -> identifier/"typedef" typeQualifier+ typeSpecifier · commaSep1<typeDeclarator> ";"
  "("=s484,identifier/"__based"=s63,identifier=s480,"*"=s481 | TypeIdentifier=s485,MsBasedModifier=s482,PointerDeclarator-2=s485,FunctionDeclarator-2=s485,ArrayDeclarator-2=s485,ParenthesizedDeclarator-2=s485,commaSep1<typeDeclarator>=s692,typeDeclarator=s483
480: TypeIdentifier -> identifier ·
  always TypeIdentifier(1)
481: PointerDeclarator-2 -> "*" · typeDeclarator,PointerDeclarator-2 -> "*" · typeQualifier+ typeDeclarator,PointerDeclarator-2 -> "*" · msPointerModifier+ typeDeclarator,PointerDeclarator-2 -> "*" · msPointerModifier+ typeQualifier+ typeDeclarator
  "("=s484,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"__based"=s63,identifier/"__restrict"=s165,identifier=s480,"*"=s481 | TypeIdentifier=s485,MsBasedModifier=s482,PointerDeclarator-2=s485,FunctionDeclarator-2=s485,ArrayDeclarator-2=s485,ParenthesizedDeclarator-2=s485,typeQualifier+=s693,msPointerModifier+=s694,typeQualifier=s159,typeDeclarator=s695
482: PointerDeclarator-2 -> MsBasedModifier · "*" typeDeclarator,PointerDeclarator-2 -> MsBasedModifier · "*" typeQualifier+ typeDeclarator,PointerDeclarator-2 -> MsBasedModifier · "*" msPointerModifier+ typeDeclarator,PointerDeclarator-2 -> MsBasedModifier · "*" msPointerModifier+ typeQualifier+ typeDeclarator
  "*"=s696
483: FunctionDeclarator-2 -> typeDeclarator · ParameterList,ArrayDeclarator-2 -> typeDeclarator · "[" "]",ArrayDeclarator-2 -> typeDeclarator · "[" expression "]",ArrayDeclarator-2 -> typeDeclarator · "[" "*" "]",ArrayDeclarator-2 -> typeDeclarator · "[" typeQualifier+ "]",ArrayDeclarator-2 -> typeDeclarator · "[" typeQualifier+ expression "]",ArrayDeclarator-2 -> typeDeclarator · "[" typeQualifier+ "*" "]",commaSep1<typeDeclarator> -> typeDeclarator ·,commaSep1<typeDeclarator> -> typeDeclarator · ("," typeDeclarator)+
  "("=s169,","=s699,"["=s698,";"=commaSep1<typeDeclarator>(1) | ParameterList=s697,("," typeDeclarator)+=s700
484: ParenthesizedDeclarator-2 -> "(" · typeDeclarator ")"
  "("=s484,identifier/"__based"=s63,identifier=s480,"*"=s481 | TypeIdentifier=s485,MsBasedModifier=s482,PointerDeclarator-2=s485,FunctionDeclarator-2=s485,ArrayDeclarator-2=s485,ParenthesizedDeclarator-2=s485,typeDeclarator=s701
485: typeDeclarator -> PointerDeclarator-2 ·,typeDeclarator -> FunctionDeclarator-2 ·,typeDeclarator -> ArrayDeclarator-2 ·,typeDeclarator -> ParenthesizedDeclarator-2 ·,typeDeclarator -> TypeIdentifier ·
  always typeDeclarator(1)
486: TypeDefinition -> identifier/"typedef" typeSpecifier commaSep1<typeDeclarator> · ";"
  ";"=s702
487: CaseStatement -> identifier/"case" expression ":" ·,CaseStatement -> identifier/"case" expression ":" · ((nonCaseStatement | Declaration | TypeDefinition))+
  RawString=s35,"("=s190,identifier/"bool"=s57,"::"=s1070,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s85,identifier/"__declspec"=s59,"{"=s45,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"extern"=s61,identifier/"static"=s61,identifier/"register"=s61,identifier/"inline"=s61,identifier/"__attribute__"=s62,identifier/"typename"=s89,identifier/"class"=s88,identifier/"if"=s65,identifier/"switch"=s66,identifier/"do"=s67,identifier/"while"=s68,identifier/"for"=s491,identifier/"return"=s70,identifier/"break"=s71,identifier/"continue"=s72,identifier/"goto"=s73,identifier/"typedef"=s74,identifier/"delete"=s93,identifier/"union"=s86,identifier/"enum"=s87,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s1018,"[["=s10,"*"=s191,"&"=s191,";"=s31,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54,DestructorName=CaseStatement(3),identifier/"virtual"=CaseStatement(3),identifier/"__based"=CaseStatement(3),identifier/"throw"=CaseStatement(3),OperatorName=CaseStatement(3),identifier/"template"=CaseStatement(3),identifier/"using"=CaseStatement(3),identifier/"__cdecl"=CaseStatement(3),identifier/"case"=CaseStatement(3),identifier/"default"=CaseStatement(3),identifier/"try"=CaseStatement(3),identifier/"namespace"=CaseStatement(3),identifier/"static_assert"=CaseStatement(3),identifier/"explicit"=CaseStatement(3),identifier/"operator"=CaseStatement(3),␄=CaseStatement(3),"&&"=CaseStatement(3),"}"=CaseStatement(3),identifier/"else"=CaseStatement(3) | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s1203,TemplateType=s1212,TypeIdentifier=s49,ScopedTypeIdentifier=s49,ScopedNamespaceIdentifier=s1206,StructSpecifier=s48,MsDeclspecModifier=s14,Attribute=s11,CharLiteral=s56,AttributeSpecifier=s14,ScopedIdentifier=s188,TemplateFunction=s56,Declaration=s489,CompoundStatement=s33,LabeledStatement=s33,StatementIdentifier=s30,ExpressionStatement=s33,CommaExpression=s32,IfStatement=s33,SwitchStatement=s33,DoStatement=s33,ParenthesizedExpression=s50,WhileStatement=s33,ForStatement=s33,ReturnStatement=s33,BreakStatement=s33,ContinueStatement=s33,GotoStatement=s33,TypeDefinition=s489,ConcatenatedString=s56,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,Attribute+=s463,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+=s15,((nonCaseStatement | Declaration | TypeDefinition))+=s703,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,expression=s4,typeQualifier=s14,typeSpecifier=s270,declarationSpecifiers=s488,storageClassSpecifier=s14,nonCaseStatement=s489
488: Declaration -> declarationSpecifiers · commaSep1<declarator | InitDeclarator> ";"
  "("=s180,DestructorName=s26,"::"=s1075,"["=s182,identifier/"__based"=s63,OperatorName=s26,identifier=s1058,"*"=s1079,"&&"=s1081,"&"=s1081 | Identifier=s181,NamespaceIdentifier=s1198,TemplateType=s1198,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s1198,MsBasedModifier=s1189,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,InitDeclarator=s202,declarator=s704,commaSep1<declarator | InitDeclarator>=s203
489: ((nonCaseStatement | Declaration | TypeDefinition))+ -> nonCaseStatement ·,((nonCaseStatement | Declaration | TypeDefinition))+ -> Declaration ·,((nonCaseStatement | Declaration | TypeDefinition))+ -> TypeDefinition ·
  always ((nonCaseStatement | Declaration | TypeDefinition))+(1)
490: ((nonCaseStatement | Declaration | TypeDefinition))+ -> ((nonCaseStatement | Declaration | TypeDefinition))+ · ((nonCaseStatement | Declaration | TypeDefinition))+,CaseStatement -> identifier/"default" ":" ((nonCaseStatement | Declaration | TypeDefinition))+ ·
  RawString=s35,"("=s190,identifier/"bool"=s57,"::"=s1070,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s85,identifier/"__declspec"=s59,"{"=s45,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"extern"=s61,identifier/"static"=s61,identifier/"register"=s61,identifier/"inline"=s61,identifier/"__attribute__"=s62,identifier/"typename"=s89,identifier/"class"=s88,identifier/"if"=s65,identifier/"switch"=s66,identifier/"do"=s67,identifier/"while"=s68,identifier/"for"=s491,identifier/"return"=s70,identifier/"break"=s71,identifier/"continue"=s72,identifier/"goto"=s73,identifier/"typedef"=s74,identifier/"delete"=s93,identifier/"union"=s86,identifier/"enum"=s87,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s1018,"[["=s10,"*"=s191,"&"=s191,";"=s31,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54,DestructorName=CaseStatement(3),identifier/"virtual"=CaseStatement(3),identifier/"__based"=CaseStatement(3),identifier/"throw"=CaseStatement(3),OperatorName=CaseStatement(3),identifier/"template"=CaseStatement(3),identifier/"using"=CaseStatement(3),identifier/"__cdecl"=CaseStatement(3),identifier/"case"=CaseStatement(3),identifier/"default"=CaseStatement(3),identifier/"try"=CaseStatement(3),identifier/"namespace"=CaseStatement(3),identifier/"static_assert"=CaseStatement(3),identifier/"explicit"=CaseStatement(3),identifier/"operator"=CaseStatement(3),␄=CaseStatement(3),"&&"=CaseStatement(3),"}"=CaseStatement(3),identifier/"else"=CaseStatement(3) | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s1203,TemplateType=s1212,TypeIdentifier=s49,ScopedTypeIdentifier=s49,ScopedNamespaceIdentifier=s1206,StructSpecifier=s48,MsDeclspecModifier=s14,Attribute=s11,CharLiteral=s56,AttributeSpecifier=s14,ScopedIdentifier=s188,TemplateFunction=s56,Declaration=s489,CompoundStatement=s33,LabeledStatement=s33,StatementIdentifier=s30,ExpressionStatement=s33,CommaExpression=s32,IfStatement=s33,SwitchStatement=s33,DoStatement=s33,ParenthesizedExpression=s50,WhileStatement=s33,ForStatement=s33,ReturnStatement=s33,BreakStatement=s33,ContinueStatement=s33,GotoStatement=s33,TypeDefinition=s489,ConcatenatedString=s56,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,Attribute+=s463,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+=s15,((nonCaseStatement | Declaration | TypeDefinition))+=s705,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,expression=s4,typeQualifier=s14,typeSpecifier=s270,declarationSpecifiers=s488,storageClassSpecifier=s14,nonCaseStatement=s489
491: ForStatement -> identifier/"for" · "(" Declaration ";" ")" statement,ForStatement -> identifier/"for" · "(" Declaration ";" expression ")" statement,ForStatement -> identifier/"for" · "(" Declaration ";" CommaExpression ")" statement,ForStatement -> identifier/"for" · "(" Declaration expression ";" ")" statement,ForStatement -> identifier/"for" · "(" Declaration expression ";" expression ")" statement,ForStatement -> identifier/"for" · "(" Declaration expression ";" CommaExpression ")" statement,ForStatement -> identifier/"for" · "(" ";" ";" ")" statement,ForStatement -> identifier/"for" · "(" ";" ";" expression ")" statement,ForStatement -> identifier/"for" · "(" ";" ";" CommaExpression ")" statement,ForStatement -> identifier/"for" · "(" ";" expression ";" ")" statement,ForStatement -> identifier/"for" · "(" ";" expression ";" expression ")" statement,ForStatement -> identifier/"for" · "(" ";" expression ";" CommaExpression ")" statement,ForStatement -> identifier/"for" · "(" expression ";" ";" ")" statement,ForStatement -> identifier/"for" · "(" expression ";" ";" expression ")" statement,ForStatement -> identifier/"for" · "(" expression ";" ";" CommaExpression ")" statement,ForStatement -> identifier/"for" · "(" expression ";" expression ";" ")" statement,ForStatement -> identifier/"for" · "(" expression ";" expression ";" expression ")" statement,ForStatement -> identifier/"for" · "(" expression ";" expression ";" CommaExpression ")" statement,ForStatement -> identifier/"for" · "(" CommaExpression ";" ";" ")" statement,ForStatement -> identifier/"for" · "(" CommaExpression ";" ";" expression ")" statement,ForStatement -> identifier/"for" · "(" CommaExpression ";" ";" CommaExpression ")" statement,ForStatement -> identifier/"for" · "(" CommaExpression ";" expression ";" ")" statement,ForStatement -> identifier/"for" · "(" CommaExpression ";" expression ";" expression ")" statement,ForStatement -> identifier/"for" · "(" CommaExpression ";" expression ";" CommaExpression ")" statement
  "("=s706
492: CatchClause+ -> CatchClause ·
  always CatchClause+(1)
493: CatchClause+ -> CatchClause+ · CatchClause+,TryStatement -> identifier/"try" CompoundStatement CatchClause+ ·
  identifier/"catch"=s494,RawString=TryStatement(3),"("=TryStatement(3),identifier/"bool"=TryStatement(3),DestructorName=TryStatement(3),"::"=TryStatement(3),identifier/"const"=TryStatement(3),identifier/"volatile"=TryStatement(3),identifier/"restrict"=TryStatement(3),identifier/"_Atomic"=TryStatement(3),identifier/"mutable"=TryStatement(3),identifier/"constexpr"=TryStatement(3),identifier/"struct"=TryStatement(3),identifier/"__declspec"=TryStatement(3),"{"=TryStatement(3),"["=TryStatement(3),incDec=TryStatement(3),ArithOp<"+" | "-">=TryStatement(3),Number=TryStatement(3),identifier/"virtual"=TryStatement(3),identifier/"extern"=TryStatement(3),identifier/"static"=TryStatement(3),identifier/"register"=TryStatement(3),identifier/"inline"=TryStatement(3),identifier/"__attribute__"=TryStatement(3),identifier/"__based"=TryStatement(3),identifier/"throw"=TryStatement(3),OperatorName=TryStatement(3),identifier/"template"=TryStatement(3),identifier/"typename"=TryStatement(3),identifier/"class"=TryStatement(3),identifier/"using"=TryStatement(3),identifier/"__cdecl"=TryStatement(3),identifier/"case"=TryStatement(3),identifier/"default"=TryStatement(3),identifier/"if"=TryStatement(3),identifier/"switch"=TryStatement(3),identifier/"do"=TryStatement(3),identifier/"while"=TryStatement(3),identifier/"for"=TryStatement(3),identifier/"return"=TryStatement(3),identifier/"break"=TryStatement(3),identifier/"continue"=TryStatement(3),identifier/"goto"=TryStatement(3),identifier/"typedef"=TryStatement(3),identifier/"try"=TryStatement(3),identifier/"namespace"=TryStatement(3),identifier/"static_assert"=TryStatement(3),identifier/"explicit"=TryStatement(3),identifier/"delete"=TryStatement(3),identifier/"operator"=TryStatement(3),identifier/"union"=TryStatement(3),identifier/"enum"=TryStatement(3),identifier/"signed"=TryStatement(3),identifier/"decltype"=TryStatement(3),identifier/"auto"=TryStatement(3),LogicOp<"!">=TryStatement(3),BitOp<"~">=TryStatement(3),identifier/"sizeof"=TryStatement(3),identifier/"NULL"=TryStatement(3),identifier/"new"=TryStatement(3),identifier/"nullptr"=TryStatement(3),identifier/"this"=TryStatement(3),␄=TryStatement(3),stringLiteralStart=TryStatement(3),identifier=TryStatement(3),"[["=TryStatement(3),"*"=TryStatement(3),"&&"=TryStatement(3),"&"=TryStatement(3),";"=TryStatement(3),charLiteralStart=TryStatement(3),identifier/"TRUE"=TryStatement(3),identifier/"FALSE"=TryStatement(3),"}"=TryStatement(3),identifier/"else"=TryStatement(3) | CatchClause=s492,CatchClause+=s707
494: CatchClause -> identifier/"catch" · ParameterList CompoundStatement
  "("=s169 | ParameterList=s708
495: ThrowStatement -> identifier/"throw" expression ";" ·
  always ThrowStatement(3)
496: DeclarationList -> "{" "}" ·
  always DeclarationList(2)
497: DeclarationList -> "{" topLevelItem+ · "}",topLevelItem+ -> topLevelItem+ · topLevelItem+
  RawString=s35,"("=s20,identifier/"bool"=s57,DestructorName=s26,"::"=s5,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s85,identifier/"__declspec"=s59,"{"=s45,"}"=s709,"["=s25,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"virtual"=s37,identifier/"extern"=s60,identifier/"static"=s61,identifier/"register"=s61,identifier/"inline"=s61,identifier/"__attribute__"=s62,identifier/"__based"=s63,identifier/"throw"=s78,OperatorName=s26,identifier/"template"=s81,identifier/"typename"=s89,identifier/"class"=s88,identifier/"using"=s64,identifier/"__cdecl"=s84,identifier/"case"=s75,identifier/"default"=s76,identifier/"if"=s65,identifier/"switch"=s66,identifier/"do"=s67,identifier/"while"=s68,identifier/"for"=s69,identifier/"return"=s70,identifier/"break"=s71,identifier/"continue"=s72,identifier/"goto"=s73,identifier/"typedef"=s74,identifier/"try"=s77,identifier/"namespace"=s79,identifier/"static_assert"=s80,identifier/"explicit"=s82,identifier/"delete"=s93,identifier/"operator"=s83,identifier/"union"=s86,identifier/"enum"=s87,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s3,"[["=s10,"*"=s17,"&&"=s22,"&"=s21,";"=s31,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s23,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s6,TemplateType=s7,TypeIdentifier=s49,ScopedTypeIdentifier=s49,ScopedNamespaceIdentifier=s8,StructSpecifier=s48,MsDeclspecModifier=s14,Attribute=s11,CharLiteral=s56,AttributeSpecifier=s13,MsBasedModifier=s18,PointerDeclarator-1=s26,FunctionDeclarator-1=s27,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s24,TemplateFunction=s28,StructuredBindingDeclarator=s26,TemplateDeclaration=s42,AliasDeclaration=s42,Declaration=s42,FunctionDefinition=s42,CompoundStatement=s33,LinkageSpecification=s42,CaseStatement=s34,LabeledStatement=s33,StatementIdentifier=s30,ExpressionStatement=s33,CommaExpression=s32,IfStatement=s33,SwitchStatement=s33,DoStatement=s33,ParenthesizedExpression=s50,WhileStatement=s33,ForStatement=s33,ReturnStatement=s33,BreakStatement=s33,ContinueStatement=s33,GotoStatement=s33,TypeDefinition=s42,ForRangeLoop=s34,TryStatement=s34,ThrowStatement=s34,NamespaceDefinition=s42,UsingDeclaration=s42,StaticAssertDeclaration=s42,ConcatenatedString=s56,TemplateInstantiation=s42,FunctionDefinition-1=s42,ExplicitFunctionSpecifier=s37,FunctionDefinition-2=s42,OperatorCast=s39,Declaration-2=s42,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,Attribute+=s12,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+=s15,topLevelItem+=s218,(storageClassSpecifier | typeQualifier | AttributeSpecifier)+=s36,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,expression=s4,typeQualifier=s13,typeSpecifier=s16,declarationSpecifiers=s29,storageClassSpecifier=s13,declarator=s19,emptyDeclaration=s42,topLevelItem=s43,statement=s42,nonCaseStatement=s34,constructorOrDestructorDefinition=s38,operatorCastDefinition=s40,operatorCastDeclaration=s41
498: NamespaceDefinition -> identifier/"namespace" Identifier DeclarationList ·
  always NamespaceDefinition(3)
499: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "...",StaticAssertDeclaration -> identifier/"static_assert" "(" expression · ")" ";",StaticAssertDeclaration -> identifier/"static_assert" "(" expression · "," String ")" ";",StaticAssertDeclaration -> identifier/"static_assert" "(" expression · "," RawString ")" ";",StaticAssertDeclaration -> identifier/"static_assert" "(" expression · "," ConcatenatedString ")" ";"
  "("=s124,")"=s710,","=s711,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112 | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
500: TemplateInstantiation -> identifier/"template" declarator ";" ·
  always TemplateInstantiation(3)
501: templateParameter -> ParameterDeclaration ·,templateParameter -> OptionalParameterDeclaration ·,templateParameter -> TypeParameterDeclaration ·,templateParameter -> VariadicParameterDeclaration ·,templateParameter -> OptionalTypeParameterDeclaration ·,templateParameter -> VariadicTypeParameterDeclaration ·,templateParameter -> TemplateTemplateParameterDeclaration ·
  always templateParameter(1)
502: commaSep<templateParameter> -> templateParameter ·,commaSep<templateParameter> -> templateParameter · ("," templateParameter)+
  ","=s712,templateArgsEndFallback=commaSep<templateParameter>(1),templateArgsEnd=commaSep<templateParameter>(1) | ("," templateParameter)+=s713
503: TemplateParameterList -> "<" commaSep<templateParameter> · templateArgsEnd,TemplateParameterList -> "<" commaSep<templateParameter> · templateArgsEndFallback
  templateArgsEndFallback=s714,templateArgsEnd=s714
504: TypeParameterDeclaration -> identifier/"typename" ·,TypeParameterDeclaration -> identifier/"typename" · TypeIdentifier,OptionalTypeParameterDeclaration -> identifier/"typename" · "=" typeSpecifier,OptionalTypeParameterDeclaration -> identifier/"typename" · TypeIdentifier "=" typeSpecifier,VariadicTypeParameterDeclaration -> identifier/"typename" · "...",VariadicTypeParameterDeclaration -> identifier/"typename" · "..." TypeIdentifier,DependentType -> identifier/"typename" · typeSpecifier
  identifier/"bool"=s48,"::"=s141,identifier/"struct"=s85,identifier/"typename"=s89,identifier/"class"=s88,identifier/"union"=s86,identifier/"enum"=s87,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140,"..."=s717,"="=s716,templateArgsEndFallback=TypeParameterDeclaration(1),","=TypeParameterDeclaration(1),templateArgsEnd=TypeParameterDeclaration(1) | NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s715,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeSpecifier=s301
505: TypeParameterDeclaration -> identifier/"class" ·,TypeParameterDeclaration -> identifier/"class" · TypeIdentifier,OptionalTypeParameterDeclaration -> identifier/"class" · "=" typeSpecifier,OptionalTypeParameterDeclaration -> identifier/"class" · TypeIdentifier "=" typeSpecifier,VariadicTypeParameterDeclaration -> identifier/"class" · "...",VariadicTypeParameterDeclaration -> identifier/"class" · "..." TypeIdentifier,ClassSpecifier -> identifier/"class" · className,ClassSpecifier -> identifier/"class" · FieldDeclarationList,ClassSpecifier -> identifier/"class" · BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" · identifier/"final" BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · className FieldDeclarationList,ClassSpecifier -> identifier/"class" · className BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · className identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" · className identifier/"final" BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier className,ClassSpecifier -> identifier/"class" · MsDeclspecModifier FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier identifier/"final" BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier className FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier className BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier className identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier className identifier/"final" BaseClassClause FieldDeclarationList
  "::"=s141,identifier/"__declspec"=s59,identifier/"final"=s299,"{"=s281,identifier=s140,":"=s280,"..."=s717,"="=s716,templateArgsEndFallback=TypeParameterDeclaration(1),","=TypeParameterDeclaration(1),templateArgsEnd=TypeParameterDeclaration(1) | NamespaceIdentifier=s142,TemplateType=s278,TypeIdentifier=s718,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,MsDeclspecModifier=s300,BaseClassClause=s298,FieldDeclarationList=s297,className=s296
506: TemplateTemplateParameterDeclaration -> identifier/"template" · TemplateParameterList TypeParameterDeclaration,TemplateTemplateParameterDeclaration -> identifier/"template" · TemplateParameterList VariadicTypeParameterDeclaration,TemplateTemplateParameterDeclaration -> identifier/"template" · TemplateParameterList OptionalTypeParameterDeclaration
  "<"=s272 | TemplateParameterList=s719
507: FunctionDeclarator-1 -> declarator · ParameterList,FunctionDeclarator-1 -> declarator · ParameterList ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+ ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,ArrayDeclarator -> declarator · "[" "]",ArrayDeclarator -> declarator · "[" expression "]",ArrayDeclarator -> declarator · "[" "*" "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "]",ArrayDeclarator -> declarator · "[" typeQualifier+ expression "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "*" "]",TemplateInstantiation -> identifier/"template" declarationSpecifiers declarator · ";"
  "("=s169,"["=s168,";"=s720 | ParameterList=s1210
508: ScopedNamespaceIdentifier -> TemplateType · "::" NamespaceIdentifier-1,ScopedTypeIdentifier -> TemplateType · "::" TypeIdentifier-1,ScopedIdentifier -> TemplateType · "::" Identifier-1,ScopedIdentifier -> TemplateType · "::" OperatorName,ScopedIdentifier -> TemplateType · "::" DestructorName,typeSpecifier -> TemplateType ·,OperatorCast -> TemplateType · "::" scopedIdentifier/"operator" declarationSpecifiers abstractDeclarator
  "::"=s1055,"("=typeSpecifier(1),DestructorName=typeSpecifier(1),identifier/"const"=typeSpecifier(1),identifier/"volatile"=typeSpecifier(1),identifier/"restrict"=typeSpecifier(1),identifier/"_Atomic"=typeSpecifier(1),identifier/"mutable"=typeSpecifier(1),identifier/"constexpr"=typeSpecifier(1),identifier/"__declspec"=typeSpecifier(1),"["=typeSpecifier(1),identifier/"extern"=typeSpecifier(1),identifier/"static"=typeSpecifier(1),identifier/"register"=typeSpecifier(1),identifier/"inline"=typeSpecifier(1),identifier/"__attribute__"=typeSpecifier(1),identifier/"__based"=typeSpecifier(1),OperatorName=typeSpecifier(1),identifier=typeSpecifier(1),"*"=typeSpecifier(1),"&&"=typeSpecifier(1),"&"=typeSpecifier(1),";"=typeSpecifier(1)
509: constructorOrDestructorDefinition -> ExplicitFunctionSpecifier · FunctionDeclarator-1 CompoundStatement,constructorOrDestructorDefinition -> ExplicitFunctionSpecifier · FunctionDeclarator-1 DefaultMethodClause,constructorOrDestructorDefinition -> ExplicitFunctionSpecifier · FunctionDeclarator-1 DeleteMethodClause,constructorOrDestructorDefinition -> ExplicitFunctionSpecifier · FunctionDeclarator-1 FieldInitializerList CompoundStatement,constructorOrDestructorDefinition -> ExplicitFunctionSpecifier · FunctionDeclarator-1 FieldInitializerList DefaultMethodClause,constructorOrDestructorDefinition -> ExplicitFunctionSpecifier · FunctionDeclarator-1 FieldInitializerList DeleteMethodClause,operatorCastDefinition -> ExplicitFunctionSpecifier · OperatorCast CompoundStatement,operatorCastDefinition -> ExplicitFunctionSpecifier · OperatorCast DefaultMethodClause,operatorCastDefinition -> ExplicitFunctionSpecifier · OperatorCast DeleteMethodClause,constructorOrDestructorDefinition -> identifier/"virtual" · FunctionDeclarator-1 CompoundStatement,constructorOrDestructorDefinition -> identifier/"virtual" · FunctionDeclarator-1 DefaultMethodClause,constructorOrDestructorDefinition -> identifier/"virtual" · FunctionDeclarator-1 DeleteMethodClause,constructorOrDestructorDefinition -> identifier/"virtual" · FunctionDeclarator-1 FieldInitializerList CompoundStatement,constructorOrDestructorDefinition -> identifier/"virtual" · FunctionDeclarator-1 FieldInitializerList DefaultMethodClause,constructorOrDestructorDefinition -> identifier/"virtual" · FunctionDeclarator-1 FieldInitializerList DeleteMethodClause,operatorCastDefinition -> identifier/"virtual" · OperatorCast CompoundStatement,operatorCastDefinition -> identifier/"virtual" · OperatorCast DefaultMethodClause,operatorCastDefinition -> identifier/"virtual" · OperatorCast DeleteMethodClause
  "("=s180,DestructorName=s26,"::"=s207,"["=s182,identifier/"__based"=s63,OperatorName=s26,identifier/"operator"=s83,identifier=s153,"*"=s179,"&&"=s22,"&"=s22 | Identifier=s181,NamespaceIdentifier=s208,TemplateType=s208,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s208,MsBasedModifier=s18,PointerDeclarator-1=s26,FunctionDeclarator-1=s209,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,OperatorCast=s213,declarator=s19
510: operatorCastDefinition -> OperatorCast · CompoundStatement,operatorCastDefinition -> OperatorCast · DefaultMethodClause,operatorCastDefinition -> OperatorCast · DeleteMethodClause
  "{"=s45,"="=s200 | CompoundStatement=s215,DefaultMethodClause=s215,DeleteMethodClause=s215
511: FunctionDefinition-3 -> constructorOrDestructorDefinition ·
  always FunctionDefinition-3(1)
512: FunctionDefinition-4 -> operatorCastDefinition ·
  always FunctionDefinition-4(1)
513: AliasDeclaration -> identifier/"using" · TypeIdentifier "=" TypeDescriptor ";"
  identifier=s480 | TypeIdentifier=s721
514: TemplateDeclaration -> identifier/"template" · TemplateParameterList emptyDeclaration,TemplateDeclaration -> identifier/"template" · TemplateParameterList AliasDeclaration,TemplateDeclaration -> identifier/"template" · TemplateParameterList Declaration,TemplateDeclaration -> identifier/"template" · TemplateParameterList TemplateDeclaration,TemplateDeclaration -> identifier/"template" · TemplateParameterList FunctionDefinition,TemplateDeclaration -> identifier/"template" · TemplateParameterList FunctionDefinition-3,TemplateDeclaration -> identifier/"template" · TemplateParameterList FunctionDefinition-4
  "<"=s272 | TemplateParameterList=s274
515: TemplateDeclaration -> identifier/"template" TemplateParameterList emptyDeclaration ·,TemplateDeclaration -> identifier/"template" TemplateParameterList AliasDeclaration ·,TemplateDeclaration -> identifier/"template" TemplateParameterList Declaration ·,TemplateDeclaration -> identifier/"template" TemplateParameterList TemplateDeclaration ·,TemplateDeclaration -> identifier/"template" TemplateParameterList FunctionDefinition ·,TemplateDeclaration -> identifier/"template" TemplateParameterList FunctionDefinition-3 ·,TemplateDeclaration -> identifier/"template" TemplateParameterList FunctionDefinition-4 ·
  always TemplateDeclaration(3)
516: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "...",ExplicitFunctionSpecifier -> identifier/"explicit" "(" expression · ")"
  "("=s124,")"=s722,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112 | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
517: AbstractFunctionDeclarator -> abstractDeclarator · ParameterList,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList TrailingReturnType,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+ TrailingReturnType,AbstractArrayDeclarator -> abstractDeclarator · "[" "]",AbstractArrayDeclarator -> abstractDeclarator · "[" expression "]",AbstractArrayDeclarator -> abstractDeclarator · "[" "*" "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ expression "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ "*" "]",OperatorCast -> identifier/"operator" declarationSpecifiers abstractDeclarator ·
  "("=s169,"["=s447,"{"=OperatorCast(3),";"=OperatorCast(3),"="=OperatorCast(3) | ParameterList=s446
518: FunctionDeclarator-1 -> declarator · ParameterList,FunctionDeclarator-1 -> declarator · ParameterList ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+ ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,ArrayDeclarator -> declarator · "[" "]",ArrayDeclarator -> declarator · "[" expression "]",ArrayDeclarator -> declarator · "[" "*" "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "]",ArrayDeclarator -> declarator · "[" typeQualifier+ expression "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "*" "]",FunctionDefinition -> identifier/"__cdecl" declarationSpecifiers declarator · CompoundStatement
  "("=s169,"{"=s45,"["=s168 | ParameterList=s1300,CompoundStatement=s607
519: commaSep1<access? className "..."?> -> className ·,commaSep1<access? className "..."?> -> className · ("," access? className "..."?)+,commaSep1<access? className "..."?> -> className · "...",commaSep1<access? className "..."?> -> className · "..." ("," access? className "..."?)+
  ","=s723,"..."=s725,"{"=commaSep1<access? className "..."?>(1) | ("," access? className "..."?)+=s724
520: BaseClassClause -> ":" commaSep1<access? className "..."?> ·
  always BaseClassClause(2)
521: commaSep1<access? className "..."?> -> identifier/"public" · className,commaSep1<access? className "..."?> -> identifier/"public" · className ("," access? className "..."?)+,commaSep1<access? className "..."?> -> identifier/"public" · className "...",commaSep1<access? className "..."?> -> identifier/"public" · className "..." ("," access? className "..."?)+
  "::"=s141,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s402,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,className=s726
522: Attribute+ -> Attribute+ · Attribute+,FieldDeclaration -> Attribute+ · declarationSpecifiers ";",FieldDeclaration -> Attribute+ · declarationSpecifiers BitfieldClause ";",FieldDeclaration -> Attribute+ · declarationSpecifiers InitializerList ";",FieldDeclaration -> Attribute+ · declarationSpecifiers "=" expression ";",FieldDeclaration -> Attribute+ · declarationSpecifiers "=" InitializerList ";",FieldDeclaration -> Attribute+ · declarationSpecifiers fieldDeclarator ";",FieldDeclaration -> Attribute+ · declarationSpecifiers fieldDeclarator BitfieldClause ";",FieldDeclaration -> Attribute+ · declarationSpecifiers fieldDeclarator InitializerList ";",FieldDeclaration -> Attribute+ · declarationSpecifiers fieldDeclarator "=" expression ";",FieldDeclaration -> Attribute+ · declarationSpecifiers fieldDeclarator "=" InitializerList ";",FieldDeclaration -> Attribute+ · declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ ";",FieldDeclaration -> Attribute+ · declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ BitfieldClause ";",FieldDeclaration -> Attribute+ · declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ InitializerList ";",FieldDeclaration -> Attribute+ · declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ "=" expression ";",FieldDeclaration -> Attribute+ · declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ "=" InitializerList ";",FunctionDefinition-5 -> Attribute+ · declarationSpecifiers fieldDeclarator CompoundStatement,FunctionDefinition-5 -> Attribute+ · declarationSpecifiers fieldDeclarator DefaultMethodClause,FunctionDefinition-5 -> Attribute+ · declarationSpecifiers fieldDeclarator DeleteMethodClause,FieldDeclaration -> Attribute+ · identifier/"virtual" declarationSpecifiers ";",FieldDeclaration -> Attribute+ · identifier/"virtual" declarationSpecifiers BitfieldClause ";",FieldDeclaration -> Attribute+ · identifier/"virtual" declarationSpecifiers InitializerList ";",FieldDeclaration -> Attribute+ · identifier/"virtual" declarationSpecifiers "=" expression ";",FieldDeclaration -> Attribute+ · identifier/"virtual" declarationSpecifiers "=" InitializerList ";",FieldDeclaration -> Attribute+ · identifier/"virtual" declarationSpecifiers fieldDeclarator ";",FieldDeclaration -> Attribute+ · identifier/"virtual" declarationSpecifiers fieldDeclarator BitfieldClause ";",FieldDeclaration -> Attribute+ · identifier/"virtual" declarationSpecifiers fieldDeclarator InitializerList ";",FieldDeclaration -> Attribute+ · identifier/"virtual" declarationSpecifiers fieldDeclarator "=" expression ";",FieldDeclaration -> Attribute+ · identifier/"virtual" declarationSpecifiers fieldDeclarator "=" InitializerList ";",FieldDeclaration -> Attribute+ · identifier/"virtual" declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ ";",FieldDeclaration -> Attribute+ · identifier/"virtual" declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ BitfieldClause ";",FieldDeclaration -> Attribute+ · identifier/"virtual" declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ InitializerList ";",FieldDeclaration -> Attribute+ · identifier/"virtual" declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ "=" expression ";",FieldDeclaration -> Attribute+ · identifier/"virtual" declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ "=" InitializerList ";",FunctionDefinition-5 -> Attribute+ · identifier/"virtual" declarationSpecifiers fieldDeclarator CompoundStatement,FunctionDefinition-5 -> Attribute+ · identifier/"virtual" declarationSpecifiers fieldDeclarator DefaultMethodClause,FunctionDefinition-5 -> Attribute+ · identifier/"virtual" declarationSpecifiers fieldDeclarator DeleteMethodClause
  identifier/"bool"=s48,"::"=s141,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s1193,identifier/"__declspec"=s59,identifier/"virtual"=s728,identifier/"extern"=s61,identifier/"static"=s61,identifier/"register"=s61,identifier/"inline"=s61,identifier/"__attribute__"=s62,identifier/"typename"=s1030,identifier/"class"=s1195,identifier/"union"=s1194,identifier/"enum"=s1025,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140,"[["=s10 | NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,MsDeclspecModifier=s14,Attribute=s11,AttributeSpecifier=s14,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,Attribute+=s144,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+=s1188,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeQualifier=s14,typeSpecifier=s270,declarationSpecifiers=s727,storageClassSpecifier=s14
523: declarator -> FunctionDeclarator-1 ·,constructorOrDestructorDefinition -> FunctionDeclarator-1 · CompoundStatement,constructorOrDestructorDefinition -> FunctionDeclarator-1 · DefaultMethodClause,constructorOrDestructorDefinition -> FunctionDeclarator-1 · DeleteMethodClause,constructorOrDestructorDefinition -> FunctionDeclarator-1 · FieldInitializerList CompoundStatement,constructorOrDestructorDefinition -> FunctionDeclarator-1 · FieldInitializerList DefaultMethodClause,constructorOrDestructorDefinition -> FunctionDeclarator-1 · FieldInitializerList DeleteMethodClause,Declaration-3 -> FunctionDeclarator-1 · ";"
  "{"=s45,":"=s197,";"=s729,"="=s200,"("=declarator(1),"["=declarator(1) | CompoundStatement=s198,FieldInitializerList=s199,DefaultMethodClause=s198,DeleteMethodClause=s198
524: FieldDeclaration -> declarationSpecifiers · ";",FieldDeclaration -> declarationSpecifiers · BitfieldClause ";",FieldDeclaration -> declarationSpecifiers · InitializerList ";",FieldDeclaration -> declarationSpecifiers · "=" expression ";",FieldDeclaration -> declarationSpecifiers · "=" InitializerList ";",FieldDeclaration -> declarationSpecifiers · fieldDeclarator ";",FieldDeclaration -> declarationSpecifiers · fieldDeclarator BitfieldClause ";",FieldDeclaration -> declarationSpecifiers · fieldDeclarator InitializerList ";",FieldDeclaration -> declarationSpecifiers · fieldDeclarator "=" expression ";",FieldDeclaration -> declarationSpecifiers · fieldDeclarator "=" InitializerList ";",FieldDeclaration -> declarationSpecifiers · fieldDeclarator ("," fieldDeclarator)+ ";",FieldDeclaration -> declarationSpecifiers · fieldDeclarator ("," fieldDeclarator)+ BitfieldClause ";",FieldDeclaration -> declarationSpecifiers · fieldDeclarator ("," fieldDeclarator)+ InitializerList ";",FieldDeclaration -> declarationSpecifiers · fieldDeclarator ("," fieldDeclarator)+ "=" expression ";",FieldDeclaration -> declarationSpecifiers · fieldDeclarator ("," fieldDeclarator)+ "=" InitializerList ";",FunctionDefinition-5 -> declarationSpecifiers · fieldDeclarator CompoundStatement,FunctionDefinition-5 -> declarationSpecifiers · fieldDeclarator DefaultMethodClause,FunctionDefinition-5 -> declarationSpecifiers · fieldDeclarator DeleteMethodClause
  "("=s733,"::"=s323,"{"=s133,identifier/"__based"=s63,OperatorName=s735,identifier=s322,":"=s737,"*"=s730,"&&"=s734,"&"=s734,";"=s738,"="=s740 | FieldIdentifier=s736,TemplateMethod=s735,ScopedFieldIdentifier=s326,NamespaceIdentifier=s324,TemplateType=s324,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s324,PointerDeclarator=s735,MsBasedModifier=s731,FunctionDeclarator=s735,ArrayDeclarator-1=s735,ParenthesizedDeclarator-1=s735,ReferenceDeclarator-2=s735,BitfieldClause=s739,InitializerList=s739,fieldDeclarator=s732
525: constructorOrDestructorDefinition -> ExplicitFunctionSpecifier · FunctionDeclarator-1 CompoundStatement,constructorOrDestructorDefinition -> ExplicitFunctionSpecifier · FunctionDeclarator-1 DefaultMethodClause,constructorOrDestructorDefinition -> ExplicitFunctionSpecifier · FunctionDeclarator-1 DeleteMethodClause,constructorOrDestructorDefinition -> ExplicitFunctionSpecifier · FunctionDeclarator-1 FieldInitializerList CompoundStatement,constructorOrDestructorDefinition -> ExplicitFunctionSpecifier · FunctionDeclarator-1 FieldInitializerList DefaultMethodClause,constructorOrDestructorDefinition -> ExplicitFunctionSpecifier · FunctionDeclarator-1 FieldInitializerList DeleteMethodClause,operatorCastDefinition -> ExplicitFunctionSpecifier · OperatorCast CompoundStatement,operatorCastDefinition -> ExplicitFunctionSpecifier · OperatorCast DefaultMethodClause,operatorCastDefinition -> ExplicitFunctionSpecifier · OperatorCast DeleteMethodClause,operatorCastDeclaration -> ExplicitFunctionSpecifier · OperatorCast ";",operatorCastDeclaration -> ExplicitFunctionSpecifier · OperatorCast "=" expression ";",Declaration-3 -> ExplicitFunctionSpecifier · FunctionDeclarator-1 ";"
  "("=s180,DestructorName=s26,"::"=s207,"["=s182,identifier/"__based"=s63,OperatorName=s26,identifier/"operator"=s83,identifier=s153,"*"=s179,"&&"=s22,"&"=s22 | Identifier=s181,NamespaceIdentifier=s208,TemplateType=s208,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s208,MsBasedModifier=s18,PointerDeclarator-1=s26,FunctionDeclarator-1=s741,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,OperatorCast=s214,declarator=s19
526: FunctionDefinition-6 -> constructorOrDestructorDefinition ·
  always FunctionDefinition-6(1)
527: FunctionDefinition-7 -> operatorCastDefinition ·
  always FunctionDefinition-7(1)
528: Declaration-4 -> operatorCastDeclaration ·
  always Declaration-4(1)
529: fieldDeclarationListItem -> FieldDeclaration ·,fieldDeclarationListItem -> TemplateDeclaration ·,fieldDeclarationListItem -> FunctionDefinition-5 ·,fieldDeclarationListItem -> FunctionDefinition-6 ·,fieldDeclarationListItem -> Declaration-3 ·,fieldDeclarationListItem -> FunctionDefinition-7 ·,fieldDeclarationListItem -> Declaration-4 ·,fieldDeclarationListItem -> FriendDeclaration ·,fieldDeclarationListItem -> AccessSpecifier ·,fieldDeclarationListItem -> AliasDeclaration ·,fieldDeclarationListItem -> UsingDeclaration ·,fieldDeclarationListItem -> TypeDefinition ·,fieldDeclarationListItem -> StaticAssertDeclaration ·
  always fieldDeclarationListItem(1)
530: fieldDeclarationListItem+ -> fieldDeclarationListItem ·
  always fieldDeclarationListItem+(1)
531: fieldDeclarationListItem+ -> fieldDeclarationListItem+ · fieldDeclarationListItem+,FieldDeclarationList -> "{" fieldDeclarationListItem+ · "}"
  "("=s180,identifier/"bool"=s48,DestructorName=s26,"::"=s1086,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s1193,identifier/"__declspec"=s59,identifier/"public"=s535,"}"=s743,"["=s182,identifier/"virtual"=s533,identifier/"extern"=s61,identifier/"static"=s61,identifier/"register"=s61,identifier/"inline"=s61,identifier/"__attribute__"=s62,identifier/"__based"=s63,OperatorName=s26,identifier/"template"=s514,identifier/"typename"=s1030,identifier/"class"=s1195,identifier/"using"=s64,identifier/"typedef"=s74,identifier/"static_assert"=s80,identifier/"explicit"=s82,identifier/"operator"=s83,identifier/"friend"=s534,identifier/"union"=s1194,identifier/"enum"=s1025,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s1064,"[["=s10,"*"=s179,"&&"=s22,"&"=s22 | Identifier=s181,NamespaceIdentifier=s1088,TemplateType=s1147,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s1088,StructSpecifier=s48,MsDeclspecModifier=s14,FieldDeclaration=s529,Attribute=s11,AttributeSpecifier=s13,MsBasedModifier=s18,PointerDeclarator-1=s26,FunctionDeclarator-1=s523,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,TemplateDeclaration=s529,AliasDeclaration=s529,TypeDefinition=s529,UsingDeclaration=s529,StaticAssertDeclaration=s529,ExplicitFunctionSpecifier=s525,OperatorCast=s39,FunctionDefinition-5=s529,FunctionDefinition-6=s529,Declaration-3=s529,FunctionDefinition-7=s529,Declaration-4=s529,FriendDeclaration=s529,AccessSpecifier=s529,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,fieldDeclarationListItem+=s742,Attribute+=s522,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+=s1188,(storageClassSpecifier | typeQualifier | AttributeSpecifier)+=s36,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeQualifier=s13,typeSpecifier=s270,fieldDeclarationListItem=s530,declarationSpecifiers=s524,storageClassSpecifier=s13,declarator=s19,constructorOrDestructorDefinition=s526,operatorCastDefinition=s527,operatorCastDeclaration=s528
532: FieldDeclarationList -> "{" "}" ·
  always FieldDeclarationList(2)
533: FieldDeclaration -> identifier/"virtual" · declarationSpecifiers ";",FieldDeclaration -> identifier/"virtual" · declarationSpecifiers BitfieldClause ";",FieldDeclaration -> identifier/"virtual" · declarationSpecifiers InitializerList ";",FieldDeclaration -> identifier/"virtual" · declarationSpecifiers "=" expression ";",FieldDeclaration -> identifier/"virtual" · declarationSpecifiers "=" InitializerList ";",FieldDeclaration -> identifier/"virtual" · declarationSpecifiers fieldDeclarator ";",FieldDeclaration -> identifier/"virtual" · declarationSpecifiers fieldDeclarator BitfieldClause ";",FieldDeclaration -> identifier/"virtual" · declarationSpecifiers fieldDeclarator InitializerList ";",FieldDeclaration -> identifier/"virtual" · declarationSpecifiers fieldDeclarator "=" expression ";",FieldDeclaration -> identifier/"virtual" · declarationSpecifiers fieldDeclarator "=" InitializerList ";",FieldDeclaration -> identifier/"virtual" · declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ ";",FieldDeclaration -> identifier/"virtual" · declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ BitfieldClause ";",FieldDeclaration -> identifier/"virtual" · declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ InitializerList ";",FieldDeclaration -> identifier/"virtual" · declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ "=" expression ";",FieldDeclaration -> identifier/"virtual" · declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ "=" InitializerList ";",constructorOrDestructorDefinition -> identifier/"virtual" · FunctionDeclarator-1 CompoundStatement,constructorOrDestructorDefinition -> identifier/"virtual" · FunctionDeclarator-1 DefaultMethodClause,constructorOrDestructorDefinition -> identifier/"virtual" · FunctionDeclarator-1 DeleteMethodClause,constructorOrDestructorDefinition -> identifier/"virtual" · FunctionDeclarator-1 FieldInitializerList CompoundStatement,constructorOrDestructorDefinition -> identifier/"virtual" · FunctionDeclarator-1 FieldInitializerList DefaultMethodClause,constructorOrDestructorDefinition -> identifier/"virtual" · FunctionDeclarator-1 FieldInitializerList DeleteMethodClause,operatorCastDefinition -> identifier/"virtual" · OperatorCast CompoundStatement,operatorCastDefinition -> identifier/"virtual" · OperatorCast DefaultMethodClause,operatorCastDefinition -> identifier/"virtual" · OperatorCast DeleteMethodClause,operatorCastDeclaration -> identifier/"virtual" · OperatorCast ";",operatorCastDeclaration -> identifier/"virtual" · OperatorCast "=" expression ";",FunctionDefinition-5 -> identifier/"virtual" · declarationSpecifiers fieldDeclarator CompoundStatement,FunctionDefinition-5 -> identifier/"virtual" · declarationSpecifiers fieldDeclarator DefaultMethodClause,FunctionDefinition-5 -> identifier/"virtual" · declarationSpecifiers fieldDeclarator DeleteMethodClause,Declaration-3 -> identifier/"virtual" · FunctionDeclarator-1 ";"
  "("=s180,identifier/"bool"=s48,DestructorName=s26,"::"=s1086,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s1193,identifier/"__declspec"=s59,"["=s182,identifier/"extern"=s61,identifier/"static"=s61,identifier/"register"=s61,identifier/"inline"=s61,identifier/"__attribute__"=s62,identifier/"__based"=s63,OperatorName=s26,identifier/"typename"=s1030,identifier/"class"=s1195,identifier/"operator"=s83,identifier/"union"=s1194,identifier/"enum"=s1025,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s1064,"*"=s179,"&&"=s22,"&"=s22 | Identifier=s181,NamespaceIdentifier=s1088,TemplateType=s1147,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s1088,StructSpecifier=s48,MsDeclspecModifier=s14,AttributeSpecifier=s14,MsBasedModifier=s18,PointerDeclarator-1=s26,FunctionDeclarator-1=s741,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,OperatorCast=s214,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+=s1188,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeQualifier=s14,typeSpecifier=s270,declarationSpecifiers=s727,storageClassSpecifier=s14,declarator=s19
534: FriendDeclaration -> identifier/"friend" · Declaration,FriendDeclaration -> identifier/"friend" · FunctionDefinition,FriendDeclaration -> identifier/"friend" · className ";",FriendDeclaration -> identifier/"friend" · identifier/"class" className ";",FriendDeclaration -> identifier/"friend" · identifier/"struct" className ";",FriendDeclaration -> identifier/"friend" · identifier/"union" className ";"
  identifier/"bool"=s48,"::"=s141,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s749,identifier/"__declspec"=s59,identifier/"extern"=s61,identifier/"static"=s61,identifier/"register"=s61,identifier/"inline"=s61,identifier/"__attribute__"=s62,identifier/"typename"=s89,identifier/"class"=s748,identifier/"__cdecl"=s84,identifier/"union"=s750,identifier/"enum"=s87,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140,"[["=s10 | NamespaceIdentifier=s142,TemplateType=s744,TypeIdentifier=s745,ScopedTypeIdentifier=s745,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,MsDeclspecModifier=s14,Attribute=s11,AttributeSpecifier=s14,Declaration=s746,FunctionDefinition=s746,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,Attribute+=s456,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+=s15,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeQualifier=s14,typeSpecifier=s270,className=s747,declarationSpecifiers=s29,storageClassSpecifier=s14
535: AccessSpecifier -> identifier/"public" · ":"
  ":"=s751
536: StructSpecifier -> identifier/"struct" BaseClassClause FieldDeclarationList ·,StructSpecifier -> identifier/"struct" identifier/"final" FieldDeclarationList ·,StructSpecifier -> identifier/"struct" className FieldDeclarationList ·,StructSpecifier -> identifier/"struct" MsDeclspecModifier className ·,StructSpecifier -> identifier/"struct" MsDeclspecModifier FieldDeclarationList ·,StructSpecifier -> identifier/"struct" MsDeclspecModifier className · FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier className · BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier className · identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier className · identifier/"final" BaseClassClause FieldDeclarationList
  always StructSpecifier(3)
537: StructSpecifier -> identifier/"struct" identifier/"final" BaseClassClause · FieldDeclarationList,StructSpecifier -> identifier/"struct" className BaseClassClause · FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier BaseClassClause · FieldDeclarationList
  "{"=s281 | FieldDeclarationList=s752
538: StructSpecifier -> identifier/"struct" className identifier/"final" · FieldDeclarationList,StructSpecifier -> identifier/"struct" className identifier/"final" · BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier identifier/"final" · FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier identifier/"final" · BaseClassClause FieldDeclarationList
  "{"=s281,":"=s280 | BaseClassClause=s753,FieldDeclarationList=s752
539: StructSpecifier -> identifier/"struct" MsDeclspecModifier className ·,StructSpecifier -> identifier/"struct" MsDeclspecModifier className · FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier className · BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier className · identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier className · identifier/"final" BaseClassClause FieldDeclarationList
  identifier/"final"=s754,"{"=s281,":"=s280,"("=StructSpecifier(3),DestructorName=StructSpecifier(3),"::"=StructSpecifier(3),identifier/"const"=StructSpecifier(3),identifier/"volatile"=StructSpecifier(3),identifier/"restrict"=StructSpecifier(3),identifier/"_Atomic"=StructSpecifier(3),identifier/"mutable"=StructSpecifier(3),identifier/"constexpr"=StructSpecifier(3),identifier/"__declspec"=StructSpecifier(3),"["=StructSpecifier(3),identifier/"extern"=StructSpecifier(3),identifier/"static"=StructSpecifier(3),identifier/"register"=StructSpecifier(3),identifier/"inline"=StructSpecifier(3),identifier/"__attribute__"=StructSpecifier(3),identifier/"__based"=StructSpecifier(3),OperatorName=StructSpecifier(3),identifier=StructSpecifier(3),"*"=StructSpecifier(3),"&&"=StructSpecifier(3),"&"=StructSpecifier(3),";"=StructSpecifier(3),")"=StructSpecifier(3),","=StructSpecifier(3),"..."=StructSpecifier(3),"="=StructSpecifier(3),templateArgsEndFallback=StructSpecifier(3),templateArgsEnd=StructSpecifier(3) | BaseClassClause=s753,FieldDeclarationList=s752
540: UnionSpecifier -> identifier/"union" BaseClassClause FieldDeclarationList ·,UnionSpecifier -> identifier/"union" identifier/"final" FieldDeclarationList ·,UnionSpecifier -> identifier/"union" className FieldDeclarationList ·,UnionSpecifier -> identifier/"union" MsDeclspecModifier className ·,UnionSpecifier -> identifier/"union" MsDeclspecModifier FieldDeclarationList ·,UnionSpecifier -> identifier/"union" MsDeclspecModifier className · FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier className · BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier className · identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier className · identifier/"final" BaseClassClause FieldDeclarationList
  always UnionSpecifier(3)
541: UnionSpecifier -> identifier/"union" identifier/"final" BaseClassClause · FieldDeclarationList,UnionSpecifier -> identifier/"union" className BaseClassClause · FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier BaseClassClause · FieldDeclarationList
  "{"=s281 | FieldDeclarationList=s755
542: UnionSpecifier -> identifier/"union" className identifier/"final" · FieldDeclarationList,UnionSpecifier -> identifier/"union" className identifier/"final" · BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier identifier/"final" · FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier identifier/"final" · BaseClassClause FieldDeclarationList
  "{"=s281,":"=s280 | BaseClassClause=s756,FieldDeclarationList=s755
543: UnionSpecifier -> identifier/"union" MsDeclspecModifier className ·,UnionSpecifier -> identifier/"union" MsDeclspecModifier className · FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier className · BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier className · identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier className · identifier/"final" BaseClassClause FieldDeclarationList
  identifier/"final"=s757,"{"=s281,":"=s280,"("=UnionSpecifier(3),DestructorName=UnionSpecifier(3),"::"=UnionSpecifier(3),identifier/"const"=UnionSpecifier(3),identifier/"volatile"=UnionSpecifier(3),identifier/"restrict"=UnionSpecifier(3),identifier/"_Atomic"=UnionSpecifier(3),identifier/"mutable"=UnionSpecifier(3),identifier/"constexpr"=UnionSpecifier(3),identifier/"__declspec"=UnionSpecifier(3),"["=UnionSpecifier(3),identifier/"extern"=UnionSpecifier(3),identifier/"static"=UnionSpecifier(3),identifier/"register"=UnionSpecifier(3),identifier/"inline"=UnionSpecifier(3),identifier/"__attribute__"=UnionSpecifier(3),identifier/"__based"=UnionSpecifier(3),OperatorName=UnionSpecifier(3),identifier=UnionSpecifier(3),"*"=UnionSpecifier(3),"&&"=UnionSpecifier(3),"&"=UnionSpecifier(3),";"=UnionSpecifier(3),")"=UnionSpecifier(3),","=UnionSpecifier(3),"..."=UnionSpecifier(3),"="=UnionSpecifier(3),templateArgsEndFallback=UnionSpecifier(3),templateArgsEnd=UnionSpecifier(3) | BaseClassClause=s756,FieldDeclarationList=s755
544: Enumerator -> Identifier ·,Enumerator -> Identifier · "=" expression
  "="=s758,","=Enumerator(1),"}"=Enumerator(1)
545: commaSepTrailing<Enumerator> -> Enumerator ·,commaSepTrailing<Enumerator> -> Enumerator · ("," Enumerator?)+
  ","=s759,"}"=commaSepTrailing<Enumerator>(1) | ("," Enumerator?)+=s760
546: EnumeratorList -> "{" commaSepTrailing<Enumerator> · "}"
  "}"=s761
547: enumBaseClause -> ":" · ScopedTypeIdentifier,enumBaseClause -> ":" · TypeIdentifier,enumBaseClause -> ":" · SizedTypeSpecifier,enumBaseClause -> ":" · identifier/"bool"
  identifier/"bool"=s763,"::"=s141,identifier/"signed"=s46,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s142,TypeIdentifier=s762,ScopedTypeIdentifier=s762,ScopedNamespaceIdentifier=s142,SizedTypeSpecifier=s763,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47
548: EnumSpecifier -> identifier/"enum" className EnumeratorList ·,EnumSpecifier -> identifier/"enum" className enumBaseClause ·,EnumSpecifier -> identifier/"enum" className enumBaseClause · EnumeratorList,EnumSpecifier -> identifier/"enum" identifier/"class" className ·,EnumSpecifier -> identifier/"enum" identifier/"class" className · EnumeratorList,EnumSpecifier -> identifier/"enum" identifier/"class" className · enumBaseClause,EnumSpecifier -> identifier/"enum" identifier/"class" className · enumBaseClause EnumeratorList,EnumSpecifier -> identifier/"enum" identifier/"class" EnumeratorList ·,EnumSpecifier -> identifier/"enum" identifier/"struct" className ·,EnumSpecifier -> identifier/"enum" identifier/"struct" className · EnumeratorList,EnumSpecifier -> identifier/"enum" identifier/"struct" className · enumBaseClause,EnumSpecifier -> identifier/"enum" identifier/"struct" className · enumBaseClause EnumeratorList,EnumSpecifier -> identifier/"enum" identifier/"struct" EnumeratorList ·
  always EnumSpecifier(3)
549: EnumSpecifier -> identifier/"enum" className enumBaseClause ·,EnumSpecifier -> identifier/"enum" className enumBaseClause · EnumeratorList
  "{"=s292,"("=EnumSpecifier(3),DestructorName=EnumSpecifier(3),"::"=EnumSpecifier(3),identifier/"const"=EnumSpecifier(3),identifier/"volatile"=EnumSpecifier(3),identifier/"restrict"=EnumSpecifier(3),identifier/"_Atomic"=EnumSpecifier(3),identifier/"mutable"=EnumSpecifier(3),identifier/"constexpr"=EnumSpecifier(3),identifier/"__declspec"=EnumSpecifier(3),"["=EnumSpecifier(3),identifier/"extern"=EnumSpecifier(3),identifier/"static"=EnumSpecifier(3),identifier/"register"=EnumSpecifier(3),identifier/"inline"=EnumSpecifier(3),identifier/"__attribute__"=EnumSpecifier(3),identifier/"__based"=EnumSpecifier(3),OperatorName=EnumSpecifier(3),identifier=EnumSpecifier(3),"*"=EnumSpecifier(3),"&&"=EnumSpecifier(3),"&"=EnumSpecifier(3),";"=EnumSpecifier(3),")"=EnumSpecifier(3),","=EnumSpecifier(3),"..."=EnumSpecifier(3),"="=EnumSpecifier(3),templateArgsEndFallback=EnumSpecifier(3),templateArgsEnd=EnumSpecifier(3),identifier/"final"=EnumSpecifier(3),identifier/"noexcept"=EnumSpecifier(3),identifier/"throw"=EnumSpecifier(3),"->"=EnumSpecifier(3) | EnumeratorList=s764
550: EnumSpecifier -> identifier/"enum" identifier/"class" className ·,EnumSpecifier -> identifier/"enum" identifier/"class" className · EnumeratorList,EnumSpecifier -> identifier/"enum" identifier/"class" className · enumBaseClause,EnumSpecifier -> identifier/"enum" identifier/"class" className · enumBaseClause EnumeratorList,EnumSpecifier -> identifier/"enum" identifier/"struct" className ·,EnumSpecifier -> identifier/"enum" identifier/"struct" className · EnumeratorList,EnumSpecifier -> identifier/"enum" identifier/"struct" className · enumBaseClause,EnumSpecifier -> identifier/"enum" identifier/"struct" className · enumBaseClause EnumeratorList
  "{"=s292,":"=s547,"("=EnumSpecifier(3),DestructorName=EnumSpecifier(3),"::"=EnumSpecifier(3),identifier/"const"=EnumSpecifier(3),identifier/"volatile"=EnumSpecifier(3),identifier/"restrict"=EnumSpecifier(3),identifier/"_Atomic"=EnumSpecifier(3),identifier/"mutable"=EnumSpecifier(3),identifier/"constexpr"=EnumSpecifier(3),identifier/"__declspec"=EnumSpecifier(3),"["=EnumSpecifier(3),identifier/"extern"=EnumSpecifier(3),identifier/"static"=EnumSpecifier(3),identifier/"register"=EnumSpecifier(3),identifier/"inline"=EnumSpecifier(3),identifier/"__attribute__"=EnumSpecifier(3),identifier/"__based"=EnumSpecifier(3),OperatorName=EnumSpecifier(3),identifier=EnumSpecifier(3),"*"=EnumSpecifier(3),"&&"=EnumSpecifier(3),"&"=EnumSpecifier(3),";"=EnumSpecifier(3),")"=EnumSpecifier(3),","=EnumSpecifier(3),"..."=EnumSpecifier(3),"="=EnumSpecifier(3),templateArgsEndFallback=EnumSpecifier(3),templateArgsEnd=EnumSpecifier(3),identifier/"final"=EnumSpecifier(3),identifier/"noexcept"=EnumSpecifier(3),identifier/"throw"=EnumSpecifier(3),"->"=EnumSpecifier(3) | EnumeratorList=s764,enumBaseClause=s765
551: ClassSpecifier -> identifier/"class" BaseClassClause FieldDeclarationList ·,ClassSpecifier -> identifier/"class" identifier/"final" FieldDeclarationList ·,ClassSpecifier -> identifier/"class" className FieldDeclarationList ·,ClassSpecifier -> identifier/"class" MsDeclspecModifier FieldDeclarationList ·
  always ClassSpecifier(3)
552: ClassSpecifier -> identifier/"class" identifier/"final" BaseClassClause · FieldDeclarationList,ClassSpecifier -> identifier/"class" className BaseClassClause · FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier BaseClassClause · FieldDeclarationList
  "{"=s281 | FieldDeclarationList=s766
553: ClassSpecifier -> identifier/"class" className identifier/"final" · FieldDeclarationList,ClassSpecifier -> identifier/"class" className identifier/"final" · BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier identifier/"final" · FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier identifier/"final" · BaseClassClause FieldDeclarationList
  "{"=s281,":"=s280 | BaseClassClause=s767,FieldDeclarationList=s766
554: ClassSpecifier -> identifier/"class" MsDeclspecModifier className ·,ClassSpecifier -> identifier/"class" MsDeclspecModifier className · FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier className · BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier className · identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier className · identifier/"final" BaseClassClause FieldDeclarationList
  identifier/"final"=s768,"{"=s281,":"=s280,"("=ClassSpecifier(3),DestructorName=ClassSpecifier(3),"::"=ClassSpecifier(3),identifier/"const"=ClassSpecifier(3),identifier/"volatile"=ClassSpecifier(3),identifier/"restrict"=ClassSpecifier(3),identifier/"_Atomic"=ClassSpecifier(3),identifier/"mutable"=ClassSpecifier(3),identifier/"constexpr"=ClassSpecifier(3),identifier/"__declspec"=ClassSpecifier(3),"["=ClassSpecifier(3),identifier/"extern"=ClassSpecifier(3),identifier/"static"=ClassSpecifier(3),identifier/"register"=ClassSpecifier(3),identifier/"inline"=ClassSpecifier(3),identifier/"__attribute__"=ClassSpecifier(3),identifier/"__based"=ClassSpecifier(3),OperatorName=ClassSpecifier(3),identifier=ClassSpecifier(3),"*"=ClassSpecifier(3),"&&"=ClassSpecifier(3),"&"=ClassSpecifier(3),";"=ClassSpecifier(3),")"=ClassSpecifier(3),","=ClassSpecifier(3),"..."=ClassSpecifier(3),"="=ClassSpecifier(3),templateArgsEndFallback=ClassSpecifier(3),templateArgsEnd=ClassSpecifier(3) | BaseClassClause=s767,FieldDeclarationList=s766
555: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "...",Decltype -> identifier/"decltype" "(" expression · ")"
  "("=s124,")"=s769,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112 | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
556: CastExpression -> "(" TypeDescriptor · ")" expression,_anon-4 -> "(" TypeDescriptor · ")",CompoundLiteralExpression -> "(" TypeDescriptor · ")" InitializerList
  ")"=s770
557: SizeofExpression -> identifier/"sizeof" "..." "(" · Identifier ")"
  identifier=s264 | Identifier=s771
558: NewDeclarator -> "[" · expression "]",NewDeclarator -> "[" · expression "]" NewDeclarator
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s772
559: NewExpression -> identifier/"new" typeSpecifier ArgumentList ·,NewExpression -> identifier/"new" typeSpecifier InitializerList ·
  always NewExpression(3)
560: NewExpression -> identifier/"new" typeSpecifier NewDeclarator ·,NewExpression -> identifier/"new" typeSpecifier NewDeclarator · ArgumentList,NewExpression -> identifier/"new" typeSpecifier NewDeclarator · InitializerList
  "("=s124,"{"=s133,","=NewExpression(3),"["=NewExpression(3),incDec=NewExpression(3),ArithOp<"+" | "-">=NewExpression(3),ArithOp<"/" | "%">=NewExpression(3),BitOp<"|">=NewExpression(3),BitOp<"^">=NewExpression(3),CompareOp<"==" | "!=">=NewExpression(3),CompareOp<"<=" | ">=">=NewExpression(3),"<"/"<"=NewExpression(3),templateArgsEnd/">"=NewExpression(3),BitOp<"<<" | ">>">=NewExpression(3),"?"=NewExpression(3),"."=NewExpression(3),"->"=NewExpression(3),"..."=NewExpression(3),"*"=NewExpression(3),"||"=NewExpression(3),"&&"=NewExpression(3),"&"=NewExpression(3),";"=NewExpression(3),UpdateOp=NewExpression(3),"="=NewExpression(3),")"=NewExpression(3),"]"=NewExpression(3),":"=NewExpression(3),"}"=NewExpression(3),templateArgsEndFallback=NewExpression(3),templateArgsEnd=NewExpression(3) | ArgumentList=s577,InitializerList=s577
561: LambdaCaptureSpecifier -> "[" "]" ·,DeleteExpression -> identifier/"delete" "[" "]" · expression
  RawString=s35,identifier/"bool"=s164,"::"=s155,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54,"("=LambdaCaptureSpecifier(2),"{"=LambdaCaptureSpecifier(2),"["=LambdaCaptureSpecifier(2),"*"=LambdaCaptureSpecifier(2),"&&"=LambdaCaptureSpecifier(2),"&"=LambdaCaptureSpecifier(2) | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ConcatenatedString=s56,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,ParameterPackExpansion-2=s56,expression=s773
562: PreprocDirective -> pp<"include"> String "\n" ·,PreprocDirective -> pp<"include"> SystemLibString "\n" ·,PreprocDirective -> pp<"include"> Identifier "\n" ·,PreprocDirective -> pp<"if"> PreprocArg "\n" ·,PreprocDirective -> pp<"ifdef"> Identifier "\n" ·,PreprocDirective -> pp<"ifndef"> Identifier "\n" ·,PreprocDirective -> pp<"elif"> PreprocArg "\n" ·,PreprocDirective -> PreprocDirectiveName PreprocArg "\n" ·
  always PreprocDirective(3)
563: PreprocDirective -> pp<"include"> Identifier ArgumentList · "\n",PreprocDirective -> pp<"define"> Identifier PreprocArg · "\n"
  "\n"=s774
564: preprocParams -> "(" · commaSep<Identifier | "..."> ")"
  identifier=s264,"..."=s775,")"=commaSep<Identifier | "...">(0) | Identifier=s775,commaSep<Identifier | "...">=s776
565: PreprocDirective -> pp<"define"> Identifier preprocParams · PreprocArg "\n"
  PreprocArg=s777
566: Macro -> MacroName whitespace ArgumentList ·
  always Macro(3)
567: ConditionalExpression -> expression "?" expression ":" · expression
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s778
568: NamespaceIdentifier-1 -> scopedIdentifier ·,TypeIdentifier-1 -> scopedIdentifier ·,FieldIdentifier-1 -> scopedIdentifier ·
  "::"=NamespaceIdentifier-1(1),"<"=TypeIdentifier-1(1),"<"=FieldIdentifier-1(1)
569: ScopedFieldIdentifier -> "::" FieldIdentifier-1 ·,ScopedFieldIdentifier -> "::" OperatorName ·,ScopedFieldIdentifier -> "::" DestructorName ·
  always ScopedFieldIdentifier(2)
570: ScopedNamespaceIdentifier -> NamespaceIdentifier "::" · NamespaceIdentifier-1,ScopedNamespaceIdentifier -> TemplateType "::" · NamespaceIdentifier-1,ScopedNamespaceIdentifier -> ScopedNamespaceIdentifier "::" · NamespaceIdentifier-1,ScopedTypeIdentifier -> NamespaceIdentifier "::" · TypeIdentifier-1,ScopedTypeIdentifier -> TemplateType "::" · TypeIdentifier-1,ScopedTypeIdentifier -> ScopedNamespaceIdentifier "::" · TypeIdentifier-1,ScopedFieldIdentifier -> NamespaceIdentifier "::" · FieldIdentifier-1,ScopedFieldIdentifier -> NamespaceIdentifier "::" · OperatorName,ScopedFieldIdentifier -> NamespaceIdentifier "::" · DestructorName,ScopedFieldIdentifier -> TemplateType "::" · FieldIdentifier-1,ScopedFieldIdentifier -> TemplateType "::" · OperatorName,ScopedFieldIdentifier -> TemplateType "::" · DestructorName,ScopedFieldIdentifier -> ScopedNamespaceIdentifier "::" · FieldIdentifier-1,ScopedFieldIdentifier -> ScopedNamespaceIdentifier "::" · OperatorName,ScopedFieldIdentifier -> ScopedNamespaceIdentifier "::" · DestructorName
  DestructorName=s779,OperatorName=s779,scopedIdentifier=s568 | NamespaceIdentifier-1=s347,TypeIdentifier-1=s348,FieldIdentifier-1=s779
571: TemplateMethod -> FieldIdentifier TemplateArgumentList ·,TemplateMethod -> ScopedFieldIdentifier TemplateArgumentList ·
  always TemplateMethod(2)
572: SubscriptExpression -> expression "[" expression "]" ·
  always SubscriptExpression(4)
573: ("," (expression | InitializerList))+ -> "," · expression,("," (expression | InitializerList))+ -> "," · InitializerList
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"{"=s133,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,InitializerList=s781,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s780
574: ("," (expression | InitializerList))+ -> ("," (expression | InitializerList))+ · ("," (expression | InitializerList))+,commaSep<expression | InitializerList> -> expression ("," (expression | InitializerList))+ ·,commaSep<expression | InitializerList> -> InitializerList ("," (expression | InitializerList))+ ·
  ","=s573,")"=commaSep<expression | InitializerList>(2) | ("," (expression | InitializerList))+=s782
575: ArgumentList -> "(" commaSep<expression | InitializerList> ")" ·
  always ArgumentList(3)
576: AbstractFunctionDeclarator -> abstractDeclarator · ParameterList,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList TrailingReturnType,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+ TrailingReturnType,AbstractArrayDeclarator -> abstractDeclarator · "[" "]",AbstractArrayDeclarator -> abstractDeclarator · "[" expression "]",AbstractArrayDeclarator -> abstractDeclarator · "[" "*" "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ expression "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ "*" "]",OperatorCast -> "::" scopedIdentifier/"operator" declarationSpecifiers abstractDeclarator ·
  "("=s169,"["=s447,"{"=OperatorCast(4),";"=OperatorCast(4),"="=OperatorCast(4) | ParameterList=s446
577: NewExpression -> "::" scopedIdentifier/"new" typeSpecifier ArgumentList ·,NewExpression -> "::" scopedIdentifier/"new" typeSpecifier InitializerList ·,NewExpression -> identifier/"new" typeSpecifier NewDeclarator ArgumentList ·,NewExpression -> identifier/"new" typeSpecifier NewDeclarator InitializerList ·,NewExpression -> identifier/"new" ArgumentList typeSpecifier ArgumentList ·,NewExpression -> identifier/"new" ArgumentList typeSpecifier InitializerList ·
  always NewExpression(4)
578: NewExpression -> "::" scopedIdentifier/"new" typeSpecifier NewDeclarator ·,NewExpression -> "::" scopedIdentifier/"new" typeSpecifier NewDeclarator · ArgumentList,NewExpression -> "::" scopedIdentifier/"new" typeSpecifier NewDeclarator · InitializerList,NewExpression -> identifier/"new" ArgumentList typeSpecifier NewDeclarator ·,NewExpression -> identifier/"new" ArgumentList typeSpecifier NewDeclarator · ArgumentList,NewExpression -> identifier/"new" ArgumentList typeSpecifier NewDeclarator · InitializerList
  "("=s124,"{"=s133,","=NewExpression(4),"["=NewExpression(4),incDec=NewExpression(4),ArithOp<"+" | "-">=NewExpression(4),ArithOp<"/" | "%">=NewExpression(4),BitOp<"|">=NewExpression(4),BitOp<"^">=NewExpression(4),CompareOp<"==" | "!=">=NewExpression(4),CompareOp<"<=" | ">=">=NewExpression(4),"<"/"<"=NewExpression(4),templateArgsEnd/">"=NewExpression(4),BitOp<"<<" | ">>">=NewExpression(4),"?"=NewExpression(4),"."=NewExpression(4),"->"=NewExpression(4),"..."=NewExpression(4),"*"=NewExpression(4),"||"=NewExpression(4),"&&"=NewExpression(4),"&"=NewExpression(4),";"=NewExpression(4),UpdateOp=NewExpression(4),"="=NewExpression(4),")"=NewExpression(4),"]"=NewExpression(4),":"=NewExpression(4),"}"=NewExpression(4),templateArgsEndFallback=NewExpression(4),templateArgsEnd=NewExpression(4) | ArgumentList=s783,InitializerList=s783
579: NewExpression -> "::" scopedIdentifier/"new" ArgumentList typeSpecifier ·,NewExpression -> "::" scopedIdentifier/"new" ArgumentList typeSpecifier · ArgumentList,NewExpression -> "::" scopedIdentifier/"new" ArgumentList typeSpecifier · InitializerList,NewExpression -> "::" scopedIdentifier/"new" ArgumentList typeSpecifier · NewDeclarator,NewExpression -> "::" scopedIdentifier/"new" ArgumentList typeSpecifier · NewDeclarator ArgumentList,NewExpression -> "::" scopedIdentifier/"new" ArgumentList typeSpecifier · NewDeclarator InitializerList
  "("=s124,"{"=s133,"["=s558,","=NewExpression(4),incDec=NewExpression(4),ArithOp<"+" | "-">=NewExpression(4),ArithOp<"/" | "%">=NewExpression(4),BitOp<"|">=NewExpression(4),BitOp<"^">=NewExpression(4),CompareOp<"==" | "!=">=NewExpression(4),CompareOp<"<=" | ">=">=NewExpression(4),"<"/"<"=NewExpression(4),templateArgsEnd/">"=NewExpression(4),BitOp<"<<" | ">>">=NewExpression(4),"?"=NewExpression(4),"."=NewExpression(4),"->"=NewExpression(4),"..."=NewExpression(4),"*"=NewExpression(4),"||"=NewExpression(4),"&&"=NewExpression(4),"&"=NewExpression(4),";"=NewExpression(4),UpdateOp=NewExpression(4),"="=NewExpression(4),")"=NewExpression(4),"]"=NewExpression(4),":"=NewExpression(4),"}"=NewExpression(4),templateArgsEndFallback=NewExpression(4),templateArgsEnd=NewExpression(4) | ArgumentList=s783,InitializerList=s783,NewDeclarator=s784
580: LambdaCaptureSpecifier -> "[" "]" ·,DeleteExpression -> "::" scopedIdentifier/"delete" "[" "]" · expression
  RawString=s35,identifier/"bool"=s164,"::"=s155,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54,"("=LambdaCaptureSpecifier(2),"{"=LambdaCaptureSpecifier(2),"["=LambdaCaptureSpecifier(2),"*"=LambdaCaptureSpecifier(2),"&&"=LambdaCaptureSpecifier(2),"&"=LambdaCaptureSpecifier(2) | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ConcatenatedString=s56,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,ParameterPackExpansion-2=s56,expression=s785
581: OperatorCast -> NamespaceIdentifier "::" scopedIdentifier/"operator" declarationSpecifiers · abstractDeclarator,OperatorCast -> TemplateType "::" scopedIdentifier/"operator" declarationSpecifiers · abstractDeclarator,OperatorCast -> ScopedNamespaceIdentifier "::" scopedIdentifier/"operator" declarationSpecifiers · abstractDeclarator
  "("=s231,"["=s230,"*"=s1304,"&&"=s1285,"&"=s1285 | ParameterList=s228,AbstractPointerDeclarator=s233,AbstractFunctionDeclarator=s233,AbstractArrayDeclarator=s233,AbstractParenthesizedDeclarator=s233,AbstractReferenceDeclarator=s233,abstractDeclarator=s786
582: ("," (InitializerPair | expression | InitializerList)?)+ -> "," ·,("," (InitializerPair | expression | InitializerList)?)+ -> "," · InitializerPair,("," (InitializerPair | expression | InitializerList)?)+ -> "," · expression,("," (InitializerPair | expression | InitializerList)?)+ -> "," · InitializerList
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"{"=s133,"["=s352,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"."=s353,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54,","=("," (InitializerPair | expression | InitializerList)?)+(1),"}"=("," (InitializerPair | expression | InitializerList)?)+(1) | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,InitializerList=s788,InitializerPair=s788,SubscriptDesignator=s354,FieldDesignator=s354,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,(SubscriptDesignator | FieldDesignator)+=s355,expression=s787
583: ("," (InitializerPair | expression | InitializerList)?)+ -> ("," (InitializerPair | expression | InitializerList)?)+ · ("," (InitializerPair | expression | InitializerList)?)+,commaSepTrailing<InitializerPair | expression | InitializerList> -> InitializerPair ("," (InitializerPair | expression | InitializerList)?)+ ·,commaSepTrailing<InitializerPair | expression | InitializerList> -> expression ("," (InitializerPair | expression | InitializerList)?)+ ·,commaSepTrailing<InitializerPair | expression | InitializerList> -> InitializerList ("," (InitializerPair | expression | InitializerList)?)+ ·
  ","=s582,"}"=commaSepTrailing<InitializerPair | expression | InitializerList>(2) | ("," (InitializerPair | expression | InitializerList)?)+=s789
584: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,SubscriptDesignator -> "[" expression · "]",FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,commaSep1<expression> -> expression ·,commaSep1<expression> -> expression · ("," expression)+,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,","=s408,"["=s109,"]"=s790,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112 | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118,("," expression)+=s409
585: FieldIdentifier -> identifier ·
  always FieldIdentifier(1)
586: FieldDesignator -> "." FieldIdentifier ·
  always FieldDesignator(2)
587: SubscriptDesignator -> "[" · expression "]"
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s791
588: (SubscriptDesignator | FieldDesignator)+ -> (SubscriptDesignator | FieldDesignator)+ · (SubscriptDesignator | FieldDesignator)+,(SubscriptDesignator | FieldDesignator)+ -> (SubscriptDesignator | FieldDesignator)+ (SubscriptDesignator | FieldDesignator)+ ·
  always (SubscriptDesignator | FieldDesignator)+(2)
589: InitializerPair -> (SubscriptDesignator | FieldDesignator)+ "=" · expression,InitializerPair -> (SubscriptDesignator | FieldDesignator)+ "=" · InitializerList
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"{"=s133,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,InitializerList=s793,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s792
590: InitializerList -> "{" commaSepTrailing<InitializerPair | expression | InitializerList> "}" ·
  always InitializerList(3)
591: ("::" attributeIdentifier)+ -> "::" attributeIdentifier ·
  always ("::" attributeIdentifier)+(2)
592: ("::" attributeIdentifier)+ -> ("::" attributeIdentifier)+ · ("::" attributeIdentifier)+,("::" attributeIdentifier)+ -> ("::" attributeIdentifier)+ ("::" attributeIdentifier)+ ·
  always ("::" attributeIdentifier)+(2)
593: ArithOp -> "*" ·
  always ArithOp(1)
594: LogicOp -> "||" ·,LogicOp -> "&&" ·
  always LogicOp(1)
595: BitOp -> "&" ·
  always BitOp(1)
596: balancedTokens -> "{" · "}",balancedTokens -> "{" · balancedTokens+ "}"
  RawString=s599,"("=s598,"::"=s599,","=s599,"{"=s596,attributeIdentifier=s599,"}"=s794,"["=s597,incDec=s599,ArithOp<"+" | "-">=s599,ArithOp<"/" | "%">=s599,BitOp<"|">=s599,BitOp<"^">=s599,CompareOp<"==" | "!=">=s599,CompareOp<"<=" | ">=">=s599,"<"/"<"=s599,templateArgsEnd/">"=s599,BitOp<"<<" | ">>">=s599,UpdateOp=s599,Number=s599,stringLiteralStart=s2,":"=s599,"."=s599,"->"=s599,"..."=s599,"*"=s593,"||"=s594,"&&"=s594,"&"=s595,";"=s599,charLiteralStart=s9 | String=s599,ArithOp=s599,LogicOp=s599,BitOp=s599,CharLiteral=s599,balancedTokens+=s795,balancedTokens=s600
597: balancedTokens -> "[" · "]",balancedTokens -> "[" · balancedTokens+ "]"
  RawString=s599,"("=s598,"::"=s599,","=s599,"{"=s596,attributeIdentifier=s599,"["=s597,"]"=s794,incDec=s599,ArithOp<"+" | "-">=s599,ArithOp<"/" | "%">=s599,BitOp<"|">=s599,BitOp<"^">=s599,CompareOp<"==" | "!=">=s599,CompareOp<"<=" | ">=">=s599,"<"/"<"=s599,templateArgsEnd/">"=s599,BitOp<"<<" | ">>">=s599,UpdateOp=s599,Number=s599,stringLiteralStart=s2,":"=s599,"."=s599,"->"=s599,"..."=s599,"*"=s593,"||"=s594,"&&"=s594,"&"=s595,";"=s599,charLiteralStart=s9 | String=s599,ArithOp=s599,LogicOp=s599,BitOp=s599,CharLiteral=s599,balancedTokens+=s796,balancedTokens=s600
598: balancedTokens -> "(" · ")",balancedTokens -> "(" · balancedTokens+ ")"
  RawString=s599,"("=s598,"::"=s599,")"=s794,","=s599,"{"=s596,attributeIdentifier=s599,"["=s597,incDec=s599,ArithOp<"+" | "-">=s599,ArithOp<"/" | "%">=s599,BitOp<"|">=s599,BitOp<"^">=s599,CompareOp<"==" | "!=">=s599,CompareOp<"<=" | ">=">=s599,"<"/"<"=s599,templateArgsEnd/">"=s599,BitOp<"<<" | ">>">=s599,UpdateOp=s599,Number=s599,stringLiteralStart=s2,":"=s599,"."=s599,"->"=s599,"..."=s599,"*"=s593,"||"=s594,"&&"=s594,"&"=s595,";"=s599,charLiteralStart=s9 | String=s599,ArithOp=s599,LogicOp=s599,BitOp=s599,CharLiteral=s599,balancedTokens+=s797,balancedTokens=s600
599: balancedTokens -> attributeIdentifier ·,balancedTokens -> incDec ·,balancedTokens -> ArithOp<"+" | "-"> ·,balancedTokens -> ArithOp ·,balancedTokens -> ArithOp<"/" | "%"> ·,balancedTokens -> LogicOp ·,balancedTokens -> BitOp<"|"> ·,balancedTokens -> BitOp<"^"> ·,balancedTokens -> BitOp ·,balancedTokens -> CompareOp<"==" | "!="> ·,balancedTokens -> CompareOp<"<=" | ">="> ·,balancedTokens -> "<"/"<" ·,balancedTokens -> templateArgsEnd/">" ·,balancedTokens -> BitOp<"<<" | ">>"> ·,balancedTokens -> UpdateOp ·,balancedTokens -> ";" ·,balancedTokens -> ":" ·,balancedTokens -> "," ·,balancedTokens -> "..." ·,balancedTokens -> "::" ·,balancedTokens -> "." ·,balancedTokens -> "->" ·,balancedTokens -> Number ·,balancedTokens -> String ·,balancedTokens -> RawString ·,balancedTokens -> CharLiteral ·
  always balancedTokens(1)
600: balancedTokens+ -> balancedTokens ·
  always balancedTokens+(1)
601: balancedTokens+ -> balancedTokens+ · balancedTokens+,AttributeArgs -> "(" balancedTokens+ · ")"
  RawString=s599,"("=s598,"::"=s599,")"=s799,","=s599,"{"=s596,attributeIdentifier=s599,"["=s597,incDec=s599,ArithOp<"+" | "-">=s599,ArithOp<"/" | "%">=s599,BitOp<"|">=s599,BitOp<"^">=s599,CompareOp<"==" | "!=">=s599,CompareOp<"<=" | ">=">=s599,"<"/"<"=s599,templateArgsEnd/">"=s599,BitOp<"<<" | ">>">=s599,UpdateOp=s599,Number=s599,stringLiteralStart=s2,":"=s599,"."=s599,"->"=s599,"..."=s599,"*"=s593,"||"=s594,"&&"=s594,"&"=s595,";"=s599,charLiteralStart=s9 | String=s599,ArithOp=s599,LogicOp=s599,BitOp=s599,CharLiteral=s599,balancedTokens+=s798,balancedTokens=s600
602: AttributeArgs -> "(" ")" ·
  always AttributeArgs(2)
603: ("," AttributeName AttributeArgs { "(" balancedTokens* ")" }?)+ -> "," AttributeName ·,("," AttributeName AttributeArgs { "(" balancedTokens* ")" }?)+ -> "," AttributeName · AttributeArgs-1
  "("=s800,","=("," AttributeName AttributeArgs { "(" balancedTokens* ")" }?)+(2),"..."=("," AttributeName AttributeArgs { "(" balancedTokens* ")" }?)+(2),"]]"=("," AttributeName AttributeArgs { "(" balancedTokens* ")" }?)+(2) | AttributeArgs-1=s801
604: ("," AttributeName AttributeArgs { "(" balancedTokens* ")" }?)+ -> ("," AttributeName AttributeArgs { "(" balancedTokens* ")" }?)+ · ("," AttributeName AttributeArgs { "(" balancedTokens* ")" }?)+,("," AttributeName AttributeArgs { "(" balancedTokens* ")" }?)+ -> ("," AttributeName AttributeArgs { "(" balancedTokens* ")" }?)+ ("," AttributeName AttributeArgs { "(" balancedTokens* ")" }?)+ ·
  always ("," AttributeName AttributeArgs { "(" balancedTokens* ")" }?)+(2)
605: ("," AttributeName AttributeArgs { "(" balancedTokens* ")" }?)+ -> ("," AttributeName AttributeArgs { "(" balancedTokens* ")" }?)+ · ("," AttributeName AttributeArgs { "(" balancedTokens* ")" }?)+,commaSep<AttributeName AttributeArgs { "(" balancedTokens* ")" }?> -> AttributeName AttributeArgs ("," AttributeName AttributeArgs { "(" balancedTokens* ")" }?)+ ·
  ","=s363,"..."=commaSep<AttributeName AttributeArgs { "(" balancedTokens* ")" }?>(3),"]]"=commaSep<AttributeName AttributeArgs { "(" balancedTokens* ")" }?>(3) | ("," AttributeName AttributeArgs { "(" balancedTokens* ")" }?)+=s604
606: Attribute -> "[[" commaSep<AttributeName AttributeArgs { "(" balancedTokens* ")" }?> "..." "]]" ·
  always Attribute(4)
607: FunctionDefinition -> Attribute+ declarationSpecifiers declarator CompoundStatement ·,FunctionDefinition -> identifier/"__cdecl" declarationSpecifiers declarator CompoundStatement ·
  always FunctionDefinition(4)
608: Declaration -> Attribute+ declarationSpecifiers commaSep1<declarator | InitDeclarator> ";" ·
  always Declaration(4)
609: FunctionDeclarator-1 -> declarator · ParameterList,FunctionDeclarator-1 -> declarator · ParameterList ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+ ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,ArrayDeclarator -> declarator · "[" "]",ArrayDeclarator -> declarator · "[" expression "]",ArrayDeclarator -> declarator · "[" "*" "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "]",ArrayDeclarator -> declarator · "[" typeQualifier+ expression "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "*" "]",FunctionDefinition -> Attribute+ identifier/"__cdecl" declarationSpecifiers declarator · CompoundStatement
  "("=s169,"{"=s45,"["=s168 | ParameterList=s1300,CompoundStatement=s802
610: PointerDeclarator-1 -> "*" msPointerModifier+ typeQualifier+ declarator ·,PointerDeclarator-1 -> MsBasedModifier "*" typeQualifier+ declarator ·,PointerDeclarator-1 -> MsBasedModifier "*" msPointerModifier+ declarator ·,FunctionDeclarator-1 -> declarator · ParameterList,FunctionDeclarator-1 -> declarator · ParameterList ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+ ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,ArrayDeclarator -> declarator · "[" "]",ArrayDeclarator -> declarator · "[" expression "]",ArrayDeclarator -> declarator · "[" "*" "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "]",ArrayDeclarator -> declarator · "[" typeQualifier+ expression "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "*" "]"
  "("=s169,"["=s168,")"=PointerDeclarator-1(4),";"=PointerDeclarator-1(4),","=PointerDeclarator-1(4),"="=PointerDeclarator-1(4),templateArgsEndFallback=PointerDeclarator-1(4),templateArgsEnd=PointerDeclarator-1(4) | ParameterList=s1210
611: typeQualifier+ -> typeQualifier+ · typeQualifier+,PointerDeclarator-1 -> MsBasedModifier "*" msPointerModifier+ typeQualifier+ · declarator
  "("=s180,DestructorName=s26,"::"=s178,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s182,identifier/"__based"=s63,OperatorName=s26,identifier=s153,"*"=s179,"&&"=s22,"&"=s22 | Identifier=s181,NamespaceIdentifier=s156,TemplateType=s156,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s156,MsBasedModifier=s18,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,typeQualifier+=s376,typeQualifier=s159,declarator=s803
612: AttributeSpecifier+ -> AttributeSpecifier+ · AttributeSpecifier+,AttributeSpecifier+ -> AttributeSpecifier+ AttributeSpecifier+ ·
  always AttributeSpecifier+(2)
613: ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+ -> ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+ · ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,FunctionDeclarator-1 -> declarator ParameterList AttributeSpecifier+ ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+ ·
  identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"final"=s384,identifier/"noexcept"=s386,identifier/"throw"=s387,"->"=s383,"("=FunctionDeclarator-1(4),"{"=FunctionDeclarator-1(4),"["=FunctionDeclarator-1(4),":"=FunctionDeclarator-1(4),"="=FunctionDeclarator-1(4),";"=FunctionDeclarator-1(4),","=FunctionDeclarator-1(4) | Noexcept=s384,ThrowSpecifier=s384,TrailingReturnType=s384,((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+=s616,typeQualifier=s384
614: TrailingReturnType -> "->" typeSpecifier ·,TrailingReturnType -> "->" typeSpecifier · abstractDeclarator
  "("=s231,"["=s230,"*"=s1091,"&&"=s1092,"&"=s1092,identifier/"const"=TrailingReturnType(2),identifier/"volatile"=TrailingReturnType(2),identifier/"restrict"=TrailingReturnType(2),identifier/"_Atomic"=TrailingReturnType(2),identifier/"mutable"=TrailingReturnType(2),identifier/"constexpr"=TrailingReturnType(2),identifier/"final"=TrailingReturnType(2),"{"=TrailingReturnType(2),identifier/"noexcept"=TrailingReturnType(2),identifier/"throw"=TrailingReturnType(2),":"=TrailingReturnType(2),"->"=TrailingReturnType(2),"="=TrailingReturnType(2),")"=TrailingReturnType(2),","=TrailingReturnType(2),";"=TrailingReturnType(2),templateArgsEndFallback=TrailingReturnType(2),templateArgsEnd=TrailingReturnType(2) | ParameterList=s804,AbstractPointerDeclarator=s233,AbstractFunctionDeclarator=s233,AbstractArrayDeclarator=s233,AbstractParenthesizedDeclarator=s233,AbstractReferenceDeclarator=s233,abstractDeclarator=s805
615: TrailingReturnType -> "->" typeQualifier · typeSpecifier,TrailingReturnType -> "->" typeQualifier · typeSpecifier abstractDeclarator
  identifier/"bool"=s48,"::"=s141,identifier/"struct"=s1020,identifier/"typename"=s1028,identifier/"class"=s1249,identifier/"union"=s1022,identifier/"enum"=s1024,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeSpecifier=s806
616: ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+ -> ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+ · ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+ -> ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+ ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+ ·
  always ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+(2)
617: Noexcept -> identifier/"noexcept" "(" · ")",Noexcept -> identifier/"noexcept" "(" · expression ")"
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,")"=s808,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s807
618: ThrowSpecifier -> identifier/"throw" "(" · commaSep<TypeDescriptor> ")"
  identifier/"bool"=s48,"::"=s141,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s1019,identifier/"typename"=s1027,identifier/"class"=s1026,identifier/"union"=s1021,identifier/"enum"=s1023,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140,")"=commaSep<TypeDescriptor>(0) | NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,TypeDescriptor=s809,StructSpecifier=s48,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,typeQualifier+=s172,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeQualifier=s159,typeSpecifier=s175,commaSep<TypeDescriptor>=s810
619: ArrayDeclarator -> declarator "[" expression "]" ·,ArrayDeclarator -> declarator "[" "*" "]" ·,ArrayDeclarator -> declarator "[" typeQualifier+ "]" ·
  always ArrayDeclarator(4)
620: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,ArrayDeclarator -> declarator "[" typeQualifier+ expression · "]",FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,"]"=s811,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112 | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
621: ArrayDeclarator -> declarator "[" typeQualifier+ "*" · "]",PointerExpression -> "*" · expression
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s193,"]"=s811,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s154
622: ParameterDeclaration -> Attribute+ declarationSpecifiers ·,ParameterDeclaration -> Attribute+ declarationSpecifiers · declarator,ParameterDeclaration -> Attribute+ declarationSpecifiers · abstractDeclarator
  "("=s626,DestructorName=s26,"::"=s178,"["=s625,identifier/"__based"=s63,OperatorName=s26,identifier=s153,"*"=s1170,"&&"=s813,"&"=s813,")"=ParameterDeclaration(2),","=ParameterDeclaration(2),templateArgsEndFallback=ParameterDeclaration(2),templateArgsEnd=ParameterDeclaration(2) | Identifier=s181,NamespaceIdentifier=s156,TemplateType=s156,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s156,MsBasedModifier=s18,ParameterList=s1284,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,AbstractPointerDeclarator=s233,AbstractFunctionDeclarator=s233,AbstractArrayDeclarator=s233,AbstractParenthesizedDeclarator=s233,AbstractReferenceDeclarator=s233,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,declarator=s814,abstractDeclarator=s812
623: PointerDeclarator-1 -> "*" · declarator,PointerDeclarator-1 -> "*" · typeQualifier+ declarator,PointerDeclarator-1 -> "*" · msPointerModifier+ declarator,PointerDeclarator-1 -> "*" · msPointerModifier+ typeQualifier+ declarator,AbstractPointerDeclarator -> "*" ·,AbstractPointerDeclarator -> "*" · abstractDeclarator,AbstractPointerDeclarator -> "*" · (typeQualifier)+,AbstractPointerDeclarator -> "*" · (typeQualifier)+ abstractDeclarator
  "("=s626,DestructorName=s26,"::"=s1075,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s625,identifier/"__based"=s63,identifier/"__restrict"=s165,OperatorName=s26,identifier=s153,"*"=s623,"&&"=s1179,"&"=s1179,")"=AbstractPointerDeclarator(1),","=AbstractPointerDeclarator(1),templateArgsEndFallback=AbstractPointerDeclarator(1),templateArgsEnd=AbstractPointerDeclarator(1) | Identifier=s181,NamespaceIdentifier=s1198,TemplateType=s1198,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s1198,MsBasedModifier=s1281,ParameterList=s1284,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,AbstractPointerDeclarator=s233,AbstractFunctionDeclarator=s233,AbstractArrayDeclarator=s233,AbstractParenthesizedDeclarator=s233,AbstractReferenceDeclarator=s233,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,typeQualifier+=s1207,msPointerModifier+=s1208,(typeQualifier)+=s441,typeQualifier=s815,declarator=s162,abstractDeclarator=s442
624: AbstractFunctionDeclarator -> abstractDeclarator · ParameterList,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList TrailingReturnType,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+ TrailingReturnType,AbstractArrayDeclarator -> abstractDeclarator · "[" "]",AbstractArrayDeclarator -> abstractDeclarator · "[" expression "]",AbstractArrayDeclarator -> abstractDeclarator · "[" "*" "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ expression "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ "*" "]",ParameterDeclaration -> declarationSpecifiers abstractDeclarator ·
  "("=s169,"["=s447,")"=ParameterDeclaration(2),","=ParameterDeclaration(2),templateArgsEndFallback=ParameterDeclaration(2),templateArgsEnd=ParameterDeclaration(2) | ParameterList=s1289
625: AbstractArrayDeclarator -> "[" · "]",AbstractArrayDeclarator -> "[" · expression "]",AbstractArrayDeclarator -> "[" · "*" "]",AbstractArrayDeclarator -> "[" · typeQualifier+ "]",AbstractArrayDeclarator -> "[" · typeQualifier+ expression "]",AbstractArrayDeclarator -> "[" · typeQualifier+ "*" "]",StructuredBindingDeclarator -> "[" · commaSep1<Identifier> "]"
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s193,"]"=s450,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s451,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s1083,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,typeQualifier+=s449,expression=s448,typeQualifier=s159,commaSep1<Identifier>=s189
626: AbstractParenthesizedDeclarator -> "(" · abstractDeclarator ")",ParenthesizedDeclarator -> "(" · declarator ")",ParameterList -> "(" · commaSep<ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "..."> ")"
  "("=s626,identifier/"bool"=s48,DestructorName=s26,"::"=s1077,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s85,identifier/"__declspec"=s59,"["=s625,identifier/"extern"=s61,identifier/"static"=s61,identifier/"register"=s61,identifier/"inline"=s61,identifier/"__attribute__"=s62,identifier/"__based"=s63,OperatorName=s26,identifier/"typename"=s89,identifier/"class"=s88,identifier/"union"=s86,identifier/"enum"=s87,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s1060,"..."=s394,"[["=s10,"*"=s1170,"&&"=s813,"&"=s813,")"=commaSep<ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "...">(0) | Identifier=s181,NamespaceIdentifier=s1201,TemplateType=s1216,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s1201,StructSpecifier=s48,MsDeclspecModifier=s14,Attribute=s11,AttributeSpecifier=s14,MsBasedModifier=s18,ParameterList=s1284,ParameterDeclaration=s394,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,AbstractPointerDeclarator=s233,AbstractFunctionDeclarator=s233,AbstractArrayDeclarator=s233,AbstractParenthesizedDeclarator=s233,AbstractReferenceDeclarator=s233,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,OptionalParameterDeclaration=s394,VariadicParameterDeclaration=s394,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,Attribute+=s392,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+=s15,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeQualifier=s14,typeSpecifier=s270,declarationSpecifiers=s393,storageClassSpecifier=s14,commaSep<ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "...">=s395,declarator=s173,abstractDeclarator=s452
627: AbstractReferenceDeclarator -> "&" ·,AbstractReferenceDeclarator -> "&" · abstractDeclarator,AbstractReferenceDeclarator -> "&&" ·,AbstractReferenceDeclarator -> "&&" · abstractDeclarator,ReferenceDeclarator -> "&" · declarator,ReferenceDeclarator -> "&&" · declarator,ReferenceDeclarator-1 -> "&&" · VariadicDeclarator,ReferenceDeclarator-1 -> "&" · VariadicDeclarator
  "("=s626,DestructorName=s26,"::"=s1075,"["=s625,identifier/"__based"=s63,OperatorName=s26,identifier=s153,"..."=s630,"*"=s623,"&&"=s1179,"&"=s1179,")"=AbstractReferenceDeclarator(1),","=AbstractReferenceDeclarator(1),templateArgsEndFallback=AbstractReferenceDeclarator(1),templateArgsEnd=AbstractReferenceDeclarator(1) | Identifier=s181,NamespaceIdentifier=s1198,TemplateType=s1198,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s1198,MsBasedModifier=s1281,ParameterList=s1284,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,AbstractPointerDeclarator=s233,AbstractFunctionDeclarator=s233,AbstractArrayDeclarator=s233,AbstractParenthesizedDeclarator=s233,AbstractReferenceDeclarator=s233,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,VariadicDeclarator=s816,declarator=s177,abstractDeclarator=s453
628: FunctionDeclarator-1 -> declarator · ParameterList,FunctionDeclarator-1 -> declarator · ParameterList ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+ ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,ArrayDeclarator -> declarator · "[" "]",ArrayDeclarator -> declarator · "[" expression "]",ArrayDeclarator -> declarator · "[" "*" "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "]",ArrayDeclarator -> declarator · "[" typeQualifier+ expression "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "*" "]",ParameterDeclaration -> declarationSpecifiers declarator ·,OptionalParameterDeclaration -> declarationSpecifiers declarator · "=" expression
  "("=s169,"["=s168,"="=s817,")"=ParameterDeclaration(2),","=ParameterDeclaration(2),templateArgsEndFallback=ParameterDeclaration(2),templateArgsEnd=ParameterDeclaration(2) | ParameterList=s1210
629: OptionalParameterDeclaration -> declarationSpecifiers "=" · expression
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s818
630: VariadicDeclarator -> "..." ·,VariadicDeclarator -> "..." · Identifier
  identifier=s264,")"=VariadicDeclarator(1),","=VariadicDeclarator(1),templateArgsEndFallback=VariadicDeclarator(1),templateArgsEnd=VariadicDeclarator(1) | Identifier=s819
631: VariadicParameterDeclaration -> declarationSpecifiers VariadicDeclarator ·,VariadicParameterDeclaration -> declarationSpecifiers ReferenceDeclarator-1 ·
  always VariadicParameterDeclaration(2)
632: ("," (ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "..."))+ -> "," · ParameterDeclaration,("," (ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "..."))+ -> "," · OptionalParameterDeclaration,("," (ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "..."))+ -> "," · VariadicParameterDeclaration,("," (ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "..."))+ -> "," · "..."
  identifier/"bool"=s48,"::"=s141,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s85,identifier/"__declspec"=s59,identifier/"extern"=s61,identifier/"static"=s61,identifier/"register"=s61,identifier/"inline"=s61,identifier/"__attribute__"=s62,identifier/"typename"=s89,identifier/"class"=s88,identifier/"union"=s86,identifier/"enum"=s87,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140,"..."=s820,"[["=s10 | NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,MsDeclspecModifier=s14,Attribute=s11,AttributeSpecifier=s14,ParameterDeclaration=s820,OptionalParameterDeclaration=s820,VariadicParameterDeclaration=s820,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,Attribute+=s392,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+=s15,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeQualifier=s14,typeSpecifier=s270,declarationSpecifiers=s393,storageClassSpecifier=s14
633: ("," (ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "..."))+ -> ("," (ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "..."))+ · ("," (ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "..."))+,commaSep<ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "..."> -> ParameterDeclaration ("," (ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "..."))+ ·,commaSep<ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "..."> -> OptionalParameterDeclaration ("," (ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "..."))+ ·,commaSep<ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "..."> -> VariadicParameterDeclaration ("," (ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "..."))+ ·,commaSep<ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "..."> -> "..." ("," (ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "..."))+ ·
  ","=s632,")"=commaSep<ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "...">(2) | ("," (ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "..."))+=s821
634: ParameterList -> "(" commaSep<ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "..."> ")" ·
  always ParameterList(3)
635: typeQualifier+ -> typeQualifier+ · typeQualifier+,TypeDescriptor -> typeQualifier+ typeSpecifier typeQualifier+ ·,TypeDescriptor -> typeQualifier+ typeSpecifier typeQualifier+ · abstractDeclarator
  "("=s231,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s230,"*"=s227,"&&"=s232,"&"=s232,")"=TypeDescriptor(3),templateArgsEndFallback=TypeDescriptor(3),","=TypeDescriptor(3),templateArgsEnd=TypeDescriptor(3),"..."=TypeDescriptor(3),";"=TypeDescriptor(3) | ParameterList=s1284,AbstractPointerDeclarator=s233,AbstractFunctionDeclarator=s233,AbstractArrayDeclarator=s233,AbstractParenthesizedDeclarator=s233,AbstractReferenceDeclarator=s233,typeQualifier+=s376,typeQualifier=s159,abstractDeclarator=s822
636: AbstractFunctionDeclarator -> abstractDeclarator · ParameterList,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList TrailingReturnType,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+ TrailingReturnType,AbstractArrayDeclarator -> abstractDeclarator · "[" "]",AbstractArrayDeclarator -> abstractDeclarator · "[" expression "]",AbstractArrayDeclarator -> abstractDeclarator · "[" "*" "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ expression "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ "*" "]",TypeDescriptor -> typeSpecifier typeQualifier+ abstractDeclarator ·,TypeDescriptor -> typeQualifier+ typeSpecifier abstractDeclarator ·
  "("=s169,"["=s447,")"=TypeDescriptor(3),templateArgsEndFallback=TypeDescriptor(3),","=TypeDescriptor(3),templateArgsEnd=TypeDescriptor(3),"..."=TypeDescriptor(3),";"=TypeDescriptor(3) | ParameterList=s1289
637: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,CastExpression -> "(" TypeDescriptor ")" expression ·,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112,","=CastExpression(4),";"=CastExpression(4),UpdateOp=CastExpression(4),"="=CastExpression(4),")"=CastExpression(4),"]"=CastExpression(4),"}"=CastExpression(4),templateArgsEndFallback=CastExpression(4),templateArgsEnd=CastExpression(4) | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
638: CompoundLiteralExpression -> "(" TypeDescriptor ")" InitializerList ·
  always CompoundLiteralExpression(4)
639: ParameterPackExpansion -> TypeDescriptor "..." ·
  always ParameterPackExpansion(2)
640: ("," (_anon[@dynamicPrecedence=3] { TypeDescriptor } | ParameterPackExpansion[@dynamicPrecedence=2] { TypeDescriptor "..." } | _anon[@dynamicPrecedence=1] { expression }))+ -> "," · _anon-2,("," (_anon[@dynamicPrecedence=3] { TypeDescriptor } | ParameterPackExpansion[@dynamicPrecedence=2] { TypeDescriptor "..." } | _anon[@dynamicPrecedence=1] { expression }))+ -> "," · ParameterPackExpansion-1,("," (_anon[@dynamicPrecedence=3] { TypeDescriptor } | ParameterPackExpansion[@dynamicPrecedence=2] { TypeDescriptor "..." } | _anon[@dynamicPrecedence=1] { expression }))+ -> "," · _anon-3
  RawString=s35,"("=s190,identifier/"bool"=s57,"::"=s1069,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s1019,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"typename"=s1027,identifier/"class"=s1026,identifier/"delete"=s93,identifier/"union"=s1021,identifier/"enum"=s1023,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s1061,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s1202,TemplateType=s1211,TypeIdentifier=s49,ScopedTypeIdentifier=s49,ScopedNamespaceIdentifier=s1205,TypeDescriptor=s824,StructSpecifier=s48,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,ParameterPackExpansion-1=s825,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,typeQualifier+=s172,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,expression=s823,typeQualifier=s159,typeSpecifier=s175,_anon-2=s825,_anon-3=s825
641: ("," (_anon[@dynamicPrecedence=3] { TypeDescriptor } | ParameterPackExpansion[@dynamicPrecedence=2] { TypeDescriptor "..." } | _anon[@dynamicPrecedence=1] { expression }))+ -> ("," (_anon[@dynamicPrecedence=3] { TypeDescriptor } | ParameterPackExpansion[@dynamicPrecedence=2] { TypeDescriptor "..." } | _anon[@dynamicPrecedence=1] { expression }))+ · ("," (_anon[@dynamicPrecedence=3] { TypeDescriptor } | ParameterPackExpansion[@dynamicPrecedence=2] { TypeDescriptor "..." } | _anon[@dynamicPrecedence=1] { expression }))+,commaSep<_anon[@dynamicPrecedence=3] { TypeDescriptor } | ParameterPackExpansion[@dynamicPrecedence=2] { TypeDescriptor "..." } | _anon[@dynamicPrecedence=1] { expression }> -> _anon ("," (_anon[@dynamicPrecedence=3] { TypeDescriptor } | ParameterPackExpansion[@dynamicPrecedence=2] { TypeDescriptor "..." } | _anon[@dynamicPrecedence=1] { expression }))+ ·,commaSep<_anon[@dynamicPrecedence=3] { TypeDescriptor } | ParameterPackExpansion[@dynamicPrecedence=2] { TypeDescriptor "..." } | _anon[@dynamicPrecedence=1] { expression }> -> ParameterPackExpansion ("," (_anon[@dynamicPrecedence=3] { TypeDescriptor } | ParameterPackExpansion[@dynamicPrecedence=2] { TypeDescriptor "..." } | _anon[@dynamicPrecedence=1] { expression }))+ ·,commaSep<_anon[@dynamicPrecedence=3] { TypeDescriptor } | ParameterPackExpansion[@dynamicPrecedence=2] { TypeDescriptor "..." } | _anon[@dynamicPrecedence=1] { expression }> -> _anon-1 ("," (_anon[@dynamicPrecedence=3] { TypeDescriptor } | ParameterPackExpansion[@dynamicPrecedence=2] { TypeDescriptor "..." } | _anon[@dynamicPrecedence=1] { expression }))+ ·
  ","=s640,templateArgsEndFallback=commaSep<_anon[@dynamicPrecedence=3] { TypeDescriptor } | ParameterPackExpansion[@dynamicPrecedence=2] { TypeDescriptor "..." } | _anon[@dynamicPrecedence=1] { expression }>(2),templateArgsEnd=commaSep<_anon[@dynamicPrecedence=3] { TypeDescriptor } | ParameterPackExpansion[@dynamicPrecedence=2] { TypeDescriptor "..." } | _anon[@dynamicPrecedence=1] { expression }>(2) | ("," (_anon[@dynamicPrecedence=3] { TypeDescriptor } | ParameterPackExpansion[@dynamicPrecedence=2] { TypeDescriptor "..." } | _anon[@dynamicPrecedence=1] { expression }))+=s826
642: TemplateArgumentList -> "<" commaSep<_anon[@dynamicPrecedence=3] { TypeDescriptor } | ParameterPackExpansion[@dynamicPrecedence=2] { TypeDescriptor "..." } | _anon[@dynamicPrecedence=1] { expression }> templateArgsEnd ·,TemplateArgumentList -> "<" commaSep<_anon[@dynamicPrecedence=3] { TypeDescriptor } | ParameterPackExpansion[@dynamicPrecedence=2] { TypeDescriptor "..." } | _anon[@dynamicPrecedence=1] { expression }> templateArgsEndFallback ·
  always TemplateArgumentList(3)
643: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,("," expression)+ -> "," expression ·,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112,","=("," expression)+(2),"]"=("," expression)+(2) | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
644: ("," expression)+ -> ("," expression)+ · ("," expression)+,("," expression)+ -> ("," expression)+ ("," expression)+ ·
  always ("," expression)+(2)
645: ("," Identifier)+ -> "," Identifier ·
  always ("," Identifier)+(2)
646: ("," Identifier)+ -> ("," Identifier)+ · ("," Identifier)+,("," Identifier)+ -> ("," Identifier)+ ("," Identifier)+ ·
  always ("," Identifier)+(2)
647: LambdaCaptureSpecifier -> "[" "=" "," commaSep1<expression> · "]",LambdaCaptureSpecifier -> "[" "&" "," commaSep1<expression> · "]"
  "]"=s827
648: FieldInitializer -> FieldIdentifier InitializerList ·,FieldInitializer -> FieldIdentifier InitializerList · "...",FieldInitializer -> FieldIdentifier ArgumentList ·,FieldInitializer -> FieldIdentifier ArgumentList · "...",FieldInitializer -> ScopedFieldIdentifier InitializerList ·,FieldInitializer -> ScopedFieldIdentifier InitializerList · "...",FieldInitializer -> ScopedFieldIdentifier ArgumentList ·,FieldInitializer -> ScopedFieldIdentifier ArgumentList · "..."
  "..."=s828,","=FieldInitializer(2),"{"=FieldInitializer(2),"="=FieldInitializer(2)
649: ("," FieldInitializer)+ -> "," · FieldInitializer
  "::"=s1222,identifier=s1116 | FieldIdentifier=s415,ScopedFieldIdentifier=s415,NamespaceIdentifier=s1223,TemplateType=s1223,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s1223,FieldInitializer=s829
650: ("," FieldInitializer)+ -> ("," FieldInitializer)+ · ("," FieldInitializer)+,commaSep1<FieldInitializer> -> FieldInitializer ("," FieldInitializer)+ ·
  ","=s649,"{"=commaSep1<FieldInitializer>(2),"="=commaSep1<FieldInitializer>(2) | ("," FieldInitializer)+=s830
651: DefaultMethodClause -> "=" identifier/"default" ";" ·
  always DefaultMethodClause(3)
652: DeleteMethodClause -> "=" identifier/"delete" ";" ·
  always DeleteMethodClause(3)
653: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,commaSepTrailing<InitializerPair | expression | InitializerList> -> expression ·,commaSepTrailing<InitializerPair | expression | InitializerList> -> expression · ("," (InitializerPair | expression | InitializerList)?)+,CommaExpression -> expression · "," expression,CommaExpression -> expression · "," CommaExpression,ExpressionStatement -> expression · ";",FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,","=s831,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112,";"=s107,"}"=commaSepTrailing<InitializerPair | expression | InitializerList>(1) | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118,("," (InitializerPair | expression | InitializerList)?)+=s583
654: StructuredBindingDeclarator -> "[" · commaSep1<Identifier> "]",SubscriptDesignator -> "[" · expression "]",LambdaCaptureSpecifier -> "[" · "=" "]",LambdaCaptureSpecifier -> "[" · "=" "," commaSep1<expression> "]",LambdaCaptureSpecifier -> "[" · "&" "]",LambdaCaptureSpecifier -> "[" · "&" "," commaSep1<expression> "]",LambdaCaptureSpecifier -> "[" · commaSep1<expression> "]",LambdaCaptureSpecifier -> "[" · "]"
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s193,"]"=s196,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s192,charLiteralStart=s9,"="=s194,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s187,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s584,commaSep1<Identifier>=s189,commaSep1<expression>=s195
655: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,InitDeclarator -> declarator "=" expression ·,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112,","=InitDeclarator(3),";"=InitDeclarator(3) | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
656: InitDeclarator -> declarator "=" InitializerList ·
  always InitDeclarator(3)
657: FunctionDeclarator-1 -> declarator · ParameterList,FunctionDeclarator-1 -> declarator · ParameterList ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+ ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,ArrayDeclarator -> declarator · "[" "]",ArrayDeclarator -> declarator · "[" expression "]",ArrayDeclarator -> declarator · "[" "*" "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "]",ArrayDeclarator -> declarator · "[" typeQualifier+ expression "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "*" "]",InitDeclarator -> declarator · "=" InitializerList,InitDeclarator -> declarator · "=" expression,InitDeclarator -> declarator · ArgumentList,InitDeclarator -> declarator · InitializerList,("," (declarator | InitDeclarator))+ -> "," declarator ·
  "("=s421,"{"=s133,"["=s168,"="=s423,","=("," (declarator | InitDeclarator))+(2),";"=("," (declarator | InitDeclarator))+(2) | ArgumentList=s424,ParameterList=s1300,InitializerList=s424
658: ("," (declarator | InitDeclarator))+ -> "," InitDeclarator ·
  always ("," (declarator | InitDeclarator))+(2)
659: ("," (declarator | InitDeclarator))+ -> ("," (declarator | InitDeclarator))+ · ("," (declarator | InitDeclarator))+,("," (declarator | InitDeclarator))+ -> ("," (declarator | InitDeclarator))+ ("," (declarator | InitDeclarator))+ ·
  always ("," (declarator | InitDeclarator))+(2)
660: constructorOrDestructorDefinition -> ExplicitFunctionSpecifier FunctionDeclarator-1 FieldInitializerList CompoundStatement ·,constructorOrDestructorDefinition -> ExplicitFunctionSpecifier FunctionDeclarator-1 FieldInitializerList DefaultMethodClause ·,constructorOrDestructorDefinition -> ExplicitFunctionSpecifier FunctionDeclarator-1 FieldInitializerList DeleteMethodClause ·,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ FunctionDeclarator-1 FieldInitializerList CompoundStatement ·,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ FunctionDeclarator-1 FieldInitializerList DefaultMethodClause ·,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ FunctionDeclarator-1 FieldInitializerList DeleteMethodClause ·,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ ExplicitFunctionSpecifier FunctionDeclarator-1 CompoundStatement ·,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ ExplicitFunctionSpecifier FunctionDeclarator-1 DefaultMethodClause ·,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ ExplicitFunctionSpecifier FunctionDeclarator-1 DeleteMethodClause ·,constructorOrDestructorDefinition -> identifier/"virtual" FunctionDeclarator-1 FieldInitializerList CompoundStatement ·,constructorOrDestructorDefinition -> identifier/"virtual" FunctionDeclarator-1 FieldInitializerList DefaultMethodClause ·,constructorOrDestructorDefinition -> identifier/"virtual" FunctionDeclarator-1 FieldInitializerList DeleteMethodClause ·,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ identifier/"virtual" FunctionDeclarator-1 CompoundStatement ·,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ identifier/"virtual" FunctionDeclarator-1 DefaultMethodClause ·,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ identifier/"virtual" FunctionDeclarator-1 DeleteMethodClause ·
  always constructorOrDestructorDefinition(4)
661: constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ ExplicitFunctionSpecifier FunctionDeclarator-1 FieldInitializerList · CompoundStatement,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ ExplicitFunctionSpecifier FunctionDeclarator-1 FieldInitializerList · DefaultMethodClause,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ ExplicitFunctionSpecifier FunctionDeclarator-1 FieldInitializerList · DeleteMethodClause,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ identifier/"virtual" FunctionDeclarator-1 FieldInitializerList · CompoundStatement,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ identifier/"virtual" FunctionDeclarator-1 FieldInitializerList · DefaultMethodClause,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ identifier/"virtual" FunctionDeclarator-1 FieldInitializerList · DeleteMethodClause
  "{"=s45,"="=s200 | CompoundStatement=s832,DefaultMethodClause=s832,DeleteMethodClause=s832
662: operatorCastDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ ExplicitFunctionSpecifier OperatorCast CompoundStatement ·,operatorCastDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ ExplicitFunctionSpecifier OperatorCast DefaultMethodClause ·,operatorCastDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ ExplicitFunctionSpecifier OperatorCast DeleteMethodClause ·,operatorCastDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ identifier/"virtual" OperatorCast CompoundStatement ·,operatorCastDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ identifier/"virtual" OperatorCast DefaultMethodClause ·,operatorCastDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ identifier/"virtual" OperatorCast DeleteMethodClause ·
  always operatorCastDefinition(4)
663: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,operatorCastDeclaration -> ExplicitFunctionSpecifier OperatorCast "=" expression · ";",FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "...",operatorCastDeclaration -> identifier/"virtual" OperatorCast "=" expression · ";"
  "("=s124,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112,";"=s833 | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
664: operatorCastDeclaration -> OperatorCast "=" expression ";" ·
  always operatorCastDeclaration(4)
665: (typeQualifier)+ -> (typeQualifier)+ · (typeQualifier)+,(typeQualifier)+ -> (typeQualifier)+ (typeQualifier)+ ·
  always (typeQualifier)+(2)
666: AbstractPointerDeclarator -> "*" (typeQualifier)+ abstractDeclarator ·,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList TrailingReturnType,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+ TrailingReturnType,AbstractArrayDeclarator -> abstractDeclarator · "[" "]",AbstractArrayDeclarator -> abstractDeclarator · "[" expression "]",AbstractArrayDeclarator -> abstractDeclarator · "[" "*" "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ expression "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ "*" "]"
  "("=s169,"["=s447,")"=AbstractPointerDeclarator(3),","=AbstractPointerDeclarator(3),templateArgsEndFallback=AbstractPointerDeclarator(3),templateArgsEnd=AbstractPointerDeclarator(3),"..."=AbstractPointerDeclarator(3),";"=AbstractPointerDeclarator(3) | ParameterList=s1289
667: (typeQualifier | Noexcept | ThrowSpecifier)+ -> (typeQualifier | Noexcept | ThrowSpecifier)+ · (typeQualifier | Noexcept | ThrowSpecifier)+,(typeQualifier | Noexcept | ThrowSpecifier)+ -> (typeQualifier | Noexcept | ThrowSpecifier)+ (typeQualifier | Noexcept | ThrowSpecifier)+ ·
  always (typeQualifier | Noexcept | ThrowSpecifier)+(2)
668: (typeQualifier | Noexcept | ThrowSpecifier)+ -> (typeQualifier | Noexcept | ThrowSpecifier)+ · (typeQualifier | Noexcept | ThrowSpecifier)+,AbstractFunctionDeclarator -> ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+ TrailingReturnType ·,AbstractFunctionDeclarator -> abstractDeclarator ParameterList TrailingReturnType ·,AbstractFunctionDeclarator -> abstractDeclarator ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+ ·,AbstractFunctionDeclarator -> abstractDeclarator ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+ · TrailingReturnType
  always AbstractFunctionDeclarator(3)
669: (typeQualifier | Noexcept | ThrowSpecifier)+ -> (typeQualifier | Noexcept | ThrowSpecifier)+ · (typeQualifier | Noexcept | ThrowSpecifier)+,AbstractFunctionDeclarator -> abstractDeclarator ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+ ·,AbstractFunctionDeclarator -> abstractDeclarator ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+ · TrailingReturnType
  identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"noexcept"=s386,identifier/"throw"=s387,"->"=s1141,"("=AbstractFunctionDeclarator(3),"{"=AbstractFunctionDeclarator(3),"["=AbstractFunctionDeclarator(3),";"=AbstractFunctionDeclarator(3),"="=AbstractFunctionDeclarator(3) | Noexcept=s443,ThrowSpecifier=s443,TrailingReturnType=s834,(typeQualifier | Noexcept | ThrowSpecifier)+=s667,typeQualifier=s443
670: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,AbstractArrayDeclarator -> "[" typeQualifier+ expression · "]",AbstractArrayDeclarator -> abstractDeclarator "[" expression · "]",FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,"]"=s835,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112 | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
671: typeQualifier+ -> typeQualifier+ · typeQualifier+,AbstractArrayDeclarator -> abstractDeclarator "[" typeQualifier+ · "]",AbstractArrayDeclarator -> abstractDeclarator "[" typeQualifier+ · expression "]",AbstractArrayDeclarator -> abstractDeclarator "[" typeQualifier+ · "*" "]"
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s193,"]"=s835,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s837,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,typeQualifier+=s376,expression=s836,typeQualifier=s159
672: AbstractArrayDeclarator -> "[" expression "]" ·,AbstractArrayDeclarator -> "[" "*" "]" ·,AbstractArrayDeclarator -> "[" typeQualifier+ "]" ·,AbstractArrayDeclarator -> abstractDeclarator "[" "]" ·
  always AbstractArrayDeclarator(3)
673: AbstractArrayDeclarator -> "[" typeQualifier+ "*" · "]",AbstractArrayDeclarator -> abstractDeclarator "[" "*" · "]",PointerExpression -> "*" · expression
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s193,"]"=s835,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s154
674: AbstractParenthesizedDeclarator -> "(" abstractDeclarator ")" ·
  always AbstractParenthesizedDeclarator(3)
675: MsDeclspecModifier -> identifier/"__declspec" "(" Identifier ")" ·
  always MsDeclspecModifier(4)
676: AttributeSpecifier -> identifier/"__attribute__" "(" ArgumentList ")" ·
  always AttributeSpecifier(4)
677: AliasDeclaration -> identifier/"using" TypeIdentifier "=" TypeDescriptor · ";"
  ";"=s838
678: UsingDeclaration -> identifier/"using" identifier/"namespace" Identifier ";" ·,UsingDeclaration -> identifier/"using" identifier/"namespace" ScopedIdentifier ";" ·
  always UsingDeclaration(4)
679: ConditionClause -> "(" expression ")" ·,ConditionClause -> "(" CommaExpression ")" ·,ConditionClause -> "(" Declaration-1 ")" ·
  always ConditionClause(3)
680: Declaration -> Attribute+ declarationSpecifiers · commaSep1<declarator | InitDeclarator> ";"
  "("=s180,DestructorName=s26,"::"=s1075,"["=s182,identifier/"__based"=s63,OperatorName=s26,identifier=s1058,"*"=s1079,"&&"=s1081,"&"=s1081 | Identifier=s181,NamespaceIdentifier=s1198,TemplateType=s1198,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s1198,MsBasedModifier=s1189,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,InitDeclarator=s202,declarator=s704,commaSep1<declarator | InitDeclarator>=s372
681: FunctionDeclarator-1 -> declarator · ParameterList,FunctionDeclarator-1 -> declarator · ParameterList ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+ ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,ArrayDeclarator -> declarator · "[" "]",ArrayDeclarator -> declarator · "[" expression "]",ArrayDeclarator -> declarator · "[" "*" "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "]",ArrayDeclarator -> declarator · "[" typeQualifier+ expression "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "*" "]",InitDeclarator -> declarator · "=" InitializerList,InitDeclarator -> declarator · "=" expression,InitDeclarator -> declarator · ArgumentList,InitDeclarator -> declarator · InitializerList,commaSep1<declarator | InitDeclarator> -> declarator ·,commaSep1<declarator | InitDeclarator> -> declarator · ("," (declarator | InitDeclarator))+,Declaration-1 -> declarationSpecifiers declarator · "=" expression,Declaration-1 -> declarationSpecifiers declarator · InitializerList
  "("=s421,","=s425,"{"=s133,"["=s168,"="=s839,";"=commaSep1<declarator | InitDeclarator>(1) | ArgumentList=s424,ParameterList=s1300,InitializerList=s840,("," (declarator | InitDeclarator))+=s426
682: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,CommaExpression -> expression · "," expression,CommaExpression -> expression · "," CommaExpression,ConditionClause -> "(" Declaration expression · ")",ConditionClause -> "(" ExpressionStatement expression · ")",FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,")"=s841,","=s106,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112 | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
683: ConditionClause -> "(" Declaration CommaExpression · ")",ConditionClause -> "(" ExpressionStatement CommaExpression · ")"
  ")"=s841
684: IfStatement -> identifier/"if" ConditionClause statement identifier/"else" · statement
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"{"=s45,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"throw"=s78,identifier/"case"=s75,identifier/"default"=s76,identifier/"if"=s65,identifier/"switch"=s66,identifier/"do"=s67,identifier/"while"=s68,identifier/"for"=s69,identifier/"return"=s70,identifier/"break"=s71,identifier/"continue"=s72,identifier/"goto"=s73,identifier/"try"=s77,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s1017,"*"=s191,"&"=s191,";"=s31,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,CompoundStatement=s33,CaseStatement=s34,LabeledStatement=s33,StatementIdentifier=s30,ExpressionStatement=s33,CommaExpression=s32,IfStatement=s33,SwitchStatement=s33,DoStatement=s33,ParenthesizedExpression=s50,WhileStatement=s33,ForStatement=s33,ReturnStatement=s33,BreakStatement=s33,ContinueStatement=s33,GotoStatement=s33,ForRangeLoop=s34,TryStatement=s34,ThrowStatement=s34,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s4,statement=s842,nonCaseStatement=s34
685: IfStatement -> identifier/"if" identifier/"constexpr" ConditionClause statement ·,IfStatement -> identifier/"if" identifier/"constexpr" ConditionClause statement · identifier/"else" statement
  identifier/"else"=s843,RawString=IfStatement(4),"("=IfStatement(4),identifier/"bool"=IfStatement(4),DestructorName=IfStatement(4),"::"=IfStatement(4),identifier/"const"=IfStatement(4),identifier/"volatile"=IfStatement(4),identifier/"restrict"=IfStatement(4),identifier/"_Atomic"=IfStatement(4),identifier/"mutable"=IfStatement(4),identifier/"constexpr"=IfStatement(4),identifier/"struct"=IfStatement(4),identifier/"__declspec"=IfStatement(4),"{"=IfStatement(4),"["=IfStatement(4),incDec=IfStatement(4),ArithOp<"+" | "-">=IfStatement(4),Number=IfStatement(4),identifier/"virtual"=IfStatement(4),identifier/"extern"=IfStatement(4),identifier/"static"=IfStatement(4),identifier/"register"=IfStatement(4),identifier/"inline"=IfStatement(4),identifier/"__attribute__"=IfStatement(4),identifier/"__based"=IfStatement(4),identifier/"throw"=IfStatement(4),OperatorName=IfStatement(4),identifier/"template"=IfStatement(4),identifier/"typename"=IfStatement(4),identifier/"class"=IfStatement(4),identifier/"using"=IfStatement(4),identifier/"__cdecl"=IfStatement(4),identifier/"case"=IfStatement(4),identifier/"default"=IfStatement(4),identifier/"if"=IfStatement(4),identifier/"switch"=IfStatement(4),identifier/"do"=IfStatement(4),identifier/"while"=IfStatement(4),identifier/"for"=IfStatement(4),identifier/"return"=IfStatement(4),identifier/"break"=IfStatement(4),identifier/"continue"=IfStatement(4),identifier/"goto"=IfStatement(4),identifier/"typedef"=IfStatement(4),identifier/"try"=IfStatement(4),identifier/"namespace"=IfStatement(4),identifier/"static_assert"=IfStatement(4),identifier/"explicit"=IfStatement(4),identifier/"delete"=IfStatement(4),identifier/"operator"=IfStatement(4),identifier/"union"=IfStatement(4),identifier/"enum"=IfStatement(4),identifier/"signed"=IfStatement(4),identifier/"decltype"=IfStatement(4),identifier/"auto"=IfStatement(4),LogicOp<"!">=IfStatement(4),BitOp<"~">=IfStatement(4),identifier/"sizeof"=IfStatement(4),identifier/"NULL"=IfStatement(4),identifier/"new"=IfStatement(4),identifier/"nullptr"=IfStatement(4),identifier/"this"=IfStatement(4),␄=IfStatement(4),stringLiteralStart=IfStatement(4),identifier=IfStatement(4),"[["=IfStatement(4),"*"=IfStatement(4),"&&"=IfStatement(4),"&"=IfStatement(4),";"=IfStatement(4),charLiteralStart=IfStatement(4),identifier/"TRUE"=IfStatement(4),identifier/"FALSE"=IfStatement(4),"}"=IfStatement(4)
686: ParenthesizedExpression -> "(" · expression ")",ParenthesizedExpression -> "(" · CommaExpression ")"
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,CommaExpression=s174,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s170
687: DoStatement -> identifier/"do" statement identifier/"while" ParenthesizedExpression · ";"
  ";"=s844
688: ForStatement -> identifier/"for" "(" expression ";" · ";" ")" statement,ForStatement -> identifier/"for" "(" expression ";" · ";" expression ")" statement,ForStatement -> identifier/"for" "(" expression ";" · ";" CommaExpression ")" statement,ForStatement -> identifier/"for" "(" expression ";" · expression ";" ")" statement,ForStatement -> identifier/"for" "(" expression ";" · expression ";" expression ")" statement,ForStatement -> identifier/"for" "(" expression ";" · expression ";" CommaExpression ")" statement,ForStatement -> identifier/"for" "(" CommaExpression ";" · ";" ")" statement,ForStatement -> identifier/"for" "(" CommaExpression ";" · ";" expression ")" statement,ForStatement -> identifier/"for" "(" CommaExpression ";" · ";" CommaExpression ")" statement,ForStatement -> identifier/"for" "(" CommaExpression ";" · expression ";" ")" statement,ForStatement -> identifier/"for" "(" CommaExpression ";" · expression ";" expression ")" statement,ForStatement -> identifier/"for" "(" CommaExpression ";" · expression ";" CommaExpression ")" statement
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,";"=s846,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s845
689: FunctionDeclarator-1 -> declarator · ParameterList,FunctionDeclarator-1 -> declarator · ParameterList ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+ ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,ArrayDeclarator -> declarator · "[" "]",ArrayDeclarator -> declarator · "[" expression "]",ArrayDeclarator -> declarator · "[" "*" "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "]",ArrayDeclarator -> declarator · "[" typeQualifier+ expression "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "*" "]",InitDeclarator -> declarator · "=" InitializerList,InitDeclarator -> declarator · "=" expression,InitDeclarator -> declarator · ArgumentList,InitDeclarator -> declarator · InitializerList,commaSep1<declarator | InitDeclarator> -> declarator ·,commaSep1<declarator | InitDeclarator> -> declarator · ("," (declarator | InitDeclarator))+,ForRangeLoop -> identifier/"for" "(" declarationSpecifiers declarator · ":" expression ")" statement,ForRangeLoop -> identifier/"for" "(" declarationSpecifiers declarator · ":" InitializerList ")" statement
  "("=s421,","=s425,"{"=s133,"["=s168,":"=s847,"="=s423,";"=commaSep1<declarator | InitDeclarator>(1) | ArgumentList=s424,ParameterList=s167,InitializerList=s424,("," (declarator | InitDeclarator))+=s426
690: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "...",ForStatement -> identifier/"for" "(" Declaration expression · ";" ")" statement,ForStatement -> identifier/"for" "(" Declaration expression · ";" expression ")" statement,ForStatement -> identifier/"for" "(" Declaration expression · ";" CommaExpression ")" statement,ForStatement -> identifier/"for" "(" ";" expression · ";" ")" statement,ForStatement -> identifier/"for" "(" ";" expression · ";" expression ")" statement,ForStatement -> identifier/"for" "(" ";" expression · ";" CommaExpression ")" statement
  "("=s124,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112,";"=s846 | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
691: ForStatement -> identifier/"for" "(" Declaration ";" · ")" statement,ForStatement -> identifier/"for" "(" Declaration ";" · expression ")" statement,ForStatement -> identifier/"for" "(" Declaration ";" · CommaExpression ")" statement,ForStatement -> identifier/"for" "(" ";" ";" · ")" statement,ForStatement -> identifier/"for" "(" ";" ";" · expression ")" statement,ForStatement -> identifier/"for" "(" ";" ";" · CommaExpression ")" statement
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,")"=s849,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,CommaExpression=s850,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s848
692: TypeDefinition -> identifier/"typedef" typeQualifier+ typeSpecifier commaSep1<typeDeclarator> · ";"
  ";"=s851
693: typeQualifier+ -> typeQualifier+ · typeQualifier+,PointerDeclarator-2 -> "*" typeQualifier+ · typeDeclarator
  "("=s484,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"__based"=s63,identifier=s480,"*"=s481 | TypeIdentifier=s485,MsBasedModifier=s482,PointerDeclarator-2=s485,FunctionDeclarator-2=s485,ArrayDeclarator-2=s485,ParenthesizedDeclarator-2=s485,typeQualifier+=s376,typeQualifier=s159,typeDeclarator=s852
694: msPointerModifier+ -> msPointerModifier+ · msPointerModifier+,PointerDeclarator-2 -> "*" msPointerModifier+ · typeDeclarator,PointerDeclarator-2 -> "*" msPointerModifier+ · typeQualifier+ typeDeclarator
  "("=s484,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"__based"=s63,identifier/"__restrict"=s165,identifier=s480,"*"=s481 | TypeIdentifier=s485,MsBasedModifier=s482,PointerDeclarator-2=s485,FunctionDeclarator-2=s485,ArrayDeclarator-2=s485,ParenthesizedDeclarator-2=s485,typeQualifier+=s853,msPointerModifier+=s379,typeQualifier=s159,typeDeclarator=s852
695: PointerDeclarator-2 -> "*" typeDeclarator ·,FunctionDeclarator-2 -> typeDeclarator · ParameterList,ArrayDeclarator-2 -> typeDeclarator · "[" "]",ArrayDeclarator-2 -> typeDeclarator · "[" expression "]",ArrayDeclarator-2 -> typeDeclarator · "[" "*" "]",ArrayDeclarator-2 -> typeDeclarator · "[" typeQualifier+ "]",ArrayDeclarator-2 -> typeDeclarator · "[" typeQualifier+ expression "]",ArrayDeclarator-2 -> typeDeclarator · "[" typeQualifier+ "*" "]"
  "("=s169,"["=s698,","=PointerDeclarator-2(2),";"=PointerDeclarator-2(2),")"=PointerDeclarator-2(2) | ParameterList=s697
696: PointerDeclarator-2 -> MsBasedModifier "*" · typeDeclarator,PointerDeclarator-2 -> MsBasedModifier "*" · typeQualifier+ typeDeclarator,PointerDeclarator-2 -> MsBasedModifier "*" · msPointerModifier+ typeDeclarator,PointerDeclarator-2 -> MsBasedModifier "*" · msPointerModifier+ typeQualifier+ typeDeclarator
  "("=s484,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"__based"=s63,identifier/"__restrict"=s165,identifier=s480,"*"=s481 | TypeIdentifier=s485,MsBasedModifier=s482,PointerDeclarator-2=s485,FunctionDeclarator-2=s485,ArrayDeclarator-2=s485,ParenthesizedDeclarator-2=s485,typeQualifier+=s853,msPointerModifier+=s854,typeQualifier=s159,typeDeclarator=s852
697: FunctionDeclarator-2 -> typeDeclarator ParameterList ·
  always FunctionDeclarator-2(2)
698: ArrayDeclarator-2 -> typeDeclarator "[" · "]",ArrayDeclarator-2 -> typeDeclarator "[" · expression "]",ArrayDeclarator-2 -> typeDeclarator "[" · "*" "]",ArrayDeclarator-2 -> typeDeclarator "[" · typeQualifier+ "]",ArrayDeclarator-2 -> typeDeclarator "[" · typeQualifier+ expression "]",ArrayDeclarator-2 -> typeDeclarator "[" · typeQualifier+ "*" "]"
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s193,"]"=s857,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s858,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,typeQualifier+=s856,expression=s855,typeQualifier=s159
699: ("," typeDeclarator)+ -> "," · typeDeclarator
  "("=s484,identifier/"__based"=s63,identifier=s480,"*"=s481 | TypeIdentifier=s485,MsBasedModifier=s482,PointerDeclarator-2=s485,FunctionDeclarator-2=s485,ArrayDeclarator-2=s485,ParenthesizedDeclarator-2=s485,typeDeclarator=s859
700: ("," typeDeclarator)+ -> ("," typeDeclarator)+ · ("," typeDeclarator)+,commaSep1<typeDeclarator> -> typeDeclarator ("," typeDeclarator)+ ·
  ","=s699,";"=commaSep1<typeDeclarator>(2) | ("," typeDeclarator)+=s860
701: FunctionDeclarator-2 -> typeDeclarator · ParameterList,ArrayDeclarator-2 -> typeDeclarator · "[" "]",ArrayDeclarator-2 -> typeDeclarator · "[" expression "]",ArrayDeclarator-2 -> typeDeclarator · "[" "*" "]",ArrayDeclarator-2 -> typeDeclarator · "[" typeQualifier+ "]",ArrayDeclarator-2 -> typeDeclarator · "[" typeQualifier+ expression "]",ArrayDeclarator-2 -> typeDeclarator · "[" typeQualifier+ "*" "]",ParenthesizedDeclarator-2 -> "(" typeDeclarator · ")"
  "("=s169,")"=s861,"["=s698 | ParameterList=s697
702: TypeDefinition -> identifier/"typedef" typeSpecifier commaSep1<typeDeclarator> ";" ·
  always TypeDefinition(4)
703: ((nonCaseStatement | Declaration | TypeDefinition))+ -> ((nonCaseStatement | Declaration | TypeDefinition))+ · ((nonCaseStatement | Declaration | TypeDefinition))+,CaseStatement -> identifier/"case" expression ":" ((nonCaseStatement | Declaration | TypeDefinition))+ ·
  RawString=s35,"("=s190,identifier/"bool"=s57,"::"=s1070,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s85,identifier/"__declspec"=s59,"{"=s45,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"extern"=s61,identifier/"static"=s61,identifier/"register"=s61,identifier/"inline"=s61,identifier/"__attribute__"=s62,identifier/"typename"=s89,identifier/"class"=s88,identifier/"if"=s65,identifier/"switch"=s66,identifier/"do"=s67,identifier/"while"=s68,identifier/"for"=s491,identifier/"return"=s70,identifier/"break"=s71,identifier/"continue"=s72,identifier/"goto"=s73,identifier/"typedef"=s74,identifier/"delete"=s93,identifier/"union"=s86,identifier/"enum"=s87,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s1018,"[["=s10,"*"=s191,"&"=s191,";"=s31,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54,DestructorName=CaseStatement(4),identifier/"virtual"=CaseStatement(4),identifier/"__based"=CaseStatement(4),identifier/"throw"=CaseStatement(4),OperatorName=CaseStatement(4),identifier/"template"=CaseStatement(4),identifier/"using"=CaseStatement(4),identifier/"__cdecl"=CaseStatement(4),identifier/"case"=CaseStatement(4),identifier/"default"=CaseStatement(4),identifier/"try"=CaseStatement(4),identifier/"namespace"=CaseStatement(4),identifier/"static_assert"=CaseStatement(4),identifier/"explicit"=CaseStatement(4),identifier/"operator"=CaseStatement(4),␄=CaseStatement(4),"&&"=CaseStatement(4),"}"=CaseStatement(4),identifier/"else"=CaseStatement(4) | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s1203,TemplateType=s1212,TypeIdentifier=s49,ScopedTypeIdentifier=s49,ScopedNamespaceIdentifier=s1206,StructSpecifier=s48,MsDeclspecModifier=s14,Attribute=s11,CharLiteral=s56,AttributeSpecifier=s14,ScopedIdentifier=s188,TemplateFunction=s56,Declaration=s489,CompoundStatement=s33,LabeledStatement=s33,StatementIdentifier=s30,ExpressionStatement=s33,CommaExpression=s32,IfStatement=s33,SwitchStatement=s33,DoStatement=s33,ParenthesizedExpression=s50,WhileStatement=s33,ForStatement=s33,ReturnStatement=s33,BreakStatement=s33,ContinueStatement=s33,GotoStatement=s33,TypeDefinition=s489,ConcatenatedString=s56,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,Attribute+=s463,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+=s15,((nonCaseStatement | Declaration | TypeDefinition))+=s705,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,expression=s4,typeQualifier=s14,typeSpecifier=s270,declarationSpecifiers=s488,storageClassSpecifier=s14,nonCaseStatement=s489
704: FunctionDeclarator-1 -> declarator · ParameterList,FunctionDeclarator-1 -> declarator · ParameterList ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+ ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,ArrayDeclarator -> declarator · "[" "]",ArrayDeclarator -> declarator · "[" expression "]",ArrayDeclarator -> declarator · "[" "*" "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "]",ArrayDeclarator -> declarator · "[" typeQualifier+ expression "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "*" "]",InitDeclarator -> declarator · "=" InitializerList,InitDeclarator -> declarator · "=" expression,InitDeclarator -> declarator · ArgumentList,InitDeclarator -> declarator · InitializerList,commaSep1<declarator | InitDeclarator> -> declarator ·,commaSep1<declarator | InitDeclarator> -> declarator · ("," (declarator | InitDeclarator))+
  "("=s421,","=s425,"{"=s133,"["=s168,"="=s423,";"=commaSep1<declarator | InitDeclarator>(1) | ArgumentList=s424,ParameterList=s1300,InitializerList=s424,("," (declarator | InitDeclarator))+=s426
705: ((nonCaseStatement | Declaration | TypeDefinition))+ -> ((nonCaseStatement | Declaration | TypeDefinition))+ · ((nonCaseStatement | Declaration | TypeDefinition))+,((nonCaseStatement | Declaration | TypeDefinition))+ -> ((nonCaseStatement | Declaration | TypeDefinition))+ ((nonCaseStatement | Declaration | TypeDefinition))+ ·
  always ((nonCaseStatement | Declaration | TypeDefinition))+(2)
706: ForStatement -> identifier/"for" "(" · Declaration ";" ")" statement,ForStatement -> identifier/"for" "(" · Declaration ";" expression ")" statement,ForStatement -> identifier/"for" "(" · Declaration ";" CommaExpression ")" statement,ForStatement -> identifier/"for" "(" · Declaration expression ";" ")" statement,ForStatement -> identifier/"for" "(" · Declaration expression ";" expression ")" statement,ForStatement -> identifier/"for" "(" · Declaration expression ";" CommaExpression ")" statement,ForStatement -> identifier/"for" "(" · ";" ";" ")" statement,ForStatement -> identifier/"for" "(" · ";" ";" expression ")" statement,ForStatement -> identifier/"for" "(" · ";" ";" CommaExpression ")" statement,ForStatement -> identifier/"for" "(" · ";" expression ";" ")" statement,ForStatement -> identifier/"for" "(" · ";" expression ";" expression ")" statement,ForStatement -> identifier/"for" "(" · ";" expression ";" CommaExpression ")" statement,ForStatement -> identifier/"for" "(" · expression ";" ";" ")" statement,ForStatement -> identifier/"for" "(" · expression ";" ";" expression ")" statement,ForStatement -> identifier/"for" "(" · expression ";" ";" CommaExpression ")" statement,ForStatement -> identifier/"for" "(" · expression ";" expression ";" ")" statement,ForStatement -> identifier/"for" "(" · expression ";" expression ";" expression ")" statement,ForStatement -> identifier/"for" "(" · expression ";" expression ";" CommaExpression ")" statement,ForStatement -> identifier/"for" "(" · CommaExpression ";" ";" ")" statement,ForStatement -> identifier/"for" "(" · CommaExpression ";" ";" expression ")" statement,ForStatement -> identifier/"for" "(" · CommaExpression ";" ";" CommaExpression ")" statement,ForStatement -> identifier/"for" "(" · CommaExpression ";" expression ";" ")" statement,ForStatement -> identifier/"for" "(" · CommaExpression ";" expression ";" expression ")" statement,ForStatement -> identifier/"for" "(" · CommaExpression ";" expression ";" CommaExpression ")" statement
  RawString=s35,"("=s190,identifier/"bool"=s57,"::"=s1070,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s85,identifier/"__declspec"=s59,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"extern"=s61,identifier/"static"=s61,identifier/"register"=s61,identifier/"inline"=s61,identifier/"__attribute__"=s62,identifier/"typename"=s89,identifier/"class"=s88,identifier/"delete"=s93,identifier/"union"=s86,identifier/"enum"=s87,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s1057,"[["=s10,"*"=s191,"&"=s191,";"=s475,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s1203,TemplateType=s1212,TypeIdentifier=s49,ScopedTypeIdentifier=s49,ScopedNamespaceIdentifier=s1206,StructSpecifier=s48,MsDeclspecModifier=s14,Attribute=s11,CharLiteral=s56,AttributeSpecifier=s14,ScopedIdentifier=s188,TemplateFunction=s56,Declaration=s475,CommaExpression=s476,ParenthesizedExpression=s50,ConcatenatedString=s56,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,Attribute+=s463,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+=s15,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,expression=s473,typeQualifier=s14,typeSpecifier=s270,declarationSpecifiers=s488,storageClassSpecifier=s14
707: CatchClause+ -> CatchClause+ · CatchClause+,CatchClause+ -> CatchClause+ CatchClause+ ·
  always CatchClause+(2)
708: CatchClause -> identifier/"catch" ParameterList · CompoundStatement
  "{"=s45 | CompoundStatement=s862
709: DeclarationList -> "{" topLevelItem+ "}" ·
  always DeclarationList(3)
710: StaticAssertDeclaration -> identifier/"static_assert" "(" expression ")" · ";"
  ";"=s863
711: StaticAssertDeclaration -> identifier/"static_assert" "(" expression "," · String ")" ";",StaticAssertDeclaration -> identifier/"static_assert" "(" expression "," · RawString ")" ";",StaticAssertDeclaration -> identifier/"static_assert" "(" expression "," · ConcatenatedString ")" ";"
  RawString=s864,stringLiteralStart=s2 | String=s864,ConcatenatedString=s865
712: ("," templateParameter)+ -> "," · templateParameter
  identifier/"bool"=s48,"::"=s141,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s85,identifier/"__declspec"=s59,identifier/"extern"=s61,identifier/"static"=s61,identifier/"register"=s61,identifier/"inline"=s61,identifier/"__attribute__"=s62,identifier/"template"=s506,identifier/"typename"=s504,identifier/"class"=s505,identifier/"union"=s86,identifier/"enum"=s87,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140,"[["=s10 | NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,MsDeclspecModifier=s14,Attribute=s11,AttributeSpecifier=s14,ParameterDeclaration=s501,OptionalParameterDeclaration=s501,VariadicParameterDeclaration=s501,TypeParameterDeclaration=s501,OptionalTypeParameterDeclaration=s501,VariadicTypeParameterDeclaration=s501,TemplateTemplateParameterDeclaration=s501,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,Attribute+=s392,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+=s15,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeQualifier=s14,typeSpecifier=s270,declarationSpecifiers=s393,storageClassSpecifier=s14,templateParameter=s866
713: ("," templateParameter)+ -> ("," templateParameter)+ · ("," templateParameter)+,commaSep<templateParameter> -> templateParameter ("," templateParameter)+ ·
  ","=s712,templateArgsEndFallback=commaSep<templateParameter>(2),templateArgsEnd=commaSep<templateParameter>(2) | ("," templateParameter)+=s867
714: TemplateParameterList -> "<" commaSep<templateParameter> templateArgsEnd ·,TemplateParameterList -> "<" commaSep<templateParameter> templateArgsEndFallback ·
  always TemplateParameterList(3)
715: typeSpecifier -> TypeIdentifier ·,TemplateType -> TypeIdentifier · TemplateArgumentList,TypeParameterDeclaration -> identifier/"typename" TypeIdentifier ·,OptionalTypeParameterDeclaration -> identifier/"typename" TypeIdentifier · "=" typeSpecifier
  "<"=s185,"="=s868,templateArgsEndFallback=TypeParameterDeclaration(2),"("=typeSpecifier(1),DestructorName=typeSpecifier(1),"::"=typeSpecifier(1),identifier/"const"=typeSpecifier(1),identifier/"volatile"=typeSpecifier(1),identifier/"restrict"=typeSpecifier(1),identifier/"_Atomic"=typeSpecifier(1),identifier/"mutable"=typeSpecifier(1),identifier/"constexpr"=typeSpecifier(1),identifier/"__declspec"=typeSpecifier(1),","=TypeParameterDeclaration(2),"["=typeSpecifier(1),templateArgsEnd=TypeParameterDeclaration(2),identifier/"extern"=typeSpecifier(1),identifier/"static"=typeSpecifier(1),identifier/"register"=typeSpecifier(1),identifier/"inline"=typeSpecifier(1),identifier/"__attribute__"=typeSpecifier(1),identifier/"__based"=typeSpecifier(1),OperatorName=typeSpecifier(1),identifier=typeSpecifier(1),"..."=typeSpecifier(1),"*"=typeSpecifier(1),"&&"=typeSpecifier(1),"&"=typeSpecifier(1) | TemplateArgumentList=s223
716: OptionalTypeParameterDeclaration -> identifier/"typename" "=" · typeSpecifier,OptionalTypeParameterDeclaration -> identifier/"class" "=" · typeSpecifier
  identifier/"bool"=s48,"::"=s141,identifier/"struct"=s1019,identifier/"typename"=s1027,identifier/"class"=s1026,identifier/"union"=s1021,identifier/"enum"=s1023,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeSpecifier=s869
717: VariadicTypeParameterDeclaration -> identifier/"typename" "..." ·,VariadicTypeParameterDeclaration -> identifier/"typename" "..." · TypeIdentifier,VariadicTypeParameterDeclaration -> identifier/"class" "..." ·,VariadicTypeParameterDeclaration -> identifier/"class" "..." · TypeIdentifier
  identifier=s480,templateArgsEndFallback=VariadicTypeParameterDeclaration(2),","=VariadicTypeParameterDeclaration(2),templateArgsEnd=VariadicTypeParameterDeclaration(2) | TypeIdentifier=s870
718: className -> TypeIdentifier ·,TemplateType -> TypeIdentifier · TemplateArgumentList,TypeParameterDeclaration -> identifier/"class" TypeIdentifier ·,OptionalTypeParameterDeclaration -> identifier/"class" TypeIdentifier · "=" typeSpecifier
  "<"=s185,"="=s868,templateArgsEndFallback=TypeParameterDeclaration(2),"("=className(1),DestructorName=className(1),"::"=className(1),identifier/"const"=className(1),identifier/"volatile"=className(1),identifier/"restrict"=className(1),identifier/"_Atomic"=className(1),identifier/"mutable"=className(1),identifier/"constexpr"=className(1),identifier/"__declspec"=className(1),identifier/"final"=className(1),","=TypeParameterDeclaration(2),"{"=className(1),"["=className(1),templateArgsEnd=TypeParameterDeclaration(2),identifier/"extern"=className(1),identifier/"static"=className(1),identifier/"register"=className(1),identifier/"inline"=className(1),identifier/"__attribute__"=className(1),identifier/"__based"=className(1),OperatorName=className(1),identifier=className(1),":"=className(1),"..."=className(1),"*"=className(1),"&&"=className(1),"&"=className(1) | TemplateArgumentList=s223
719: TemplateTemplateParameterDeclaration -> identifier/"template" TemplateParameterList · TypeParameterDeclaration,TemplateTemplateParameterDeclaration -> identifier/"template" TemplateParameterList · VariadicTypeParameterDeclaration,TemplateTemplateParameterDeclaration -> identifier/"template" TemplateParameterList · OptionalTypeParameterDeclaration
  identifier/"typename"=s871,identifier/"class"=s871 | TypeParameterDeclaration=s872,OptionalTypeParameterDeclaration=s872,VariadicTypeParameterDeclaration=s872
720: TemplateInstantiation -> identifier/"template" declarationSpecifiers declarator ";" ·
  always TemplateInstantiation(4)
721: AliasDeclaration -> identifier/"using" TypeIdentifier · "=" TypeDescriptor ";"
  "="=s459
722: ExplicitFunctionSpecifier -> identifier/"explicit" "(" expression ")" ·
  always ExplicitFunctionSpecifier(4)
723: ("," access? className "..."?)+ -> "," · className,("," access? className "..."?)+ -> "," · className "...",("," access? className "..."?)+ -> "," · identifier/"public" className,("," access? className "..."?)+ -> "," · identifier/"public" className "..."
  "::"=s141,identifier/"public"=s874,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s402,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,className=s873
724: ("," access? className "..."?)+ -> ("," access? className "..."?)+ · ("," access? className "..."?)+,commaSep1<access? className "..."?> -> className ("," access? className "..."?)+ ·
  ","=s723,"{"=commaSep1<access? className "..."?>(2) | ("," access? className "..."?)+=s875
725: commaSep1<access? className "..."?> -> className "..." ·,commaSep1<access? className "..."?> -> className "..." · ("," access? className "..."?)+
  ","=s723,"{"=commaSep1<access? className "..."?>(2) | ("," access? className "..."?)+=s876
726: commaSep1<access? className "..."?> -> identifier/"public" className ·,commaSep1<access? className "..."?> -> identifier/"public" className · ("," access? className "..."?)+,commaSep1<access? className "..."?> -> identifier/"public" className · "...",commaSep1<access? className "..."?> -> identifier/"public" className · "..." ("," access? className "..."?)+
  ","=s723,"..."=s877,"{"=commaSep1<access? className "..."?>(2) | ("," access? className "..."?)+=s876
727: FieldDeclaration -> Attribute+ declarationSpecifiers · ";",FieldDeclaration -> Attribute+ declarationSpecifiers · BitfieldClause ";",FieldDeclaration -> Attribute+ declarationSpecifiers · InitializerList ";",FieldDeclaration -> Attribute+ declarationSpecifiers · "=" expression ";",FieldDeclaration -> Attribute+ declarationSpecifiers · "=" InitializerList ";",FieldDeclaration -> Attribute+ declarationSpecifiers · fieldDeclarator ";",FieldDeclaration -> Attribute+ declarationSpecifiers · fieldDeclarator BitfieldClause ";",FieldDeclaration -> Attribute+ declarationSpecifiers · fieldDeclarator InitializerList ";",FieldDeclaration -> Attribute+ declarationSpecifiers · fieldDeclarator "=" expression ";",FieldDeclaration -> Attribute+ declarationSpecifiers · fieldDeclarator "=" InitializerList ";",FieldDeclaration -> Attribute+ declarationSpecifiers · fieldDeclarator ("," fieldDeclarator)+ ";",FieldDeclaration -> Attribute+ declarationSpecifiers · fieldDeclarator ("," fieldDeclarator)+ BitfieldClause ";",FieldDeclaration -> Attribute+ declarationSpecifiers · fieldDeclarator ("," fieldDeclarator)+ InitializerList ";",FieldDeclaration -> Attribute+ declarationSpecifiers · fieldDeclarator ("," fieldDeclarator)+ "=" expression ";",FieldDeclaration -> Attribute+ declarationSpecifiers · fieldDeclarator ("," fieldDeclarator)+ "=" InitializerList ";",FunctionDefinition-5 -> Attribute+ declarationSpecifiers · fieldDeclarator CompoundStatement,FunctionDefinition-5 -> Attribute+ declarationSpecifiers · fieldDeclarator DefaultMethodClause,FunctionDefinition-5 -> Attribute+ declarationSpecifiers · fieldDeclarator DeleteMethodClause,FieldDeclaration -> identifier/"virtual" declarationSpecifiers · ";",FieldDeclaration -> identifier/"virtual" declarationSpecifiers · BitfieldClause ";",FieldDeclaration -> identifier/"virtual" declarationSpecifiers · InitializerList ";",FieldDeclaration -> identifier/"virtual" declarationSpecifiers · "=" expression ";",FieldDeclaration -> identifier/"virtual" declarationSpecifiers · "=" InitializerList ";",FieldDeclaration -> identifier/"virtual" declarationSpecifiers · fieldDeclarator ";",FieldDeclaration -> identifier/"virtual" declarationSpecifiers · fieldDeclarator BitfieldClause ";",FieldDeclaration -> identifier/"virtual" declarationSpecifiers · fieldDeclarator InitializerList ";",FieldDeclaration -> identifier/"virtual" declarationSpecifiers · fieldDeclarator "=" expression ";",FieldDeclaration -> identifier/"virtual" declarationSpecifiers · fieldDeclarator "=" InitializerList ";",FieldDeclaration -> identifier/"virtual" declarationSpecifiers · fieldDeclarator ("," fieldDeclarator)+ ";",FieldDeclaration -> identifier/"virtual" declarationSpecifiers · fieldDeclarator ("," fieldDeclarator)+ BitfieldClause ";",FieldDeclaration -> identifier/"virtual" declarationSpecifiers · fieldDeclarator ("," fieldDeclarator)+ InitializerList ";",FieldDeclaration -> identifier/"virtual" declarationSpecifiers · fieldDeclarator ("," fieldDeclarator)+ "=" expression ";",FieldDeclaration -> identifier/"virtual" declarationSpecifiers · fieldDeclarator ("," fieldDeclarator)+ "=" InitializerList ";",FunctionDefinition-5 -> identifier/"virtual" declarationSpecifiers · fieldDeclarator CompoundStatement,FunctionDefinition-5 -> identifier/"virtual" declarationSpecifiers · fieldDeclarator DefaultMethodClause,FunctionDefinition-5 -> identifier/"virtual" declarationSpecifiers · fieldDeclarator DeleteMethodClause
  "("=s733,"::"=s323,"{"=s133,identifier/"__based"=s63,OperatorName=s735,identifier=s322,":"=s737,"*"=s730,"&&"=s734,"&"=s734,";"=s879,"="=s881 | FieldIdentifier=s736,TemplateMethod=s735,ScopedFieldIdentifier=s326,NamespaceIdentifier=s324,TemplateType=s324,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s324,PointerDeclarator=s735,MsBasedModifier=s731,FunctionDeclarator=s735,ArrayDeclarator-1=s735,ParenthesizedDeclarator-1=s735,ReferenceDeclarator-2=s735,BitfieldClause=s880,InitializerList=s880,fieldDeclarator=s878
728: FieldDeclaration -> Attribute+ identifier/"virtual" · declarationSpecifiers ";",FieldDeclaration -> Attribute+ identifier/"virtual" · declarationSpecifiers BitfieldClause ";",FieldDeclaration -> Attribute+ identifier/"virtual" · declarationSpecifiers InitializerList ";",FieldDeclaration -> Attribute+ identifier/"virtual" · declarationSpecifiers "=" expression ";",FieldDeclaration -> Attribute+ identifier/"virtual" · declarationSpecifiers "=" InitializerList ";",FieldDeclaration -> Attribute+ identifier/"virtual" · declarationSpecifiers fieldDeclarator ";",FieldDeclaration -> Attribute+ identifier/"virtual" · declarationSpecifiers fieldDeclarator BitfieldClause ";",FieldDeclaration -> Attribute+ identifier/"virtual" · declarationSpecifiers fieldDeclarator InitializerList ";",FieldDeclaration -> Attribute+ identifier/"virtual" · declarationSpecifiers fieldDeclarator "=" expression ";",FieldDeclaration -> Attribute+ identifier/"virtual" · declarationSpecifiers fieldDeclarator "=" InitializerList ";",FieldDeclaration -> Attribute+ identifier/"virtual" · declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ ";",FieldDeclaration -> Attribute+ identifier/"virtual" · declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ BitfieldClause ";",FieldDeclaration -> Attribute+ identifier/"virtual" · declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ InitializerList ";",FieldDeclaration -> Attribute+ identifier/"virtual" · declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ "=" expression ";",FieldDeclaration -> Attribute+ identifier/"virtual" · declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ "=" InitializerList ";",FunctionDefinition-5 -> Attribute+ identifier/"virtual" · declarationSpecifiers fieldDeclarator CompoundStatement,FunctionDefinition-5 -> Attribute+ identifier/"virtual" · declarationSpecifiers fieldDeclarator DefaultMethodClause,FunctionDefinition-5 -> Attribute+ identifier/"virtual" · declarationSpecifiers fieldDeclarator DeleteMethodClause
  identifier/"bool"=s48,"::"=s141,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s1193,identifier/"__declspec"=s59,identifier/"extern"=s61,identifier/"static"=s61,identifier/"register"=s61,identifier/"inline"=s61,identifier/"__attribute__"=s62,identifier/"typename"=s1030,identifier/"class"=s1195,identifier/"union"=s1194,identifier/"enum"=s1025,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,MsDeclspecModifier=s14,AttributeSpecifier=s14,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+=s1188,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeQualifier=s14,typeSpecifier=s270,declarationSpecifiers=s882,storageClassSpecifier=s14
729: Declaration-3 -> FunctionDeclarator-1 ";" ·
  always Declaration-3(2)
730: PointerDeclarator -> "*" · fieldDeclarator,PointerDeclarator -> "*" · typeQualifier+ fieldDeclarator,PointerDeclarator -> "*" · msPointerModifier+ fieldDeclarator,PointerDeclarator -> "*" · msPointerModifier+ typeQualifier+ fieldDeclarator
  "("=s733,"::"=s323,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"__based"=s63,identifier/"__restrict"=s165,OperatorName=s735,identifier=s322,"*"=s730,"&&"=s734,"&"=s734 | FieldIdentifier=s736,TemplateMethod=s735,ScopedFieldIdentifier=s326,NamespaceIdentifier=s324,TemplateType=s324,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s324,PointerDeclarator=s735,MsBasedModifier=s731,FunctionDeclarator=s735,ArrayDeclarator-1=s735,ParenthesizedDeclarator-1=s735,ReferenceDeclarator-2=s735,typeQualifier+=s883,msPointerModifier+=s884,typeQualifier=s159,fieldDeclarator=s885
731: PointerDeclarator -> MsBasedModifier · "*" fieldDeclarator,PointerDeclarator -> MsBasedModifier · "*" typeQualifier+ fieldDeclarator,PointerDeclarator -> MsBasedModifier · "*" msPointerModifier+ fieldDeclarator,PointerDeclarator -> MsBasedModifier · "*" msPointerModifier+ typeQualifier+ fieldDeclarator
  "*"=s886
732: FunctionDeclarator -> fieldDeclarator · ParameterList,FunctionDeclarator -> fieldDeclarator · ParameterList (typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType)+,ArrayDeclarator-1 -> fieldDeclarator · "[" "]",ArrayDeclarator-1 -> fieldDeclarator · "[" expression "]",ArrayDeclarator-1 -> fieldDeclarator · "[" "*" "]",ArrayDeclarator-1 -> fieldDeclarator · "[" typeQualifier+ "]",ArrayDeclarator-1 -> fieldDeclarator · "[" typeQualifier+ expression "]",ArrayDeclarator-1 -> fieldDeclarator · "[" typeQualifier+ "*" "]",FieldDeclaration -> declarationSpecifiers fieldDeclarator · ";",FieldDeclaration -> declarationSpecifiers fieldDeclarator · BitfieldClause ";",FieldDeclaration -> declarationSpecifiers fieldDeclarator · InitializerList ";",FieldDeclaration -> declarationSpecifiers fieldDeclarator · "=" expression ";",FieldDeclaration -> declarationSpecifiers fieldDeclarator · "=" InitializerList ";",FieldDeclaration -> declarationSpecifiers fieldDeclarator · ("," fieldDeclarator)+ ";",FieldDeclaration -> declarationSpecifiers fieldDeclarator · ("," fieldDeclarator)+ BitfieldClause ";",FieldDeclaration -> declarationSpecifiers fieldDeclarator · ("," fieldDeclarator)+ InitializerList ";",FieldDeclaration -> declarationSpecifiers fieldDeclarator · ("," fieldDeclarator)+ "=" expression ";",FieldDeclaration -> declarationSpecifiers fieldDeclarator · ("," fieldDeclarator)+ "=" InitializerList ";",FunctionDefinition-5 -> declarationSpecifiers fieldDeclarator · CompoundStatement,FunctionDefinition-5 -> declarationSpecifiers fieldDeclarator · DefaultMethodClause,FunctionDefinition-5 -> declarationSpecifiers fieldDeclarator · DeleteMethodClause
  "("=s169,","=s889,"{"=s422,"["=s888,":"=s737,";"=s879,"="=s891 | ParameterList=s887,BitfieldClause=s880,InitializerList=s880,CompoundStatement=s892,DefaultMethodClause=s892,DeleteMethodClause=s892,("," fieldDeclarator)+=s890
733: ParenthesizedDeclarator-1 -> "(" · fieldDeclarator ")"
  "("=s733,"::"=s323,identifier/"__based"=s63,OperatorName=s735,identifier=s322,"*"=s1293,"&&"=s1229,"&"=s1229 | FieldIdentifier=s736,TemplateMethod=s735,ScopedFieldIdentifier=s326,NamespaceIdentifier=s324,TemplateType=s324,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s324,PointerDeclarator=s735,MsBasedModifier=s1294,FunctionDeclarator=s735,ArrayDeclarator-1=s735,ParenthesizedDeclarator-1=s735,ReferenceDeclarator-2=s735,fieldDeclarator=s893
734: ReferenceDeclarator-2 -> "&" · fieldDeclarator,ReferenceDeclarator-2 -> "&&" · fieldDeclarator
  "("=s733,"::"=s323,identifier/"__based"=s63,OperatorName=s735,identifier=s322,"*"=s730,"&&"=s734,"&"=s734 | FieldIdentifier=s736,TemplateMethod=s735,ScopedFieldIdentifier=s326,NamespaceIdentifier=s324,TemplateType=s324,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s324,PointerDeclarator=s735,MsBasedModifier=s731,FunctionDeclarator=s735,ArrayDeclarator-1=s735,ParenthesizedDeclarator-1=s735,ReferenceDeclarator-2=s735,fieldDeclarator=s894
735: fieldDeclarator -> PointerDeclarator ·,fieldDeclarator -> FunctionDeclarator ·,fieldDeclarator -> ArrayDeclarator-1 ·,fieldDeclarator -> ParenthesizedDeclarator-1 ·,fieldDeclarator -> ReferenceDeclarator-2 ·,fieldDeclarator -> TemplateMethod ·,fieldDeclarator -> OperatorName ·
  always fieldDeclarator(1)
736: fieldDeclarator -> FieldIdentifier ·,TemplateMethod -> FieldIdentifier · TemplateArgumentList
  "<"=s185,"("=fieldDeclarator(1),","=fieldDeclarator(1),"{"=fieldDeclarator(1),"["=fieldDeclarator(1),":"=fieldDeclarator(1),";"=fieldDeclarator(1),"="=fieldDeclarator(1),")"=fieldDeclarator(1) | TemplateArgumentList=s571
737: BitfieldClause -> ":" · expression
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s895
738: FieldDeclaration -> declarationSpecifiers ";" ·
  always FieldDeclaration(2)
739: FieldDeclaration -> declarationSpecifiers BitfieldClause · ";",FieldDeclaration -> declarationSpecifiers InitializerList · ";"
  ";"=s879
740: FieldDeclaration -> declarationSpecifiers "=" · expression ";",FieldDeclaration -> declarationSpecifiers "=" · InitializerList ";"
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"{"=s133,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,InitializerList=s880,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s896
741: declarator -> FunctionDeclarator-1 ·,constructorOrDestructorDefinition -> ExplicitFunctionSpecifier FunctionDeclarator-1 · CompoundStatement,constructorOrDestructorDefinition -> ExplicitFunctionSpecifier FunctionDeclarator-1 · DefaultMethodClause,constructorOrDestructorDefinition -> ExplicitFunctionSpecifier FunctionDeclarator-1 · DeleteMethodClause,constructorOrDestructorDefinition -> ExplicitFunctionSpecifier FunctionDeclarator-1 · FieldInitializerList CompoundStatement,constructorOrDestructorDefinition -> ExplicitFunctionSpecifier FunctionDeclarator-1 · FieldInitializerList DefaultMethodClause,constructorOrDestructorDefinition -> ExplicitFunctionSpecifier FunctionDeclarator-1 · FieldInitializerList DeleteMethodClause,Declaration-3 -> ExplicitFunctionSpecifier FunctionDeclarator-1 · ";",constructorOrDestructorDefinition -> identifier/"virtual" FunctionDeclarator-1 · CompoundStatement,constructorOrDestructorDefinition -> identifier/"virtual" FunctionDeclarator-1 · DefaultMethodClause,constructorOrDestructorDefinition -> identifier/"virtual" FunctionDeclarator-1 · DeleteMethodClause,constructorOrDestructorDefinition -> identifier/"virtual" FunctionDeclarator-1 · FieldInitializerList CompoundStatement,constructorOrDestructorDefinition -> identifier/"virtual" FunctionDeclarator-1 · FieldInitializerList DefaultMethodClause,constructorOrDestructorDefinition -> identifier/"virtual" FunctionDeclarator-1 · FieldInitializerList DeleteMethodClause,Declaration-3 -> identifier/"virtual" FunctionDeclarator-1 · ";"
  "{"=s45,":"=s197,";"=s897,"="=s200,"("=declarator(1),"["=declarator(1) | CompoundStatement=s418,FieldInitializerList=s431,DefaultMethodClause=s418,DeleteMethodClause=s418
742: fieldDeclarationListItem+ -> fieldDeclarationListItem+ · fieldDeclarationListItem+,fieldDeclarationListItem+ -> fieldDeclarationListItem+ fieldDeclarationListItem+ ·
  always fieldDeclarationListItem+(2)
743: FieldDeclarationList -> "{" fieldDeclarationListItem+ "}" ·
  always FieldDeclarationList(3)
744: ScopedNamespaceIdentifier -> TemplateType · "::" NamespaceIdentifier-1,ScopedTypeIdentifier -> TemplateType · "::" TypeIdentifier-1,className -> TemplateType ·,typeSpecifier -> TemplateType ·
  "::"=s369,"("=typeSpecifier(1),DestructorName=typeSpecifier(1),identifier/"const"=typeSpecifier(1),identifier/"volatile"=typeSpecifier(1),identifier/"restrict"=typeSpecifier(1),identifier/"_Atomic"=typeSpecifier(1),identifier/"mutable"=typeSpecifier(1),identifier/"constexpr"=typeSpecifier(1),identifier/"__declspec"=typeSpecifier(1),"["=typeSpecifier(1),identifier/"extern"=typeSpecifier(1),identifier/"static"=typeSpecifier(1),identifier/"register"=typeSpecifier(1),identifier/"inline"=typeSpecifier(1),identifier/"__attribute__"=typeSpecifier(1),identifier/"__based"=typeSpecifier(1),OperatorName=typeSpecifier(1),identifier=typeSpecifier(1),"*"=typeSpecifier(1),"&&"=typeSpecifier(1),"&"=typeSpecifier(1),";"=className(1)
745: className -> TypeIdentifier ·,className -> ScopedTypeIdentifier ·,typeSpecifier -> ScopedTypeIdentifier ·,typeSpecifier -> TypeIdentifier ·,TemplateType -> TypeIdentifier · TemplateArgumentList,TemplateType -> ScopedTypeIdentifier · TemplateArgumentList
  "<"=s185,"("=typeSpecifier(1),DestructorName=typeSpecifier(1),"::"=typeSpecifier(1),identifier/"const"=typeSpecifier(1),identifier/"volatile"=typeSpecifier(1),identifier/"restrict"=typeSpecifier(1),identifier/"_Atomic"=typeSpecifier(1),identifier/"mutable"=typeSpecifier(1),identifier/"constexpr"=typeSpecifier(1),identifier/"__declspec"=typeSpecifier(1),"["=typeSpecifier(1),identifier/"extern"=typeSpecifier(1),identifier/"static"=typeSpecifier(1),identifier/"register"=typeSpecifier(1),identifier/"inline"=typeSpecifier(1),identifier/"__attribute__"=typeSpecifier(1),identifier/"__based"=typeSpecifier(1),OperatorName=typeSpecifier(1),identifier=typeSpecifier(1),"*"=typeSpecifier(1),"&&"=typeSpecifier(1),"&"=typeSpecifier(1),";"=className(1) | TemplateArgumentList=s223
746: FriendDeclaration -> identifier/"friend" Declaration ·,FriendDeclaration -> identifier/"friend" FunctionDefinition ·
  always FriendDeclaration(2)
747: FriendDeclaration -> identifier/"friend" className · ";"
  ";"=s898
748: FriendDeclaration -> identifier/"friend" identifier/"class" · className ";",ClassSpecifier -> identifier/"class" · className,ClassSpecifier -> identifier/"class" · FieldDeclarationList,ClassSpecifier -> identifier/"class" · BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" · identifier/"final" BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · className FieldDeclarationList,ClassSpecifier -> identifier/"class" · className BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · className identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" · className identifier/"final" BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier className,ClassSpecifier -> identifier/"class" · MsDeclspecModifier FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier identifier/"final" BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier className FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier className BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier className identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier className identifier/"final" BaseClassClause FieldDeclarationList
  "::"=s141,identifier/"__declspec"=s59,identifier/"final"=s299,"{"=s281,identifier=s140,":"=s280 | NamespaceIdentifier=s142,TemplateType=s278,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,MsDeclspecModifier=s300,BaseClassClause=s298,FieldDeclarationList=s297,className=s899
749: FriendDeclaration -> identifier/"friend" identifier/"struct" · className ";",StructSpecifier -> identifier/"struct" · className,StructSpecifier -> identifier/"struct" · FieldDeclarationList,StructSpecifier -> identifier/"struct" · BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" · identifier/"final" BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · className FieldDeclarationList,StructSpecifier -> identifier/"struct" · className BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · className identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" · className identifier/"final" BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier className,StructSpecifier -> identifier/"struct" · MsDeclspecModifier FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier identifier/"final" BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier className FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier className BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier className identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier className identifier/"final" BaseClassClause FieldDeclarationList
  "::"=s141,identifier/"__declspec"=s59,identifier/"final"=s285,"{"=s281,identifier=s140,":"=s280 | NamespaceIdentifier=s142,TemplateType=s278,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,MsDeclspecModifier=s286,BaseClassClause=s284,FieldDeclarationList=s283,className=s900
750: FriendDeclaration -> identifier/"friend" identifier/"union" · className ";",UnionSpecifier -> identifier/"union" · className,UnionSpecifier -> identifier/"union" · FieldDeclarationList,UnionSpecifier -> identifier/"union" · BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" · identifier/"final" BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · className FieldDeclarationList,UnionSpecifier -> identifier/"union" · className BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · className identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" · className identifier/"final" BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier className,UnionSpecifier -> identifier/"union" · MsDeclspecModifier FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier identifier/"final" BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier className FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier className BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier className identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier className identifier/"final" BaseClassClause FieldDeclarationList
  "::"=s141,identifier/"__declspec"=s59,identifier/"final"=s290,"{"=s281,identifier=s140,":"=s280 | NamespaceIdentifier=s142,TemplateType=s278,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,MsDeclspecModifier=s291,BaseClassClause=s289,FieldDeclarationList=s288,className=s901
751: AccessSpecifier -> identifier/"public" ":" ·
  always AccessSpecifier(2)
752: StructSpecifier -> identifier/"struct" identifier/"final" BaseClassClause FieldDeclarationList ·,StructSpecifier -> identifier/"struct" className BaseClassClause FieldDeclarationList ·,StructSpecifier -> identifier/"struct" className identifier/"final" FieldDeclarationList ·,StructSpecifier -> identifier/"struct" MsDeclspecModifier BaseClassClause FieldDeclarationList ·,StructSpecifier -> identifier/"struct" MsDeclspecModifier identifier/"final" FieldDeclarationList ·,StructSpecifier -> identifier/"struct" MsDeclspecModifier className FieldDeclarationList ·
  always StructSpecifier(4)
753: StructSpecifier -> identifier/"struct" className identifier/"final" BaseClassClause · FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier identifier/"final" BaseClassClause · FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier className BaseClassClause · FieldDeclarationList
  "{"=s281 | FieldDeclarationList=s902
754: StructSpecifier -> identifier/"struct" MsDeclspecModifier className identifier/"final" · FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier className identifier/"final" · BaseClassClause FieldDeclarationList
  "{"=s281,":"=s280 | BaseClassClause=s903,FieldDeclarationList=s902
755: UnionSpecifier -> identifier/"union" identifier/"final" BaseClassClause FieldDeclarationList ·,UnionSpecifier -> identifier/"union" className BaseClassClause FieldDeclarationList ·,UnionSpecifier -> identifier/"union" className identifier/"final" FieldDeclarationList ·,UnionSpecifier -> identifier/"union" MsDeclspecModifier BaseClassClause FieldDeclarationList ·,UnionSpecifier -> identifier/"union" MsDeclspecModifier identifier/"final" FieldDeclarationList ·,UnionSpecifier -> identifier/"union" MsDeclspecModifier className FieldDeclarationList ·
  always UnionSpecifier(4)
756: UnionSpecifier -> identifier/"union" className identifier/"final" BaseClassClause · FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier identifier/"final" BaseClassClause · FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier className BaseClassClause · FieldDeclarationList
  "{"=s281 | FieldDeclarationList=s904
757: UnionSpecifier -> identifier/"union" MsDeclspecModifier className identifier/"final" · FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier className identifier/"final" · BaseClassClause FieldDeclarationList
  "{"=s281,":"=s280 | BaseClassClause=s905,FieldDeclarationList=s904
758: Enumerator -> Identifier "=" · expression
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s906
759: ("," Enumerator?)+ -> "," ·,("," Enumerator?)+ -> "," · Enumerator
  identifier=s264,","=("," Enumerator?)+(1),"}"=("," Enumerator?)+(1) | Identifier=s544,Enumerator=s907
760: ("," Enumerator?)+ -> ("," Enumerator?)+ · ("," Enumerator?)+,commaSepTrailing<Enumerator> -> Enumerator ("," Enumerator?)+ ·
  ","=s759,"}"=commaSepTrailing<Enumerator>(2) | ("," Enumerator?)+=s908
761: EnumeratorList -> "{" commaSepTrailing<Enumerator> "}" ·
  always EnumeratorList(3)
762: enumBaseClause -> ":" ScopedTypeIdentifier ·,enumBaseClause -> ":" TypeIdentifier ·,TemplateType -> TypeIdentifier · TemplateArgumentList,TemplateType -> ScopedTypeIdentifier · TemplateArgumentList
  "<"=s185,"("=enumBaseClause(2),DestructorName=enumBaseClause(2),"::"=enumBaseClause(2),identifier/"const"=enumBaseClause(2),identifier/"volatile"=enumBaseClause(2),identifier/"restrict"=enumBaseClause(2),identifier/"_Atomic"=enumBaseClause(2),identifier/"mutable"=enumBaseClause(2),identifier/"constexpr"=enumBaseClause(2),identifier/"__declspec"=enumBaseClause(2),"{"=enumBaseClause(2),"["=enumBaseClause(2),identifier/"extern"=enumBaseClause(2),identifier/"static"=enumBaseClause(2),identifier/"register"=enumBaseClause(2),identifier/"inline"=enumBaseClause(2),identifier/"__attribute__"=enumBaseClause(2),identifier/"__based"=enumBaseClause(2),OperatorName=enumBaseClause(2),identifier=enumBaseClause(2),"*"=enumBaseClause(2),"&&"=enumBaseClause(2),"&"=enumBaseClause(2),";"=enumBaseClause(2),")"=enumBaseClause(2),","=enumBaseClause(2),incDec=enumBaseClause(2),ArithOp<"+" | "-">=enumBaseClause(2),ArithOp<"/" | "%">=enumBaseClause(2),BitOp<"|">=enumBaseClause(2),BitOp<"^">=enumBaseClause(2),CompareOp<"==" | "!=">=enumBaseClause(2),CompareOp<"<=" | ">=">=enumBaseClause(2),"<"/"<"=enumBaseClause(2),templateArgsEnd/">"=enumBaseClause(2),BitOp<"<<" | ">>">=enumBaseClause(2),"?"=enumBaseClause(2),"."=enumBaseClause(2),"->"=enumBaseClause(2),"..."=enumBaseClause(2),"||"=enumBaseClause(2),UpdateOp=enumBaseClause(2),"="=enumBaseClause(2),templateArgsEndFallback=enumBaseClause(2),templateArgsEnd=enumBaseClause(2),"]"=enumBaseClause(2),":"=enumBaseClause(2),"}"=enumBaseClause(2),identifier/"final"=enumBaseClause(2),identifier/"noexcept"=enumBaseClause(2),identifier/"throw"=enumBaseClause(2) | TemplateArgumentList=s223
763: enumBaseClause -> ":" SizedTypeSpecifier ·,enumBaseClause -> ":" identifier/"bool" ·
  always enumBaseClause(2)
764: EnumSpecifier -> identifier/"enum" className enumBaseClause EnumeratorList ·,EnumSpecifier -> identifier/"enum" identifier/"class" className EnumeratorList ·,EnumSpecifier -> identifier/"enum" identifier/"class" className enumBaseClause ·,EnumSpecifier -> identifier/"enum" identifier/"class" className enumBaseClause · EnumeratorList,EnumSpecifier -> identifier/"enum" identifier/"struct" className EnumeratorList ·,EnumSpecifier -> identifier/"enum" identifier/"struct" className enumBaseClause ·,EnumSpecifier -> identifier/"enum" identifier/"struct" className enumBaseClause · EnumeratorList
  always EnumSpecifier(4)
765: EnumSpecifier -> identifier/"enum" identifier/"class" className enumBaseClause ·,EnumSpecifier -> identifier/"enum" identifier/"class" className enumBaseClause · EnumeratorList,EnumSpecifier -> identifier/"enum" identifier/"struct" className enumBaseClause ·,EnumSpecifier -> identifier/"enum" identifier/"struct" className enumBaseClause · EnumeratorList
  "{"=s292,"("=EnumSpecifier(4),DestructorName=EnumSpecifier(4),"::"=EnumSpecifier(4),identifier/"const"=EnumSpecifier(4),identifier/"volatile"=EnumSpecifier(4),identifier/"restrict"=EnumSpecifier(4),identifier/"_Atomic"=EnumSpecifier(4),identifier/"mutable"=EnumSpecifier(4),identifier/"constexpr"=EnumSpecifier(4),identifier/"__declspec"=EnumSpecifier(4),"["=EnumSpecifier(4),identifier/"extern"=EnumSpecifier(4),identifier/"static"=EnumSpecifier(4),identifier/"register"=EnumSpecifier(4),identifier/"inline"=EnumSpecifier(4),identifier/"__attribute__"=EnumSpecifier(4),identifier/"__based"=EnumSpecifier(4),OperatorName=EnumSpecifier(4),identifier=EnumSpecifier(4),"*"=EnumSpecifier(4),"&&"=EnumSpecifier(4),"&"=EnumSpecifier(4),";"=EnumSpecifier(4),")"=EnumSpecifier(4),","=EnumSpecifier(4),"..."=EnumSpecifier(4),"="=EnumSpecifier(4),templateArgsEndFallback=EnumSpecifier(4),templateArgsEnd=EnumSpecifier(4),identifier/"final"=EnumSpecifier(4),identifier/"noexcept"=EnumSpecifier(4),identifier/"throw"=EnumSpecifier(4),"->"=EnumSpecifier(4) | EnumeratorList=s909
766: ClassSpecifier -> identifier/"class" identifier/"final" BaseClassClause FieldDeclarationList ·,ClassSpecifier -> identifier/"class" className BaseClassClause FieldDeclarationList ·,ClassSpecifier -> identifier/"class" className identifier/"final" FieldDeclarationList ·,ClassSpecifier -> identifier/"class" MsDeclspecModifier BaseClassClause FieldDeclarationList ·,ClassSpecifier -> identifier/"class" MsDeclspecModifier identifier/"final" FieldDeclarationList ·,ClassSpecifier -> identifier/"class" MsDeclspecModifier className FieldDeclarationList ·
  always ClassSpecifier(4)
767: ClassSpecifier -> identifier/"class" className identifier/"final" BaseClassClause · FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier identifier/"final" BaseClassClause · FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier className BaseClassClause · FieldDeclarationList
  "{"=s281 | FieldDeclarationList=s910
768: ClassSpecifier -> identifier/"class" MsDeclspecModifier className identifier/"final" · FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier className identifier/"final" · BaseClassClause FieldDeclarationList
  "{"=s281,":"=s280 | BaseClassClause=s911,FieldDeclarationList=s910
769: Decltype -> identifier/"decltype" "(" expression ")" ·
  always Decltype(4)
770: CastExpression -> "(" TypeDescriptor ")" · expression,_anon-4 -> "(" TypeDescriptor ")" ·,CompoundLiteralExpression -> "(" TypeDescriptor ")" · InitializerList
  RawString=s35,identifier/"bool"=s164,"::"=s155,"{"=s133,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54,"("=_anon-4(3),","=_anon-4(3),"["=_anon-4(3),incDec=_anon-4(3),ArithOp<"+" | "-">=_anon-4(3),ArithOp<"/" | "%">=_anon-4(3),BitOp<"|">=_anon-4(3),BitOp<"^">=_anon-4(3),CompareOp<"==" | "!=">=_anon-4(3),CompareOp<"<=" | ">=">=_anon-4(3),"<"/"<"=_anon-4(3),templateArgsEnd/">"=_anon-4(3),BitOp<"<<" | ">>">=_anon-4(3),"?"=_anon-4(3),"."=_anon-4(3),"->"=_anon-4(3),"..."=_anon-4(3),"*"=_anon-4(3),"||"=_anon-4(3),"&&"=_anon-4(3),"&"=_anon-4(3),";"=_anon-4(3),UpdateOp=_anon-4(3),"="=_anon-4(3),")"=_anon-4(3),"]"=_anon-4(3),"}"=_anon-4(3),templateArgsEndFallback=_anon-4(3),templateArgsEnd=_anon-4(3) | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,InitializerList=s638,ConcatenatedString=s56,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,ParameterPackExpansion-2=s56,expression=s637
771: SizeofExpression -> identifier/"sizeof" "..." "(" Identifier · ")"
  ")"=s912
772: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,NewDeclarator -> "[" expression · "]",NewDeclarator -> "[" expression · "]" NewDeclarator,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,"]"=s913,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112 | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
773: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "...",DeleteExpression -> identifier/"delete" "[" "]" expression ·
  "("=s124,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112,","=DeleteExpression(4),";"=DeleteExpression(4),UpdateOp=DeleteExpression(4),"="=DeleteExpression(4),")"=DeleteExpression(4),"]"=DeleteExpression(4),"}"=DeleteExpression(4),templateArgsEndFallback=DeleteExpression(4),templateArgsEnd=DeleteExpression(4) | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
774: PreprocDirective -> pp<"include"> Identifier ArgumentList "\n" ·,PreprocDirective -> pp<"define"> Identifier PreprocArg "\n" ·
  always PreprocDirective(4)
775: commaSep<Identifier | "..."> -> Identifier ·,commaSep<Identifier | "..."> -> Identifier · ("," (Identifier | "..."))+,commaSep<Identifier | "..."> -> "..." ·,commaSep<Identifier | "..."> -> "..." · ("," (Identifier | "..."))+
  ","=s914,")"=commaSep<Identifier | "...">(1) | ("," (Identifier | "..."))+=s915
776: preprocParams -> "(" commaSep<Identifier | "..."> · ")"
  ")"=s916
777: PreprocDirective -> pp<"define"> Identifier preprocParams PreprocArg · "\n"
  "\n"=s917
778: ConditionalExpression -> expression · "?" expression ":" expression,ConditionalExpression -> expression "?" expression ":" expression ·,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112,","=ConditionalExpression(5),";"=ConditionalExpression(5),UpdateOp=ConditionalExpression(5),"="=ConditionalExpression(5),")"=ConditionalExpression(5),"]"=ConditionalExpression(5),"}"=ConditionalExpression(5),templateArgsEndFallback=ConditionalExpression(5),templateArgsEnd=ConditionalExpression(5) | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
779: ScopedFieldIdentifier -> NamespaceIdentifier "::" FieldIdentifier-1 ·,ScopedFieldIdentifier -> NamespaceIdentifier "::" OperatorName ·,ScopedFieldIdentifier -> NamespaceIdentifier "::" DestructorName ·,ScopedFieldIdentifier -> TemplateType "::" FieldIdentifier-1 ·,ScopedFieldIdentifier -> TemplateType "::" OperatorName ·,ScopedFieldIdentifier -> TemplateType "::" DestructorName ·,ScopedFieldIdentifier -> ScopedNamespaceIdentifier "::" FieldIdentifier-1 ·,ScopedFieldIdentifier -> ScopedNamespaceIdentifier "::" OperatorName ·,ScopedFieldIdentifier -> ScopedNamespaceIdentifier "::" DestructorName ·
  always ScopedFieldIdentifier(3)
780: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "...",("," (expression | InitializerList))+ -> "," expression ·
  "("=s124,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112,")"=("," (expression | InitializerList))+(2),","=("," (expression | InitializerList))+(2) | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
781: ("," (expression | InitializerList))+ -> "," InitializerList ·
  always ("," (expression | InitializerList))+(2)
782: ("," (expression | InitializerList))+ -> ("," (expression | InitializerList))+ · ("," (expression | InitializerList))+,("," (expression | InitializerList))+ -> ("," (expression | InitializerList))+ ("," (expression | InitializerList))+ ·
  always ("," (expression | InitializerList))+(2)
783: NewExpression -> "::" scopedIdentifier/"new" typeSpecifier NewDeclarator ArgumentList ·,NewExpression -> "::" scopedIdentifier/"new" typeSpecifier NewDeclarator InitializerList ·,NewExpression -> "::" scopedIdentifier/"new" ArgumentList typeSpecifier ArgumentList ·,NewExpression -> "::" scopedIdentifier/"new" ArgumentList typeSpecifier InitializerList ·,NewExpression -> identifier/"new" ArgumentList typeSpecifier NewDeclarator ArgumentList ·,NewExpression -> identifier/"new" ArgumentList typeSpecifier NewDeclarator InitializerList ·
  always NewExpression(5)
784: NewExpression -> "::" scopedIdentifier/"new" ArgumentList typeSpecifier NewDeclarator ·,NewExpression -> "::" scopedIdentifier/"new" ArgumentList typeSpecifier NewDeclarator · ArgumentList,NewExpression -> "::" scopedIdentifier/"new" ArgumentList typeSpecifier NewDeclarator · InitializerList
  "("=s124,"{"=s133,","=NewExpression(5),"["=NewExpression(5),incDec=NewExpression(5),ArithOp<"+" | "-">=NewExpression(5),ArithOp<"/" | "%">=NewExpression(5),BitOp<"|">=NewExpression(5),BitOp<"^">=NewExpression(5),CompareOp<"==" | "!=">=NewExpression(5),CompareOp<"<=" | ">=">=NewExpression(5),"<"/"<"=NewExpression(5),templateArgsEnd/">"=NewExpression(5),BitOp<"<<" | ">>">=NewExpression(5),"?"=NewExpression(5),"."=NewExpression(5),"->"=NewExpression(5),"..."=NewExpression(5),"*"=NewExpression(5),"||"=NewExpression(5),"&&"=NewExpression(5),"&"=NewExpression(5),";"=NewExpression(5),UpdateOp=NewExpression(5),"="=NewExpression(5),")"=NewExpression(5),"]"=NewExpression(5),":"=NewExpression(5),"}"=NewExpression(5),templateArgsEndFallback=NewExpression(5),templateArgsEnd=NewExpression(5) | ArgumentList=s918,InitializerList=s918
785: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "...",DeleteExpression -> "::" scopedIdentifier/"delete" "[" "]" expression ·
  "("=s124,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112,","=DeleteExpression(5),";"=DeleteExpression(5),UpdateOp=DeleteExpression(5),"="=DeleteExpression(5),")"=DeleteExpression(5),"]"=DeleteExpression(5),"}"=DeleteExpression(5),templateArgsEndFallback=DeleteExpression(5),templateArgsEnd=DeleteExpression(5) | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
786: AbstractFunctionDeclarator -> abstractDeclarator · ParameterList,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList TrailingReturnType,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+ TrailingReturnType,AbstractArrayDeclarator -> abstractDeclarator · "[" "]",AbstractArrayDeclarator -> abstractDeclarator · "[" expression "]",AbstractArrayDeclarator -> abstractDeclarator · "[" "*" "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ expression "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ "*" "]",OperatorCast -> NamespaceIdentifier "::" scopedIdentifier/"operator" declarationSpecifiers abstractDeclarator ·,OperatorCast -> TemplateType "::" scopedIdentifier/"operator" declarationSpecifiers abstractDeclarator ·,OperatorCast -> ScopedNamespaceIdentifier "::" scopedIdentifier/"operator" declarationSpecifiers abstractDeclarator ·
  "("=s169,"["=s447,"{"=OperatorCast(5),";"=OperatorCast(5),"="=OperatorCast(5) | ParameterList=s446
787: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,("," (InitializerPair | expression | InitializerList)?)+ -> "," expression ·,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112,","=("," (InitializerPair | expression | InitializerList)?)+(2),"}"=("," (InitializerPair | expression | InitializerList)?)+(2) | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
788: ("," (InitializerPair | expression | InitializerList)?)+ -> "," InitializerPair ·,("," (InitializerPair | expression | InitializerList)?)+ -> "," InitializerList ·
  always ("," (InitializerPair | expression | InitializerList)?)+(2)
789: ("," (InitializerPair | expression | InitializerList)?)+ -> ("," (InitializerPair | expression | InitializerList)?)+ · ("," (InitializerPair | expression | InitializerList)?)+,("," (InitializerPair | expression | InitializerList)?)+ -> ("," (InitializerPair | expression | InitializerList)?)+ ("," (InitializerPair | expression | InitializerList)?)+ ·
  always ("," (InitializerPair | expression | InitializerList)?)+(2)
790: SubscriptDesignator -> "[" expression "]" ·
  always SubscriptDesignator(3)
791: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,SubscriptDesignator -> "[" expression · "]",FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,"]"=s790,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112 | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
792: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,InitializerPair -> (SubscriptDesignator | FieldDesignator)+ "=" expression ·,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112,","=InitializerPair(3),"}"=InitializerPair(3) | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
793: InitializerPair -> (SubscriptDesignator | FieldDesignator)+ "=" InitializerList ·
  always InitializerPair(3)
794: balancedTokens -> "{" "}" ·,balancedTokens -> "[" "]" ·,balancedTokens -> "(" ")" ·
  always balancedTokens(2)
795: balancedTokens -> "{" balancedTokens+ · "}",balancedTokens+ -> balancedTokens+ · balancedTokens+
  RawString=s599,"("=s598,"::"=s599,","=s599,"{"=s596,attributeIdentifier=s599,"}"=s919,"["=s597,incDec=s599,ArithOp<"+" | "-">=s599,ArithOp<"/" | "%">=s599,BitOp<"|">=s599,BitOp<"^">=s599,CompareOp<"==" | "!=">=s599,CompareOp<"<=" | ">=">=s599,"<"/"<"=s599,templateArgsEnd/">"=s599,BitOp<"<<" | ">>">=s599,UpdateOp=s599,Number=s599,stringLiteralStart=s2,":"=s599,"."=s599,"->"=s599,"..."=s599,"*"=s593,"||"=s594,"&&"=s594,"&"=s595,";"=s599,charLiteralStart=s9 | String=s599,ArithOp=s599,LogicOp=s599,BitOp=s599,CharLiteral=s599,balancedTokens+=s798,balancedTokens=s600
796: balancedTokens -> "[" balancedTokens+ · "]",balancedTokens+ -> balancedTokens+ · balancedTokens+
  RawString=s599,"("=s598,"::"=s599,","=s599,"{"=s596,attributeIdentifier=s599,"["=s597,"]"=s919,incDec=s599,ArithOp<"+" | "-">=s599,ArithOp<"/" | "%">=s599,BitOp<"|">=s599,BitOp<"^">=s599,CompareOp<"==" | "!=">=s599,CompareOp<"<=" | ">=">=s599,"<"/"<"=s599,templateArgsEnd/">"=s599,BitOp<"<<" | ">>">=s599,UpdateOp=s599,Number=s599,stringLiteralStart=s2,":"=s599,"."=s599,"->"=s599,"..."=s599,"*"=s593,"||"=s594,"&&"=s594,"&"=s595,";"=s599,charLiteralStart=s9 | String=s599,ArithOp=s599,LogicOp=s599,BitOp=s599,CharLiteral=s599,balancedTokens+=s798,balancedTokens=s600
797: balancedTokens -> "(" balancedTokens+ · ")",balancedTokens+ -> balancedTokens+ · balancedTokens+
  RawString=s599,"("=s598,"::"=s599,")"=s919,","=s599,"{"=s596,attributeIdentifier=s599,"["=s597,incDec=s599,ArithOp<"+" | "-">=s599,ArithOp<"/" | "%">=s599,BitOp<"|">=s599,BitOp<"^">=s599,CompareOp<"==" | "!=">=s599,CompareOp<"<=" | ">=">=s599,"<"/"<"=s599,templateArgsEnd/">"=s599,BitOp<"<<" | ">>">=s599,UpdateOp=s599,Number=s599,stringLiteralStart=s2,":"=s599,"."=s599,"->"=s599,"..."=s599,"*"=s593,"||"=s594,"&&"=s594,"&"=s595,";"=s599,charLiteralStart=s9 | String=s599,ArithOp=s599,LogicOp=s599,BitOp=s599,CharLiteral=s599,balancedTokens+=s798,balancedTokens=s600
798: balancedTokens+ -> balancedTokens+ · balancedTokens+,balancedTokens+ -> balancedTokens+ balancedTokens+ ·
  always balancedTokens+(2)
799: AttributeArgs -> "(" balancedTokens+ ")" ·
  always AttributeArgs(3)
800: AttributeArgs-1 -> "(" · ")",AttributeArgs-1 -> "(" · balancedTokens+ ")"
  RawString=s599,"("=s598,"::"=s599,")"=s921,","=s599,"{"=s596,attributeIdentifier=s599,"["=s597,incDec=s599,ArithOp<"+" | "-">=s599,ArithOp<"/" | "%">=s599,BitOp<"|">=s599,BitOp<"^">=s599,CompareOp<"==" | "!=">=s599,CompareOp<"<=" | ">=">=s599,"<"/"<"=s599,templateArgsEnd/">"=s599,BitOp<"<<" | ">>">=s599,UpdateOp=s599,Number=s599,stringLiteralStart=s2,":"=s599,"."=s599,"->"=s599,"..."=s599,"*"=s593,"||"=s594,"&&"=s594,"&"=s595,";"=s599,charLiteralStart=s9 | String=s599,ArithOp=s599,LogicOp=s599,BitOp=s599,CharLiteral=s599,balancedTokens+=s920,balancedTokens=s600
801: ("," AttributeName AttributeArgs { "(" balancedTokens* ")" }?)+ -> "," AttributeName AttributeArgs-1 ·
  always ("," AttributeName AttributeArgs { "(" balancedTokens* ")" }?)+(3)
802: FunctionDefinition -> Attribute+ identifier/"__cdecl" declarationSpecifiers declarator CompoundStatement ·
  always FunctionDefinition(5)
803: PointerDeclarator-1 -> MsBasedModifier "*" msPointerModifier+ typeQualifier+ declarator ·,FunctionDeclarator-1 -> declarator · ParameterList,FunctionDeclarator-1 -> declarator · ParameterList ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+ ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,ArrayDeclarator -> declarator · "[" "]",ArrayDeclarator -> declarator · "[" expression "]",ArrayDeclarator -> declarator · "[" "*" "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "]",ArrayDeclarator -> declarator · "[" typeQualifier+ expression "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "*" "]"
  "("=s169,"["=s168,")"=PointerDeclarator-1(5),";"=PointerDeclarator-1(5),","=PointerDeclarator-1(5),"="=PointerDeclarator-1(5),templateArgsEndFallback=PointerDeclarator-1(5),templateArgsEnd=PointerDeclarator-1(5) | ParameterList=s1210
804: AbstractFunctionDeclarator -> ParameterList ·,AbstractFunctionDeclarator -> ParameterList · TrailingReturnType,AbstractFunctionDeclarator -> ParameterList · (typeQualifier | Noexcept | ThrowSpecifier)+,AbstractFunctionDeclarator -> ParameterList · (typeQualifier | Noexcept | ThrowSpecifier)+ TrailingReturnType
  always AbstractFunctionDeclarator(1)
805: AbstractFunctionDeclarator -> abstractDeclarator · ParameterList,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList TrailingReturnType,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+ TrailingReturnType,AbstractArrayDeclarator -> abstractDeclarator · "[" "]",AbstractArrayDeclarator -> abstractDeclarator · "[" expression "]",AbstractArrayDeclarator -> abstractDeclarator · "[" "*" "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ expression "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ "*" "]",TrailingReturnType -> "->" typeSpecifier abstractDeclarator ·
  "("=s169,"["=s447,identifier/"const"=TrailingReturnType(3),identifier/"volatile"=TrailingReturnType(3),identifier/"restrict"=TrailingReturnType(3),identifier/"_Atomic"=TrailingReturnType(3),identifier/"mutable"=TrailingReturnType(3),identifier/"constexpr"=TrailingReturnType(3),identifier/"final"=TrailingReturnType(3),"{"=TrailingReturnType(3),identifier/"noexcept"=TrailingReturnType(3),identifier/"throw"=TrailingReturnType(3),":"=TrailingReturnType(3),"->"=TrailingReturnType(3),"="=TrailingReturnType(3),")"=TrailingReturnType(3),","=TrailingReturnType(3),";"=TrailingReturnType(3),templateArgsEndFallback=TrailingReturnType(3),templateArgsEnd=TrailingReturnType(3) | ParameterList=s445
806: TrailingReturnType -> "->" typeQualifier typeSpecifier ·,TrailingReturnType -> "->" typeQualifier typeSpecifier · abstractDeclarator
  "("=s231,"["=s230,"*"=s1091,"&&"=s1092,"&"=s1092,identifier/"const"=TrailingReturnType(3),identifier/"volatile"=TrailingReturnType(3),identifier/"restrict"=TrailingReturnType(3),identifier/"_Atomic"=TrailingReturnType(3),identifier/"mutable"=TrailingReturnType(3),identifier/"constexpr"=TrailingReturnType(3),identifier/"final"=TrailingReturnType(3),"{"=TrailingReturnType(3),identifier/"noexcept"=TrailingReturnType(3),identifier/"throw"=TrailingReturnType(3),":"=TrailingReturnType(3),"->"=TrailingReturnType(3),"="=TrailingReturnType(3),")"=TrailingReturnType(3),","=TrailingReturnType(3),";"=TrailingReturnType(3),templateArgsEndFallback=TrailingReturnType(3),templateArgsEnd=TrailingReturnType(3) | ParameterList=s804,AbstractPointerDeclarator=s233,AbstractFunctionDeclarator=s233,AbstractArrayDeclarator=s233,AbstractParenthesizedDeclarator=s233,AbstractReferenceDeclarator=s233,abstractDeclarator=s922
807: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "...",Noexcept -> identifier/"noexcept" "(" expression · ")"
  "("=s124,")"=s923,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112 | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
808: Noexcept -> identifier/"noexcept" "(" ")" ·
  always Noexcept(3)
809: commaSep<TypeDescriptor> -> TypeDescriptor ·,commaSep<TypeDescriptor> -> TypeDescriptor · ("," TypeDescriptor)+
  ","=s924,")"=commaSep<TypeDescriptor>(1) | ("," TypeDescriptor)+=s925
810: ThrowSpecifier -> identifier/"throw" "(" commaSep<TypeDescriptor> · ")"
  ")"=s926
811: ArrayDeclarator -> declarator "[" typeQualifier+ expression "]" ·,ArrayDeclarator -> declarator "[" typeQualifier+ "*" "]" ·
  always ArrayDeclarator(5)
812: AbstractFunctionDeclarator -> abstractDeclarator · ParameterList,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList TrailingReturnType,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+ TrailingReturnType,AbstractArrayDeclarator -> abstractDeclarator · "[" "]",AbstractArrayDeclarator -> abstractDeclarator · "[" expression "]",AbstractArrayDeclarator -> abstractDeclarator · "[" "*" "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ expression "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ "*" "]",ParameterDeclaration -> Attribute+ declarationSpecifiers abstractDeclarator ·
  "("=s169,"["=s447,")"=ParameterDeclaration(3),","=ParameterDeclaration(3),templateArgsEndFallback=ParameterDeclaration(3),templateArgsEnd=ParameterDeclaration(3) | ParameterList=s1289
813: AbstractReferenceDeclarator -> "&" ·,AbstractReferenceDeclarator -> "&" · abstractDeclarator,AbstractReferenceDeclarator -> "&&" ·,AbstractReferenceDeclarator -> "&&" · abstractDeclarator,ReferenceDeclarator -> "&" · declarator,ReferenceDeclarator -> "&&" · declarator
  "("=s626,DestructorName=s26,"::"=s178,"["=s625,identifier/"__based"=s63,OperatorName=s26,identifier=s153,"*"=s1170,"&&"=s813,"&"=s813,")"=AbstractReferenceDeclarator(1),","=AbstractReferenceDeclarator(1),templateArgsEndFallback=AbstractReferenceDeclarator(1),templateArgsEnd=AbstractReferenceDeclarator(1) | Identifier=s181,NamespaceIdentifier=s156,TemplateType=s156,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s156,MsBasedModifier=s18,ParameterList=s1284,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,AbstractPointerDeclarator=s233,AbstractFunctionDeclarator=s233,AbstractArrayDeclarator=s233,AbstractParenthesizedDeclarator=s233,AbstractReferenceDeclarator=s233,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,declarator=s177,abstractDeclarator=s453
814: FunctionDeclarator-1 -> declarator · ParameterList,FunctionDeclarator-1 -> declarator · ParameterList ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+ ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,ArrayDeclarator -> declarator · "[" "]",ArrayDeclarator -> declarator · "[" expression "]",ArrayDeclarator -> declarator · "[" "*" "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "]",ArrayDeclarator -> declarator · "[" typeQualifier+ expression "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "*" "]",ParameterDeclaration -> Attribute+ declarationSpecifiers declarator ·
  "("=s169,"["=s168,")"=ParameterDeclaration(3),","=ParameterDeclaration(3),templateArgsEndFallback=ParameterDeclaration(3),templateArgsEnd=ParameterDeclaration(3) | ParameterList=s1210
815: typeQualifier+ -> typeQualifier ·,(typeQualifier)+ -> typeQualifier ·
  "("=(typeQualifier)+(1),DestructorName=typeQualifier+(1),"::"=typeQualifier+(1),identifier/"const"=(typeQualifier)+(1),identifier/"volatile"=(typeQualifier)+(1),identifier/"restrict"=(typeQualifier)+(1),identifier/"_Atomic"=(typeQualifier)+(1),identifier/"mutable"=(typeQualifier)+(1),identifier/"constexpr"=(typeQualifier)+(1),")"=(typeQualifier)+(1),","=(typeQualifier)+(1),"["=(typeQualifier)+(1),identifier/"__based"=typeQualifier+(1),OperatorName=typeQualifier+(1),identifier=typeQualifier+(1),"*"=(typeQualifier)+(1),"&&"=(typeQualifier)+(1),"&"=(typeQualifier)+(1),templateArgsEndFallback=(typeQualifier)+(1),templateArgsEnd=(typeQualifier)+(1)
816: ReferenceDeclarator-1 -> "&&" VariadicDeclarator ·,ReferenceDeclarator-1 -> "&" VariadicDeclarator ·
  always ReferenceDeclarator-1(2)
817: OptionalParameterDeclaration -> declarationSpecifiers declarator "=" · expression
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s927
818: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,OptionalParameterDeclaration -> declarationSpecifiers "=" expression ·,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112,")"=OptionalParameterDeclaration(3),","=OptionalParameterDeclaration(3),templateArgsEndFallback=OptionalParameterDeclaration(3),templateArgsEnd=OptionalParameterDeclaration(3) | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
819: VariadicDeclarator -> "..." Identifier ·
  always VariadicDeclarator(2)
820: ("," (ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "..."))+ -> "," ParameterDeclaration ·,("," (ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "..."))+ -> "," OptionalParameterDeclaration ·,("," (ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "..."))+ -> "," VariadicParameterDeclaration ·,("," (ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "..."))+ -> "," "..." ·
  always ("," (ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "..."))+(2)
821: ("," (ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "..."))+ -> ("," (ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "..."))+ · ("," (ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "..."))+,("," (ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "..."))+ -> ("," (ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "..."))+ ("," (ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "..."))+ ·
  always ("," (ParameterDeclaration | OptionalParameterDeclaration | VariadicParameterDeclaration | "..."))+(2)
822: AbstractFunctionDeclarator -> abstractDeclarator · ParameterList,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList TrailingReturnType,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+ TrailingReturnType,AbstractArrayDeclarator -> abstractDeclarator · "[" "]",AbstractArrayDeclarator -> abstractDeclarator · "[" expression "]",AbstractArrayDeclarator -> abstractDeclarator · "[" "*" "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ expression "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ "*" "]",TypeDescriptor -> typeQualifier+ typeSpecifier typeQualifier+ abstractDeclarator ·
  "("=s169,"["=s447,")"=TypeDescriptor(4),templateArgsEndFallback=TypeDescriptor(4),","=TypeDescriptor(4),templateArgsEnd=TypeDescriptor(4),"..."=TypeDescriptor(4),";"=TypeDescriptor(4) | ParameterList=s1289
823: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,_anon-3 -> expression ·,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112,templateArgsEndFallback=_anon-3(1),","=_anon-3(1),templateArgsEnd=_anon-3(1) | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
824: _anon-2 -> TypeDescriptor ·,ParameterPackExpansion-1 -> TypeDescriptor · "..."
  "..."=s928,templateArgsEndFallback=_anon-2(1),","=_anon-2(1),templateArgsEnd=_anon-2(1)
825: ("," (_anon[@dynamicPrecedence=3] { TypeDescriptor } | ParameterPackExpansion[@dynamicPrecedence=2] { TypeDescriptor "..." } | _anon[@dynamicPrecedence=1] { expression }))+ -> "," _anon-2 ·,("," (_anon[@dynamicPrecedence=3] { TypeDescriptor } | ParameterPackExpansion[@dynamicPrecedence=2] { TypeDescriptor "..." } | _anon[@dynamicPrecedence=1] { expression }))+ -> "," ParameterPackExpansion-1 ·,("," (_anon[@dynamicPrecedence=3] { TypeDescriptor } | ParameterPackExpansion[@dynamicPrecedence=2] { TypeDescriptor "..." } | _anon[@dynamicPrecedence=1] { expression }))+ -> "," _anon-3 ·
  always ("," (_anon[@dynamicPrecedence=3] { TypeDescriptor } | ParameterPackExpansion[@dynamicPrecedence=2] { TypeDescriptor "..." } | _anon[@dynamicPrecedence=1] { expression }))+(2)
826: ("," (_anon[@dynamicPrecedence=3] { TypeDescriptor } | ParameterPackExpansion[@dynamicPrecedence=2] { TypeDescriptor "..." } | _anon[@dynamicPrecedence=1] { expression }))+ -> ("," (_anon[@dynamicPrecedence=3] { TypeDescriptor } | ParameterPackExpansion[@dynamicPrecedence=2] { TypeDescriptor "..." } | _anon[@dynamicPrecedence=1] { expression }))+ · ("," (_anon[@dynamicPrecedence=3] { TypeDescriptor } | ParameterPackExpansion[@dynamicPrecedence=2] { TypeDescriptor "..." } | _anon[@dynamicPrecedence=1] { expression }))+,("," (_anon[@dynamicPrecedence=3] { TypeDescriptor } | ParameterPackExpansion[@dynamicPrecedence=2] { TypeDescriptor "..." } | _anon[@dynamicPrecedence=1] { expression }))+ -> ("," (_anon[@dynamicPrecedence=3] { TypeDescriptor } | ParameterPackExpansion[@dynamicPrecedence=2] { TypeDescriptor "..." } | _anon[@dynamicPrecedence=1] { expression }))+ ("," (_anon[@dynamicPrecedence=3] { TypeDescriptor } | ParameterPackExpansion[@dynamicPrecedence=2] { TypeDescriptor "..." } | _anon[@dynamicPrecedence=1] { expression }))+ ·
  always ("," (_anon[@dynamicPrecedence=3] { TypeDescriptor } | ParameterPackExpansion[@dynamicPrecedence=2] { TypeDescriptor "..." } | _anon[@dynamicPrecedence=1] { expression }))+(2)
827: LambdaCaptureSpecifier -> "[" "=" "," commaSep1<expression> "]" ·,LambdaCaptureSpecifier -> "[" "&" "," commaSep1<expression> "]" ·
  always LambdaCaptureSpecifier(5)
828: FieldInitializer -> FieldIdentifier InitializerList "..." ·,FieldInitializer -> FieldIdentifier ArgumentList "..." ·,FieldInitializer -> ScopedFieldIdentifier InitializerList "..." ·,FieldInitializer -> ScopedFieldIdentifier ArgumentList "..." ·
  always FieldInitializer(3)
829: ("," FieldInitializer)+ -> "," FieldInitializer ·
  always ("," FieldInitializer)+(2)
830: ("," FieldInitializer)+ -> ("," FieldInitializer)+ · ("," FieldInitializer)+,("," FieldInitializer)+ -> ("," FieldInitializer)+ ("," FieldInitializer)+ ·
  always ("," FieldInitializer)+(2)
831: ("," (InitializerPair | expression | InitializerList)?)+ -> "," ·,("," (InitializerPair | expression | InitializerList)?)+ -> "," · InitializerPair,("," (InitializerPair | expression | InitializerList)?)+ -> "," · expression,("," (InitializerPair | expression | InitializerList)?)+ -> "," · InitializerList,CommaExpression -> expression "," · expression,CommaExpression -> expression "," · CommaExpression
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"{"=s133,"["=s352,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"."=s353,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54,","=("," (InitializerPair | expression | InitializerList)?)+(1),"}"=("," (InitializerPair | expression | InitializerList)?)+(1) | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,InitializerList=s788,InitializerPair=s788,SubscriptDesignator=s354,FieldDesignator=s354,CommaExpression=s321,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,(SubscriptDesignator | FieldDesignator)+=s355,expression=s929
832: constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ ExplicitFunctionSpecifier FunctionDeclarator-1 FieldInitializerList CompoundStatement ·,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ ExplicitFunctionSpecifier FunctionDeclarator-1 FieldInitializerList DefaultMethodClause ·,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ ExplicitFunctionSpecifier FunctionDeclarator-1 FieldInitializerList DeleteMethodClause ·,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ identifier/"virtual" FunctionDeclarator-1 FieldInitializerList CompoundStatement ·,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ identifier/"virtual" FunctionDeclarator-1 FieldInitializerList DefaultMethodClause ·,constructorOrDestructorDefinition -> (storageClassSpecifier | typeQualifier | AttributeSpecifier)+ identifier/"virtual" FunctionDeclarator-1 FieldInitializerList DeleteMethodClause ·
  always constructorOrDestructorDefinition(5)
833: operatorCastDeclaration -> ExplicitFunctionSpecifier OperatorCast "=" expression ";" ·,operatorCastDeclaration -> identifier/"virtual" OperatorCast "=" expression ";" ·
  always operatorCastDeclaration(5)
834: AbstractFunctionDeclarator -> abstractDeclarator ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+ TrailingReturnType ·
  always AbstractFunctionDeclarator(4)
835: AbstractArrayDeclarator -> "[" typeQualifier+ expression "]" ·,AbstractArrayDeclarator -> "[" typeQualifier+ "*" "]" ·,AbstractArrayDeclarator -> abstractDeclarator "[" expression "]" ·,AbstractArrayDeclarator -> abstractDeclarator "[" "*" "]" ·,AbstractArrayDeclarator -> abstractDeclarator "[" typeQualifier+ "]" ·
  always AbstractArrayDeclarator(4)
836: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,AbstractArrayDeclarator -> abstractDeclarator "[" typeQualifier+ expression · "]",FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,"]"=s930,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112 | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
837: AbstractArrayDeclarator -> abstractDeclarator "[" typeQualifier+ "*" · "]",PointerExpression -> "*" · expression
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s193,"]"=s930,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s154
838: AliasDeclaration -> identifier/"using" TypeIdentifier "=" TypeDescriptor ";" ·
  always AliasDeclaration(5)
839: InitDeclarator -> declarator "=" · InitializerList,InitDeclarator -> declarator "=" · expression,Declaration-1 -> declarationSpecifiers declarator "=" · expression
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"{"=s133,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,InitializerList=s656,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s931
840: InitDeclarator -> declarator InitializerList ·,Declaration-1 -> declarationSpecifiers declarator InitializerList ·
  ")"=Declaration-1(3),","=InitDeclarator(2),";"=InitDeclarator(2)
841: ConditionClause -> "(" Declaration expression ")" ·,ConditionClause -> "(" Declaration CommaExpression ")" ·,ConditionClause -> "(" ExpressionStatement expression ")" ·,ConditionClause -> "(" ExpressionStatement CommaExpression ")" ·
  always ConditionClause(4)
842: IfStatement -> identifier/"if" ConditionClause statement identifier/"else" statement ·
  always IfStatement(5)
843: IfStatement -> identifier/"if" identifier/"constexpr" ConditionClause statement identifier/"else" · statement
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"{"=s45,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"throw"=s78,identifier/"case"=s75,identifier/"default"=s76,identifier/"if"=s65,identifier/"switch"=s66,identifier/"do"=s67,identifier/"while"=s68,identifier/"for"=s69,identifier/"return"=s70,identifier/"break"=s71,identifier/"continue"=s72,identifier/"goto"=s73,identifier/"try"=s77,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s1017,"*"=s191,"&"=s191,";"=s31,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,CompoundStatement=s33,CaseStatement=s34,LabeledStatement=s33,StatementIdentifier=s30,ExpressionStatement=s33,CommaExpression=s32,IfStatement=s33,SwitchStatement=s33,DoStatement=s33,ParenthesizedExpression=s50,WhileStatement=s33,ForStatement=s33,ReturnStatement=s33,BreakStatement=s33,ContinueStatement=s33,GotoStatement=s33,ForRangeLoop=s34,TryStatement=s34,ThrowStatement=s34,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s4,statement=s932,nonCaseStatement=s34
844: DoStatement -> identifier/"do" statement identifier/"while" ParenthesizedExpression ";" ·
  always DoStatement(5)
845: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "...",ForStatement -> identifier/"for" "(" expression ";" expression · ";" ")" statement,ForStatement -> identifier/"for" "(" expression ";" expression · ";" expression ")" statement,ForStatement -> identifier/"for" "(" expression ";" expression · ";" CommaExpression ")" statement,ForStatement -> identifier/"for" "(" CommaExpression ";" expression · ";" ")" statement,ForStatement -> identifier/"for" "(" CommaExpression ";" expression · ";" expression ")" statement,ForStatement -> identifier/"for" "(" CommaExpression ";" expression · ";" CommaExpression ")" statement
  "("=s124,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112,";"=s933 | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
846: ForStatement -> identifier/"for" "(" Declaration expression ";" · ")" statement,ForStatement -> identifier/"for" "(" Declaration expression ";" · expression ")" statement,ForStatement -> identifier/"for" "(" Declaration expression ";" · CommaExpression ")" statement,ForStatement -> identifier/"for" "(" ";" expression ";" · ")" statement,ForStatement -> identifier/"for" "(" ";" expression ";" · expression ")" statement,ForStatement -> identifier/"for" "(" ";" expression ";" · CommaExpression ")" statement,ForStatement -> identifier/"for" "(" expression ";" ";" · ")" statement,ForStatement -> identifier/"for" "(" expression ";" ";" · expression ")" statement,ForStatement -> identifier/"for" "(" expression ";" ";" · CommaExpression ")" statement,ForStatement -> identifier/"for" "(" CommaExpression ";" ";" · ")" statement,ForStatement -> identifier/"for" "(" CommaExpression ";" ";" · expression ")" statement,ForStatement -> identifier/"for" "(" CommaExpression ";" ";" · CommaExpression ")" statement
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,")"=s935,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,CommaExpression=s936,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s934
847: ForRangeLoop -> identifier/"for" "(" declarationSpecifiers declarator ":" · expression ")" statement,ForRangeLoop -> identifier/"for" "(" declarationSpecifiers declarator ":" · InitializerList ")" statement
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"{"=s133,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,InitializerList=s938,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s937
848: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,CommaExpression -> expression · "," expression,CommaExpression -> expression · "," CommaExpression,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "...",ForStatement -> identifier/"for" "(" Declaration ";" expression · ")" statement,ForStatement -> identifier/"for" "(" ";" ";" expression · ")" statement
  "("=s124,")"=s935,","=s106,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112 | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
849: ForStatement -> identifier/"for" "(" Declaration ";" ")" · statement,ForStatement -> identifier/"for" "(" ";" ";" ")" · statement
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"{"=s45,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"throw"=s78,identifier/"case"=s75,identifier/"default"=s76,identifier/"if"=s65,identifier/"switch"=s66,identifier/"do"=s67,identifier/"while"=s68,identifier/"for"=s69,identifier/"return"=s70,identifier/"break"=s71,identifier/"continue"=s72,identifier/"goto"=s73,identifier/"try"=s77,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s1017,"*"=s191,"&"=s191,";"=s31,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,CompoundStatement=s33,CaseStatement=s34,LabeledStatement=s33,StatementIdentifier=s30,ExpressionStatement=s33,CommaExpression=s32,IfStatement=s33,SwitchStatement=s33,DoStatement=s33,ParenthesizedExpression=s50,WhileStatement=s33,ForStatement=s33,ReturnStatement=s33,BreakStatement=s33,ContinueStatement=s33,GotoStatement=s33,ForRangeLoop=s34,TryStatement=s34,ThrowStatement=s34,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s4,statement=s939,nonCaseStatement=s34
850: ForStatement -> identifier/"for" "(" Declaration ";" CommaExpression · ")" statement,ForStatement -> identifier/"for" "(" ";" ";" CommaExpression · ")" statement
  ")"=s935
851: TypeDefinition -> identifier/"typedef" typeQualifier+ typeSpecifier commaSep1<typeDeclarator> ";" ·
  always TypeDefinition(5)
852: PointerDeclarator-2 -> "*" typeQualifier+ typeDeclarator ·,PointerDeclarator-2 -> "*" msPointerModifier+ typeDeclarator ·,PointerDeclarator-2 -> MsBasedModifier "*" typeDeclarator ·,FunctionDeclarator-2 -> typeDeclarator · ParameterList,ArrayDeclarator-2 -> typeDeclarator · "[" "]",ArrayDeclarator-2 -> typeDeclarator · "[" expression "]",ArrayDeclarator-2 -> typeDeclarator · "[" "*" "]",ArrayDeclarator-2 -> typeDeclarator · "[" typeQualifier+ "]",ArrayDeclarator-2 -> typeDeclarator · "[" typeQualifier+ expression "]",ArrayDeclarator-2 -> typeDeclarator · "[" typeQualifier+ "*" "]"
  "("=s169,"["=s698,","=PointerDeclarator-2(3),";"=PointerDeclarator-2(3),")"=PointerDeclarator-2(3) | ParameterList=s697
853: typeQualifier+ -> typeQualifier+ · typeQualifier+,PointerDeclarator-2 -> "*" msPointerModifier+ typeQualifier+ · typeDeclarator,PointerDeclarator-2 -> MsBasedModifier "*" typeQualifier+ · typeDeclarator
  "("=s484,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"__based"=s63,identifier=s480,"*"=s481 | TypeIdentifier=s485,MsBasedModifier=s482,PointerDeclarator-2=s485,FunctionDeclarator-2=s485,ArrayDeclarator-2=s485,ParenthesizedDeclarator-2=s485,typeQualifier+=s376,typeQualifier=s159,typeDeclarator=s940
854: msPointerModifier+ -> msPointerModifier+ · msPointerModifier+,PointerDeclarator-2 -> MsBasedModifier "*" msPointerModifier+ · typeDeclarator,PointerDeclarator-2 -> MsBasedModifier "*" msPointerModifier+ · typeQualifier+ typeDeclarator
  "("=s484,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"__based"=s63,identifier/"__restrict"=s165,identifier=s480,"*"=s481 | TypeIdentifier=s485,MsBasedModifier=s482,PointerDeclarator-2=s485,FunctionDeclarator-2=s485,ArrayDeclarator-2=s485,ParenthesizedDeclarator-2=s485,typeQualifier+=s941,msPointerModifier+=s379,typeQualifier=s159,typeDeclarator=s940
855: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,ArrayDeclarator-2 -> typeDeclarator "[" expression · "]",FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,"]"=s942,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112 | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
856: typeQualifier+ -> typeQualifier+ · typeQualifier+,ArrayDeclarator-2 -> typeDeclarator "[" typeQualifier+ · "]",ArrayDeclarator-2 -> typeDeclarator "[" typeQualifier+ · expression "]",ArrayDeclarator-2 -> typeDeclarator "[" typeQualifier+ · "*" "]"
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s193,"]"=s942,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s944,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,typeQualifier+=s376,expression=s943,typeQualifier=s159
857: ArrayDeclarator-2 -> typeDeclarator "[" "]" ·
  always ArrayDeclarator-2(3)
858: ArrayDeclarator-2 -> typeDeclarator "[" "*" · "]",PointerExpression -> "*" · expression
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s193,"]"=s942,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s154
859: FunctionDeclarator-2 -> typeDeclarator · ParameterList,ArrayDeclarator-2 -> typeDeclarator · "[" "]",ArrayDeclarator-2 -> typeDeclarator · "[" expression "]",ArrayDeclarator-2 -> typeDeclarator · "[" "*" "]",ArrayDeclarator-2 -> typeDeclarator · "[" typeQualifier+ "]",ArrayDeclarator-2 -> typeDeclarator · "[" typeQualifier+ expression "]",ArrayDeclarator-2 -> typeDeclarator · "[" typeQualifier+ "*" "]",("," typeDeclarator)+ -> "," typeDeclarator ·
  "("=s169,"["=s698,","=("," typeDeclarator)+(2),";"=("," typeDeclarator)+(2) | ParameterList=s697
860: ("," typeDeclarator)+ -> ("," typeDeclarator)+ · ("," typeDeclarator)+,("," typeDeclarator)+ -> ("," typeDeclarator)+ ("," typeDeclarator)+ ·
  always ("," typeDeclarator)+(2)
861: ParenthesizedDeclarator-2 -> "(" typeDeclarator ")" ·
  always ParenthesizedDeclarator-2(3)
862: CatchClause -> identifier/"catch" ParameterList CompoundStatement ·
  always CatchClause(3)
863: StaticAssertDeclaration -> identifier/"static_assert" "(" expression ")" ";" ·
  always StaticAssertDeclaration(5)
864: ConcatenatedString -> RawString · (RawString | String)+,ConcatenatedString -> String · (RawString | String)+,StaticAssertDeclaration -> identifier/"static_assert" "(" expression "," String · ")" ";",StaticAssertDeclaration -> identifier/"static_assert" "(" expression "," RawString · ")" ";"
  RawString=s205,")"=s945,stringLiteralStart=s2 | String=s205,(RawString | String)+=s206
865: StaticAssertDeclaration -> identifier/"static_assert" "(" expression "," ConcatenatedString · ")" ";"
  ")"=s945
866: ("," templateParameter)+ -> "," templateParameter ·
  always ("," templateParameter)+(2)
867: ("," templateParameter)+ -> ("," templateParameter)+ · ("," templateParameter)+,("," templateParameter)+ -> ("," templateParameter)+ ("," templateParameter)+ ·
  always ("," templateParameter)+(2)
868: OptionalTypeParameterDeclaration -> identifier/"typename" TypeIdentifier "=" · typeSpecifier,OptionalTypeParameterDeclaration -> identifier/"class" TypeIdentifier "=" · typeSpecifier
  identifier/"bool"=s48,"::"=s141,identifier/"struct"=s1019,identifier/"typename"=s1027,identifier/"class"=s1026,identifier/"union"=s1021,identifier/"enum"=s1023,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeSpecifier=s946
869: OptionalTypeParameterDeclaration -> identifier/"typename" "=" typeSpecifier ·,OptionalTypeParameterDeclaration -> identifier/"class" "=" typeSpecifier ·
  always OptionalTypeParameterDeclaration(3)
870: VariadicTypeParameterDeclaration -> identifier/"typename" "..." TypeIdentifier ·,VariadicTypeParameterDeclaration -> identifier/"class" "..." TypeIdentifier ·
  always VariadicTypeParameterDeclaration(3)
871: TypeParameterDeclaration -> identifier/"typename" ·,TypeParameterDeclaration -> identifier/"typename" · TypeIdentifier,TypeParameterDeclaration -> identifier/"class" ·,TypeParameterDeclaration -> identifier/"class" · TypeIdentifier,OptionalTypeParameterDeclaration -> identifier/"typename" · "=" typeSpecifier,OptionalTypeParameterDeclaration -> identifier/"typename" · TypeIdentifier "=" typeSpecifier,OptionalTypeParameterDeclaration -> identifier/"class" · "=" typeSpecifier,OptionalTypeParameterDeclaration -> identifier/"class" · TypeIdentifier "=" typeSpecifier,VariadicTypeParameterDeclaration -> identifier/"typename" · "...",VariadicTypeParameterDeclaration -> identifier/"typename" · "..." TypeIdentifier,VariadicTypeParameterDeclaration -> identifier/"class" · "...",VariadicTypeParameterDeclaration -> identifier/"class" · "..." TypeIdentifier
  identifier=s480,"..."=s717,"="=s716,templateArgsEndFallback=TypeParameterDeclaration(1),","=TypeParameterDeclaration(1),templateArgsEnd=TypeParameterDeclaration(1) | TypeIdentifier=s947
872: TemplateTemplateParameterDeclaration -> identifier/"template" TemplateParameterList TypeParameterDeclaration ·,TemplateTemplateParameterDeclaration -> identifier/"template" TemplateParameterList VariadicTypeParameterDeclaration ·,TemplateTemplateParameterDeclaration -> identifier/"template" TemplateParameterList OptionalTypeParameterDeclaration ·
  always TemplateTemplateParameterDeclaration(3)
873: ("," access? className "..."?)+ -> "," className ·,("," access? className "..."?)+ -> "," className · "..."
  "..."=s948,","=("," access? className "..."?)+(2),"{"=("," access? className "..."?)+(2)
874: ("," access? className "..."?)+ -> "," identifier/"public" · className,("," access? className "..."?)+ -> "," identifier/"public" · className "..."
  "::"=s141,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s402,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,className=s949
875: ("," access? className "..."?)+ -> ("," access? className "..."?)+ · ("," access? className "..."?)+,("," access? className "..."?)+ -> ("," access? className "..."?)+ ("," access? className "..."?)+ ·
  always ("," access? className "..."?)+(2)
876: ("," access? className "..."?)+ -> ("," access? className "..."?)+ · ("," access? className "..."?)+,commaSep1<access? className "..."?> -> className "..." ("," access? className "..."?)+ ·,commaSep1<access? className "..."?> -> identifier/"public" className ("," access? className "..."?)+ ·
  ","=s723,"{"=commaSep1<access? className "..."?>(3) | ("," access? className "..."?)+=s875
877: commaSep1<access? className "..."?> -> identifier/"public" className "..." ·,commaSep1<access? className "..."?> -> identifier/"public" className "..." · ("," access? className "..."?)+
  ","=s723,"{"=commaSep1<access? className "..."?>(3) | ("," access? className "..."?)+=s950
878: FunctionDeclarator -> fieldDeclarator · ParameterList,FunctionDeclarator -> fieldDeclarator · ParameterList (typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType)+,ArrayDeclarator-1 -> fieldDeclarator · "[" "]",ArrayDeclarator-1 -> fieldDeclarator · "[" expression "]",ArrayDeclarator-1 -> fieldDeclarator · "[" "*" "]",ArrayDeclarator-1 -> fieldDeclarator · "[" typeQualifier+ "]",ArrayDeclarator-1 -> fieldDeclarator · "[" typeQualifier+ expression "]",ArrayDeclarator-1 -> fieldDeclarator · "[" typeQualifier+ "*" "]",FieldDeclaration -> Attribute+ declarationSpecifiers fieldDeclarator · ";",FieldDeclaration -> Attribute+ declarationSpecifiers fieldDeclarator · BitfieldClause ";",FieldDeclaration -> Attribute+ declarationSpecifiers fieldDeclarator · InitializerList ";",FieldDeclaration -> Attribute+ declarationSpecifiers fieldDeclarator · "=" expression ";",FieldDeclaration -> Attribute+ declarationSpecifiers fieldDeclarator · "=" InitializerList ";",FieldDeclaration -> Attribute+ declarationSpecifiers fieldDeclarator · ("," fieldDeclarator)+ ";",FieldDeclaration -> Attribute+ declarationSpecifiers fieldDeclarator · ("," fieldDeclarator)+ BitfieldClause ";",FieldDeclaration -> Attribute+ declarationSpecifiers fieldDeclarator · ("," fieldDeclarator)+ InitializerList ";",FieldDeclaration -> Attribute+ declarationSpecifiers fieldDeclarator · ("," fieldDeclarator)+ "=" expression ";",FieldDeclaration -> Attribute+ declarationSpecifiers fieldDeclarator · ("," fieldDeclarator)+ "=" InitializerList ";",FunctionDefinition-5 -> Attribute+ declarationSpecifiers fieldDeclarator · CompoundStatement,FunctionDefinition-5 -> Attribute+ declarationSpecifiers fieldDeclarator · DefaultMethodClause,FunctionDefinition-5 -> Attribute+ declarationSpecifiers fieldDeclarator · DeleteMethodClause,FieldDeclaration -> identifier/"virtual" declarationSpecifiers fieldDeclarator · ";",FieldDeclaration -> identifier/"virtual" declarationSpecifiers fieldDeclarator · BitfieldClause ";",FieldDeclaration -> identifier/"virtual" declarationSpecifiers fieldDeclarator · InitializerList ";",FieldDeclaration -> identifier/"virtual" declarationSpecifiers fieldDeclarator · "=" expression ";",FieldDeclaration -> identifier/"virtual" declarationSpecifiers fieldDeclarator · "=" InitializerList ";",FieldDeclaration -> identifier/"virtual" declarationSpecifiers fieldDeclarator · ("," fieldDeclarator)+ ";",FieldDeclaration -> identifier/"virtual" declarationSpecifiers fieldDeclarator · ("," fieldDeclarator)+ BitfieldClause ";",FieldDeclaration -> identifier/"virtual" declarationSpecifiers fieldDeclarator · ("," fieldDeclarator)+ InitializerList ";",FieldDeclaration -> identifier/"virtual" declarationSpecifiers fieldDeclarator · ("," fieldDeclarator)+ "=" expression ";",FieldDeclaration -> identifier/"virtual" declarationSpecifiers fieldDeclarator · ("," fieldDeclarator)+ "=" InitializerList ";",FunctionDefinition-5 -> identifier/"virtual" declarationSpecifiers fieldDeclarator · CompoundStatement,FunctionDefinition-5 -> identifier/"virtual" declarationSpecifiers fieldDeclarator · DefaultMethodClause,FunctionDefinition-5 -> identifier/"virtual" declarationSpecifiers fieldDeclarator · DeleteMethodClause
  "("=s169,","=s889,"{"=s422,"["=s888,":"=s737,";"=s952,"="=s954 | ParameterList=s887,BitfieldClause=s953,InitializerList=s953,CompoundStatement=s955,DefaultMethodClause=s955,DeleteMethodClause=s955,("," fieldDeclarator)+=s951
879: FieldDeclaration -> declarationSpecifiers BitfieldClause ";" ·,FieldDeclaration -> declarationSpecifiers InitializerList ";" ·,FieldDeclaration -> declarationSpecifiers fieldDeclarator ";" ·,FieldDeclaration -> Attribute+ declarationSpecifiers ";" ·,FieldDeclaration -> identifier/"virtual" declarationSpecifiers ";" ·
  always FieldDeclaration(3)
880: FieldDeclaration -> declarationSpecifiers "=" InitializerList · ";",FieldDeclaration -> declarationSpecifiers fieldDeclarator BitfieldClause · ";",FieldDeclaration -> declarationSpecifiers fieldDeclarator InitializerList · ";",FieldDeclaration -> Attribute+ declarationSpecifiers BitfieldClause · ";",FieldDeclaration -> Attribute+ declarationSpecifiers InitializerList · ";",FieldDeclaration -> identifier/"virtual" declarationSpecifiers BitfieldClause · ";",FieldDeclaration -> identifier/"virtual" declarationSpecifiers InitializerList · ";"
  ";"=s952
881: FieldDeclaration -> Attribute+ declarationSpecifiers "=" · expression ";",FieldDeclaration -> Attribute+ declarationSpecifiers "=" · InitializerList ";",FieldDeclaration -> identifier/"virtual" declarationSpecifiers "=" · expression ";",FieldDeclaration -> identifier/"virtual" declarationSpecifiers "=" · InitializerList ";"
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"{"=s133,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,InitializerList=s953,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s956
882: FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers · ";",FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers · BitfieldClause ";",FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers · InitializerList ";",FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers · "=" expression ";",FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers · "=" InitializerList ";",FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers · fieldDeclarator ";",FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers · fieldDeclarator BitfieldClause ";",FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers · fieldDeclarator InitializerList ";",FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers · fieldDeclarator "=" expression ";",FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers · fieldDeclarator "=" InitializerList ";",FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers · fieldDeclarator ("," fieldDeclarator)+ ";",FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers · fieldDeclarator ("," fieldDeclarator)+ BitfieldClause ";",FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers · fieldDeclarator ("," fieldDeclarator)+ InitializerList ";",FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers · fieldDeclarator ("," fieldDeclarator)+ "=" expression ";",FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers · fieldDeclarator ("," fieldDeclarator)+ "=" InitializerList ";",FunctionDefinition-5 -> Attribute+ identifier/"virtual" declarationSpecifiers · fieldDeclarator CompoundStatement,FunctionDefinition-5 -> Attribute+ identifier/"virtual" declarationSpecifiers · fieldDeclarator DefaultMethodClause,FunctionDefinition-5 -> Attribute+ identifier/"virtual" declarationSpecifiers · fieldDeclarator DeleteMethodClause
  "("=s733,"::"=s323,"{"=s133,identifier/"__based"=s63,OperatorName=s735,identifier=s322,":"=s737,"*"=s730,"&&"=s734,"&"=s734,";"=s952,"="=s958 | FieldIdentifier=s736,TemplateMethod=s735,ScopedFieldIdentifier=s326,NamespaceIdentifier=s324,TemplateType=s324,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s324,PointerDeclarator=s735,MsBasedModifier=s731,FunctionDeclarator=s735,ArrayDeclarator-1=s735,ParenthesizedDeclarator-1=s735,ReferenceDeclarator-2=s735,BitfieldClause=s953,InitializerList=s953,fieldDeclarator=s957
883: typeQualifier+ -> typeQualifier+ · typeQualifier+,PointerDeclarator -> "*" typeQualifier+ · fieldDeclarator
  "("=s733,"::"=s323,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"__based"=s63,OperatorName=s735,identifier=s322,"*"=s730,"&&"=s734,"&"=s734 | FieldIdentifier=s736,TemplateMethod=s735,ScopedFieldIdentifier=s326,NamespaceIdentifier=s324,TemplateType=s324,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s324,PointerDeclarator=s735,MsBasedModifier=s731,FunctionDeclarator=s735,ArrayDeclarator-1=s735,ParenthesizedDeclarator-1=s735,ReferenceDeclarator-2=s735,typeQualifier+=s376,typeQualifier=s159,fieldDeclarator=s959
884: msPointerModifier+ -> msPointerModifier+ · msPointerModifier+,PointerDeclarator -> "*" msPointerModifier+ · fieldDeclarator,PointerDeclarator -> "*" msPointerModifier+ · typeQualifier+ fieldDeclarator
  "("=s733,"::"=s323,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"__based"=s63,identifier/"__restrict"=s165,OperatorName=s735,identifier=s322,"*"=s730,"&&"=s734,"&"=s734 | FieldIdentifier=s736,TemplateMethod=s735,ScopedFieldIdentifier=s326,NamespaceIdentifier=s324,TemplateType=s324,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s324,PointerDeclarator=s735,MsBasedModifier=s731,FunctionDeclarator=s735,ArrayDeclarator-1=s735,ParenthesizedDeclarator-1=s735,ReferenceDeclarator-2=s735,typeQualifier+=s960,msPointerModifier+=s379,typeQualifier=s159,fieldDeclarator=s959
885: PointerDeclarator -> "*" fieldDeclarator ·,FunctionDeclarator -> fieldDeclarator · ParameterList,FunctionDeclarator -> fieldDeclarator · ParameterList (typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType)+,ArrayDeclarator-1 -> fieldDeclarator · "[" "]",ArrayDeclarator-1 -> fieldDeclarator · "[" expression "]",ArrayDeclarator-1 -> fieldDeclarator · "[" "*" "]",ArrayDeclarator-1 -> fieldDeclarator · "[" typeQualifier+ "]",ArrayDeclarator-1 -> fieldDeclarator · "[" typeQualifier+ expression "]",ArrayDeclarator-1 -> fieldDeclarator · "[" typeQualifier+ "*" "]"
  "("=s169,"["=s888,","=PointerDeclarator(2),"{"=PointerDeclarator(2),":"=PointerDeclarator(2),";"=PointerDeclarator(2),"="=PointerDeclarator(2) | ParameterList=s887
886: PointerDeclarator -> MsBasedModifier "*" · fieldDeclarator,PointerDeclarator -> MsBasedModifier "*" · typeQualifier+ fieldDeclarator,PointerDeclarator -> MsBasedModifier "*" · msPointerModifier+ fieldDeclarator,PointerDeclarator -> MsBasedModifier "*" · msPointerModifier+ typeQualifier+ fieldDeclarator
  "("=s733,"::"=s323,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"__based"=s63,identifier/"__restrict"=s165,OperatorName=s735,identifier=s322,"*"=s730,"&&"=s734,"&"=s734 | FieldIdentifier=s736,TemplateMethod=s735,ScopedFieldIdentifier=s326,NamespaceIdentifier=s324,TemplateType=s324,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s324,PointerDeclarator=s735,MsBasedModifier=s731,FunctionDeclarator=s735,ArrayDeclarator-1=s735,ParenthesizedDeclarator-1=s735,ReferenceDeclarator-2=s735,typeQualifier+=s960,msPointerModifier+=s961,typeQualifier=s159,fieldDeclarator=s959
887: FunctionDeclarator -> fieldDeclarator ParameterList ·,FunctionDeclarator -> fieldDeclarator ParameterList · (typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType)+
  identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"final"=s962,identifier/"noexcept"=s386,identifier/"throw"=s387,"->"=s383,"("=FunctionDeclarator(2),","=FunctionDeclarator(2),"{"=FunctionDeclarator(2),"["=FunctionDeclarator(2),":"=FunctionDeclarator(2),";"=FunctionDeclarator(2),"="=FunctionDeclarator(2) | Noexcept=s962,ThrowSpecifier=s962,TrailingReturnType=s962,(typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType)+=s963,typeQualifier=s962
888: ArrayDeclarator-1 -> fieldDeclarator "[" · "]",ArrayDeclarator-1 -> fieldDeclarator "[" · expression "]",ArrayDeclarator-1 -> fieldDeclarator "[" · "*" "]",ArrayDeclarator-1 -> fieldDeclarator "[" · typeQualifier+ "]",ArrayDeclarator-1 -> fieldDeclarator "[" · typeQualifier+ expression "]",ArrayDeclarator-1 -> fieldDeclarator "[" · typeQualifier+ "*" "]"
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s193,"]"=s966,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s967,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,typeQualifier+=s965,expression=s964,typeQualifier=s159
889: ("," fieldDeclarator)+ -> "," · fieldDeclarator
  "("=s733,"::"=s323,identifier/"__based"=s63,OperatorName=s735,identifier=s322,"*"=s730,"&&"=s734,"&"=s734 | FieldIdentifier=s736,TemplateMethod=s735,ScopedFieldIdentifier=s326,NamespaceIdentifier=s324,TemplateType=s324,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s324,PointerDeclarator=s735,MsBasedModifier=s731,FunctionDeclarator=s735,ArrayDeclarator-1=s735,ParenthesizedDeclarator-1=s735,ReferenceDeclarator-2=s735,fieldDeclarator=s968
890: ("," fieldDeclarator)+ -> ("," fieldDeclarator)+ · ("," fieldDeclarator)+,FieldDeclaration -> declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ · ";",FieldDeclaration -> declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ · BitfieldClause ";",FieldDeclaration -> declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ · InitializerList ";",FieldDeclaration -> declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ · "=" expression ";",FieldDeclaration -> declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ · "=" InitializerList ";"
  ","=s889,"{"=s133,":"=s737,";"=s952,"="=s958 | BitfieldClause=s953,InitializerList=s953,("," fieldDeclarator)+=s969
891: FieldDeclaration -> declarationSpecifiers fieldDeclarator "=" · expression ";",FieldDeclaration -> declarationSpecifiers fieldDeclarator "=" · InitializerList ";",DefaultMethodClause -> "=" · identifier/"default" ";",DeleteMethodClause -> "=" · identifier/"delete" ";"
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"{"=s133,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"default"=s419,identifier/"delete"=s438,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,InitializerList=s953,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s956
892: FunctionDefinition-5 -> declarationSpecifiers fieldDeclarator CompoundStatement ·,FunctionDefinition-5 -> declarationSpecifiers fieldDeclarator DefaultMethodClause ·,FunctionDefinition-5 -> declarationSpecifiers fieldDeclarator DeleteMethodClause ·
  always FunctionDefinition-5(3)
893: FunctionDeclarator -> fieldDeclarator · ParameterList,FunctionDeclarator -> fieldDeclarator · ParameterList (typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType)+,ArrayDeclarator-1 -> fieldDeclarator · "[" "]",ArrayDeclarator-1 -> fieldDeclarator · "[" expression "]",ArrayDeclarator-1 -> fieldDeclarator · "[" "*" "]",ArrayDeclarator-1 -> fieldDeclarator · "[" typeQualifier+ "]",ArrayDeclarator-1 -> fieldDeclarator · "[" typeQualifier+ expression "]",ArrayDeclarator-1 -> fieldDeclarator · "[" typeQualifier+ "*" "]",ParenthesizedDeclarator-1 -> "(" fieldDeclarator · ")"
  "("=s169,")"=s970,"["=s888 | ParameterList=s1180
894: FunctionDeclarator -> fieldDeclarator · ParameterList,FunctionDeclarator -> fieldDeclarator · ParameterList (typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType)+,ArrayDeclarator-1 -> fieldDeclarator · "[" "]",ArrayDeclarator-1 -> fieldDeclarator · "[" expression "]",ArrayDeclarator-1 -> fieldDeclarator · "[" "*" "]",ArrayDeclarator-1 -> fieldDeclarator · "[" typeQualifier+ "]",ArrayDeclarator-1 -> fieldDeclarator · "[" typeQualifier+ expression "]",ArrayDeclarator-1 -> fieldDeclarator · "[" typeQualifier+ "*" "]",ReferenceDeclarator-2 -> "&" fieldDeclarator ·,ReferenceDeclarator-2 -> "&&" fieldDeclarator ·
  "("=s169,"["=s888,","=ReferenceDeclarator-2(2),"{"=ReferenceDeclarator-2(2),":"=ReferenceDeclarator-2(2),";"=ReferenceDeclarator-2(2),"="=ReferenceDeclarator-2(2) | ParameterList=s887
895: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,BitfieldClause -> ":" expression ·,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112,";"=BitfieldClause(2) | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
896: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldDeclaration -> declarationSpecifiers "=" expression · ";",FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112,";"=s952 | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
897: Declaration-3 -> ExplicitFunctionSpecifier FunctionDeclarator-1 ";" ·,Declaration-3 -> identifier/"virtual" FunctionDeclarator-1 ";" ·
  always Declaration-3(3)
898: FriendDeclaration -> identifier/"friend" className ";" ·
  always FriendDeclaration(3)
899: FriendDeclaration -> identifier/"friend" identifier/"class" className · ";",ClassSpecifier -> identifier/"class" className ·,ClassSpecifier -> identifier/"class" className · FieldDeclarationList,ClassSpecifier -> identifier/"class" className · BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" className · identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" className · identifier/"final" BaseClassClause FieldDeclarationList
  identifier/"final"=s553,"{"=s281,":"=s280,";"=s971,"("=ClassSpecifier(2),DestructorName=ClassSpecifier(2),"::"=ClassSpecifier(2),identifier/"const"=ClassSpecifier(2),identifier/"volatile"=ClassSpecifier(2),identifier/"restrict"=ClassSpecifier(2),identifier/"_Atomic"=ClassSpecifier(2),identifier/"mutable"=ClassSpecifier(2),identifier/"constexpr"=ClassSpecifier(2),identifier/"__declspec"=ClassSpecifier(2),"["=ClassSpecifier(2),identifier/"extern"=ClassSpecifier(2),identifier/"static"=ClassSpecifier(2),identifier/"register"=ClassSpecifier(2),identifier/"inline"=ClassSpecifier(2),identifier/"__attribute__"=ClassSpecifier(2),identifier/"__based"=ClassSpecifier(2),OperatorName=ClassSpecifier(2),identifier=ClassSpecifier(2),"*"=ClassSpecifier(2),"&&"=ClassSpecifier(2),"&"=ClassSpecifier(2) | BaseClassClause=s552,FieldDeclarationList=s551
900: FriendDeclaration -> identifier/"friend" identifier/"struct" className · ";",StructSpecifier -> identifier/"struct" className ·,StructSpecifier -> identifier/"struct" className · FieldDeclarationList,StructSpecifier -> identifier/"struct" className · BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" className · identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" className · identifier/"final" BaseClassClause FieldDeclarationList
  identifier/"final"=s538,"{"=s281,":"=s280,";"=s971,"("=StructSpecifier(2),DestructorName=StructSpecifier(2),"::"=StructSpecifier(2),identifier/"const"=StructSpecifier(2),identifier/"volatile"=StructSpecifier(2),identifier/"restrict"=StructSpecifier(2),identifier/"_Atomic"=StructSpecifier(2),identifier/"mutable"=StructSpecifier(2),identifier/"constexpr"=StructSpecifier(2),identifier/"__declspec"=StructSpecifier(2),"["=StructSpecifier(2),identifier/"extern"=StructSpecifier(2),identifier/"static"=StructSpecifier(2),identifier/"register"=StructSpecifier(2),identifier/"inline"=StructSpecifier(2),identifier/"__attribute__"=StructSpecifier(2),identifier/"__based"=StructSpecifier(2),OperatorName=StructSpecifier(2),identifier=StructSpecifier(2),"*"=StructSpecifier(2),"&&"=StructSpecifier(2),"&"=StructSpecifier(2) | BaseClassClause=s537,FieldDeclarationList=s536
901: FriendDeclaration -> identifier/"friend" identifier/"union" className · ";",UnionSpecifier -> identifier/"union" className ·,UnionSpecifier -> identifier/"union" className · FieldDeclarationList,UnionSpecifier -> identifier/"union" className · BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" className · identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" className · identifier/"final" BaseClassClause FieldDeclarationList
  identifier/"final"=s542,"{"=s281,":"=s280,";"=s971,"("=UnionSpecifier(2),DestructorName=UnionSpecifier(2),"::"=UnionSpecifier(2),identifier/"const"=UnionSpecifier(2),identifier/"volatile"=UnionSpecifier(2),identifier/"restrict"=UnionSpecifier(2),identifier/"_Atomic"=UnionSpecifier(2),identifier/"mutable"=UnionSpecifier(2),identifier/"constexpr"=UnionSpecifier(2),identifier/"__declspec"=UnionSpecifier(2),"["=UnionSpecifier(2),identifier/"extern"=UnionSpecifier(2),identifier/"static"=UnionSpecifier(2),identifier/"register"=UnionSpecifier(2),identifier/"inline"=UnionSpecifier(2),identifier/"__attribute__"=UnionSpecifier(2),identifier/"__based"=UnionSpecifier(2),OperatorName=UnionSpecifier(2),identifier=UnionSpecifier(2),"*"=UnionSpecifier(2),"&&"=UnionSpecifier(2),"&"=UnionSpecifier(2) | BaseClassClause=s541,FieldDeclarationList=s540
902: StructSpecifier -> identifier/"struct" className identifier/"final" BaseClassClause FieldDeclarationList ·,StructSpecifier -> identifier/"struct" MsDeclspecModifier identifier/"final" BaseClassClause FieldDeclarationList ·,StructSpecifier -> identifier/"struct" MsDeclspecModifier className BaseClassClause FieldDeclarationList ·,StructSpecifier -> identifier/"struct" MsDeclspecModifier className identifier/"final" FieldDeclarationList ·
  always StructSpecifier(5)
903: StructSpecifier -> identifier/"struct" MsDeclspecModifier className identifier/"final" BaseClassClause · FieldDeclarationList
  "{"=s281 | FieldDeclarationList=s972
904: UnionSpecifier -> identifier/"union" className identifier/"final" BaseClassClause FieldDeclarationList ·,UnionSpecifier -> identifier/"union" MsDeclspecModifier identifier/"final" BaseClassClause FieldDeclarationList ·,UnionSpecifier -> identifier/"union" MsDeclspecModifier className BaseClassClause FieldDeclarationList ·,UnionSpecifier -> identifier/"union" MsDeclspecModifier className identifier/"final" FieldDeclarationList ·
  always UnionSpecifier(5)
905: UnionSpecifier -> identifier/"union" MsDeclspecModifier className identifier/"final" BaseClassClause · FieldDeclarationList
  "{"=s281 | FieldDeclarationList=s973
906: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,Enumerator -> Identifier "=" expression ·,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112,","=Enumerator(3),"}"=Enumerator(3) | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
907: ("," Enumerator?)+ -> "," Enumerator ·
  always ("," Enumerator?)+(2)
908: ("," Enumerator?)+ -> ("," Enumerator?)+ · ("," Enumerator?)+,("," Enumerator?)+ -> ("," Enumerator?)+ ("," Enumerator?)+ ·
  always ("," Enumerator?)+(2)
909: EnumSpecifier -> identifier/"enum" identifier/"class" className enumBaseClause EnumeratorList ·,EnumSpecifier -> identifier/"enum" identifier/"struct" className enumBaseClause EnumeratorList ·
  always EnumSpecifier(5)
910: ClassSpecifier -> identifier/"class" className identifier/"final" BaseClassClause FieldDeclarationList ·,ClassSpecifier -> identifier/"class" MsDeclspecModifier identifier/"final" BaseClassClause FieldDeclarationList ·,ClassSpecifier -> identifier/"class" MsDeclspecModifier className BaseClassClause FieldDeclarationList ·,ClassSpecifier -> identifier/"class" MsDeclspecModifier className identifier/"final" FieldDeclarationList ·
  always ClassSpecifier(5)
911: ClassSpecifier -> identifier/"class" MsDeclspecModifier className identifier/"final" BaseClassClause · FieldDeclarationList
  "{"=s281 | FieldDeclarationList=s974
912: SizeofExpression -> identifier/"sizeof" "..." "(" Identifier ")" ·
  always SizeofExpression(5)
913: NewDeclarator -> "[" expression "]" ·,NewDeclarator -> "[" expression "]" · NewDeclarator
  "["=s558,"("=NewDeclarator(3),","=NewDeclarator(3),"{"=NewDeclarator(3),incDec=NewDeclarator(3),ArithOp<"+" | "-">=NewDeclarator(3),ArithOp<"/" | "%">=NewDeclarator(3),BitOp<"|">=NewDeclarator(3),BitOp<"^">=NewDeclarator(3),CompareOp<"==" | "!=">=NewDeclarator(3),CompareOp<"<=" | ">=">=NewDeclarator(3),"<"/"<"=NewDeclarator(3),templateArgsEnd/">"=NewDeclarator(3),BitOp<"<<" | ">>">=NewDeclarator(3),"?"=NewDeclarator(3),"."=NewDeclarator(3),"->"=NewDeclarator(3),"..."=NewDeclarator(3),"*"=NewDeclarator(3),"||"=NewDeclarator(3),"&&"=NewDeclarator(3),"&"=NewDeclarator(3),";"=NewDeclarator(3),UpdateOp=NewDeclarator(3),"="=NewDeclarator(3),")"=NewDeclarator(3),"]"=NewDeclarator(3),":"=NewDeclarator(3),"}"=NewDeclarator(3),templateArgsEndFallback=NewDeclarator(3),templateArgsEnd=NewDeclarator(3) | NewDeclarator=s975
914: ("," (Identifier | "..."))+ -> "," · Identifier,("," (Identifier | "..."))+ -> "," · "..."
  identifier=s264,"..."=s976 | Identifier=s976
915: ("," (Identifier | "..."))+ -> ("," (Identifier | "..."))+ · ("," (Identifier | "..."))+,commaSep<Identifier | "..."> -> Identifier ("," (Identifier | "..."))+ ·,commaSep<Identifier | "..."> -> "..." ("," (Identifier | "..."))+ ·
  ","=s914,")"=commaSep<Identifier | "...">(2) | ("," (Identifier | "..."))+=s977
916: preprocParams -> "(" commaSep<Identifier | "..."> ")" ·
  always preprocParams(3)
917: PreprocDirective -> pp<"define"> Identifier preprocParams PreprocArg "\n" ·
  always PreprocDirective(5)
918: NewExpression -> "::" scopedIdentifier/"new" ArgumentList typeSpecifier NewDeclarator ArgumentList ·,NewExpression -> "::" scopedIdentifier/"new" ArgumentList typeSpecifier NewDeclarator InitializerList ·
  always NewExpression(6)
919: balancedTokens -> "{" balancedTokens+ "}" ·,balancedTokens -> "[" balancedTokens+ "]" ·,balancedTokens -> "(" balancedTokens+ ")" ·
  always balancedTokens(3)
920: balancedTokens+ -> balancedTokens+ · balancedTokens+,AttributeArgs-1 -> "(" balancedTokens+ · ")"
  RawString=s599,"("=s598,"::"=s599,")"=s978,","=s599,"{"=s596,attributeIdentifier=s599,"["=s597,incDec=s599,ArithOp<"+" | "-">=s599,ArithOp<"/" | "%">=s599,BitOp<"|">=s599,BitOp<"^">=s599,CompareOp<"==" | "!=">=s599,CompareOp<"<=" | ">=">=s599,"<"/"<"=s599,templateArgsEnd/">"=s599,BitOp<"<<" | ">>">=s599,UpdateOp=s599,Number=s599,stringLiteralStart=s2,":"=s599,"."=s599,"->"=s599,"..."=s599,"*"=s593,"||"=s594,"&&"=s594,"&"=s595,";"=s599,charLiteralStart=s9 | String=s599,ArithOp=s599,LogicOp=s599,BitOp=s599,CharLiteral=s599,balancedTokens+=s798,balancedTokens=s600
921: AttributeArgs-1 -> "(" ")" ·
  always AttributeArgs-1(2)
922: AbstractFunctionDeclarator -> abstractDeclarator · ParameterList,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList TrailingReturnType,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+ TrailingReturnType,AbstractArrayDeclarator -> abstractDeclarator · "[" "]",AbstractArrayDeclarator -> abstractDeclarator · "[" expression "]",AbstractArrayDeclarator -> abstractDeclarator · "[" "*" "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ expression "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ "*" "]",TrailingReturnType -> "->" typeQualifier typeSpecifier abstractDeclarator ·
  "("=s169,"["=s447,identifier/"const"=TrailingReturnType(4),identifier/"volatile"=TrailingReturnType(4),identifier/"restrict"=TrailingReturnType(4),identifier/"_Atomic"=TrailingReturnType(4),identifier/"mutable"=TrailingReturnType(4),identifier/"constexpr"=TrailingReturnType(4),identifier/"final"=TrailingReturnType(4),"{"=TrailingReturnType(4),identifier/"noexcept"=TrailingReturnType(4),identifier/"throw"=TrailingReturnType(4),":"=TrailingReturnType(4),"->"=TrailingReturnType(4),"="=TrailingReturnType(4),")"=TrailingReturnType(4),","=TrailingReturnType(4),";"=TrailingReturnType(4),templateArgsEndFallback=TrailingReturnType(4),templateArgsEnd=TrailingReturnType(4) | ParameterList=s445
923: Noexcept -> identifier/"noexcept" "(" expression ")" ·
  always Noexcept(4)
924: ("," TypeDescriptor)+ -> "," · TypeDescriptor
  identifier/"bool"=s48,"::"=s141,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s1019,identifier/"typename"=s1027,identifier/"class"=s1026,identifier/"union"=s1021,identifier/"enum"=s1023,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,TypeDescriptor=s979,StructSpecifier=s48,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,typeQualifier+=s172,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeQualifier=s159,typeSpecifier=s175
925: ("," TypeDescriptor)+ -> ("," TypeDescriptor)+ · ("," TypeDescriptor)+,commaSep<TypeDescriptor> -> TypeDescriptor ("," TypeDescriptor)+ ·
  ","=s924,")"=commaSep<TypeDescriptor>(2) | ("," TypeDescriptor)+=s980
926: ThrowSpecifier -> identifier/"throw" "(" commaSep<TypeDescriptor> ")" ·
  always ThrowSpecifier(4)
927: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,OptionalParameterDeclaration -> declarationSpecifiers declarator "=" expression ·,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112,")"=OptionalParameterDeclaration(4),","=OptionalParameterDeclaration(4),templateArgsEndFallback=OptionalParameterDeclaration(4),templateArgsEnd=OptionalParameterDeclaration(4) | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
928: ParameterPackExpansion-1 -> TypeDescriptor "..." ·
  always ParameterPackExpansion-1(2)
929: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,("," (InitializerPair | expression | InitializerList)?)+ -> "," expression ·,CommaExpression -> expression · "," expression,CommaExpression -> expression "," expression ·,CommaExpression -> expression · "," CommaExpression,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,","=s106,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112,"}"=("," (InitializerPair | expression | InitializerList)?)+(2),";"=CommaExpression(3) | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
930: AbstractArrayDeclarator -> abstractDeclarator "[" typeQualifier+ expression "]" ·,AbstractArrayDeclarator -> abstractDeclarator "[" typeQualifier+ "*" "]" ·
  always AbstractArrayDeclarator(5)
931: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,InitDeclarator -> declarator "=" expression ·,Declaration-1 -> declarationSpecifiers declarator "=" expression ·,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112,")"=Declaration-1(4),","=InitDeclarator(3),";"=InitDeclarator(3) | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
932: IfStatement -> identifier/"if" identifier/"constexpr" ConditionClause statement identifier/"else" statement ·
  always IfStatement(6)
933: ForStatement -> identifier/"for" "(" expression ";" expression ";" · ")" statement,ForStatement -> identifier/"for" "(" expression ";" expression ";" · expression ")" statement,ForStatement -> identifier/"for" "(" expression ";" expression ";" · CommaExpression ")" statement,ForStatement -> identifier/"for" "(" CommaExpression ";" expression ";" · ")" statement,ForStatement -> identifier/"for" "(" CommaExpression ";" expression ";" · expression ")" statement,ForStatement -> identifier/"for" "(" CommaExpression ";" expression ";" · CommaExpression ")" statement
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,")"=s982,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,CommaExpression=s983,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s981
934: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,CommaExpression -> expression · "," expression,CommaExpression -> expression · "," CommaExpression,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "...",ForStatement -> identifier/"for" "(" Declaration expression ";" expression · ")" statement,ForStatement -> identifier/"for" "(" ";" expression ";" expression · ")" statement,ForStatement -> identifier/"for" "(" expression ";" ";" expression · ")" statement,ForStatement -> identifier/"for" "(" CommaExpression ";" ";" expression · ")" statement
  "("=s124,")"=s982,","=s106,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112 | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
935: ForStatement -> identifier/"for" "(" Declaration ";" expression ")" · statement,ForStatement -> identifier/"for" "(" Declaration ";" CommaExpression ")" · statement,ForStatement -> identifier/"for" "(" Declaration expression ";" ")" · statement,ForStatement -> identifier/"for" "(" ";" ";" expression ")" · statement,ForStatement -> identifier/"for" "(" ";" ";" CommaExpression ")" · statement,ForStatement -> identifier/"for" "(" ";" expression ";" ")" · statement,ForStatement -> identifier/"for" "(" expression ";" ";" ")" · statement,ForStatement -> identifier/"for" "(" CommaExpression ";" ";" ")" · statement
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"{"=s45,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"throw"=s78,identifier/"case"=s75,identifier/"default"=s76,identifier/"if"=s65,identifier/"switch"=s66,identifier/"do"=s67,identifier/"while"=s68,identifier/"for"=s69,identifier/"return"=s70,identifier/"break"=s71,identifier/"continue"=s72,identifier/"goto"=s73,identifier/"try"=s77,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s1017,"*"=s191,"&"=s191,";"=s31,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,CompoundStatement=s33,CaseStatement=s34,LabeledStatement=s33,StatementIdentifier=s30,ExpressionStatement=s33,CommaExpression=s32,IfStatement=s33,SwitchStatement=s33,DoStatement=s33,ParenthesizedExpression=s50,WhileStatement=s33,ForStatement=s33,ReturnStatement=s33,BreakStatement=s33,ContinueStatement=s33,GotoStatement=s33,ForRangeLoop=s34,TryStatement=s34,ThrowStatement=s34,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s4,statement=s984,nonCaseStatement=s34
936: ForStatement -> identifier/"for" "(" Declaration expression ";" CommaExpression · ")" statement,ForStatement -> identifier/"for" "(" ";" expression ";" CommaExpression · ")" statement,ForStatement -> identifier/"for" "(" expression ";" ";" CommaExpression · ")" statement,ForStatement -> identifier/"for" "(" CommaExpression ";" ";" CommaExpression · ")" statement
  ")"=s982
937: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "...",ForRangeLoop -> identifier/"for" "(" declarationSpecifiers declarator ":" expression · ")" statement
  "("=s124,")"=s985,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112 | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
938: ForRangeLoop -> identifier/"for" "(" declarationSpecifiers declarator ":" InitializerList · ")" statement
  ")"=s985
939: ForStatement -> identifier/"for" "(" Declaration ";" ")" statement ·,ForStatement -> identifier/"for" "(" ";" ";" ")" statement ·
  always ForStatement(6)
940: PointerDeclarator-2 -> "*" msPointerModifier+ typeQualifier+ typeDeclarator ·,PointerDeclarator-2 -> MsBasedModifier "*" typeQualifier+ typeDeclarator ·,PointerDeclarator-2 -> MsBasedModifier "*" msPointerModifier+ typeDeclarator ·,FunctionDeclarator-2 -> typeDeclarator · ParameterList,ArrayDeclarator-2 -> typeDeclarator · "[" "]",ArrayDeclarator-2 -> typeDeclarator · "[" expression "]",ArrayDeclarator-2 -> typeDeclarator · "[" "*" "]",ArrayDeclarator-2 -> typeDeclarator · "[" typeQualifier+ "]",ArrayDeclarator-2 -> typeDeclarator · "[" typeQualifier+ expression "]",ArrayDeclarator-2 -> typeDeclarator · "[" typeQualifier+ "*" "]"
  "("=s169,"["=s698,","=PointerDeclarator-2(4),";"=PointerDeclarator-2(4),")"=PointerDeclarator-2(4) | ParameterList=s697
941: typeQualifier+ -> typeQualifier+ · typeQualifier+,PointerDeclarator-2 -> MsBasedModifier "*" msPointerModifier+ typeQualifier+ · typeDeclarator
  "("=s484,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"__based"=s63,identifier=s480,"*"=s481 | TypeIdentifier=s485,MsBasedModifier=s482,PointerDeclarator-2=s485,FunctionDeclarator-2=s485,ArrayDeclarator-2=s485,ParenthesizedDeclarator-2=s485,typeQualifier+=s376,typeQualifier=s159,typeDeclarator=s986
942: ArrayDeclarator-2 -> typeDeclarator "[" expression "]" ·,ArrayDeclarator-2 -> typeDeclarator "[" "*" "]" ·,ArrayDeclarator-2 -> typeDeclarator "[" typeQualifier+ "]" ·
  always ArrayDeclarator-2(4)
943: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,ArrayDeclarator-2 -> typeDeclarator "[" typeQualifier+ expression · "]",FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,"]"=s987,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112 | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
944: ArrayDeclarator-2 -> typeDeclarator "[" typeQualifier+ "*" · "]",PointerExpression -> "*" · expression
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s193,"]"=s987,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s154
945: StaticAssertDeclaration -> identifier/"static_assert" "(" expression "," String ")" · ";",StaticAssertDeclaration -> identifier/"static_assert" "(" expression "," RawString ")" · ";",StaticAssertDeclaration -> identifier/"static_assert" "(" expression "," ConcatenatedString ")" · ";"
  ";"=s988
946: OptionalTypeParameterDeclaration -> identifier/"typename" TypeIdentifier "=" typeSpecifier ·,OptionalTypeParameterDeclaration -> identifier/"class" TypeIdentifier "=" typeSpecifier ·
  always OptionalTypeParameterDeclaration(4)
947: TypeParameterDeclaration -> identifier/"typename" TypeIdentifier ·,TypeParameterDeclaration -> identifier/"class" TypeIdentifier ·,OptionalTypeParameterDeclaration -> identifier/"typename" TypeIdentifier · "=" typeSpecifier,OptionalTypeParameterDeclaration -> identifier/"class" TypeIdentifier · "=" typeSpecifier
  "="=s868,templateArgsEndFallback=TypeParameterDeclaration(2),","=TypeParameterDeclaration(2),templateArgsEnd=TypeParameterDeclaration(2)
948: ("," access? className "..."?)+ -> "," className "..." ·
  always ("," access? className "..."?)+(3)
949: ("," access? className "..."?)+ -> "," identifier/"public" className ·,("," access? className "..."?)+ -> "," identifier/"public" className · "..."
  "..."=s989,","=("," access? className "..."?)+(3),"{"=("," access? className "..."?)+(3)
950: ("," access? className "..."?)+ -> ("," access? className "..."?)+ · ("," access? className "..."?)+,commaSep1<access? className "..."?> -> identifier/"public" className "..." ("," access? className "..."?)+ ·
  ","=s723,"{"=commaSep1<access? className "..."?>(4) | ("," access? className "..."?)+=s875
951: ("," fieldDeclarator)+ -> ("," fieldDeclarator)+ · ("," fieldDeclarator)+,FieldDeclaration -> Attribute+ declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ · ";",FieldDeclaration -> Attribute+ declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ · BitfieldClause ";",FieldDeclaration -> Attribute+ declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ · InitializerList ";",FieldDeclaration -> Attribute+ declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ · "=" expression ";",FieldDeclaration -> Attribute+ declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ · "=" InitializerList ";",FieldDeclaration -> identifier/"virtual" declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ · ";",FieldDeclaration -> identifier/"virtual" declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ · BitfieldClause ";",FieldDeclaration -> identifier/"virtual" declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ · InitializerList ";",FieldDeclaration -> identifier/"virtual" declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ · "=" expression ";",FieldDeclaration -> identifier/"virtual" declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ · "=" InitializerList ";"
  ","=s889,"{"=s133,":"=s737,";"=s990,"="=s992 | BitfieldClause=s991,InitializerList=s991,("," fieldDeclarator)+=s969
952: FieldDeclaration -> declarationSpecifiers "=" expression ";" ·,FieldDeclaration -> declarationSpecifiers "=" InitializerList ";" ·,FieldDeclaration -> declarationSpecifiers fieldDeclarator BitfieldClause ";" ·,FieldDeclaration -> declarationSpecifiers fieldDeclarator InitializerList ";" ·,FieldDeclaration -> declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ ";" ·,FieldDeclaration -> Attribute+ declarationSpecifiers BitfieldClause ";" ·,FieldDeclaration -> Attribute+ declarationSpecifiers InitializerList ";" ·,FieldDeclaration -> Attribute+ declarationSpecifiers fieldDeclarator ";" ·,FieldDeclaration -> identifier/"virtual" declarationSpecifiers BitfieldClause ";" ·,FieldDeclaration -> identifier/"virtual" declarationSpecifiers InitializerList ";" ·,FieldDeclaration -> identifier/"virtual" declarationSpecifiers fieldDeclarator ";" ·,FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers ";" ·
  always FieldDeclaration(4)
953: FieldDeclaration -> declarationSpecifiers fieldDeclarator "=" InitializerList · ";",FieldDeclaration -> declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ BitfieldClause · ";",FieldDeclaration -> declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ InitializerList · ";",FieldDeclaration -> Attribute+ declarationSpecifiers "=" InitializerList · ";",FieldDeclaration -> Attribute+ declarationSpecifiers fieldDeclarator BitfieldClause · ";",FieldDeclaration -> Attribute+ declarationSpecifiers fieldDeclarator InitializerList · ";",FieldDeclaration -> identifier/"virtual" declarationSpecifiers "=" InitializerList · ";",FieldDeclaration -> identifier/"virtual" declarationSpecifiers fieldDeclarator BitfieldClause · ";",FieldDeclaration -> identifier/"virtual" declarationSpecifiers fieldDeclarator InitializerList · ";",FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers BitfieldClause · ";",FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers InitializerList · ";"
  ";"=s990
954: FieldDeclaration -> Attribute+ declarationSpecifiers fieldDeclarator "=" · expression ";",FieldDeclaration -> Attribute+ declarationSpecifiers fieldDeclarator "=" · InitializerList ";",FieldDeclaration -> identifier/"virtual" declarationSpecifiers fieldDeclarator "=" · expression ";",FieldDeclaration -> identifier/"virtual" declarationSpecifiers fieldDeclarator "=" · InitializerList ";",DefaultMethodClause -> "=" · identifier/"default" ";",DeleteMethodClause -> "=" · identifier/"delete" ";"
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"{"=s133,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"default"=s419,identifier/"delete"=s438,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,InitializerList=s991,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s993
955: FunctionDefinition-5 -> Attribute+ declarationSpecifiers fieldDeclarator CompoundStatement ·,FunctionDefinition-5 -> Attribute+ declarationSpecifiers fieldDeclarator DefaultMethodClause ·,FunctionDefinition-5 -> Attribute+ declarationSpecifiers fieldDeclarator DeleteMethodClause ·,FunctionDefinition-5 -> identifier/"virtual" declarationSpecifiers fieldDeclarator CompoundStatement ·,FunctionDefinition-5 -> identifier/"virtual" declarationSpecifiers fieldDeclarator DefaultMethodClause ·,FunctionDefinition-5 -> identifier/"virtual" declarationSpecifiers fieldDeclarator DeleteMethodClause ·
  always FunctionDefinition-5(4)
956: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldDeclaration -> declarationSpecifiers fieldDeclarator "=" expression · ";",FieldDeclaration -> Attribute+ declarationSpecifiers "=" expression · ";",FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "...",FieldDeclaration -> identifier/"virtual" declarationSpecifiers "=" expression · ";"
  "("=s124,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112,";"=s990 | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
957: FunctionDeclarator -> fieldDeclarator · ParameterList,FunctionDeclarator -> fieldDeclarator · ParameterList (typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType)+,ArrayDeclarator-1 -> fieldDeclarator · "[" "]",ArrayDeclarator-1 -> fieldDeclarator · "[" expression "]",ArrayDeclarator-1 -> fieldDeclarator · "[" "*" "]",ArrayDeclarator-1 -> fieldDeclarator · "[" typeQualifier+ "]",ArrayDeclarator-1 -> fieldDeclarator · "[" typeQualifier+ expression "]",ArrayDeclarator-1 -> fieldDeclarator · "[" typeQualifier+ "*" "]",FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers fieldDeclarator · ";",FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers fieldDeclarator · BitfieldClause ";",FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers fieldDeclarator · InitializerList ";",FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers fieldDeclarator · "=" expression ";",FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers fieldDeclarator · "=" InitializerList ";",FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers fieldDeclarator · ("," fieldDeclarator)+ ";",FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers fieldDeclarator · ("," fieldDeclarator)+ BitfieldClause ";",FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers fieldDeclarator · ("," fieldDeclarator)+ InitializerList ";",FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers fieldDeclarator · ("," fieldDeclarator)+ "=" expression ";",FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers fieldDeclarator · ("," fieldDeclarator)+ "=" InitializerList ";",FunctionDefinition-5 -> Attribute+ identifier/"virtual" declarationSpecifiers fieldDeclarator · CompoundStatement,FunctionDefinition-5 -> Attribute+ identifier/"virtual" declarationSpecifiers fieldDeclarator · DefaultMethodClause,FunctionDefinition-5 -> Attribute+ identifier/"virtual" declarationSpecifiers fieldDeclarator · DeleteMethodClause
  "("=s169,","=s889,"{"=s422,"["=s888,":"=s737,";"=s990,"="=s995 | ParameterList=s887,BitfieldClause=s991,InitializerList=s991,CompoundStatement=s996,DefaultMethodClause=s996,DeleteMethodClause=s996,("," fieldDeclarator)+=s994
958: FieldDeclaration -> declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ "=" · expression ";",FieldDeclaration -> declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ "=" · InitializerList ";",FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers "=" · expression ";",FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers "=" · InitializerList ";"
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"{"=s133,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,InitializerList=s991,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s993
959: PointerDeclarator -> "*" typeQualifier+ fieldDeclarator ·,PointerDeclarator -> "*" msPointerModifier+ fieldDeclarator ·,PointerDeclarator -> MsBasedModifier "*" fieldDeclarator ·,FunctionDeclarator -> fieldDeclarator · ParameterList,FunctionDeclarator -> fieldDeclarator · ParameterList (typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType)+,ArrayDeclarator-1 -> fieldDeclarator · "[" "]",ArrayDeclarator-1 -> fieldDeclarator · "[" expression "]",ArrayDeclarator-1 -> fieldDeclarator · "[" "*" "]",ArrayDeclarator-1 -> fieldDeclarator · "[" typeQualifier+ "]",ArrayDeclarator-1 -> fieldDeclarator · "[" typeQualifier+ expression "]",ArrayDeclarator-1 -> fieldDeclarator · "[" typeQualifier+ "*" "]"
  "("=s169,"["=s888,","=PointerDeclarator(3),"{"=PointerDeclarator(3),":"=PointerDeclarator(3),";"=PointerDeclarator(3),"="=PointerDeclarator(3) | ParameterList=s887
960: typeQualifier+ -> typeQualifier+ · typeQualifier+,PointerDeclarator -> "*" msPointerModifier+ typeQualifier+ · fieldDeclarator,PointerDeclarator -> MsBasedModifier "*" typeQualifier+ · fieldDeclarator
  "("=s733,"::"=s323,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"__based"=s63,OperatorName=s735,identifier=s322,"*"=s730,"&&"=s734,"&"=s734 | FieldIdentifier=s736,TemplateMethod=s735,ScopedFieldIdentifier=s326,NamespaceIdentifier=s324,TemplateType=s324,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s324,PointerDeclarator=s735,MsBasedModifier=s731,FunctionDeclarator=s735,ArrayDeclarator-1=s735,ParenthesizedDeclarator-1=s735,ReferenceDeclarator-2=s735,typeQualifier+=s376,typeQualifier=s159,fieldDeclarator=s997
961: msPointerModifier+ -> msPointerModifier+ · msPointerModifier+,PointerDeclarator -> MsBasedModifier "*" msPointerModifier+ · fieldDeclarator,PointerDeclarator -> MsBasedModifier "*" msPointerModifier+ · typeQualifier+ fieldDeclarator
  "("=s733,"::"=s323,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"__based"=s63,identifier/"__restrict"=s165,OperatorName=s735,identifier=s322,"*"=s730,"&&"=s734,"&"=s734 | FieldIdentifier=s736,TemplateMethod=s735,ScopedFieldIdentifier=s326,NamespaceIdentifier=s324,TemplateType=s324,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s324,PointerDeclarator=s735,MsBasedModifier=s731,FunctionDeclarator=s735,ArrayDeclarator-1=s735,ParenthesizedDeclarator-1=s735,ReferenceDeclarator-2=s735,typeQualifier+=s998,msPointerModifier+=s379,typeQualifier=s159,fieldDeclarator=s997
962: (typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType)+ -> typeQualifier ·,(typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType)+ -> Noexcept ·,(typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType)+ -> ThrowSpecifier ·,(typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType)+ -> TrailingReturnType ·,(typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType)+ -> identifier/"final" ·
  always (typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType)+(1)
963: (typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType)+ -> (typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType)+ · (typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType)+,FunctionDeclarator -> fieldDeclarator ParameterList (typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType)+ ·
  identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"final"=s962,identifier/"noexcept"=s386,identifier/"throw"=s387,"->"=s383,"("=FunctionDeclarator(3),","=FunctionDeclarator(3),"{"=FunctionDeclarator(3),"["=FunctionDeclarator(3),":"=FunctionDeclarator(3),";"=FunctionDeclarator(3),"="=FunctionDeclarator(3) | Noexcept=s962,ThrowSpecifier=s962,TrailingReturnType=s962,(typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType)+=s999,typeQualifier=s962
964: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,ArrayDeclarator-1 -> fieldDeclarator "[" expression · "]",FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,"]"=s1000,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112 | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
965: typeQualifier+ -> typeQualifier+ · typeQualifier+,ArrayDeclarator-1 -> fieldDeclarator "[" typeQualifier+ · "]",ArrayDeclarator-1 -> fieldDeclarator "[" typeQualifier+ · expression "]",ArrayDeclarator-1 -> fieldDeclarator "[" typeQualifier+ · "*" "]"
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s193,"]"=s1000,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s1002,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,typeQualifier+=s376,expression=s1001,typeQualifier=s159
966: ArrayDeclarator-1 -> fieldDeclarator "[" "]" ·
  always ArrayDeclarator-1(3)
967: ArrayDeclarator-1 -> fieldDeclarator "[" "*" · "]",PointerExpression -> "*" · expression
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s193,"]"=s1000,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s154
968: FunctionDeclarator -> fieldDeclarator · ParameterList,FunctionDeclarator -> fieldDeclarator · ParameterList (typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType)+,ArrayDeclarator-1 -> fieldDeclarator · "[" "]",ArrayDeclarator-1 -> fieldDeclarator · "[" expression "]",ArrayDeclarator-1 -> fieldDeclarator · "[" "*" "]",ArrayDeclarator-1 -> fieldDeclarator · "[" typeQualifier+ "]",ArrayDeclarator-1 -> fieldDeclarator · "[" typeQualifier+ expression "]",ArrayDeclarator-1 -> fieldDeclarator · "[" typeQualifier+ "*" "]",("," fieldDeclarator)+ -> "," fieldDeclarator ·
  "("=s169,"["=s888,","=("," fieldDeclarator)+(2),"{"=("," fieldDeclarator)+(2),":"=("," fieldDeclarator)+(2),";"=("," fieldDeclarator)+(2),"="=("," fieldDeclarator)+(2) | ParameterList=s887
969: ("," fieldDeclarator)+ -> ("," fieldDeclarator)+ · ("," fieldDeclarator)+,("," fieldDeclarator)+ -> ("," fieldDeclarator)+ ("," fieldDeclarator)+ ·
  always ("," fieldDeclarator)+(2)
970: ParenthesizedDeclarator-1 -> "(" fieldDeclarator ")" ·
  always ParenthesizedDeclarator-1(3)
971: FriendDeclaration -> identifier/"friend" identifier/"class" className ";" ·,FriendDeclaration -> identifier/"friend" identifier/"struct" className ";" ·,FriendDeclaration -> identifier/"friend" identifier/"union" className ";" ·
  always FriendDeclaration(4)
972: StructSpecifier -> identifier/"struct" MsDeclspecModifier className identifier/"final" BaseClassClause FieldDeclarationList ·
  always StructSpecifier(6)
973: UnionSpecifier -> identifier/"union" MsDeclspecModifier className identifier/"final" BaseClassClause FieldDeclarationList ·
  always UnionSpecifier(6)
974: ClassSpecifier -> identifier/"class" MsDeclspecModifier className identifier/"final" BaseClassClause FieldDeclarationList ·
  always ClassSpecifier(6)
975: NewDeclarator -> "[" expression "]" NewDeclarator ·
  always NewDeclarator(4)
976: ("," (Identifier | "..."))+ -> "," Identifier ·,("," (Identifier | "..."))+ -> "," "..." ·
  always ("," (Identifier | "..."))+(2)
977: ("," (Identifier | "..."))+ -> ("," (Identifier | "..."))+ · ("," (Identifier | "..."))+,("," (Identifier | "..."))+ -> ("," (Identifier | "..."))+ ("," (Identifier | "..."))+ ·
  always ("," (Identifier | "..."))+(2)
978: AttributeArgs-1 -> "(" balancedTokens+ ")" ·
  always AttributeArgs-1(3)
979: ("," TypeDescriptor)+ -> "," TypeDescriptor ·
  always ("," TypeDescriptor)+(2)
980: ("," TypeDescriptor)+ -> ("," TypeDescriptor)+ · ("," TypeDescriptor)+,("," TypeDescriptor)+ -> ("," TypeDescriptor)+ ("," TypeDescriptor)+ ·
  always ("," TypeDescriptor)+(2)
981: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,CommaExpression -> expression · "," expression,CommaExpression -> expression · "," CommaExpression,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "...",ForStatement -> identifier/"for" "(" expression ";" expression ";" expression · ")" statement,ForStatement -> identifier/"for" "(" CommaExpression ";" expression ";" expression · ")" statement
  "("=s124,")"=s1003,","=s106,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112 | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
982: ForStatement -> identifier/"for" "(" Declaration expression ";" expression ")" · statement,ForStatement -> identifier/"for" "(" Declaration expression ";" CommaExpression ")" · statement,ForStatement -> identifier/"for" "(" ";" expression ";" expression ")" · statement,ForStatement -> identifier/"for" "(" ";" expression ";" CommaExpression ")" · statement,ForStatement -> identifier/"for" "(" expression ";" ";" expression ")" · statement,ForStatement -> identifier/"for" "(" expression ";" ";" CommaExpression ")" · statement,ForStatement -> identifier/"for" "(" expression ";" expression ";" ")" · statement,ForStatement -> identifier/"for" "(" CommaExpression ";" ";" expression ")" · statement,ForStatement -> identifier/"for" "(" CommaExpression ";" ";" CommaExpression ")" · statement,ForStatement -> identifier/"for" "(" CommaExpression ";" expression ";" ")" · statement
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"{"=s45,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"throw"=s78,identifier/"case"=s75,identifier/"default"=s76,identifier/"if"=s65,identifier/"switch"=s66,identifier/"do"=s67,identifier/"while"=s68,identifier/"for"=s69,identifier/"return"=s70,identifier/"break"=s71,identifier/"continue"=s72,identifier/"goto"=s73,identifier/"try"=s77,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s1017,"*"=s191,"&"=s191,";"=s31,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,CompoundStatement=s33,CaseStatement=s34,LabeledStatement=s33,StatementIdentifier=s30,ExpressionStatement=s33,CommaExpression=s32,IfStatement=s33,SwitchStatement=s33,DoStatement=s33,ParenthesizedExpression=s50,WhileStatement=s33,ForStatement=s33,ReturnStatement=s33,BreakStatement=s33,ContinueStatement=s33,GotoStatement=s33,ForRangeLoop=s34,TryStatement=s34,ThrowStatement=s34,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s4,statement=s1004,nonCaseStatement=s34
983: ForStatement -> identifier/"for" "(" expression ";" expression ";" CommaExpression · ")" statement,ForStatement -> identifier/"for" "(" CommaExpression ";" expression ";" CommaExpression · ")" statement
  ")"=s1003
984: ForStatement -> identifier/"for" "(" Declaration ";" expression ")" statement ·,ForStatement -> identifier/"for" "(" Declaration ";" CommaExpression ")" statement ·,ForStatement -> identifier/"for" "(" Declaration expression ";" ")" statement ·,ForStatement -> identifier/"for" "(" ";" ";" expression ")" statement ·,ForStatement -> identifier/"for" "(" ";" ";" CommaExpression ")" statement ·,ForStatement -> identifier/"for" "(" ";" expression ";" ")" statement ·,ForStatement -> identifier/"for" "(" expression ";" ";" ")" statement ·,ForStatement -> identifier/"for" "(" CommaExpression ";" ";" ")" statement ·
  always ForStatement(7)
985: ForRangeLoop -> identifier/"for" "(" declarationSpecifiers declarator ":" expression ")" · statement,ForRangeLoop -> identifier/"for" "(" declarationSpecifiers declarator ":" InitializerList ")" · statement
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"{"=s45,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"throw"=s78,identifier/"case"=s75,identifier/"default"=s76,identifier/"if"=s65,identifier/"switch"=s66,identifier/"do"=s67,identifier/"while"=s68,identifier/"for"=s69,identifier/"return"=s70,identifier/"break"=s71,identifier/"continue"=s72,identifier/"goto"=s73,identifier/"try"=s77,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s1017,"*"=s191,"&"=s191,";"=s31,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,CompoundStatement=s33,CaseStatement=s34,LabeledStatement=s33,StatementIdentifier=s30,ExpressionStatement=s33,CommaExpression=s32,IfStatement=s33,SwitchStatement=s33,DoStatement=s33,ParenthesizedExpression=s50,WhileStatement=s33,ForStatement=s33,ReturnStatement=s33,BreakStatement=s33,ContinueStatement=s33,GotoStatement=s33,ForRangeLoop=s34,TryStatement=s34,ThrowStatement=s34,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s4,statement=s1005,nonCaseStatement=s34
986: PointerDeclarator-2 -> MsBasedModifier "*" msPointerModifier+ typeQualifier+ typeDeclarator ·,FunctionDeclarator-2 -> typeDeclarator · ParameterList,ArrayDeclarator-2 -> typeDeclarator · "[" "]",ArrayDeclarator-2 -> typeDeclarator · "[" expression "]",ArrayDeclarator-2 -> typeDeclarator · "[" "*" "]",ArrayDeclarator-2 -> typeDeclarator · "[" typeQualifier+ "]",ArrayDeclarator-2 -> typeDeclarator · "[" typeQualifier+ expression "]",ArrayDeclarator-2 -> typeDeclarator · "[" typeQualifier+ "*" "]"
  "("=s169,"["=s698,","=PointerDeclarator-2(5),";"=PointerDeclarator-2(5),")"=PointerDeclarator-2(5) | ParameterList=s697
987: ArrayDeclarator-2 -> typeDeclarator "[" typeQualifier+ expression "]" ·,ArrayDeclarator-2 -> typeDeclarator "[" typeQualifier+ "*" "]" ·
  always ArrayDeclarator-2(5)
988: StaticAssertDeclaration -> identifier/"static_assert" "(" expression "," String ")" ";" ·,StaticAssertDeclaration -> identifier/"static_assert" "(" expression "," RawString ")" ";" ·,StaticAssertDeclaration -> identifier/"static_assert" "(" expression "," ConcatenatedString ")" ";" ·
  always StaticAssertDeclaration(7)
989: ("," access? className "..."?)+ -> "," identifier/"public" className "..." ·
  always ("," access? className "..."?)+(4)
990: FieldDeclaration -> declarationSpecifiers fieldDeclarator "=" expression ";" ·,FieldDeclaration -> declarationSpecifiers fieldDeclarator "=" InitializerList ";" ·,FieldDeclaration -> declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ BitfieldClause ";" ·,FieldDeclaration -> declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ InitializerList ";" ·,FieldDeclaration -> Attribute+ declarationSpecifiers "=" expression ";" ·,FieldDeclaration -> Attribute+ declarationSpecifiers "=" InitializerList ";" ·,FieldDeclaration -> Attribute+ declarationSpecifiers fieldDeclarator BitfieldClause ";" ·,FieldDeclaration -> Attribute+ declarationSpecifiers fieldDeclarator InitializerList ";" ·,FieldDeclaration -> Attribute+ declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ ";" ·,FieldDeclaration -> identifier/"virtual" declarationSpecifiers "=" expression ";" ·,FieldDeclaration -> identifier/"virtual" declarationSpecifiers "=" InitializerList ";" ·,FieldDeclaration -> identifier/"virtual" declarationSpecifiers fieldDeclarator BitfieldClause ";" ·,FieldDeclaration -> identifier/"virtual" declarationSpecifiers fieldDeclarator InitializerList ";" ·,FieldDeclaration -> identifier/"virtual" declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ ";" ·,FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers BitfieldClause ";" ·,FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers InitializerList ";" ·,FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers fieldDeclarator ";" ·
  always FieldDeclaration(5)
991: FieldDeclaration -> declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ "=" InitializerList · ";",FieldDeclaration -> Attribute+ declarationSpecifiers fieldDeclarator "=" InitializerList · ";",FieldDeclaration -> Attribute+ declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ BitfieldClause · ";",FieldDeclaration -> Attribute+ declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ InitializerList · ";",FieldDeclaration -> identifier/"virtual" declarationSpecifiers fieldDeclarator "=" InitializerList · ";",FieldDeclaration -> identifier/"virtual" declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ BitfieldClause · ";",FieldDeclaration -> identifier/"virtual" declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ InitializerList · ";",FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers "=" InitializerList · ";",FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers fieldDeclarator BitfieldClause · ";",FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers fieldDeclarator InitializerList · ";"
  ";"=s1006
992: FieldDeclaration -> Attribute+ declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ "=" · expression ";",FieldDeclaration -> Attribute+ declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ "=" · InitializerList ";",FieldDeclaration -> identifier/"virtual" declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ "=" · expression ";",FieldDeclaration -> identifier/"virtual" declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ "=" · InitializerList ";"
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"{"=s133,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,InitializerList=s1008,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s1007
993: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldDeclaration -> declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ "=" expression · ";",FieldDeclaration -> Attribute+ declarationSpecifiers fieldDeclarator "=" expression · ";",FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "...",FieldDeclaration -> identifier/"virtual" declarationSpecifiers fieldDeclarator "=" expression · ";",FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers "=" expression · ";"
  "("=s124,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112,";"=s1006 | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
994: ("," fieldDeclarator)+ -> ("," fieldDeclarator)+ · ("," fieldDeclarator)+,FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ · ";",FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ · BitfieldClause ";",FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ · InitializerList ";",FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ · "=" expression ";",FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ · "=" InitializerList ";"
  ","=s889,"{"=s133,":"=s737,";"=s1006,"="=s1009 | BitfieldClause=s1008,InitializerList=s1008,("," fieldDeclarator)+=s969
995: FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers fieldDeclarator "=" · expression ";",FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers fieldDeclarator "=" · InitializerList ";",DefaultMethodClause -> "=" · identifier/"default" ";",DeleteMethodClause -> "=" · identifier/"delete" ";"
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"{"=s133,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"default"=s419,identifier/"delete"=s438,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,InitializerList=s1008,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s1007
996: FunctionDefinition-5 -> Attribute+ identifier/"virtual" declarationSpecifiers fieldDeclarator CompoundStatement ·,FunctionDefinition-5 -> Attribute+ identifier/"virtual" declarationSpecifiers fieldDeclarator DefaultMethodClause ·,FunctionDefinition-5 -> Attribute+ identifier/"virtual" declarationSpecifiers fieldDeclarator DeleteMethodClause ·
  always FunctionDefinition-5(5)
997: PointerDeclarator -> "*" msPointerModifier+ typeQualifier+ fieldDeclarator ·,PointerDeclarator -> MsBasedModifier "*" typeQualifier+ fieldDeclarator ·,PointerDeclarator -> MsBasedModifier "*" msPointerModifier+ fieldDeclarator ·,FunctionDeclarator -> fieldDeclarator · ParameterList,FunctionDeclarator -> fieldDeclarator · ParameterList (typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType)+,ArrayDeclarator-1 -> fieldDeclarator · "[" "]",ArrayDeclarator-1 -> fieldDeclarator · "[" expression "]",ArrayDeclarator-1 -> fieldDeclarator · "[" "*" "]",ArrayDeclarator-1 -> fieldDeclarator · "[" typeQualifier+ "]",ArrayDeclarator-1 -> fieldDeclarator · "[" typeQualifier+ expression "]",ArrayDeclarator-1 -> fieldDeclarator · "[" typeQualifier+ "*" "]"
  "("=s169,"["=s888,","=PointerDeclarator(4),"{"=PointerDeclarator(4),":"=PointerDeclarator(4),";"=PointerDeclarator(4),"="=PointerDeclarator(4) | ParameterList=s887
998: typeQualifier+ -> typeQualifier+ · typeQualifier+,PointerDeclarator -> MsBasedModifier "*" msPointerModifier+ typeQualifier+ · fieldDeclarator
  "("=s733,"::"=s323,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"__based"=s63,OperatorName=s735,identifier=s322,"*"=s730,"&&"=s734,"&"=s734 | FieldIdentifier=s736,TemplateMethod=s735,ScopedFieldIdentifier=s326,NamespaceIdentifier=s324,TemplateType=s324,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s324,PointerDeclarator=s735,MsBasedModifier=s731,FunctionDeclarator=s735,ArrayDeclarator-1=s735,ParenthesizedDeclarator-1=s735,ReferenceDeclarator-2=s735,typeQualifier+=s376,typeQualifier=s159,fieldDeclarator=s1010
999: (typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType)+ -> (typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType)+ · (typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType)+,(typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType)+ -> (typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType)+ (typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType)+ ·
  always (typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType)+(2)
1000: ArrayDeclarator-1 -> fieldDeclarator "[" expression "]" ·,ArrayDeclarator-1 -> fieldDeclarator "[" "*" "]" ·,ArrayDeclarator-1 -> fieldDeclarator "[" typeQualifier+ "]" ·
  always ArrayDeclarator-1(4)
1001: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,ArrayDeclarator-1 -> fieldDeclarator "[" typeQualifier+ expression · "]",FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,"]"=s1011,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112 | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
1002: ArrayDeclarator-1 -> fieldDeclarator "[" typeQualifier+ "*" · "]",PointerExpression -> "*" · expression
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s193,"]"=s1011,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s154
1003: ForStatement -> identifier/"for" "(" expression ";" expression ";" expression ")" · statement,ForStatement -> identifier/"for" "(" expression ";" expression ";" CommaExpression ")" · statement,ForStatement -> identifier/"for" "(" CommaExpression ";" expression ";" expression ")" · statement,ForStatement -> identifier/"for" "(" CommaExpression ";" expression ";" CommaExpression ")" · statement
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"{"=s45,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"throw"=s78,identifier/"case"=s75,identifier/"default"=s76,identifier/"if"=s65,identifier/"switch"=s66,identifier/"do"=s67,identifier/"while"=s68,identifier/"for"=s69,identifier/"return"=s70,identifier/"break"=s71,identifier/"continue"=s72,identifier/"goto"=s73,identifier/"try"=s77,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s1017,"*"=s191,"&"=s191,";"=s31,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,CompoundStatement=s33,CaseStatement=s34,LabeledStatement=s33,StatementIdentifier=s30,ExpressionStatement=s33,CommaExpression=s32,IfStatement=s33,SwitchStatement=s33,DoStatement=s33,ParenthesizedExpression=s50,WhileStatement=s33,ForStatement=s33,ReturnStatement=s33,BreakStatement=s33,ContinueStatement=s33,GotoStatement=s33,ForRangeLoop=s34,TryStatement=s34,ThrowStatement=s34,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s4,statement=s1012,nonCaseStatement=s34
1004: ForStatement -> identifier/"for" "(" Declaration expression ";" expression ")" statement ·,ForStatement -> identifier/"for" "(" Declaration expression ";" CommaExpression ")" statement ·,ForStatement -> identifier/"for" "(" ";" expression ";" expression ")" statement ·,ForStatement -> identifier/"for" "(" ";" expression ";" CommaExpression ")" statement ·,ForStatement -> identifier/"for" "(" expression ";" ";" expression ")" statement ·,ForStatement -> identifier/"for" "(" expression ";" ";" CommaExpression ")" statement ·,ForStatement -> identifier/"for" "(" expression ";" expression ";" ")" statement ·,ForStatement -> identifier/"for" "(" CommaExpression ";" ";" expression ")" statement ·,ForStatement -> identifier/"for" "(" CommaExpression ";" ";" CommaExpression ")" statement ·,ForStatement -> identifier/"for" "(" CommaExpression ";" expression ";" ")" statement ·
  always ForStatement(8)
1005: ForRangeLoop -> identifier/"for" "(" declarationSpecifiers declarator ":" expression ")" statement ·,ForRangeLoop -> identifier/"for" "(" declarationSpecifiers declarator ":" InitializerList ")" statement ·
  always ForRangeLoop(8)
1006: FieldDeclaration -> declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ "=" expression ";" ·,FieldDeclaration -> declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ "=" InitializerList ";" ·,FieldDeclaration -> Attribute+ declarationSpecifiers fieldDeclarator "=" expression ";" ·,FieldDeclaration -> Attribute+ declarationSpecifiers fieldDeclarator "=" InitializerList ";" ·,FieldDeclaration -> Attribute+ declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ BitfieldClause ";" ·,FieldDeclaration -> Attribute+ declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ InitializerList ";" ·,FieldDeclaration -> identifier/"virtual" declarationSpecifiers fieldDeclarator "=" expression ";" ·,FieldDeclaration -> identifier/"virtual" declarationSpecifiers fieldDeclarator "=" InitializerList ";" ·,FieldDeclaration -> identifier/"virtual" declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ BitfieldClause ";" ·,FieldDeclaration -> identifier/"virtual" declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ InitializerList ";" ·,FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers "=" expression ";" ·,FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers "=" InitializerList ";" ·,FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers fieldDeclarator BitfieldClause ";" ·,FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers fieldDeclarator InitializerList ";" ·,FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ ";" ·
  always FieldDeclaration(6)
1007: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldDeclaration -> Attribute+ declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ "=" expression · ";",FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "...",FieldDeclaration -> identifier/"virtual" declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ "=" expression · ";",FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers fieldDeclarator "=" expression · ";"
  "("=s124,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112,";"=s1013 | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
1008: FieldDeclaration -> Attribute+ declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ "=" InitializerList · ";",FieldDeclaration -> identifier/"virtual" declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ "=" InitializerList · ";",FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers fieldDeclarator "=" InitializerList · ";",FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ BitfieldClause · ";",FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ InitializerList · ";"
  ";"=s1013
1009: FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ "=" · expression ";",FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ "=" · InitializerList ";"
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"{"=s133,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,InitializerList=s1015,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s1014
1010: PointerDeclarator -> MsBasedModifier "*" msPointerModifier+ typeQualifier+ fieldDeclarator ·,FunctionDeclarator -> fieldDeclarator · ParameterList,FunctionDeclarator -> fieldDeclarator · ParameterList (typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType)+,ArrayDeclarator-1 -> fieldDeclarator · "[" "]",ArrayDeclarator-1 -> fieldDeclarator · "[" expression "]",ArrayDeclarator-1 -> fieldDeclarator · "[" "*" "]",ArrayDeclarator-1 -> fieldDeclarator · "[" typeQualifier+ "]",ArrayDeclarator-1 -> fieldDeclarator · "[" typeQualifier+ expression "]",ArrayDeclarator-1 -> fieldDeclarator · "[" typeQualifier+ "*" "]"
  "("=s169,"["=s888,","=PointerDeclarator(5),"{"=PointerDeclarator(5),":"=PointerDeclarator(5),";"=PointerDeclarator(5),"="=PointerDeclarator(5) | ParameterList=s887
1011: ArrayDeclarator-1 -> fieldDeclarator "[" typeQualifier+ expression "]" ·,ArrayDeclarator-1 -> fieldDeclarator "[" typeQualifier+ "*" "]" ·
  always ArrayDeclarator-1(5)
1012: ForStatement -> identifier/"for" "(" expression ";" expression ";" expression ")" statement ·,ForStatement -> identifier/"for" "(" expression ";" expression ";" CommaExpression ")" statement ·,ForStatement -> identifier/"for" "(" CommaExpression ";" expression ";" expression ")" statement ·,ForStatement -> identifier/"for" "(" CommaExpression ";" expression ";" CommaExpression ")" statement ·
  always ForStatement(9)
1013: FieldDeclaration -> Attribute+ declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ "=" expression ";" ·,FieldDeclaration -> Attribute+ declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ "=" InitializerList ";" ·,FieldDeclaration -> identifier/"virtual" declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ "=" expression ";" ·,FieldDeclaration -> identifier/"virtual" declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ "=" InitializerList ";" ·,FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers fieldDeclarator "=" expression ";" ·,FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers fieldDeclarator "=" InitializerList ";" ·,FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ BitfieldClause ";" ·,FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ InitializerList ";" ·
  always FieldDeclaration(7)
1014: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "...",FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ "=" expression · ";"
  "("=s124,"["=s109,incDec=s122,ArithOp<"+" | "-">=s113,ArithOp<"/" | "%">=s114,BitOp<"|">=s116,BitOp<"^">=s117,CompareOp<"==" | "!=">=s119,CompareOp<"<=" | ">=">=s120,"<"/"<"=s120,templateArgsEnd/">"=s120,BitOp<"<<" | ">>">=s121,"?"=s104,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112,";"=s1016 | ArgumentList=s105,ArithOp-1=s114,LogicOp-1=s115,BitOp-1=s118
1015: FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ "=" InitializerList · ";"
  ";"=s1016
1016: FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ "=" expression ";" ·,FieldDeclaration -> Attribute+ identifier/"virtual" declarationSpecifiers fieldDeclarator ("," fieldDeclarator)+ "=" InitializerList ";" ·
  always FieldDeclaration(8)
1017: Identifier -> identifier ·,NamespaceIdentifier -> identifier ·,TypeIdentifier -> identifier ·,StatementIdentifier -> identifier ·
  "("=Identifier(1),"::"=NamespaceIdentifier(1),"<"=Identifier(1),"<"=TypeIdentifier(1),","=Identifier(1),"{"=TypeIdentifier(1),"["=Identifier(1),incDec=Identifier(1),ArithOp<"+" | "-">=Identifier(1),ArithOp<"/" | "%">=Identifier(1),BitOp<"|">=Identifier(1),BitOp<"^">=Identifier(1),CompareOp<"==" | "!=">=Identifier(1),CompareOp<"<=" | ">=">=Identifier(1),"<"/"<"=Identifier(1),templateArgsEnd/">"=Identifier(1),BitOp<"<<" | ">>">=Identifier(1),UpdateOp=Identifier(1),"?"=Identifier(1),":"=StatementIdentifier(1),"."=Identifier(1),"->"=Identifier(1),"..."=Identifier(1),"*"=Identifier(1),"||"=Identifier(1),"&&"=Identifier(1),"&"=Identifier(1),";"=Identifier(1),"="=Identifier(1)
1018: Identifier -> identifier ·,NamespaceIdentifier -> identifier ·,TypeIdentifier -> identifier ·,StatementIdentifier -> identifier ·
  "("=Identifier(1),"("=TypeIdentifier(1),DestructorName=TypeIdentifier(1),"::"=NamespaceIdentifier(1),"<"=Identifier(1),"<"=TypeIdentifier(1),identifier/"const"=TypeIdentifier(1),identifier/"volatile"=TypeIdentifier(1),identifier/"restrict"=TypeIdentifier(1),identifier/"_Atomic"=TypeIdentifier(1),identifier/"mutable"=TypeIdentifier(1),identifier/"constexpr"=TypeIdentifier(1),identifier/"__declspec"=TypeIdentifier(1),","=Identifier(1),"{"=TypeIdentifier(1),"["=Identifier(1),"["=TypeIdentifier(1),incDec=Identifier(1),ArithOp<"+" | "-">=Identifier(1),ArithOp<"/" | "%">=Identifier(1),BitOp<"|">=Identifier(1),BitOp<"^">=Identifier(1),CompareOp<"==" | "!=">=Identifier(1),CompareOp<"<=" | ">=">=Identifier(1),"<"/"<"=Identifier(1),templateArgsEnd/">"=Identifier(1),BitOp<"<<" | ">>">=Identifier(1),UpdateOp=Identifier(1),identifier/"extern"=TypeIdentifier(1),identifier/"static"=TypeIdentifier(1),identifier/"register"=TypeIdentifier(1),identifier/"inline"=TypeIdentifier(1),identifier/"__attribute__"=TypeIdentifier(1),identifier/"__based"=TypeIdentifier(1),OperatorName=TypeIdentifier(1),identifier=TypeIdentifier(1),"?"=Identifier(1),":"=StatementIdentifier(1),"."=Identifier(1),"->"=Identifier(1),"..."=Identifier(1),"*"=Identifier(1),"*"=TypeIdentifier(1),"||"=Identifier(1),"&&"=Identifier(1),"&&"=TypeIdentifier(1),"&"=Identifier(1),"&"=TypeIdentifier(1),";"=Identifier(1),"="=Identifier(1)
1019: StructSpecifier -> identifier/"struct" · className,StructSpecifier -> identifier/"struct" · FieldDeclarationList,StructSpecifier -> identifier/"struct" · BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" · identifier/"final" BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · className FieldDeclarationList,StructSpecifier -> identifier/"struct" · className BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · className identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" · className identifier/"final" BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier className,StructSpecifier -> identifier/"struct" · MsDeclspecModifier FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier identifier/"final" BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier className FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier className BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier className identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier className identifier/"final" BaseClassClause FieldDeclarationList
  "::"=s141,identifier/"__declspec"=s59,identifier/"final"=s285,"{"=s281,identifier=s140,":"=s280 | NamespaceIdentifier=s142,TemplateType=s402,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,MsDeclspecModifier=s1097,BaseClassClause=s284,FieldDeclarationList=s283,className=s282
1020: StructSpecifier -> identifier/"struct" · className,StructSpecifier -> identifier/"struct" · FieldDeclarationList,StructSpecifier -> identifier/"struct" · BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" · identifier/"final" BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · className FieldDeclarationList,StructSpecifier -> identifier/"struct" · className BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · className identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" · className identifier/"final" BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier className,StructSpecifier -> identifier/"struct" · MsDeclspecModifier FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier identifier/"final" BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier className FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier className BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier className identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier className identifier/"final" BaseClassClause FieldDeclarationList
  "::"=s141,identifier/"__declspec"=s59,identifier/"final"=s285,"{"=s281,identifier=s140,":"=s280 | NamespaceIdentifier=s142,TemplateType=s402,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,MsDeclspecModifier=s1098,BaseClassClause=s284,FieldDeclarationList=s283,className=s283
1021: UnionSpecifier -> identifier/"union" · className,UnionSpecifier -> identifier/"union" · FieldDeclarationList,UnionSpecifier -> identifier/"union" · BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" · identifier/"final" BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · className FieldDeclarationList,UnionSpecifier -> identifier/"union" · className BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · className identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" · className identifier/"final" BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier className,UnionSpecifier -> identifier/"union" · MsDeclspecModifier FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier identifier/"final" BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier className FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier className BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier className identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier className identifier/"final" BaseClassClause FieldDeclarationList
  "::"=s141,identifier/"__declspec"=s59,identifier/"final"=s290,"{"=s281,identifier=s140,":"=s280 | NamespaceIdentifier=s142,TemplateType=s402,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,MsDeclspecModifier=s1103,BaseClassClause=s289,FieldDeclarationList=s288,className=s287
1022: UnionSpecifier -> identifier/"union" · className,UnionSpecifier -> identifier/"union" · FieldDeclarationList,UnionSpecifier -> identifier/"union" · BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" · identifier/"final" BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · className FieldDeclarationList,UnionSpecifier -> identifier/"union" · className BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · className identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" · className identifier/"final" BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier className,UnionSpecifier -> identifier/"union" · MsDeclspecModifier FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier identifier/"final" BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier className FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier className BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier className identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier className identifier/"final" BaseClassClause FieldDeclarationList
  "::"=s141,identifier/"__declspec"=s59,identifier/"final"=s290,"{"=s281,identifier=s140,":"=s280 | NamespaceIdentifier=s142,TemplateType=s402,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,MsDeclspecModifier=s1104,BaseClassClause=s289,FieldDeclarationList=s288,className=s288
1023: EnumSpecifier -> identifier/"enum" · className,EnumSpecifier -> identifier/"enum" · className EnumeratorList,EnumSpecifier -> identifier/"enum" · className enumBaseClause,EnumSpecifier -> identifier/"enum" · className enumBaseClause EnumeratorList,EnumSpecifier -> identifier/"enum" · EnumeratorList,EnumSpecifier -> identifier/"enum" · identifier/"class" className,EnumSpecifier -> identifier/"enum" · identifier/"class" className EnumeratorList,EnumSpecifier -> identifier/"enum" · identifier/"class" className enumBaseClause,EnumSpecifier -> identifier/"enum" · identifier/"class" className enumBaseClause EnumeratorList,EnumSpecifier -> identifier/"enum" · identifier/"class" EnumeratorList,EnumSpecifier -> identifier/"enum" · identifier/"struct" className,EnumSpecifier -> identifier/"enum" · identifier/"struct" className EnumeratorList,EnumSpecifier -> identifier/"enum" · identifier/"struct" className enumBaseClause,EnumSpecifier -> identifier/"enum" · identifier/"struct" className enumBaseClause EnumeratorList,EnumSpecifier -> identifier/"enum" · identifier/"struct" EnumeratorList
  "::"=s141,identifier/"struct"=s1106,"{"=s292,identifier/"class"=s1106,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s402,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,EnumeratorList=s294,className=s293
1024: EnumSpecifier -> identifier/"enum" · className,EnumSpecifier -> identifier/"enum" · className EnumeratorList,EnumSpecifier -> identifier/"enum" · className enumBaseClause,EnumSpecifier -> identifier/"enum" · className enumBaseClause EnumeratorList,EnumSpecifier -> identifier/"enum" · EnumeratorList,EnumSpecifier -> identifier/"enum" · identifier/"class" className,EnumSpecifier -> identifier/"enum" · identifier/"class" className EnumeratorList,EnumSpecifier -> identifier/"enum" · identifier/"class" className enumBaseClause,EnumSpecifier -> identifier/"enum" · identifier/"class" className enumBaseClause EnumeratorList,EnumSpecifier -> identifier/"enum" · identifier/"class" EnumeratorList,EnumSpecifier -> identifier/"enum" · identifier/"struct" className,EnumSpecifier -> identifier/"enum" · identifier/"struct" className EnumeratorList,EnumSpecifier -> identifier/"enum" · identifier/"struct" className enumBaseClause,EnumSpecifier -> identifier/"enum" · identifier/"struct" className enumBaseClause EnumeratorList,EnumSpecifier -> identifier/"enum" · identifier/"struct" EnumeratorList
  "::"=s141,identifier/"struct"=s1107,"{"=s292,identifier/"class"=s1107,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s402,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,EnumeratorList=s294,className=s294
1025: EnumSpecifier -> identifier/"enum" · className,EnumSpecifier -> identifier/"enum" · className EnumeratorList,EnumSpecifier -> identifier/"enum" · className enumBaseClause,EnumSpecifier -> identifier/"enum" · className enumBaseClause EnumeratorList,EnumSpecifier -> identifier/"enum" · EnumeratorList,EnumSpecifier -> identifier/"enum" · identifier/"class" className,EnumSpecifier -> identifier/"enum" · identifier/"class" className EnumeratorList,EnumSpecifier -> identifier/"enum" · identifier/"class" className enumBaseClause,EnumSpecifier -> identifier/"enum" · identifier/"class" className enumBaseClause EnumeratorList,EnumSpecifier -> identifier/"enum" · identifier/"class" EnumeratorList,EnumSpecifier -> identifier/"enum" · identifier/"struct" className,EnumSpecifier -> identifier/"enum" · identifier/"struct" className EnumeratorList,EnumSpecifier -> identifier/"enum" · identifier/"struct" className enumBaseClause,EnumSpecifier -> identifier/"enum" · identifier/"struct" className enumBaseClause EnumeratorList,EnumSpecifier -> identifier/"enum" · identifier/"struct" EnumeratorList
  "::"=s141,identifier/"struct"=s1108,"{"=s292,identifier/"class"=s1108,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s278,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,EnumeratorList=s294,className=s294
1026: ClassSpecifier -> identifier/"class" · className,ClassSpecifier -> identifier/"class" · FieldDeclarationList,ClassSpecifier -> identifier/"class" · BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" · identifier/"final" BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · className FieldDeclarationList,ClassSpecifier -> identifier/"class" · className BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · className identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" · className identifier/"final" BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier className,ClassSpecifier -> identifier/"class" · MsDeclspecModifier FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier identifier/"final" BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier className FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier className BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier className identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier className identifier/"final" BaseClassClause FieldDeclarationList
  "::"=s141,identifier/"__declspec"=s59,identifier/"final"=s299,"{"=s281,identifier=s140,":"=s280 | NamespaceIdentifier=s142,TemplateType=s402,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,MsDeclspecModifier=s1112,BaseClassClause=s298,FieldDeclarationList=s297,className=s296
1027: DependentType -> identifier/"typename" · typeSpecifier
  identifier/"bool"=s48,"::"=s141,identifier/"struct"=s1019,identifier/"typename"=s1027,identifier/"class"=s1026,identifier/"union"=s1021,identifier/"enum"=s1023,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeSpecifier=s301
1028: DependentType -> identifier/"typename" · typeSpecifier
  identifier/"bool"=s48,"::"=s141,identifier/"struct"=s1020,identifier/"typename"=s1028,identifier/"class"=s1249,identifier/"union"=s1022,identifier/"enum"=s1024,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeSpecifier=s301
1029: DependentType -> identifier/"typename" · typeSpecifier
  identifier/"bool"=s48,"::"=s141,identifier/"struct"=s1240,identifier/"typename"=s1029,identifier/"class"=s1248,identifier/"union"=s1244,identifier/"enum"=s1024,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeSpecifier=s301
1030: DependentType -> identifier/"typename" · typeSpecifier
  identifier/"bool"=s48,"::"=s141,identifier/"struct"=s1193,identifier/"typename"=s1030,identifier/"class"=s1195,identifier/"union"=s1194,identifier/"enum"=s1025,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeSpecifier=s301
1031: NewExpression -> identifier/"new" · typeSpecifier,NewExpression -> identifier/"new" · typeSpecifier ArgumentList,NewExpression -> identifier/"new" · typeSpecifier InitializerList,NewExpression -> identifier/"new" · typeSpecifier NewDeclarator,NewExpression -> identifier/"new" · typeSpecifier NewDeclarator ArgumentList,NewExpression -> identifier/"new" · typeSpecifier NewDeclarator InitializerList,NewExpression -> identifier/"new" · ArgumentList typeSpecifier,NewExpression -> identifier/"new" · ArgumentList typeSpecifier ArgumentList,NewExpression -> identifier/"new" · ArgumentList typeSpecifier InitializerList,NewExpression -> identifier/"new" · ArgumentList typeSpecifier NewDeclarator,NewExpression -> identifier/"new" · ArgumentList typeSpecifier NewDeclarator ArgumentList,NewExpression -> identifier/"new" · ArgumentList typeSpecifier NewDeclarator InitializerList
  "("=s124,identifier/"bool"=s48,"::"=s141,identifier/"struct"=s1240,identifier/"typename"=s1029,identifier/"class"=s1248,identifier/"union"=s1244,identifier/"enum"=s1024,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140 | ArgumentList=s1114,NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeSpecifier=s307
1032: DeleteExpression -> identifier/"delete" · expression,DeleteExpression -> identifier/"delete" · "[" "]" expression
  RawString=s35,"("=s1215,identifier/"bool"=s164,"::"=s1068,"["=s1220,incDec=s1192,ArithOp<"+" | "-">=s1191,Number=s56,identifier/"delete"=s1032,LogicOp<"!">=s1191,BitOp<"~">=s1191,identifier/"sizeof"=s1196,identifier/"NULL"=s56,identifier/"new"=s1031,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s1084,"&"=s1084,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s1089,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s1190,FieldExpression=s1190,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s1071,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s1190,ConcatenatedString=s56,PointerExpression=s1190,SubscriptExpression=s1190,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s1115
1033: BinaryExpression -> expression ArithOp<"+" | "-"> · expression
  RawString=s35,"("=s1215,identifier/"bool"=s164,"::"=s1068,"["=s193,incDec=s1192,ArithOp<"+" | "-">=s1191,Number=s56,identifier/"delete"=s1032,LogicOp<"!">=s1191,BitOp<"~">=s1191,identifier/"sizeof"=s1196,identifier/"NULL"=s56,identifier/"new"=s1031,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s1084,"&"=s1084,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s1089,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s1190,FieldExpression=s1190,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s1071,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s1190,ConcatenatedString=s56,PointerExpression=s1190,SubscriptExpression=s1190,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s1117
1034: BinaryExpression -> expression ArithOp-1 · expression,BinaryExpression -> expression ArithOp<"/" | "%"> · expression
  RawString=s35,"("=s1215,identifier/"bool"=s164,"::"=s1068,"["=s193,incDec=s1192,ArithOp<"+" | "-">=s1191,Number=s56,identifier/"delete"=s1032,LogicOp<"!">=s1191,BitOp<"~">=s1191,identifier/"sizeof"=s1196,identifier/"NULL"=s56,identifier/"new"=s1031,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s1084,"&"=s1084,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s1089,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s1190,FieldExpression=s1190,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s1071,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s1190,ConcatenatedString=s56,PointerExpression=s1190,SubscriptExpression=s1190,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s1118
1035: BinaryExpression -> expression LogicOp-1 · expression
  RawString=s35,"("=s1215,identifier/"bool"=s164,"::"=s1068,"["=s193,incDec=s1192,ArithOp<"+" | "-">=s1191,Number=s56,identifier/"delete"=s1032,LogicOp<"!">=s1191,BitOp<"~">=s1191,identifier/"sizeof"=s1196,identifier/"NULL"=s56,identifier/"new"=s1031,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s1084,"&"=s1084,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s1089,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s1190,FieldExpression=s1190,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s1071,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s1190,ConcatenatedString=s56,PointerExpression=s1190,SubscriptExpression=s1190,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s1119
1036: BinaryExpression -> expression BitOp<"|"> · expression
  RawString=s35,"("=s1215,identifier/"bool"=s164,"::"=s1068,"["=s193,incDec=s1192,ArithOp<"+" | "-">=s1191,Number=s56,identifier/"delete"=s1032,LogicOp<"!">=s1191,BitOp<"~">=s1191,identifier/"sizeof"=s1196,identifier/"NULL"=s56,identifier/"new"=s1031,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s1084,"&"=s1084,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s1089,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s1190,FieldExpression=s1190,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s1071,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s1190,ConcatenatedString=s56,PointerExpression=s1190,SubscriptExpression=s1190,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s1120
1037: BinaryExpression -> expression BitOp<"^"> · expression
  RawString=s35,"("=s1215,identifier/"bool"=s164,"::"=s1068,"["=s193,incDec=s1192,ArithOp<"+" | "-">=s1191,Number=s56,identifier/"delete"=s1032,LogicOp<"!">=s1191,BitOp<"~">=s1191,identifier/"sizeof"=s1196,identifier/"NULL"=s56,identifier/"new"=s1031,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s1084,"&"=s1084,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s1089,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s1190,FieldExpression=s1190,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s1071,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s1190,ConcatenatedString=s56,PointerExpression=s1190,SubscriptExpression=s1190,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s1121
1038: BinaryExpression -> expression BitOp-1 · expression
  RawString=s35,"("=s1215,identifier/"bool"=s164,"::"=s1068,"["=s193,incDec=s1192,ArithOp<"+" | "-">=s1191,Number=s56,identifier/"delete"=s1032,LogicOp<"!">=s1191,BitOp<"~">=s1191,identifier/"sizeof"=s1196,identifier/"NULL"=s56,identifier/"new"=s1031,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s1084,"&"=s1084,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s1089,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s1190,FieldExpression=s1190,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s1071,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s1190,ConcatenatedString=s56,PointerExpression=s1190,SubscriptExpression=s1190,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s1122
1039: BinaryExpression -> expression CompareOp<"==" | "!="> · expression
  RawString=s35,"("=s1215,identifier/"bool"=s164,"::"=s1068,"["=s193,incDec=s1192,ArithOp<"+" | "-">=s1191,Number=s56,identifier/"delete"=s1032,LogicOp<"!">=s1191,BitOp<"~">=s1191,identifier/"sizeof"=s1196,identifier/"NULL"=s56,identifier/"new"=s1031,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s1084,"&"=s1084,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s1089,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s1190,FieldExpression=s1190,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s1071,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s1190,ConcatenatedString=s56,PointerExpression=s1190,SubscriptExpression=s1190,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s1123
1040: BinaryExpression -> expression CompareOp<"<=" | ">="> · expression,BinaryExpression -> expression "<"/"<" · expression,BinaryExpression -> expression templateArgsEnd/">" · expression
  RawString=s35,"("=s1215,identifier/"bool"=s164,"::"=s1068,"["=s193,incDec=s1192,ArithOp<"+" | "-">=s1191,Number=s56,identifier/"delete"=s1032,LogicOp<"!">=s1191,BitOp<"~">=s1191,identifier/"sizeof"=s1196,identifier/"NULL"=s56,identifier/"new"=s1031,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s1084,"&"=s1084,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s1089,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s1190,FieldExpression=s1190,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s1071,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s1190,ConcatenatedString=s56,PointerExpression=s1190,SubscriptExpression=s1190,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s1124
1041: BinaryExpression -> expression BitOp<"<<" | ">>"> · expression
  RawString=s35,"("=s1215,identifier/"bool"=s164,"::"=s1068,"["=s193,incDec=s1192,ArithOp<"+" | "-">=s1191,Number=s56,identifier/"delete"=s1032,LogicOp<"!">=s1191,BitOp<"~">=s1191,identifier/"sizeof"=s1196,identifier/"NULL"=s56,identifier/"new"=s1031,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s1084,"&"=s1084,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s1089,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s1190,FieldExpression=s1190,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s1071,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s1190,ConcatenatedString=s56,PointerExpression=s1190,SubscriptExpression=s1190,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s1125
1042: BinaryExpression -> expression incDec · expression,UpdateExpression -> expression incDec ·
  RawString=s35,identifier/"bool"=s164,"::"=s1068,Number=s56,identifier/"delete"=s1032,LogicOp<"!">=s1191,BitOp<"~">=s1191,identifier/"sizeof"=s1196,identifier/"NULL"=s56,identifier/"new"=s1031,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54,"("=UpdateExpression(2),"["=UpdateExpression(2),incDec=UpdateExpression(2),ArithOp<"+" | "-">=UpdateExpression(2),ArithOp<"/" | "%">=UpdateExpression(2),BitOp<"|">=UpdateExpression(2),BitOp<"^">=UpdateExpression(2),CompareOp<"==" | "!=">=UpdateExpression(2),CompareOp<"<=" | ">=">=UpdateExpression(2),"<"/"<"=UpdateExpression(2),templateArgsEnd/">"=UpdateExpression(2),BitOp<"<<" | ">>">=UpdateExpression(2),"?"=UpdateExpression(2),":"=UpdateExpression(2),"."=UpdateExpression(2),"->"=UpdateExpression(2),"..."=UpdateExpression(2),"*"=UpdateExpression(2),"||"=UpdateExpression(2),"&&"=UpdateExpression(2),"&"=UpdateExpression(2),UpdateOp=UpdateExpression(2),"="=UpdateExpression(2) | String=s35,Identifier=s1089,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s1190,FieldExpression=s1190,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s1071,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ConcatenatedString=s56,SubscriptExpression=s1190,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,ParameterPackExpansion-2=s56,expression=s1126
1043: NamespaceIdentifier-1 -> scopedIdentifier ·,TypeIdentifier-1 -> scopedIdentifier ·,Identifier-1 -> scopedIdentifier ·
  "("=Identifier-1(1),"::"=NamespaceIdentifier-1(1),"<"=TypeIdentifier-1(1),"<"=Identifier-1(1),","=Identifier-1(1),"{"=TypeIdentifier-1(1),"["=Identifier-1(1),incDec=Identifier-1(1),ArithOp<"+" | "-">=Identifier-1(1),ArithOp<"/" | "%">=Identifier-1(1),BitOp<"|">=Identifier-1(1),BitOp<"^">=Identifier-1(1),CompareOp<"==" | "!=">=Identifier-1(1),CompareOp<"<=" | ">=">=Identifier-1(1),"<"/"<"=Identifier-1(1),templateArgsEnd/">"=Identifier-1(1),BitOp<"<<" | ">>">=Identifier-1(1),UpdateOp=NamespaceIdentifier-1(1),"?"=Identifier-1(1),"."=Identifier-1(1),"->"=Identifier-1(1),"..."=Identifier-1(1),"*"=Identifier-1(1),"||"=Identifier-1(1),"&&"=Identifier-1(1),"&"=Identifier-1(1),";"=Identifier-1(1),"="=NamespaceIdentifier-1(1),"]"=Identifier-1(1),":"=Identifier-1(1),")"=Identifier-1(1),"}"=Identifier-1(1),templateArgsEndFallback=Identifier-1(1),templateArgsEnd=Identifier-1(1)
1044: NamespaceIdentifier-1 -> scopedIdentifier ·,TypeIdentifier-1 -> scopedIdentifier ·,Identifier-1 -> scopedIdentifier ·
  "("=TypeIdentifier-1(1),"("=Identifier-1(1),DestructorName=TypeIdentifier-1(1),"::"=NamespaceIdentifier-1(1),"<"=TypeIdentifier-1(1),"<"=Identifier-1(1),identifier/"const"=TypeIdentifier-1(1),identifier/"volatile"=TypeIdentifier-1(1),identifier/"restrict"=TypeIdentifier-1(1),identifier/"_Atomic"=TypeIdentifier-1(1),identifier/"mutable"=TypeIdentifier-1(1),identifier/"constexpr"=TypeIdentifier-1(1),identifier/"__declspec"=TypeIdentifier-1(1),"["=TypeIdentifier-1(1),"["=Identifier-1(1),identifier/"extern"=TypeIdentifier-1(1),identifier/"static"=TypeIdentifier-1(1),identifier/"register"=TypeIdentifier-1(1),identifier/"inline"=TypeIdentifier-1(1),identifier/"__attribute__"=TypeIdentifier-1(1),identifier/"__based"=TypeIdentifier-1(1),OperatorName=TypeIdentifier-1(1),identifier=TypeIdentifier-1(1),"*"=TypeIdentifier-1(1),"&&"=TypeIdentifier-1(1),"&"=TypeIdentifier-1(1),";"=TypeIdentifier-1(1),")"=TypeIdentifier-1(1),")"=Identifier-1(1),","=TypeIdentifier-1(1),"..."=TypeIdentifier-1(1),"="=TypeIdentifier-1(1)
1045: NamespaceIdentifier-1 -> scopedIdentifier ·,TypeIdentifier-1 -> scopedIdentifier ·,Identifier-1 -> scopedIdentifier ·
  "("=Identifier-1(1),"::"=NamespaceIdentifier-1(1),"<"=TypeIdentifier-1(1),"<"=Identifier-1(1),","=Identifier-1(1),"{"=Identifier-1(1),"["=Identifier-1(1),";"=Identifier-1(1),"="=Identifier-1(1),")"=Identifier-1(1),":"=Identifier-1(1),templateArgsEndFallback=Identifier-1(1),templateArgsEnd=Identifier-1(1)
1046: NamespaceIdentifier-1 -> scopedIdentifier ·,TypeIdentifier-1 -> scopedIdentifier ·,Identifier-1 -> scopedIdentifier ·
  templateArgsEndFallback=TypeIdentifier-1(1),templateArgsEndFallback=Identifier-1(1),"("=TypeIdentifier-1(1),"("=Identifier-1(1),"::"=NamespaceIdentifier-1(1),"<"=TypeIdentifier-1(1),"<"=Identifier-1(1),identifier/"const"=TypeIdentifier-1(1),identifier/"volatile"=TypeIdentifier-1(1),identifier/"restrict"=TypeIdentifier-1(1),identifier/"_Atomic"=TypeIdentifier-1(1),identifier/"mutable"=TypeIdentifier-1(1),identifier/"constexpr"=TypeIdentifier-1(1),","=TypeIdentifier-1(1),","=Identifier-1(1),"{"=TypeIdentifier-1(1),"["=TypeIdentifier-1(1),"["=Identifier-1(1),incDec=Identifier-1(1),ArithOp<"+" | "-">=Identifier-1(1),ArithOp<"/" | "%">=Identifier-1(1),BitOp<"|">=Identifier-1(1),BitOp<"^">=Identifier-1(1),CompareOp<"==" | "!=">=Identifier-1(1),CompareOp<"<=" | ">=">=Identifier-1(1),"<"/"<"=Identifier-1(1),templateArgsEnd=TypeIdentifier-1(1),templateArgsEnd=Identifier-1(1),templateArgsEnd/">"=Identifier-1(1),BitOp<"<<" | ">>">=Identifier-1(1),UpdateOp=NamespaceIdentifier-1(1),"?"=Identifier-1(1),"."=Identifier-1(1),"->"=Identifier-1(1),"..."=TypeIdentifier-1(1),"..."=Identifier-1(1),"*"=TypeIdentifier-1(1),"*"=Identifier-1(1),"||"=Identifier-1(1),"&&"=TypeIdentifier-1(1),"&&"=Identifier-1(1),"&"=TypeIdentifier-1(1),"&"=Identifier-1(1),"="=NamespaceIdentifier-1(1),DestructorName=TypeIdentifier-1(1),identifier/"__declspec"=TypeIdentifier-1(1),")"=TypeIdentifier-1(1),")"=Identifier-1(1),identifier/"extern"=TypeIdentifier-1(1),identifier/"static"=TypeIdentifier-1(1),identifier/"register"=TypeIdentifier-1(1),identifier/"inline"=TypeIdentifier-1(1),identifier/"__attribute__"=TypeIdentifier-1(1),identifier/"__based"=TypeIdentifier-1(1),OperatorName=TypeIdentifier-1(1),identifier=TypeIdentifier-1(1)
1047: NamespaceIdentifier-1 -> scopedIdentifier ·,TypeIdentifier-1 -> scopedIdentifier ·,Identifier-1 -> scopedIdentifier ·
  "("=TypeIdentifier-1(1),"("=Identifier-1(1),"::"=NamespaceIdentifier-1(1),"<"=TypeIdentifier-1(1),"<"=Identifier-1(1),identifier/"const"=TypeIdentifier-1(1),identifier/"volatile"=TypeIdentifier-1(1),identifier/"restrict"=TypeIdentifier-1(1),identifier/"_Atomic"=TypeIdentifier-1(1),identifier/"mutable"=TypeIdentifier-1(1),identifier/"constexpr"=TypeIdentifier-1(1),identifier/"__declspec"=TypeIdentifier-1(1),"{"=TypeIdentifier-1(1),"["=Identifier-1(1),identifier/"extern"=TypeIdentifier-1(1),identifier/"static"=TypeIdentifier-1(1),identifier/"register"=TypeIdentifier-1(1),identifier/"inline"=TypeIdentifier-1(1),identifier/"__attribute__"=TypeIdentifier-1(1),identifier/"__based"=TypeIdentifier-1(1),OperatorName=TypeIdentifier-1(1),identifier=TypeIdentifier-1(1),":"=TypeIdentifier-1(1),"*"=TypeIdentifier-1(1),"&&"=TypeIdentifier-1(1),"&"=TypeIdentifier-1(1),";"=TypeIdentifier-1(1),"="=TypeIdentifier-1(1)
1048: NamespaceIdentifier-1 -> scopedIdentifier ·,TypeIdentifier-1 -> scopedIdentifier ·,Identifier-1 -> scopedIdentifier ·
  "("=TypeIdentifier-1(1),"("=Identifier-1(1),DestructorName=TypeIdentifier-1(1),"::"=NamespaceIdentifier-1(1),"<"=TypeIdentifier-1(1),"<"=Identifier-1(1),identifier/"const"=TypeIdentifier-1(1),identifier/"volatile"=TypeIdentifier-1(1),identifier/"restrict"=TypeIdentifier-1(1),identifier/"_Atomic"=TypeIdentifier-1(1),identifier/"mutable"=TypeIdentifier-1(1),identifier/"constexpr"=TypeIdentifier-1(1),identifier/"__declspec"=TypeIdentifier-1(1),")"=Identifier-1(1),","=Identifier-1(1),"{"=TypeIdentifier-1(1),"["=TypeIdentifier-1(1),"["=Identifier-1(1),incDec=Identifier-1(1),ArithOp<"+" | "-">=Identifier-1(1),ArithOp<"/" | "%">=Identifier-1(1),BitOp<"|">=Identifier-1(1),BitOp<"^">=Identifier-1(1),CompareOp<"==" | "!=">=Identifier-1(1),CompareOp<"<=" | ">=">=Identifier-1(1),"<"/"<"=Identifier-1(1),templateArgsEnd/">"=Identifier-1(1),BitOp<"<<" | ">>">=Identifier-1(1),UpdateOp=NamespaceIdentifier-1(1),identifier/"extern"=TypeIdentifier-1(1),identifier/"static"=TypeIdentifier-1(1),identifier/"register"=TypeIdentifier-1(1),identifier/"inline"=TypeIdentifier-1(1),identifier/"__attribute__"=TypeIdentifier-1(1),identifier/"__based"=TypeIdentifier-1(1),OperatorName=TypeIdentifier-1(1),identifier=TypeIdentifier-1(1),"?"=Identifier-1(1),"."=Identifier-1(1),"->"=Identifier-1(1),"..."=Identifier-1(1),"*"=TypeIdentifier-1(1),"*"=Identifier-1(1),"||"=Identifier-1(1),"&&"=TypeIdentifier-1(1),"&&"=Identifier-1(1),"&"=TypeIdentifier-1(1),"&"=Identifier-1(1),";"=Identifier-1(1),"="=NamespaceIdentifier-1(1)
1049: NamespaceIdentifier-1 -> scopedIdentifier ·,TypeIdentifier-1 -> scopedIdentifier ·,Identifier-1 -> scopedIdentifier ·
  "("=TypeIdentifier-1(1),"("=Identifier-1(1),DestructorName=TypeIdentifier-1(1),"::"=NamespaceIdentifier-1(1),"<"=TypeIdentifier-1(1),"<"=Identifier-1(1),identifier/"const"=TypeIdentifier-1(1),identifier/"volatile"=TypeIdentifier-1(1),identifier/"restrict"=TypeIdentifier-1(1),identifier/"_Atomic"=TypeIdentifier-1(1),identifier/"mutable"=TypeIdentifier-1(1),identifier/"constexpr"=TypeIdentifier-1(1),identifier/"__declspec"=TypeIdentifier-1(1),"["=TypeIdentifier-1(1),"["=Identifier-1(1),identifier/"extern"=TypeIdentifier-1(1),identifier/"static"=TypeIdentifier-1(1),identifier/"register"=TypeIdentifier-1(1),identifier/"inline"=TypeIdentifier-1(1),identifier/"__attribute__"=TypeIdentifier-1(1),identifier/"__based"=TypeIdentifier-1(1),OperatorName=TypeIdentifier-1(1),identifier=TypeIdentifier-1(1),"*"=TypeIdentifier-1(1),"&&"=TypeIdentifier-1(1),"&"=TypeIdentifier-1(1),";"=Identifier-1(1)
1050: NamespaceIdentifier-1 -> scopedIdentifier ·,TypeIdentifier-1 -> scopedIdentifier ·,Identifier-1 -> scopedIdentifier ·
  "::"=NamespaceIdentifier-1(1),"<"=TypeIdentifier-1(1),";"=Identifier-1(1)
1051: NewExpression -> "::" scopedIdentifier/"new" · typeSpecifier,NewExpression -> "::" scopedIdentifier/"new" · typeSpecifier ArgumentList,NewExpression -> "::" scopedIdentifier/"new" · typeSpecifier InitializerList,NewExpression -> "::" scopedIdentifier/"new" · typeSpecifier NewDeclarator,NewExpression -> "::" scopedIdentifier/"new" · typeSpecifier NewDeclarator ArgumentList,NewExpression -> "::" scopedIdentifier/"new" · typeSpecifier NewDeclarator InitializerList,NewExpression -> "::" scopedIdentifier/"new" · ArgumentList typeSpecifier,NewExpression -> "::" scopedIdentifier/"new" · ArgumentList typeSpecifier ArgumentList,NewExpression -> "::" scopedIdentifier/"new" · ArgumentList typeSpecifier InitializerList,NewExpression -> "::" scopedIdentifier/"new" · ArgumentList typeSpecifier NewDeclarator,NewExpression -> "::" scopedIdentifier/"new" · ArgumentList typeSpecifier NewDeclarator ArgumentList,NewExpression -> "::" scopedIdentifier/"new" · ArgumentList typeSpecifier NewDeclarator InitializerList
  "("=s124,identifier/"bool"=s48,"::"=s141,identifier/"struct"=s1240,identifier/"typename"=s1029,identifier/"class"=s1248,identifier/"union"=s1244,identifier/"enum"=s1024,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140 | ArgumentList=s1127,NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeSpecifier=s343
1052: DeleteExpression -> "::" scopedIdentifier/"delete" · expression,DeleteExpression -> "::" scopedIdentifier/"delete" · "[" "]" expression
  RawString=s35,"("=s1215,identifier/"bool"=s164,"::"=s1068,"["=s1224,incDec=s1192,ArithOp<"+" | "-">=s1191,Number=s56,identifier/"delete"=s1032,LogicOp<"!">=s1191,BitOp<"~">=s1191,identifier/"sizeof"=s1196,identifier/"NULL"=s56,identifier/"new"=s1031,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s1084,"&"=s1084,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s1089,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s1190,FieldExpression=s1190,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s1071,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s1190,ConcatenatedString=s56,PointerExpression=s1190,SubscriptExpression=s1190,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s1128
1053: ScopedNamespaceIdentifier -> NamespaceIdentifier "::" · NamespaceIdentifier-1,ScopedNamespaceIdentifier -> TemplateType "::" · NamespaceIdentifier-1,ScopedNamespaceIdentifier -> ScopedNamespaceIdentifier "::" · NamespaceIdentifier-1,ScopedTypeIdentifier -> NamespaceIdentifier "::" · TypeIdentifier-1,ScopedTypeIdentifier -> TemplateType "::" · TypeIdentifier-1,ScopedTypeIdentifier -> ScopedNamespaceIdentifier "::" · TypeIdentifier-1,ScopedIdentifier -> NamespaceIdentifier "::" · Identifier-1,ScopedIdentifier -> NamespaceIdentifier "::" · OperatorName,ScopedIdentifier -> NamespaceIdentifier "::" · DestructorName,ScopedIdentifier -> TemplateType "::" · Identifier-1,ScopedIdentifier -> TemplateType "::" · OperatorName,ScopedIdentifier -> TemplateType "::" · DestructorName,ScopedIdentifier -> ScopedNamespaceIdentifier "::" · Identifier-1,ScopedIdentifier -> ScopedNamespaceIdentifier "::" · OperatorName,ScopedIdentifier -> ScopedNamespaceIdentifier "::" · DestructorName,OperatorCast -> NamespaceIdentifier "::" · scopedIdentifier/"operator" declarationSpecifiers abstractDeclarator,OperatorCast -> TemplateType "::" · scopedIdentifier/"operator" declarationSpecifiers abstractDeclarator,OperatorCast -> ScopedNamespaceIdentifier "::" · scopedIdentifier/"operator" declarationSpecifiers abstractDeclarator
  DestructorName=s349,OperatorName=s349,scopedIdentifier/"operator"=s350,scopedIdentifier=s1043 | NamespaceIdentifier-1=s347,TypeIdentifier-1=s348,Identifier-1=s349
1054: ScopedNamespaceIdentifier -> NamespaceIdentifier "::" · NamespaceIdentifier-1,ScopedNamespaceIdentifier -> TemplateType "::" · NamespaceIdentifier-1,ScopedNamespaceIdentifier -> ScopedNamespaceIdentifier "::" · NamespaceIdentifier-1,ScopedTypeIdentifier -> NamespaceIdentifier "::" · TypeIdentifier-1,ScopedTypeIdentifier -> TemplateType "::" · TypeIdentifier-1,ScopedTypeIdentifier -> ScopedNamespaceIdentifier "::" · TypeIdentifier-1,ScopedIdentifier -> NamespaceIdentifier "::" · Identifier-1,ScopedIdentifier -> NamespaceIdentifier "::" · OperatorName,ScopedIdentifier -> NamespaceIdentifier "::" · DestructorName,ScopedIdentifier -> TemplateType "::" · Identifier-1,ScopedIdentifier -> TemplateType "::" · OperatorName,ScopedIdentifier -> TemplateType "::" · DestructorName,ScopedIdentifier -> ScopedNamespaceIdentifier "::" · Identifier-1,ScopedIdentifier -> ScopedNamespaceIdentifier "::" · OperatorName,ScopedIdentifier -> ScopedNamespaceIdentifier "::" · DestructorName,OperatorCast -> NamespaceIdentifier "::" · scopedIdentifier/"operator" declarationSpecifiers abstractDeclarator,OperatorCast -> TemplateType "::" · scopedIdentifier/"operator" declarationSpecifiers abstractDeclarator,OperatorCast -> ScopedNamespaceIdentifier "::" · scopedIdentifier/"operator" declarationSpecifiers abstractDeclarator
  DestructorName=s349,OperatorName=s349,scopedIdentifier/"operator"=s350,scopedIdentifier=s1047 | NamespaceIdentifier-1=s347,TypeIdentifier-1=s348,Identifier-1=s349
1055: ScopedNamespaceIdentifier -> NamespaceIdentifier "::" · NamespaceIdentifier-1,ScopedNamespaceIdentifier -> TemplateType "::" · NamespaceIdentifier-1,ScopedNamespaceIdentifier -> ScopedNamespaceIdentifier "::" · NamespaceIdentifier-1,ScopedTypeIdentifier -> NamespaceIdentifier "::" · TypeIdentifier-1,ScopedTypeIdentifier -> TemplateType "::" · TypeIdentifier-1,ScopedTypeIdentifier -> ScopedNamespaceIdentifier "::" · TypeIdentifier-1,ScopedIdentifier -> NamespaceIdentifier "::" · Identifier-1,ScopedIdentifier -> NamespaceIdentifier "::" · OperatorName,ScopedIdentifier -> NamespaceIdentifier "::" · DestructorName,ScopedIdentifier -> TemplateType "::" · Identifier-1,ScopedIdentifier -> TemplateType "::" · OperatorName,ScopedIdentifier -> TemplateType "::" · DestructorName,ScopedIdentifier -> ScopedNamespaceIdentifier "::" · Identifier-1,ScopedIdentifier -> ScopedNamespaceIdentifier "::" · OperatorName,ScopedIdentifier -> ScopedNamespaceIdentifier "::" · DestructorName,OperatorCast -> NamespaceIdentifier "::" · scopedIdentifier/"operator" declarationSpecifiers abstractDeclarator,OperatorCast -> TemplateType "::" · scopedIdentifier/"operator" declarationSpecifiers abstractDeclarator,OperatorCast -> ScopedNamespaceIdentifier "::" · scopedIdentifier/"operator" declarationSpecifiers abstractDeclarator
  DestructorName=s349,OperatorName=s349,scopedIdentifier/"operator"=s350,scopedIdentifier=s1044 | NamespaceIdentifier-1=s347,TypeIdentifier-1=s348,Identifier-1=s349
1056: AssignmentExpression -> Identifier UpdateOp · expression,AssignmentExpression -> Identifier "=" · expression,AssignmentExpression -> CallExpression UpdateOp · expression,AssignmentExpression -> CallExpression "=" · expression,AssignmentExpression -> FieldExpression UpdateOp · expression,AssignmentExpression -> FieldExpression "=" · expression,AssignmentExpression -> PointerExpression UpdateOp · expression,AssignmentExpression -> PointerExpression "=" · expression,AssignmentExpression -> SubscriptExpression UpdateOp · expression,AssignmentExpression -> SubscriptExpression "=" · expression,AssignmentExpression -> ParenthesizedExpression UpdateOp · expression,AssignmentExpression -> ParenthesizedExpression "=" · expression,AssignmentExpression -> ScopedNamespaceIdentifier UpdateOp · expression,AssignmentExpression -> ScopedNamespaceIdentifier "=" · expression
  RawString=s35,"("=s1215,identifier/"bool"=s164,"::"=s1068,"["=s193,incDec=s1192,ArithOp<"+" | "-">=s1191,Number=s56,identifier/"delete"=s1032,LogicOp<"!">=s1191,BitOp<"~">=s1191,identifier/"sizeof"=s1196,identifier/"NULL"=s56,identifier/"new"=s1031,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s1084,"&"=s1084,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s1089,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s1190,FieldExpression=s1190,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s1071,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s1190,ConcatenatedString=s56,PointerExpression=s1190,SubscriptExpression=s1190,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s1129
1057: Identifier -> identifier ·,NamespaceIdentifier -> identifier ·,TypeIdentifier -> identifier ·
  "("=Identifier(1),"("=TypeIdentifier(1),"::"=NamespaceIdentifier(1),"<"=Identifier(1),"<"=TypeIdentifier(1),identifier/"const"=TypeIdentifier(1),identifier/"volatile"=TypeIdentifier(1),identifier/"restrict"=TypeIdentifier(1),identifier/"_Atomic"=TypeIdentifier(1),identifier/"mutable"=TypeIdentifier(1),identifier/"constexpr"=TypeIdentifier(1),")"=Identifier(1),")"=TypeIdentifier(1),","=Identifier(1),"{"=TypeIdentifier(1),"["=Identifier(1),"["=TypeIdentifier(1),incDec=Identifier(1),ArithOp<"+" | "-">=Identifier(1),ArithOp<"/" | "%">=Identifier(1),BitOp<"|">=Identifier(1),BitOp<"^">=Identifier(1),CompareOp<"==" | "!=">=Identifier(1),CompareOp<"<=" | ">=">=Identifier(1),"<"/"<"=Identifier(1),templateArgsEnd/">"=Identifier(1),BitOp<"<<" | ">>">=Identifier(1),UpdateOp=Identifier(1),"?"=Identifier(1),"."=Identifier(1),"->"=Identifier(1),"..."=Identifier(1),"*"=Identifier(1),"*"=TypeIdentifier(1),"||"=Identifier(1),"&&"=Identifier(1),"&&"=TypeIdentifier(1),"&"=Identifier(1),"&"=TypeIdentifier(1),"="=Identifier(1),DestructorName=TypeIdentifier(1),identifier/"__declspec"=TypeIdentifier(1),identifier/"extern"=TypeIdentifier(1),identifier/"static"=TypeIdentifier(1),identifier/"register"=TypeIdentifier(1),identifier/"inline"=TypeIdentifier(1),identifier/"__attribute__"=TypeIdentifier(1),identifier/"__based"=TypeIdentifier(1),OperatorName=TypeIdentifier(1),identifier=TypeIdentifier(1),";"=Identifier(1)
1058: Identifier -> identifier ·,NamespaceIdentifier -> identifier ·,TypeIdentifier -> identifier ·
  "("=Identifier(1),"::"=NamespaceIdentifier(1),"<"=Identifier(1),"<"=TypeIdentifier(1),","=Identifier(1),"{"=Identifier(1),"["=Identifier(1),";"=Identifier(1),"="=Identifier(1),":"=Identifier(1)
1059: Identifier -> identifier ·,NamespaceIdentifier -> identifier ·,TypeIdentifier -> identifier ·
  "::"=NamespaceIdentifier(1),"<"=TypeIdentifier(1),";"=Identifier(1),"="=TypeIdentifier(1)
1060: Identifier -> identifier ·,NamespaceIdentifier -> identifier ·,TypeIdentifier -> identifier ·
  "("=Identifier(1),"("=TypeIdentifier(1),DestructorName=TypeIdentifier(1),"::"=NamespaceIdentifier(1),"<"=Identifier(1),"<"=TypeIdentifier(1),identifier/"const"=TypeIdentifier(1),identifier/"volatile"=TypeIdentifier(1),identifier/"restrict"=TypeIdentifier(1),identifier/"_Atomic"=TypeIdentifier(1),identifier/"mutable"=TypeIdentifier(1),identifier/"constexpr"=TypeIdentifier(1),identifier/"__declspec"=TypeIdentifier(1),"["=Identifier(1),"["=TypeIdentifier(1),identifier/"extern"=TypeIdentifier(1),identifier/"static"=TypeIdentifier(1),identifier/"register"=TypeIdentifier(1),identifier/"inline"=TypeIdentifier(1),identifier/"__attribute__"=TypeIdentifier(1),identifier/"__based"=TypeIdentifier(1),OperatorName=TypeIdentifier(1),identifier=TypeIdentifier(1),"*"=TypeIdentifier(1),"&&"=TypeIdentifier(1),"&"=TypeIdentifier(1),";"=Identifier(1),")"=Identifier(1),")"=TypeIdentifier(1),","=TypeIdentifier(1),"..."=TypeIdentifier(1),"="=TypeIdentifier(1)
1061: Identifier -> identifier ·,NamespaceIdentifier -> identifier ·,TypeIdentifier -> identifier ·
  templateArgsEndFallback=Identifier(1),templateArgsEndFallback=TypeIdentifier(1),"("=Identifier(1),"("=TypeIdentifier(1),"::"=NamespaceIdentifier(1),"<"=Identifier(1),"<"=TypeIdentifier(1),identifier/"const"=TypeIdentifier(1),identifier/"volatile"=TypeIdentifier(1),identifier/"restrict"=TypeIdentifier(1),identifier/"_Atomic"=TypeIdentifier(1),identifier/"mutable"=TypeIdentifier(1),identifier/"constexpr"=TypeIdentifier(1),","=Identifier(1),","=TypeIdentifier(1),"{"=TypeIdentifier(1),"["=Identifier(1),"["=TypeIdentifier(1),incDec=Identifier(1),ArithOp<"+" | "-">=Identifier(1),ArithOp<"/" | "%">=Identifier(1),BitOp<"|">=Identifier(1),BitOp<"^">=Identifier(1),CompareOp<"==" | "!=">=Identifier(1),CompareOp<"<=" | ">=">=Identifier(1),"<"/"<"=Identifier(1),templateArgsEnd=Identifier(1),templateArgsEnd=TypeIdentifier(1),templateArgsEnd/">"=Identifier(1),BitOp<"<<" | ">>">=Identifier(1),UpdateOp=Identifier(1),"?"=Identifier(1),"."=Identifier(1),"->"=Identifier(1),"..."=Identifier(1),"..."=TypeIdentifier(1),"*"=Identifier(1),"*"=TypeIdentifier(1),"||"=Identifier(1),"&&"=Identifier(1),"&&"=TypeIdentifier(1),"&"=Identifier(1),"&"=TypeIdentifier(1),"="=Identifier(1)
1062: Identifier -> identifier ·,NamespaceIdentifier -> identifier ·,TypeIdentifier -> identifier ·
  "("=Identifier(1),"("=TypeIdentifier(1),DestructorName=TypeIdentifier(1),"::"=NamespaceIdentifier(1),"<"=Identifier(1),"<"=TypeIdentifier(1),identifier/"const"=TypeIdentifier(1),identifier/"volatile"=TypeIdentifier(1),identifier/"restrict"=TypeIdentifier(1),identifier/"_Atomic"=TypeIdentifier(1),identifier/"mutable"=TypeIdentifier(1),identifier/"constexpr"=TypeIdentifier(1),identifier/"__declspec"=TypeIdentifier(1),")"=Identifier(1),")"=TypeIdentifier(1),","=Identifier(1),","=TypeIdentifier(1),"{"=TypeIdentifier(1),"["=Identifier(1),"["=TypeIdentifier(1),incDec=Identifier(1),ArithOp<"+" | "-">=Identifier(1),ArithOp<"/" | "%">=Identifier(1),BitOp<"|">=Identifier(1),BitOp<"^">=Identifier(1),CompareOp<"==" | "!=">=Identifier(1),CompareOp<"<=" | ">=">=Identifier(1),"<"/"<"=Identifier(1),templateArgsEnd/">"=Identifier(1),BitOp<"<<" | ">>">=Identifier(1),UpdateOp=Identifier(1),identifier/"extern"=TypeIdentifier(1),identifier/"static"=TypeIdentifier(1),identifier/"register"=TypeIdentifier(1),identifier/"inline"=TypeIdentifier(1),identifier/"__attribute__"=TypeIdentifier(1),identifier/"__based"=TypeIdentifier(1),OperatorName=TypeIdentifier(1),identifier=TypeIdentifier(1),"?"=Identifier(1),"."=Identifier(1),"->"=Identifier(1),"..."=Identifier(1),"..."=TypeIdentifier(1),"*"=Identifier(1),"*"=TypeIdentifier(1),"||"=Identifier(1),"&&"=Identifier(1),"&&"=TypeIdentifier(1),"&"=Identifier(1),"&"=TypeIdentifier(1),"="=Identifier(1),"="=TypeIdentifier(1)
1063: Identifier -> identifier ·,NamespaceIdentifier -> identifier ·,TypeIdentifier -> identifier ·
  "("=Identifier(1),"("=TypeIdentifier(1),DestructorName=TypeIdentifier(1),"::"=NamespaceIdentifier(1),"<"=Identifier(1),"<"=TypeIdentifier(1),identifier/"const"=TypeIdentifier(1),identifier/"volatile"=TypeIdentifier(1),identifier/"restrict"=TypeIdentifier(1),identifier/"_Atomic"=TypeIdentifier(1),identifier/"mutable"=TypeIdentifier(1),identifier/"constexpr"=TypeIdentifier(1),identifier/"__declspec"=TypeIdentifier(1),")"=Identifier(1),","=Identifier(1),"{"=TypeIdentifier(1),"["=Identifier(1),"["=TypeIdentifier(1),incDec=Identifier(1),ArithOp<"+" | "-">=Identifier(1),ArithOp<"/" | "%">=Identifier(1),BitOp<"|">=Identifier(1),BitOp<"^">=Identifier(1),CompareOp<"==" | "!=">=Identifier(1),CompareOp<"<=" | ">=">=Identifier(1),"<"/"<"=Identifier(1),templateArgsEnd/">"=Identifier(1),BitOp<"<<" | ">>">=Identifier(1),UpdateOp=Identifier(1),identifier/"extern"=TypeIdentifier(1),identifier/"static"=TypeIdentifier(1),identifier/"register"=TypeIdentifier(1),identifier/"inline"=TypeIdentifier(1),identifier/"__attribute__"=TypeIdentifier(1),identifier/"__based"=TypeIdentifier(1),OperatorName=TypeIdentifier(1),identifier=TypeIdentifier(1),"?"=Identifier(1),"."=Identifier(1),"->"=Identifier(1),"..."=Identifier(1),"*"=Identifier(1),"*"=TypeIdentifier(1),"||"=Identifier(1),"&&"=Identifier(1),"&&"=TypeIdentifier(1),"&"=Identifier(1),"&"=TypeIdentifier(1),";"=Identifier(1),"="=Identifier(1)
1064: Identifier -> identifier ·,NamespaceIdentifier -> identifier ·,TypeIdentifier -> identifier ·
  "("=Identifier(1),"("=TypeIdentifier(1),"::"=NamespaceIdentifier(1),"<"=Identifier(1),"<"=TypeIdentifier(1),identifier/"const"=TypeIdentifier(1),identifier/"volatile"=TypeIdentifier(1),identifier/"restrict"=TypeIdentifier(1),identifier/"_Atomic"=TypeIdentifier(1),identifier/"mutable"=TypeIdentifier(1),identifier/"constexpr"=TypeIdentifier(1),identifier/"__declspec"=TypeIdentifier(1),"{"=TypeIdentifier(1),"["=Identifier(1),identifier/"extern"=TypeIdentifier(1),identifier/"static"=TypeIdentifier(1),identifier/"register"=TypeIdentifier(1),identifier/"inline"=TypeIdentifier(1),identifier/"__attribute__"=TypeIdentifier(1),identifier/"__based"=TypeIdentifier(1),OperatorName=TypeIdentifier(1),identifier=TypeIdentifier(1),":"=TypeIdentifier(1),"*"=TypeIdentifier(1),"&&"=TypeIdentifier(1),"&"=TypeIdentifier(1),";"=TypeIdentifier(1),"="=TypeIdentifier(1)
1065: Identifier -> identifier ·,NamespaceIdentifier -> identifier ·,TypeIdentifier -> identifier ·
  "("=Identifier(1),"("=TypeIdentifier(1),DestructorName=TypeIdentifier(1),"::"=NamespaceIdentifier(1),"<"=Identifier(1),"<"=TypeIdentifier(1),identifier/"const"=TypeIdentifier(1),identifier/"volatile"=TypeIdentifier(1),identifier/"restrict"=TypeIdentifier(1),identifier/"_Atomic"=TypeIdentifier(1),identifier/"mutable"=TypeIdentifier(1),identifier/"constexpr"=TypeIdentifier(1),identifier/"__declspec"=TypeIdentifier(1),"["=Identifier(1),"["=TypeIdentifier(1),identifier/"extern"=TypeIdentifier(1),identifier/"static"=TypeIdentifier(1),identifier/"register"=TypeIdentifier(1),identifier/"inline"=TypeIdentifier(1),identifier/"__attribute__"=TypeIdentifier(1),identifier/"__based"=TypeIdentifier(1),OperatorName=TypeIdentifier(1),identifier=TypeIdentifier(1),"*"=TypeIdentifier(1),"&&"=TypeIdentifier(1),"&"=TypeIdentifier(1),";"=TypeIdentifier(1)
1066: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,PointerExpression -> "*" expression ·,PointerExpression -> "&" expression ·,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,incDec=s1042,"."=s108,"->"=s108,ArithOp<"+" | "-">=PointerExpression(2),ArithOp<"/" | "%">=PointerExpression(2),BitOp<"|">=PointerExpression(2),BitOp<"^">=PointerExpression(2),CompareOp<"==" | "!=">=PointerExpression(2),CompareOp<"<=" | ">=">=PointerExpression(2),"<"/"<"=PointerExpression(2),templateArgsEnd/">"=PointerExpression(2),BitOp<"<<" | ">>">=PointerExpression(2),UpdateOp=PointerExpression(2),"?"=PointerExpression(2),":"=PointerExpression(2),"..."=PointerExpression(2),"*"=PointerExpression(2),"||"=PointerExpression(2),"&&"=PointerExpression(2),"&"=PointerExpression(2),"="=PointerExpression(2) | ArgumentList=s105
1067: ScopedNamespaceIdentifier -> "::" · NamespaceIdentifier-1,ScopedTypeIdentifier -> "::" · TypeIdentifier-1,ScopedIdentifier -> "::" · Identifier-1,ScopedIdentifier -> "::" · OperatorName,ScopedIdentifier -> "::" · DestructorName,NewExpression -> "::" · scopedIdentifier/"new" typeSpecifier,NewExpression -> "::" · scopedIdentifier/"new" typeSpecifier ArgumentList,NewExpression -> "::" · scopedIdentifier/"new" typeSpecifier InitializerList,NewExpression -> "::" · scopedIdentifier/"new" typeSpecifier NewDeclarator,NewExpression -> "::" · scopedIdentifier/"new" typeSpecifier NewDeclarator ArgumentList,NewExpression -> "::" · scopedIdentifier/"new" typeSpecifier NewDeclarator InitializerList,NewExpression -> "::" · scopedIdentifier/"new" ArgumentList typeSpecifier,NewExpression -> "::" · scopedIdentifier/"new" ArgumentList typeSpecifier ArgumentList,NewExpression -> "::" · scopedIdentifier/"new" ArgumentList typeSpecifier InitializerList,NewExpression -> "::" · scopedIdentifier/"new" ArgumentList typeSpecifier NewDeclarator,NewExpression -> "::" · scopedIdentifier/"new" ArgumentList typeSpecifier NewDeclarator ArgumentList,NewExpression -> "::" · scopedIdentifier/"new" ArgumentList typeSpecifier NewDeclarator InitializerList,DeleteExpression -> "::" · scopedIdentifier/"delete" expression,DeleteExpression -> "::" · scopedIdentifier/"delete" "[" "]" expression
  DestructorName=s128,OperatorName=s128,scopedIdentifier/"new"=s130,scopedIdentifier/"delete"=s131,scopedIdentifier=s125 | NamespaceIdentifier-1=s126,TypeIdentifier-1=s127,Identifier-1=s128
1068: ScopedNamespaceIdentifier -> "::" · NamespaceIdentifier-1,ScopedTypeIdentifier -> "::" · TypeIdentifier-1,ScopedIdentifier -> "::" · Identifier-1,ScopedIdentifier -> "::" · OperatorName,ScopedIdentifier -> "::" · DestructorName,NewExpression -> "::" · scopedIdentifier/"new" typeSpecifier,NewExpression -> "::" · scopedIdentifier/"new" typeSpecifier ArgumentList,NewExpression -> "::" · scopedIdentifier/"new" typeSpecifier InitializerList,NewExpression -> "::" · scopedIdentifier/"new" typeSpecifier NewDeclarator,NewExpression -> "::" · scopedIdentifier/"new" typeSpecifier NewDeclarator ArgumentList,NewExpression -> "::" · scopedIdentifier/"new" typeSpecifier NewDeclarator InitializerList,NewExpression -> "::" · scopedIdentifier/"new" ArgumentList typeSpecifier,NewExpression -> "::" · scopedIdentifier/"new" ArgumentList typeSpecifier ArgumentList,NewExpression -> "::" · scopedIdentifier/"new" ArgumentList typeSpecifier InitializerList,NewExpression -> "::" · scopedIdentifier/"new" ArgumentList typeSpecifier NewDeclarator,NewExpression -> "::" · scopedIdentifier/"new" ArgumentList typeSpecifier NewDeclarator ArgumentList,NewExpression -> "::" · scopedIdentifier/"new" ArgumentList typeSpecifier NewDeclarator InitializerList,DeleteExpression -> "::" · scopedIdentifier/"delete" expression,DeleteExpression -> "::" · scopedIdentifier/"delete" "[" "]" expression
  DestructorName=s128,OperatorName=s128,scopedIdentifier/"new"=s1051,scopedIdentifier/"delete"=s1052,scopedIdentifier=s1043 | NamespaceIdentifier-1=s126,TypeIdentifier-1=s127,Identifier-1=s128
1069: ScopedNamespaceIdentifier -> "::" · NamespaceIdentifier-1,ScopedTypeIdentifier -> "::" · TypeIdentifier-1,ScopedIdentifier -> "::" · Identifier-1,ScopedIdentifier -> "::" · OperatorName,ScopedIdentifier -> "::" · DestructorName,NewExpression -> "::" · scopedIdentifier/"new" typeSpecifier,NewExpression -> "::" · scopedIdentifier/"new" typeSpecifier ArgumentList,NewExpression -> "::" · scopedIdentifier/"new" typeSpecifier InitializerList,NewExpression -> "::" · scopedIdentifier/"new" typeSpecifier NewDeclarator,NewExpression -> "::" · scopedIdentifier/"new" typeSpecifier NewDeclarator ArgumentList,NewExpression -> "::" · scopedIdentifier/"new" typeSpecifier NewDeclarator InitializerList,NewExpression -> "::" · scopedIdentifier/"new" ArgumentList typeSpecifier,NewExpression -> "::" · scopedIdentifier/"new" ArgumentList typeSpecifier ArgumentList,NewExpression -> "::" · scopedIdentifier/"new" ArgumentList typeSpecifier InitializerList,NewExpression -> "::" · scopedIdentifier/"new" ArgumentList typeSpecifier NewDeclarator,NewExpression -> "::" · scopedIdentifier/"new" ArgumentList typeSpecifier NewDeclarator ArgumentList,NewExpression -> "::" · scopedIdentifier/"new" ArgumentList typeSpecifier NewDeclarator InitializerList,DeleteExpression -> "::" · scopedIdentifier/"delete" expression,DeleteExpression -> "::" · scopedIdentifier/"delete" "[" "]" expression
  DestructorName=s128,OperatorName=s128,scopedIdentifier/"new"=s130,scopedIdentifier/"delete"=s131,scopedIdentifier=s1046 | NamespaceIdentifier-1=s126,TypeIdentifier-1=s127,Identifier-1=s128
1070: ScopedNamespaceIdentifier -> "::" · NamespaceIdentifier-1,ScopedTypeIdentifier -> "::" · TypeIdentifier-1,ScopedIdentifier -> "::" · Identifier-1,ScopedIdentifier -> "::" · OperatorName,ScopedIdentifier -> "::" · DestructorName,NewExpression -> "::" · scopedIdentifier/"new" typeSpecifier,NewExpression -> "::" · scopedIdentifier/"new" typeSpecifier ArgumentList,NewExpression -> "::" · scopedIdentifier/"new" typeSpecifier InitializerList,NewExpression -> "::" · scopedIdentifier/"new" typeSpecifier NewDeclarator,NewExpression -> "::" · scopedIdentifier/"new" typeSpecifier NewDeclarator ArgumentList,NewExpression -> "::" · scopedIdentifier/"new" typeSpecifier NewDeclarator InitializerList,NewExpression -> "::" · scopedIdentifier/"new" ArgumentList typeSpecifier,NewExpression -> "::" · scopedIdentifier/"new" ArgumentList typeSpecifier ArgumentList,NewExpression -> "::" · scopedIdentifier/"new" ArgumentList typeSpecifier InitializerList,NewExpression -> "::" · scopedIdentifier/"new" ArgumentList typeSpecifier NewDeclarator,NewExpression -> "::" · scopedIdentifier/"new" ArgumentList typeSpecifier NewDeclarator ArgumentList,NewExpression -> "::" · scopedIdentifier/"new" ArgumentList typeSpecifier NewDeclarator InitializerList,DeleteExpression -> "::" · scopedIdentifier/"delete" expression,DeleteExpression -> "::" · scopedIdentifier/"delete" "[" "]" expression
  DestructorName=s128,OperatorName=s128,scopedIdentifier/"new"=s130,scopedIdentifier/"delete"=s131,scopedIdentifier=s1048 | NamespaceIdentifier-1=s126,TypeIdentifier-1=s127,Identifier-1=s128
1071: ScopedNamespaceIdentifier -> ScopedNamespaceIdentifier · "::" NamespaceIdentifier-1,ScopedTypeIdentifier -> ScopedNamespaceIdentifier · "::" TypeIdentifier-1,ScopedIdentifier -> ScopedNamespaceIdentifier · "::" Identifier-1,ScopedIdentifier -> ScopedNamespaceIdentifier · "::" OperatorName,ScopedIdentifier -> ScopedNamespaceIdentifier · "::" DestructorName,AssignmentExpression -> ScopedNamespaceIdentifier · UpdateOp expression,AssignmentExpression -> ScopedNamespaceIdentifier · "=" expression
  "::"=s375,UpdateOp=s1056,"="=s1056
1072: typeQualifier+ -> typeQualifier+ · typeQualifier+,PointerDeclarator-1 -> "*" typeQualifier+ · declarator
  "("=s180,DestructorName=s26,"::"=s1075,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s182,identifier/"__based"=s63,OperatorName=s26,identifier=s1058,"*"=s1079,"&&"=s1081,"&"=s1081 | Identifier=s181,NamespaceIdentifier=s1198,TemplateType=s1198,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s1198,MsBasedModifier=s1189,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,typeQualifier+=s376,typeQualifier=s159,declarator=s1305
1073: msPointerModifier+ -> msPointerModifier+ · msPointerModifier+,PointerDeclarator-1 -> "*" msPointerModifier+ · declarator,PointerDeclarator-1 -> "*" msPointerModifier+ · typeQualifier+ declarator
  "("=s180,DestructorName=s26,"::"=s1075,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s182,identifier/"__based"=s63,identifier/"__restrict"=s165,OperatorName=s26,identifier=s1058,"*"=s1079,"&&"=s1081,"&"=s1081 | Identifier=s181,NamespaceIdentifier=s1198,TemplateType=s1198,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s1198,MsBasedModifier=s1189,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,typeQualifier+=s1137,msPointerModifier+=s379,typeQualifier=s159,declarator=s1305
1074: PointerDeclarator-1 -> MsBasedModifier "*" · declarator,PointerDeclarator-1 -> MsBasedModifier "*" · typeQualifier+ declarator,PointerDeclarator-1 -> MsBasedModifier "*" · msPointerModifier+ declarator,PointerDeclarator-1 -> MsBasedModifier "*" · msPointerModifier+ typeQualifier+ declarator
  "("=s180,DestructorName=s26,"::"=s1075,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s182,identifier/"__based"=s63,identifier/"__restrict"=s165,OperatorName=s26,identifier=s1058,"*"=s1079,"&&"=s1081,"&"=s1081 | Identifier=s181,NamespaceIdentifier=s1198,TemplateType=s1198,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s1198,MsBasedModifier=s1189,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,typeQualifier+=s1137,msPointerModifier+=s1139,typeQualifier=s159,declarator=s1305
1075: ScopedNamespaceIdentifier -> "::" · NamespaceIdentifier-1,ScopedTypeIdentifier -> "::" · TypeIdentifier-1,ScopedIdentifier -> "::" · Identifier-1,ScopedIdentifier -> "::" · OperatorName,ScopedIdentifier -> "::" · DestructorName
  DestructorName=s128,OperatorName=s128,scopedIdentifier=s1045 | NamespaceIdentifier-1=s126,TypeIdentifier-1=s127,Identifier-1=s128
1076: ScopedNamespaceIdentifier -> "::" · NamespaceIdentifier-1,ScopedTypeIdentifier -> "::" · TypeIdentifier-1,ScopedIdentifier -> "::" · Identifier-1,ScopedIdentifier -> "::" · OperatorName,ScopedIdentifier -> "::" · DestructorName
  DestructorName=s128,OperatorName=s128,scopedIdentifier=s1050 | NamespaceIdentifier-1=s126,TypeIdentifier-1=s127,Identifier-1=s128
1077: ScopedNamespaceIdentifier -> "::" · NamespaceIdentifier-1,ScopedTypeIdentifier -> "::" · TypeIdentifier-1,ScopedIdentifier -> "::" · Identifier-1,ScopedIdentifier -> "::" · OperatorName,ScopedIdentifier -> "::" · DestructorName
  DestructorName=s128,OperatorName=s128,scopedIdentifier=s1044 | NamespaceIdentifier-1=s126,TypeIdentifier-1=s127,Identifier-1=s128
1078: ScopedNamespaceIdentifier -> "::" · NamespaceIdentifier-1,ScopedTypeIdentifier -> "::" · TypeIdentifier-1,ScopedIdentifier -> "::" · Identifier-1,ScopedIdentifier -> "::" · OperatorName,ScopedIdentifier -> "::" · DestructorName
  DestructorName=s128,OperatorName=s128,scopedIdentifier=s1049 | NamespaceIdentifier-1=s126,TypeIdentifier-1=s127,Identifier-1=s128
1079: PointerDeclarator-1 -> "*" · declarator,PointerDeclarator-1 -> "*" · typeQualifier+ declarator,PointerDeclarator-1 -> "*" · msPointerModifier+ declarator,PointerDeclarator-1 -> "*" · msPointerModifier+ typeQualifier+ declarator
  "("=s180,DestructorName=s26,"::"=s1075,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s182,identifier/"__based"=s63,identifier/"__restrict"=s165,OperatorName=s26,identifier=s1058,"*"=s1079,"&&"=s1081,"&"=s1081 | Identifier=s181,NamespaceIdentifier=s1198,TemplateType=s1198,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s1198,MsBasedModifier=s1189,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,typeQualifier+=s1072,msPointerModifier+=s1073,typeQualifier=s159,declarator=s1302
1080: PointerDeclarator-1 -> "*" · declarator,PointerDeclarator-1 -> "*" · typeQualifier+ declarator,PointerDeclarator-1 -> "*" · msPointerModifier+ declarator,PointerDeclarator-1 -> "*" · msPointerModifier+ typeQualifier+ declarator
  "("=s180,DestructorName=s26,"::"=s1075,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s182,identifier/"__based"=s63,identifier/"__restrict"=s165,OperatorName=s26,identifier=s153,"*"=s1080,"&&"=s1082,"&"=s1082 | Identifier=s181,NamespaceIdentifier=s1198,TemplateType=s1198,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s1198,MsBasedModifier=s1281,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,typeQualifier+=s1207,msPointerModifier+=s1208,typeQualifier=s159,declarator=s162
1081: ReferenceDeclarator -> "&" · declarator,ReferenceDeclarator -> "&&" · declarator
  "("=s180,DestructorName=s26,"::"=s1075,"["=s182,identifier/"__based"=s63,OperatorName=s26,identifier=s1058,"*"=s1079,"&&"=s1081,"&"=s1081 | Identifier=s181,NamespaceIdentifier=s1198,TemplateType=s1198,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s1198,MsBasedModifier=s1189,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,declarator=s1303
1082: ReferenceDeclarator -> "&" · declarator,ReferenceDeclarator -> "&&" · declarator
  "("=s180,DestructorName=s26,"::"=s1075,"["=s182,identifier/"__based"=s63,OperatorName=s26,identifier=s153,"*"=s1080,"&&"=s1082,"&"=s1082 | Identifier=s181,NamespaceIdentifier=s1198,TemplateType=s1198,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s1198,MsBasedModifier=s1281,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,declarator=s177
1083: TemplateFunction -> Identifier · TemplateArgumentList,commaSep1<Identifier> -> Identifier ·,commaSep1<Identifier> -> Identifier · ("," Identifier)+,AssignmentExpression -> Identifier · UpdateOp expression,AssignmentExpression -> Identifier · "=" expression,expression -> Identifier ·
  "<"=s185,","=s410,UpdateOp=s135,"="=s135,"("=expression(1),"["=expression(1),"]"=expression(1),"]"=commaSep1<Identifier>(1),incDec=expression(1),ArithOp<"+" | "-">=expression(1),ArithOp<"/" | "%">=expression(1),BitOp<"|">=expression(1),BitOp<"^">=expression(1),CompareOp<"==" | "!=">=expression(1),CompareOp<"<=" | ">=">=expression(1),"<"/"<"=expression(1),templateArgsEnd/">"=expression(1),BitOp<"<<" | ">>">=expression(1),"?"=expression(1),"."=expression(1),"->"=expression(1),"..."=expression(1),"*"=expression(1),"||"=expression(1),"&&"=expression(1),"&"=expression(1) | TemplateArgumentList=s184,("," Identifier)+=s411
1084: PointerExpression -> "*" · expression,PointerExpression -> "&" · expression
  RawString=s35,"("=s1215,identifier/"bool"=s164,"::"=s1068,"["=s193,incDec=s1192,ArithOp<"+" | "-">=s1191,Number=s56,identifier/"delete"=s1032,LogicOp<"!">=s1191,BitOp<"~">=s1191,identifier/"sizeof"=s1196,identifier/"NULL"=s56,identifier/"new"=s1031,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s1084,"&"=s1084,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s1089,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s1190,FieldExpression=s1190,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s1071,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s1190,ConcatenatedString=s56,PointerExpression=s1190,SubscriptExpression=s1190,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s1066
1085: ScopedNamespaceIdentifier -> "::" · NamespaceIdentifier-1,ScopedTypeIdentifier -> "::" · TypeIdentifier-1,ScopedIdentifier -> "::" · Identifier-1,ScopedIdentifier -> "::" · OperatorName,ScopedIdentifier -> "::" · DestructorName,OperatorCast -> "::" · scopedIdentifier/"operator" declarationSpecifiers abstractDeclarator
  DestructorName=s128,OperatorName=s128,scopedIdentifier/"operator"=s129,scopedIdentifier=s1044 | NamespaceIdentifier-1=s126,TypeIdentifier-1=s127,Identifier-1=s128
1086: ScopedNamespaceIdentifier -> "::" · NamespaceIdentifier-1,ScopedTypeIdentifier -> "::" · TypeIdentifier-1,ScopedIdentifier -> "::" · Identifier-1,ScopedIdentifier -> "::" · OperatorName,ScopedIdentifier -> "::" · DestructorName,OperatorCast -> "::" · scopedIdentifier/"operator" declarationSpecifiers abstractDeclarator
  DestructorName=s128,OperatorName=s128,scopedIdentifier/"operator"=s129,scopedIdentifier=s1047 | NamespaceIdentifier-1=s126,TypeIdentifier-1=s127,Identifier-1=s128
1087: ScopedNamespaceIdentifier -> NamespaceIdentifier · "::" NamespaceIdentifier-1,ScopedNamespaceIdentifier -> ScopedNamespaceIdentifier · "::" NamespaceIdentifier-1,ScopedTypeIdentifier -> NamespaceIdentifier · "::" TypeIdentifier-1,ScopedTypeIdentifier -> ScopedNamespaceIdentifier · "::" TypeIdentifier-1,ScopedIdentifier -> NamespaceIdentifier · "::" Identifier-1,ScopedIdentifier -> NamespaceIdentifier · "::" OperatorName,ScopedIdentifier -> NamespaceIdentifier · "::" DestructorName,ScopedIdentifier -> ScopedNamespaceIdentifier · "::" Identifier-1,ScopedIdentifier -> ScopedNamespaceIdentifier · "::" OperatorName,ScopedIdentifier -> ScopedNamespaceIdentifier · "::" DestructorName,OperatorCast -> NamespaceIdentifier · "::" scopedIdentifier/"operator" declarationSpecifiers abstractDeclarator,OperatorCast -> ScopedNamespaceIdentifier · "::" scopedIdentifier/"operator" declarationSpecifiers abstractDeclarator
  "::"=s1055
1088: ScopedNamespaceIdentifier -> NamespaceIdentifier · "::" NamespaceIdentifier-1,ScopedNamespaceIdentifier -> ScopedNamespaceIdentifier · "::" NamespaceIdentifier-1,ScopedTypeIdentifier -> NamespaceIdentifier · "::" TypeIdentifier-1,ScopedTypeIdentifier -> ScopedNamespaceIdentifier · "::" TypeIdentifier-1,ScopedIdentifier -> NamespaceIdentifier · "::" Identifier-1,ScopedIdentifier -> NamespaceIdentifier · "::" OperatorName,ScopedIdentifier -> NamespaceIdentifier · "::" DestructorName,ScopedIdentifier -> ScopedNamespaceIdentifier · "::" Identifier-1,ScopedIdentifier -> ScopedNamespaceIdentifier · "::" OperatorName,ScopedIdentifier -> ScopedNamespaceIdentifier · "::" DestructorName,OperatorCast -> NamespaceIdentifier · "::" scopedIdentifier/"operator" declarationSpecifiers abstractDeclarator,OperatorCast -> ScopedNamespaceIdentifier · "::" scopedIdentifier/"operator" declarationSpecifiers abstractDeclarator
  "::"=s1054
1089: TemplateFunction -> Identifier · TemplateArgumentList,AssignmentExpression -> Identifier · UpdateOp expression,AssignmentExpression -> Identifier · "=" expression,expression -> Identifier ·
  "<"=s185,UpdateOp=s1056,"="=s1056,"("=expression(1),"["=expression(1),incDec=expression(1),ArithOp<"+" | "-">=expression(1),ArithOp<"/" | "%">=expression(1),BitOp<"|">=expression(1),BitOp<"^">=expression(1),CompareOp<"==" | "!=">=expression(1),CompareOp<"<=" | ">=">=expression(1),"<"/"<"=expression(1),templateArgsEnd/">"=expression(1),BitOp<"<<" | ">>">=expression(1),"?"=expression(1),":"=expression(1),"."=expression(1),"->"=expression(1),"..."=expression(1),"*"=expression(1),"||"=expression(1),"&&"=expression(1),"&"=expression(1) | TemplateArgumentList=s184
1090: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> incDec expression ·,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,incDec=s1042,"."=s108,"->"=s108,ArithOp<"+" | "-">=UpdateExpression(2),ArithOp<"/" | "%">=UpdateExpression(2),BitOp<"|">=UpdateExpression(2),BitOp<"^">=UpdateExpression(2),CompareOp<"==" | "!=">=UpdateExpression(2),CompareOp<"<=" | ">=">=UpdateExpression(2),"<"/"<"=UpdateExpression(2),templateArgsEnd/">"=UpdateExpression(2),BitOp<"<<" | ">>">=UpdateExpression(2),"?"=UpdateExpression(2),":"=UpdateExpression(2),"..."=UpdateExpression(2),"*"=UpdateExpression(2),"||"=UpdateExpression(2),"&&"=UpdateExpression(2),"&"=UpdateExpression(2),UpdateOp=UpdateExpression(2),"="=UpdateExpression(2) | ArgumentList=s105
1091: AbstractPointerDeclarator -> "*" ·,AbstractPointerDeclarator -> "*" · abstractDeclarator,AbstractPointerDeclarator -> "*" · (typeQualifier)+,AbstractPointerDeclarator -> "*" · (typeQualifier)+ abstractDeclarator
  "("=s231,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s230,"*"=s1091,"&&"=s1092,"&"=s1092,identifier/"final"=AbstractPointerDeclarator(1),"{"=AbstractPointerDeclarator(1),identifier/"noexcept"=AbstractPointerDeclarator(1),identifier/"throw"=AbstractPointerDeclarator(1),":"=AbstractPointerDeclarator(1),"->"=AbstractPointerDeclarator(1),"="=AbstractPointerDeclarator(1),")"=AbstractPointerDeclarator(1),","=AbstractPointerDeclarator(1),";"=AbstractPointerDeclarator(1),templateArgsEndFallback=AbstractPointerDeclarator(1),templateArgsEnd=AbstractPointerDeclarator(1) | ParameterList=s804,AbstractPointerDeclarator=s233,AbstractFunctionDeclarator=s233,AbstractArrayDeclarator=s233,AbstractParenthesizedDeclarator=s233,AbstractReferenceDeclarator=s233,(typeQualifier)+=s1144,typeQualifier=s440,abstractDeclarator=s1145
1092: AbstractReferenceDeclarator -> "&" ·,AbstractReferenceDeclarator -> "&" · abstractDeclarator,AbstractReferenceDeclarator -> "&&" ·,AbstractReferenceDeclarator -> "&&" · abstractDeclarator
  "("=s231,"["=s230,"*"=s1091,"&&"=s1092,"&"=s1092,identifier/"const"=AbstractReferenceDeclarator(1),identifier/"volatile"=AbstractReferenceDeclarator(1),identifier/"restrict"=AbstractReferenceDeclarator(1),identifier/"_Atomic"=AbstractReferenceDeclarator(1),identifier/"mutable"=AbstractReferenceDeclarator(1),identifier/"constexpr"=AbstractReferenceDeclarator(1),identifier/"final"=AbstractReferenceDeclarator(1),"{"=AbstractReferenceDeclarator(1),identifier/"noexcept"=AbstractReferenceDeclarator(1),identifier/"throw"=AbstractReferenceDeclarator(1),":"=AbstractReferenceDeclarator(1),"->"=AbstractReferenceDeclarator(1),"="=AbstractReferenceDeclarator(1),")"=AbstractReferenceDeclarator(1),","=AbstractReferenceDeclarator(1),";"=AbstractReferenceDeclarator(1),templateArgsEndFallback=AbstractReferenceDeclarator(1),templateArgsEnd=AbstractReferenceDeclarator(1) | ParameterList=s804,AbstractPointerDeclarator=s233,AbstractFunctionDeclarator=s233,AbstractArrayDeclarator=s233,AbstractParenthesizedDeclarator=s233,AbstractReferenceDeclarator=s233,abstractDeclarator=s1146
1093: StructSpecifier -> identifier/"struct" className ·,StructSpecifier -> identifier/"struct" className · FieldDeclarationList,StructSpecifier -> identifier/"struct" className · BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" className · identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" className · identifier/"final" BaseClassClause FieldDeclarationList
  identifier/"final"=s538,":"=s280,"("=StructSpecifier(2),","=StructSpecifier(2),"{"=StructSpecifier(2),"["=StructSpecifier(2),incDec=StructSpecifier(2),ArithOp<"+" | "-">=StructSpecifier(2),ArithOp<"/" | "%">=StructSpecifier(2),BitOp<"|">=StructSpecifier(2),BitOp<"^">=StructSpecifier(2),CompareOp<"==" | "!=">=StructSpecifier(2),CompareOp<"<=" | ">=">=StructSpecifier(2),"<"/"<"=StructSpecifier(2),templateArgsEnd/">"=StructSpecifier(2),BitOp<"<<" | ">>">=StructSpecifier(2),"?"=StructSpecifier(2),"."=StructSpecifier(2),"->"=StructSpecifier(2),"..."=StructSpecifier(2),"*"=StructSpecifier(2),"||"=StructSpecifier(2),"&&"=StructSpecifier(2),"&"=StructSpecifier(2),";"=StructSpecifier(2),UpdateOp=StructSpecifier(2),"="=StructSpecifier(2),")"=StructSpecifier(2),"]"=StructSpecifier(2),"}"=StructSpecifier(2),templateArgsEndFallback=StructSpecifier(2),templateArgsEnd=StructSpecifier(2) | BaseClassClause=s537
1094: StructSpecifier -> identifier/"struct" className ·,StructSpecifier -> identifier/"struct" className · FieldDeclarationList,StructSpecifier -> identifier/"struct" className · BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" className · identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" className · identifier/"final" BaseClassClause FieldDeclarationList
  "{"=s281,":"=s280,"("=StructSpecifier(2),identifier/"const"=StructSpecifier(2),identifier/"volatile"=StructSpecifier(2),identifier/"restrict"=StructSpecifier(2),identifier/"_Atomic"=StructSpecifier(2),identifier/"mutable"=StructSpecifier(2),identifier/"constexpr"=StructSpecifier(2),identifier/"final"=StructSpecifier(2),"["=StructSpecifier(2),identifier/"noexcept"=StructSpecifier(2),identifier/"throw"=StructSpecifier(2),"->"=StructSpecifier(2),"*"=StructSpecifier(2),"&&"=StructSpecifier(2),"&"=StructSpecifier(2),")"=StructSpecifier(2),";"=StructSpecifier(2),","=StructSpecifier(2),"="=StructSpecifier(2),templateArgsEndFallback=StructSpecifier(2),templateArgsEnd=StructSpecifier(2) | BaseClassClause=s537,FieldDeclarationList=s536
1095: StructSpecifier -> identifier/"struct" className ·,StructSpecifier -> identifier/"struct" className · FieldDeclarationList,StructSpecifier -> identifier/"struct" className · BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" className · identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" className · identifier/"final" BaseClassClause FieldDeclarationList
  ":"=s280,"("=StructSpecifier(2),identifier/"const"=StructSpecifier(2),identifier/"volatile"=StructSpecifier(2),identifier/"restrict"=StructSpecifier(2),identifier/"_Atomic"=StructSpecifier(2),identifier/"mutable"=StructSpecifier(2),identifier/"constexpr"=StructSpecifier(2),identifier/"final"=StructSpecifier(2),","=StructSpecifier(2),"{"=StructSpecifier(2),"["=StructSpecifier(2),identifier/"noexcept"=StructSpecifier(2),identifier/"throw"=StructSpecifier(2),"->"=StructSpecifier(2),"*"=StructSpecifier(2),"&&"=StructSpecifier(2),"&"=StructSpecifier(2),";"=StructSpecifier(2),"="=StructSpecifier(2) | BaseClassClause=s537
1096: StructSpecifier -> identifier/"struct" className ·,StructSpecifier -> identifier/"struct" className · FieldDeclarationList,StructSpecifier -> identifier/"struct" className · BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" className · identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" className · identifier/"final" BaseClassClause FieldDeclarationList
  identifier/"final"=s538,"("=StructSpecifier(2),"{"=StructSpecifier(2),"["=StructSpecifier(2),incDec=StructSpecifier(2),ArithOp<"+" | "-">=StructSpecifier(2),ArithOp<"/" | "%">=StructSpecifier(2),BitOp<"|">=StructSpecifier(2),BitOp<"^">=StructSpecifier(2),CompareOp<"==" | "!=">=StructSpecifier(2),CompareOp<"<=" | ">=">=StructSpecifier(2),"<"/"<"=StructSpecifier(2),templateArgsEnd/">"=StructSpecifier(2),BitOp<"<<" | ">>">=StructSpecifier(2),"?"=StructSpecifier(2),":"=StructSpecifier(2),"."=StructSpecifier(2),"->"=StructSpecifier(2),"..."=StructSpecifier(2),"*"=StructSpecifier(2),"||"=StructSpecifier(2),"&&"=StructSpecifier(2),"&"=StructSpecifier(2),"::"=StructSpecifier(2),identifier/"const"=StructSpecifier(2),identifier/"volatile"=StructSpecifier(2),identifier/"restrict"=StructSpecifier(2),identifier/"_Atomic"=StructSpecifier(2),identifier/"mutable"=StructSpecifier(2),identifier/"constexpr"=StructSpecifier(2),identifier/"__declspec"=StructSpecifier(2),identifier/"extern"=StructSpecifier(2),identifier/"static"=StructSpecifier(2),identifier/"register"=StructSpecifier(2),identifier/"inline"=StructSpecifier(2),identifier/"__attribute__"=StructSpecifier(2),identifier/"__based"=StructSpecifier(2),OperatorName=StructSpecifier(2),identifier=StructSpecifier(2),";"=StructSpecifier(2),"="=StructSpecifier(2),UpdateOp=StructSpecifier(2)
1097: StructSpecifier -> identifier/"struct" MsDeclspecModifier · className,StructSpecifier -> identifier/"struct" MsDeclspecModifier · FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · identifier/"final" BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · className FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · className BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · className identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · className identifier/"final" BaseClassClause FieldDeclarationList
  "::"=s141,identifier/"final"=s538,"{"=s281,identifier=s140,":"=s280 | NamespaceIdentifier=s142,TemplateType=s402,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,BaseClassClause=s537,FieldDeclarationList=s536,className=s539
1098: StructSpecifier -> identifier/"struct" MsDeclspecModifier · className,StructSpecifier -> identifier/"struct" MsDeclspecModifier · FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · identifier/"final" BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · className FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · className BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · className identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · className identifier/"final" BaseClassClause FieldDeclarationList
  "::"=s141,identifier/"final"=s538,"{"=s281,identifier=s140,":"=s280 | NamespaceIdentifier=s142,TemplateType=s402,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,BaseClassClause=s537,FieldDeclarationList=s536,className=s536
1099: UnionSpecifier -> identifier/"union" className ·,UnionSpecifier -> identifier/"union" className · FieldDeclarationList,UnionSpecifier -> identifier/"union" className · BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" className · identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" className · identifier/"final" BaseClassClause FieldDeclarationList
  identifier/"final"=s542,":"=s280,"("=UnionSpecifier(2),","=UnionSpecifier(2),"{"=UnionSpecifier(2),"["=UnionSpecifier(2),incDec=UnionSpecifier(2),ArithOp<"+" | "-">=UnionSpecifier(2),ArithOp<"/" | "%">=UnionSpecifier(2),BitOp<"|">=UnionSpecifier(2),BitOp<"^">=UnionSpecifier(2),CompareOp<"==" | "!=">=UnionSpecifier(2),CompareOp<"<=" | ">=">=UnionSpecifier(2),"<"/"<"=UnionSpecifier(2),templateArgsEnd/">"=UnionSpecifier(2),BitOp<"<<" | ">>">=UnionSpecifier(2),"?"=UnionSpecifier(2),"."=UnionSpecifier(2),"->"=UnionSpecifier(2),"..."=UnionSpecifier(2),"*"=UnionSpecifier(2),"||"=UnionSpecifier(2),"&&"=UnionSpecifier(2),"&"=UnionSpecifier(2),";"=UnionSpecifier(2),UpdateOp=UnionSpecifier(2),"="=UnionSpecifier(2),")"=UnionSpecifier(2),"]"=UnionSpecifier(2),"}"=UnionSpecifier(2),templateArgsEndFallback=UnionSpecifier(2),templateArgsEnd=UnionSpecifier(2) | BaseClassClause=s541
1100: UnionSpecifier -> identifier/"union" className ·,UnionSpecifier -> identifier/"union" className · FieldDeclarationList,UnionSpecifier -> identifier/"union" className · BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" className · identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" className · identifier/"final" BaseClassClause FieldDeclarationList
  "{"=s281,":"=s280,"("=UnionSpecifier(2),identifier/"const"=UnionSpecifier(2),identifier/"volatile"=UnionSpecifier(2),identifier/"restrict"=UnionSpecifier(2),identifier/"_Atomic"=UnionSpecifier(2),identifier/"mutable"=UnionSpecifier(2),identifier/"constexpr"=UnionSpecifier(2),identifier/"final"=UnionSpecifier(2),"["=UnionSpecifier(2),identifier/"noexcept"=UnionSpecifier(2),identifier/"throw"=UnionSpecifier(2),"->"=UnionSpecifier(2),"*"=UnionSpecifier(2),"&&"=UnionSpecifier(2),"&"=UnionSpecifier(2),")"=UnionSpecifier(2),";"=UnionSpecifier(2),","=UnionSpecifier(2),"="=UnionSpecifier(2),templateArgsEndFallback=UnionSpecifier(2),templateArgsEnd=UnionSpecifier(2) | BaseClassClause=s541,FieldDeclarationList=s540
1101: UnionSpecifier -> identifier/"union" className ·,UnionSpecifier -> identifier/"union" className · FieldDeclarationList,UnionSpecifier -> identifier/"union" className · BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" className · identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" className · identifier/"final" BaseClassClause FieldDeclarationList
  ":"=s280,"("=UnionSpecifier(2),identifier/"const"=UnionSpecifier(2),identifier/"volatile"=UnionSpecifier(2),identifier/"restrict"=UnionSpecifier(2),identifier/"_Atomic"=UnionSpecifier(2),identifier/"mutable"=UnionSpecifier(2),identifier/"constexpr"=UnionSpecifier(2),identifier/"final"=UnionSpecifier(2),","=UnionSpecifier(2),"{"=UnionSpecifier(2),"["=UnionSpecifier(2),identifier/"noexcept"=UnionSpecifier(2),identifier/"throw"=UnionSpecifier(2),"->"=UnionSpecifier(2),"*"=UnionSpecifier(2),"&&"=UnionSpecifier(2),"&"=UnionSpecifier(2),";"=UnionSpecifier(2),"="=UnionSpecifier(2) | BaseClassClause=s541
1102: UnionSpecifier -> identifier/"union" className ·,UnionSpecifier -> identifier/"union" className · FieldDeclarationList,UnionSpecifier -> identifier/"union" className · BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" className · identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" className · identifier/"final" BaseClassClause FieldDeclarationList
  identifier/"final"=s542,"("=UnionSpecifier(2),"{"=UnionSpecifier(2),"["=UnionSpecifier(2),incDec=UnionSpecifier(2),ArithOp<"+" | "-">=UnionSpecifier(2),ArithOp<"/" | "%">=UnionSpecifier(2),BitOp<"|">=UnionSpecifier(2),BitOp<"^">=UnionSpecifier(2),CompareOp<"==" | "!=">=UnionSpecifier(2),CompareOp<"<=" | ">=">=UnionSpecifier(2),"<"/"<"=UnionSpecifier(2),templateArgsEnd/">"=UnionSpecifier(2),BitOp<"<<" | ">>">=UnionSpecifier(2),"?"=UnionSpecifier(2),":"=UnionSpecifier(2),"."=UnionSpecifier(2),"->"=UnionSpecifier(2),"..."=UnionSpecifier(2),"*"=UnionSpecifier(2),"||"=UnionSpecifier(2),"&&"=UnionSpecifier(2),"&"=UnionSpecifier(2),"::"=UnionSpecifier(2),identifier/"const"=UnionSpecifier(2),identifier/"volatile"=UnionSpecifier(2),identifier/"restrict"=UnionSpecifier(2),identifier/"_Atomic"=UnionSpecifier(2),identifier/"mutable"=UnionSpecifier(2),identifier/"constexpr"=UnionSpecifier(2),identifier/"__declspec"=UnionSpecifier(2),identifier/"extern"=UnionSpecifier(2),identifier/"static"=UnionSpecifier(2),identifier/"register"=UnionSpecifier(2),identifier/"inline"=UnionSpecifier(2),identifier/"__attribute__"=UnionSpecifier(2),identifier/"__based"=UnionSpecifier(2),OperatorName=UnionSpecifier(2),identifier=UnionSpecifier(2),";"=UnionSpecifier(2),"="=UnionSpecifier(2),UpdateOp=UnionSpecifier(2)
1103: UnionSpecifier -> identifier/"union" MsDeclspecModifier · className,UnionSpecifier -> identifier/"union" MsDeclspecModifier · FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · identifier/"final" BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · className FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · className BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · className identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · className identifier/"final" BaseClassClause FieldDeclarationList
  "::"=s141,identifier/"final"=s542,"{"=s281,identifier=s140,":"=s280 | NamespaceIdentifier=s142,TemplateType=s402,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,BaseClassClause=s541,FieldDeclarationList=s540,className=s543
1104: UnionSpecifier -> identifier/"union" MsDeclspecModifier · className,UnionSpecifier -> identifier/"union" MsDeclspecModifier · FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · identifier/"final" BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · className FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · className BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · className identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · className identifier/"final" BaseClassClause FieldDeclarationList
  "::"=s141,identifier/"final"=s542,"{"=s281,identifier=s140,":"=s280 | NamespaceIdentifier=s142,TemplateType=s402,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,BaseClassClause=s541,FieldDeclarationList=s540,className=s540
1105: EnumSpecifier -> identifier/"enum" className ·,EnumSpecifier -> identifier/"enum" className · EnumeratorList,EnumSpecifier -> identifier/"enum" className · enumBaseClause,EnumSpecifier -> identifier/"enum" className · enumBaseClause EnumeratorList
  ":"=s547,"("=EnumSpecifier(2),","=EnumSpecifier(2),"{"=EnumSpecifier(2),"["=EnumSpecifier(2),incDec=EnumSpecifier(2),ArithOp<"+" | "-">=EnumSpecifier(2),ArithOp<"/" | "%">=EnumSpecifier(2),BitOp<"|">=EnumSpecifier(2),BitOp<"^">=EnumSpecifier(2),CompareOp<"==" | "!=">=EnumSpecifier(2),CompareOp<"<=" | ">=">=EnumSpecifier(2),"<"/"<"=EnumSpecifier(2),templateArgsEnd/">"=EnumSpecifier(2),BitOp<"<<" | ">>">=EnumSpecifier(2),"?"=EnumSpecifier(2),"."=EnumSpecifier(2),"->"=EnumSpecifier(2),"..."=EnumSpecifier(2),"*"=EnumSpecifier(2),"||"=EnumSpecifier(2),"&&"=EnumSpecifier(2),"&"=EnumSpecifier(2),";"=EnumSpecifier(2),UpdateOp=EnumSpecifier(2),"="=EnumSpecifier(2),")"=EnumSpecifier(2),"]"=EnumSpecifier(2),"}"=EnumSpecifier(2),templateArgsEndFallback=EnumSpecifier(2),templateArgsEnd=EnumSpecifier(2),identifier/"const"=EnumSpecifier(2),identifier/"volatile"=EnumSpecifier(2),identifier/"restrict"=EnumSpecifier(2),identifier/"_Atomic"=EnumSpecifier(2),identifier/"mutable"=EnumSpecifier(2),identifier/"constexpr"=EnumSpecifier(2),identifier/"final"=EnumSpecifier(2),identifier/"noexcept"=EnumSpecifier(2),identifier/"throw"=EnumSpecifier(2) | enumBaseClause=s548
1106: EnumSpecifier -> identifier/"enum" identifier/"class" · className,EnumSpecifier -> identifier/"enum" identifier/"class" · className EnumeratorList,EnumSpecifier -> identifier/"enum" identifier/"class" · className enumBaseClause,EnumSpecifier -> identifier/"enum" identifier/"class" · className enumBaseClause EnumeratorList,EnumSpecifier -> identifier/"enum" identifier/"class" · EnumeratorList,EnumSpecifier -> identifier/"enum" identifier/"struct" · className,EnumSpecifier -> identifier/"enum" identifier/"struct" · className EnumeratorList,EnumSpecifier -> identifier/"enum" identifier/"struct" · className enumBaseClause,EnumSpecifier -> identifier/"enum" identifier/"struct" · className enumBaseClause EnumeratorList,EnumSpecifier -> identifier/"enum" identifier/"struct" · EnumeratorList
  "::"=s141,"{"=s292,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s402,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,EnumeratorList=s548,className=s550
1107: EnumSpecifier -> identifier/"enum" identifier/"class" · className,EnumSpecifier -> identifier/"enum" identifier/"class" · className EnumeratorList,EnumSpecifier -> identifier/"enum" identifier/"class" · className enumBaseClause,EnumSpecifier -> identifier/"enum" identifier/"class" · className enumBaseClause EnumeratorList,EnumSpecifier -> identifier/"enum" identifier/"class" · EnumeratorList,EnumSpecifier -> identifier/"enum" identifier/"struct" · className,EnumSpecifier -> identifier/"enum" identifier/"struct" · className EnumeratorList,EnumSpecifier -> identifier/"enum" identifier/"struct" · className enumBaseClause,EnumSpecifier -> identifier/"enum" identifier/"struct" · className enumBaseClause EnumeratorList,EnumSpecifier -> identifier/"enum" identifier/"struct" · EnumeratorList
  "::"=s141,"{"=s292,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s402,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,EnumeratorList=s548,className=s548
1108: EnumSpecifier -> identifier/"enum" identifier/"class" · className,EnumSpecifier -> identifier/"enum" identifier/"class" · className EnumeratorList,EnumSpecifier -> identifier/"enum" identifier/"class" · className enumBaseClause,EnumSpecifier -> identifier/"enum" identifier/"class" · className enumBaseClause EnumeratorList,EnumSpecifier -> identifier/"enum" identifier/"class" · EnumeratorList,EnumSpecifier -> identifier/"enum" identifier/"struct" · className,EnumSpecifier -> identifier/"enum" identifier/"struct" · className EnumeratorList,EnumSpecifier -> identifier/"enum" identifier/"struct" · className enumBaseClause,EnumSpecifier -> identifier/"enum" identifier/"struct" · className enumBaseClause EnumeratorList,EnumSpecifier -> identifier/"enum" identifier/"struct" · EnumeratorList
  "::"=s141,"{"=s292,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s278,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,EnumeratorList=s548,className=s548
1109: ClassSpecifier -> identifier/"class" className ·,ClassSpecifier -> identifier/"class" className · FieldDeclarationList,ClassSpecifier -> identifier/"class" className · BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" className · identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" className · identifier/"final" BaseClassClause FieldDeclarationList
  identifier/"final"=s553,":"=s280,"("=ClassSpecifier(2),","=ClassSpecifier(2),"{"=ClassSpecifier(2),"["=ClassSpecifier(2),incDec=ClassSpecifier(2),ArithOp<"+" | "-">=ClassSpecifier(2),ArithOp<"/" | "%">=ClassSpecifier(2),BitOp<"|">=ClassSpecifier(2),BitOp<"^">=ClassSpecifier(2),CompareOp<"==" | "!=">=ClassSpecifier(2),CompareOp<"<=" | ">=">=ClassSpecifier(2),"<"/"<"=ClassSpecifier(2),templateArgsEnd/">"=ClassSpecifier(2),BitOp<"<<" | ">>">=ClassSpecifier(2),"?"=ClassSpecifier(2),"."=ClassSpecifier(2),"->"=ClassSpecifier(2),"..."=ClassSpecifier(2),"*"=ClassSpecifier(2),"||"=ClassSpecifier(2),"&&"=ClassSpecifier(2),"&"=ClassSpecifier(2),";"=ClassSpecifier(2),UpdateOp=ClassSpecifier(2),"="=ClassSpecifier(2),")"=ClassSpecifier(2),"]"=ClassSpecifier(2),"::"=ClassSpecifier(2),identifier/"const"=ClassSpecifier(2),identifier/"volatile"=ClassSpecifier(2),identifier/"restrict"=ClassSpecifier(2),identifier/"_Atomic"=ClassSpecifier(2),identifier/"mutable"=ClassSpecifier(2),identifier/"constexpr"=ClassSpecifier(2),identifier/"__declspec"=ClassSpecifier(2),identifier/"extern"=ClassSpecifier(2),identifier/"static"=ClassSpecifier(2),identifier/"register"=ClassSpecifier(2),identifier/"inline"=ClassSpecifier(2),identifier/"__attribute__"=ClassSpecifier(2),identifier/"__based"=ClassSpecifier(2),OperatorName=ClassSpecifier(2),identifier=ClassSpecifier(2),"}"=ClassSpecifier(2),templateArgsEndFallback=ClassSpecifier(2),templateArgsEnd=ClassSpecifier(2) | BaseClassClause=s552
1110: ClassSpecifier -> identifier/"class" className ·,ClassSpecifier -> identifier/"class" className · FieldDeclarationList,ClassSpecifier -> identifier/"class" className · BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" className · identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" className · identifier/"final" BaseClassClause FieldDeclarationList
  "{"=s281,":"=s280,"("=ClassSpecifier(2),identifier/"const"=ClassSpecifier(2),identifier/"volatile"=ClassSpecifier(2),identifier/"restrict"=ClassSpecifier(2),identifier/"_Atomic"=ClassSpecifier(2),identifier/"mutable"=ClassSpecifier(2),identifier/"constexpr"=ClassSpecifier(2),identifier/"final"=ClassSpecifier(2),"["=ClassSpecifier(2),identifier/"noexcept"=ClassSpecifier(2),identifier/"throw"=ClassSpecifier(2),"->"=ClassSpecifier(2),"*"=ClassSpecifier(2),"&&"=ClassSpecifier(2),"&"=ClassSpecifier(2),")"=ClassSpecifier(2),";"=ClassSpecifier(2),","=ClassSpecifier(2),"="=ClassSpecifier(2),templateArgsEndFallback=ClassSpecifier(2),templateArgsEnd=ClassSpecifier(2) | BaseClassClause=s552,FieldDeclarationList=s551
1111: ClassSpecifier -> identifier/"class" className ·,ClassSpecifier -> identifier/"class" className · FieldDeclarationList,ClassSpecifier -> identifier/"class" className · BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" className · identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" className · identifier/"final" BaseClassClause FieldDeclarationList
  ":"=s280,"("=ClassSpecifier(2),identifier/"const"=ClassSpecifier(2),identifier/"volatile"=ClassSpecifier(2),identifier/"restrict"=ClassSpecifier(2),identifier/"_Atomic"=ClassSpecifier(2),identifier/"mutable"=ClassSpecifier(2),identifier/"constexpr"=ClassSpecifier(2),identifier/"final"=ClassSpecifier(2),"{"=ClassSpecifier(2),"["=ClassSpecifier(2),identifier/"noexcept"=ClassSpecifier(2),identifier/"throw"=ClassSpecifier(2),"->"=ClassSpecifier(2),"*"=ClassSpecifier(2),"&&"=ClassSpecifier(2),"&"=ClassSpecifier(2),"="=ClassSpecifier(2),","=ClassSpecifier(2),";"=ClassSpecifier(2) | BaseClassClause=s552
1112: ClassSpecifier -> identifier/"class" MsDeclspecModifier · className,ClassSpecifier -> identifier/"class" MsDeclspecModifier · FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier · BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier · identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier · identifier/"final" BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier · className FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier · className BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier · className identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier · className identifier/"final" BaseClassClause FieldDeclarationList
  "::"=s141,identifier/"final"=s553,"{"=s281,identifier=s140,":"=s280 | NamespaceIdentifier=s142,TemplateType=s402,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,BaseClassClause=s552,FieldDeclarationList=s551,className=s554
1113: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "...",SizeofExpression -> identifier/"sizeof" expression ·
  "("=s124,"["=s109,incDec=s1042,ArithOp<"+" | "-">=s1033,ArithOp<"/" | "%">=s1034,BitOp<"<<" | ">>">=s1041,"."=s108,"->"=s108,"*"=s110,BitOp<"|">=SizeofExpression(2),BitOp<"^">=SizeofExpression(2),CompareOp<"==" | "!=">=SizeofExpression(2),CompareOp<"<=" | ">=">=SizeofExpression(2),"<"/"<"=SizeofExpression(2),templateArgsEnd/">"=SizeofExpression(2),"?"=SizeofExpression(2),":"=SizeofExpression(2),"..."=SizeofExpression(2),"||"=SizeofExpression(2),"&&"=SizeofExpression(2),"&"=SizeofExpression(2),UpdateOp=SizeofExpression(2),"="=SizeofExpression(2) | ArgumentList=s105,ArithOp-1=s1034
1114: NewExpression -> identifier/"new" ArgumentList · typeSpecifier,NewExpression -> identifier/"new" ArgumentList · typeSpecifier ArgumentList,NewExpression -> identifier/"new" ArgumentList · typeSpecifier InitializerList,NewExpression -> identifier/"new" ArgumentList · typeSpecifier NewDeclarator,NewExpression -> identifier/"new" ArgumentList · typeSpecifier NewDeclarator ArgumentList,NewExpression -> identifier/"new" ArgumentList · typeSpecifier NewDeclarator InitializerList
  identifier/"bool"=s48,"::"=s141,identifier/"struct"=s1240,identifier/"typename"=s1029,identifier/"class"=s1248,identifier/"union"=s1244,identifier/"enum"=s1024,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeSpecifier=s343
1115: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "...",DeleteExpression -> identifier/"delete" expression ·
  "("=s124,"["=s109,incDec=s1042,ArithOp<"+" | "-">=s1033,ArithOp<"/" | "%">=s1034,BitOp<"|">=s1036,BitOp<"^">=s1037,CompareOp<"==" | "!=">=s1039,CompareOp<"<=" | ">=">=s1040,"<"/"<"=s1040,templateArgsEnd/">"=s1040,BitOp<"<<" | ">>">=s1041,"?"=s1282,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112,":"=DeleteExpression(2),UpdateOp=DeleteExpression(2),"="=DeleteExpression(2) | ArgumentList=s105,ArithOp-1=s1034,LogicOp-1=s1035,BitOp-1=s1038
1116: FieldIdentifier -> identifier ·,NamespaceIdentifier -> identifier ·,TypeIdentifier -> identifier ·
  "("=FieldIdentifier(1),"::"=NamespaceIdentifier(1),"<"=TypeIdentifier(1),"{"=FieldIdentifier(1)
1117: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression ArithOp<"+" | "-"> expression ·,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,incDec=s1042,ArithOp<"/" | "%">=s1034,"."=s108,"->"=s108,"*"=s110,ArithOp<"+" | "-">=BinaryExpression(3),BitOp<"|">=BinaryExpression(3),BitOp<"^">=BinaryExpression(3),CompareOp<"==" | "!=">=BinaryExpression(3),CompareOp<"<=" | ">=">=BinaryExpression(3),"<"/"<"=BinaryExpression(3),templateArgsEnd/">"=BinaryExpression(3),BitOp<"<<" | ">>">=BinaryExpression(3),"?"=BinaryExpression(3),":"=BinaryExpression(3),"..."=BinaryExpression(3),"||"=BinaryExpression(3),"&&"=BinaryExpression(3),"&"=BinaryExpression(3),UpdateOp=BinaryExpression(3),"="=BinaryExpression(3) | ArgumentList=s105,ArithOp-1=s1034
1118: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression ArithOp-1 expression ·,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression ArithOp<"/" | "%"> expression ·,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,incDec=s1042,"."=s108,"->"=s108,ArithOp<"+" | "-">=BinaryExpression(3),ArithOp<"/" | "%">=BinaryExpression(3),BitOp<"|">=BinaryExpression(3),BitOp<"^">=BinaryExpression(3),CompareOp<"==" | "!=">=BinaryExpression(3),CompareOp<"<=" | ">=">=BinaryExpression(3),"<"/"<"=BinaryExpression(3),templateArgsEnd/">"=BinaryExpression(3),BitOp<"<<" | ">>">=BinaryExpression(3),"?"=BinaryExpression(3),":"=BinaryExpression(3),"..."=BinaryExpression(3),"*"=BinaryExpression(3),"||"=BinaryExpression(3),"&&"=BinaryExpression(3),"&"=BinaryExpression(3),UpdateOp=BinaryExpression(3),"="=BinaryExpression(3) | ArgumentList=s105
1119: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression LogicOp-1 expression ·,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,incDec=s1042,ArithOp<"+" | "-">=s1033,ArithOp<"/" | "%">=s1034,BitOp<"|">=s1036,BitOp<"^">=s1037,CompareOp<"==" | "!=">=s1039,CompareOp<"<=" | ">=">=s1040,"<"/"<"=s1040,templateArgsEnd/">"=s1040,BitOp<"<<" | ">>">=s1041,"."=s108,"->"=s108,"*"=s110,"&"=s112,"?"=BinaryExpression(3),":"=BinaryExpression(3),"..."=BinaryExpression(3),"||"=BinaryExpression(3),"&&"=BinaryExpression(3),UpdateOp=BinaryExpression(3),"="=BinaryExpression(3) | ArgumentList=s105,ArithOp-1=s1034,BitOp-1=s1038
1120: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression BitOp<"|"> expression ·,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,incDec=s1042,ArithOp<"+" | "-">=s1033,ArithOp<"/" | "%">=s1034,BitOp<"^">=s1037,CompareOp<"==" | "!=">=s1039,CompareOp<"<=" | ">=">=s1040,"<"/"<"=s1040,templateArgsEnd/">"=s1040,BitOp<"<<" | ">>">=s1041,"."=s108,"->"=s108,"*"=s110,"&"=s112,BitOp<"|">=BinaryExpression(3),"?"=BinaryExpression(3),":"=BinaryExpression(3),"..."=BinaryExpression(3),"||"=BinaryExpression(3),"&&"=BinaryExpression(3),UpdateOp=BinaryExpression(3),"="=BinaryExpression(3) | ArgumentList=s105,ArithOp-1=s1034,BitOp-1=s1038
1121: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression BitOp<"^"> expression ·,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,incDec=s1042,ArithOp<"+" | "-">=s1033,ArithOp<"/" | "%">=s1034,CompareOp<"==" | "!=">=s1039,CompareOp<"<=" | ">=">=s1040,"<"/"<"=s1040,templateArgsEnd/">"=s1040,BitOp<"<<" | ">>">=s1041,"."=s108,"->"=s108,"*"=s110,"&"=s112,BitOp<"|">=BinaryExpression(3),BitOp<"^">=BinaryExpression(3),"?"=BinaryExpression(3),":"=BinaryExpression(3),"..."=BinaryExpression(3),"||"=BinaryExpression(3),"&&"=BinaryExpression(3),UpdateOp=BinaryExpression(3),"="=BinaryExpression(3) | ArgumentList=s105,ArithOp-1=s1034,BitOp-1=s1038
1122: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression BitOp-1 expression ·,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,incDec=s1042,ArithOp<"+" | "-">=s1033,ArithOp<"/" | "%">=s1034,CompareOp<"==" | "!=">=s1039,CompareOp<"<=" | ">=">=s1040,"<"/"<"=s1040,templateArgsEnd/">"=s1040,BitOp<"<<" | ">>">=s1041,"."=s108,"->"=s108,"*"=s110,BitOp<"|">=BinaryExpression(3),BitOp<"^">=BinaryExpression(3),"?"=BinaryExpression(3),":"=BinaryExpression(3),"..."=BinaryExpression(3),"||"=BinaryExpression(3),"&&"=BinaryExpression(3),"&"=BinaryExpression(3),UpdateOp=BinaryExpression(3),"="=BinaryExpression(3) | ArgumentList=s105,ArithOp-1=s1034
1123: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression CompareOp<"==" | "!="> expression ·,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,incDec=s1042,ArithOp<"+" | "-">=s1033,ArithOp<"/" | "%">=s1034,CompareOp<"<=" | ">=">=s1040,"<"/"<"=s1040,templateArgsEnd/">"=s1040,BitOp<"<<" | ">>">=s1041,"."=s108,"->"=s108,"*"=s110,BitOp<"|">=BinaryExpression(3),BitOp<"^">=BinaryExpression(3),CompareOp<"==" | "!=">=BinaryExpression(3),"?"=BinaryExpression(3),":"=BinaryExpression(3),"..."=BinaryExpression(3),"||"=BinaryExpression(3),"&&"=BinaryExpression(3),"&"=BinaryExpression(3),UpdateOp=BinaryExpression(3),"="=BinaryExpression(3) | ArgumentList=s105,ArithOp-1=s1034
1124: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression CompareOp<"<=" | ">="> expression ·,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression "<"/"<" expression ·,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression templateArgsEnd/">" expression ·,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,incDec=s1042,ArithOp<"+" | "-">=s1033,ArithOp<"/" | "%">=s1034,BitOp<"<<" | ">>">=s1041,"."=s108,"->"=s108,"*"=s110,BitOp<"|">=BinaryExpression(3),BitOp<"^">=BinaryExpression(3),CompareOp<"==" | "!=">=BinaryExpression(3),CompareOp<"<=" | ">=">=BinaryExpression(3),"<"/"<"=BinaryExpression(3),templateArgsEnd/">"=BinaryExpression(3),"?"=BinaryExpression(3),":"=BinaryExpression(3),"..."=BinaryExpression(3),"||"=BinaryExpression(3),"&&"=BinaryExpression(3),"&"=BinaryExpression(3),UpdateOp=BinaryExpression(3),"="=BinaryExpression(3) | ArgumentList=s105,ArithOp-1=s1034
1125: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression BitOp<"<<" | ">>"> expression ·,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,incDec=s1042,ArithOp<"+" | "-">=s1033,ArithOp<"/" | "%">=s1034,"."=s108,"->"=s108,"*"=s110,BitOp<"|">=BinaryExpression(3),BitOp<"^">=BinaryExpression(3),CompareOp<"==" | "!=">=BinaryExpression(3),CompareOp<"<=" | ">=">=BinaryExpression(3),"<"/"<"=BinaryExpression(3),templateArgsEnd/">"=BinaryExpression(3),BitOp<"<<" | ">>">=BinaryExpression(3),"?"=BinaryExpression(3),":"=BinaryExpression(3),"..."=BinaryExpression(3),"||"=BinaryExpression(3),"&&"=BinaryExpression(3),"&"=BinaryExpression(3),UpdateOp=BinaryExpression(3),"="=BinaryExpression(3) | ArgumentList=s105,ArithOp-1=s1034
1126: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,BinaryExpression -> expression incDec expression ·,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,incDec=s1042,ArithOp<"+" | "-">=s1033,ArithOp<"/" | "%">=s1034,BitOp<"|">=s1036,BitOp<"^">=s1037,CompareOp<"==" | "!=">=s1039,CompareOp<"<=" | ">=">=s1040,"<"/"<"=s1040,templateArgsEnd/">"=s1040,BitOp<"<<" | ">>">=s1041,"."=s108,"->"=s108,"*"=s110,"||"=s111,"&&"=s111,"&"=s112,"?"=BinaryExpression(3),":"=BinaryExpression(3),"..."=BinaryExpression(3),UpdateOp=BinaryExpression(3),"="=BinaryExpression(3) | ArgumentList=s105,ArithOp-1=s1034,LogicOp-1=s1035,BitOp-1=s1038
1127: NewExpression -> "::" scopedIdentifier/"new" ArgumentList · typeSpecifier,NewExpression -> "::" scopedIdentifier/"new" ArgumentList · typeSpecifier ArgumentList,NewExpression -> "::" scopedIdentifier/"new" ArgumentList · typeSpecifier InitializerList,NewExpression -> "::" scopedIdentifier/"new" ArgumentList · typeSpecifier NewDeclarator,NewExpression -> "::" scopedIdentifier/"new" ArgumentList · typeSpecifier NewDeclarator ArgumentList,NewExpression -> "::" scopedIdentifier/"new" ArgumentList · typeSpecifier NewDeclarator InitializerList
  identifier/"bool"=s48,"::"=s141,identifier/"struct"=s1240,identifier/"typename"=s1029,identifier/"class"=s1248,identifier/"union"=s1244,identifier/"enum"=s1024,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeSpecifier=s579
1128: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "...",DeleteExpression -> "::" scopedIdentifier/"delete" expression ·
  "("=s124,"["=s109,incDec=s1042,ArithOp<"+" | "-">=s1033,ArithOp<"/" | "%">=s1034,BitOp<"|">=s1036,BitOp<"^">=s1037,CompareOp<"==" | "!=">=s1039,CompareOp<"<=" | ">=">=s1040,"<"/"<"=s1040,templateArgsEnd/">"=s1040,BitOp<"<<" | ">>">=s1041,"?"=s1282,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112,":"=DeleteExpression(3),UpdateOp=DeleteExpression(3),"="=DeleteExpression(3) | ArgumentList=s105,ArithOp-1=s1034,LogicOp-1=s1035,BitOp-1=s1038
1129: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",AssignmentExpression -> Identifier UpdateOp expression ·,AssignmentExpression -> Identifier "=" expression ·,AssignmentExpression -> CallExpression UpdateOp expression ·,AssignmentExpression -> CallExpression "=" expression ·,AssignmentExpression -> FieldExpression UpdateOp expression ·,AssignmentExpression -> FieldExpression "=" expression ·,AssignmentExpression -> PointerExpression UpdateOp expression ·,AssignmentExpression -> PointerExpression "=" expression ·,AssignmentExpression -> SubscriptExpression UpdateOp expression ·,AssignmentExpression -> SubscriptExpression "=" expression ·,AssignmentExpression -> ParenthesizedExpression UpdateOp expression ·,AssignmentExpression -> ParenthesizedExpression "=" expression ·,AssignmentExpression -> ScopedNamespaceIdentifier UpdateOp expression ·,AssignmentExpression -> ScopedNamespaceIdentifier "=" expression ·,BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,incDec=s1042,ArithOp<"+" | "-">=s1033,ArithOp<"/" | "%">=s1034,BitOp<"|">=s1036,BitOp<"^">=s1037,CompareOp<"==" | "!=">=s1039,CompareOp<"<=" | ">=">=s1040,"<"/"<"=s1040,templateArgsEnd/">"=s1040,BitOp<"<<" | ">>">=s1041,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112,"?"=AssignmentExpression(3),":"=AssignmentExpression(3),UpdateOp=AssignmentExpression(3),"="=AssignmentExpression(3) | ArgumentList=s105,ArithOp-1=s1034,LogicOp-1=s1035,BitOp-1=s1038
1130: ScopedNamespaceIdentifier -> NamespaceIdentifier "::" · NamespaceIdentifier-1,ScopedNamespaceIdentifier -> TemplateType "::" · NamespaceIdentifier-1,ScopedNamespaceIdentifier -> ScopedNamespaceIdentifier "::" · NamespaceIdentifier-1,ScopedTypeIdentifier -> NamespaceIdentifier "::" · TypeIdentifier-1,ScopedTypeIdentifier -> TemplateType "::" · TypeIdentifier-1,ScopedTypeIdentifier -> ScopedNamespaceIdentifier "::" · TypeIdentifier-1,ScopedIdentifier -> NamespaceIdentifier "::" · Identifier-1,ScopedIdentifier -> NamespaceIdentifier "::" · OperatorName,ScopedIdentifier -> NamespaceIdentifier "::" · DestructorName,ScopedIdentifier -> TemplateType "::" · Identifier-1,ScopedIdentifier -> TemplateType "::" · OperatorName,ScopedIdentifier -> TemplateType "::" · DestructorName,ScopedIdentifier -> ScopedNamespaceIdentifier "::" · Identifier-1,ScopedIdentifier -> ScopedNamespaceIdentifier "::" · OperatorName,ScopedIdentifier -> ScopedNamespaceIdentifier "::" · DestructorName
  DestructorName=s349,OperatorName=s349,scopedIdentifier=s125 | NamespaceIdentifier-1=s347,TypeIdentifier-1=s348,Identifier-1=s349
1131: ScopedNamespaceIdentifier -> NamespaceIdentifier "::" · NamespaceIdentifier-1,ScopedNamespaceIdentifier -> TemplateType "::" · NamespaceIdentifier-1,ScopedNamespaceIdentifier -> ScopedNamespaceIdentifier "::" · NamespaceIdentifier-1,ScopedTypeIdentifier -> NamespaceIdentifier "::" · TypeIdentifier-1,ScopedTypeIdentifier -> TemplateType "::" · TypeIdentifier-1,ScopedTypeIdentifier -> ScopedNamespaceIdentifier "::" · TypeIdentifier-1,ScopedIdentifier -> NamespaceIdentifier "::" · Identifier-1,ScopedIdentifier -> NamespaceIdentifier "::" · OperatorName,ScopedIdentifier -> NamespaceIdentifier "::" · DestructorName,ScopedIdentifier -> TemplateType "::" · Identifier-1,ScopedIdentifier -> TemplateType "::" · OperatorName,ScopedIdentifier -> TemplateType "::" · DestructorName,ScopedIdentifier -> ScopedNamespaceIdentifier "::" · Identifier-1,ScopedIdentifier -> ScopedNamespaceIdentifier "::" · OperatorName,ScopedIdentifier -> ScopedNamespaceIdentifier "::" · DestructorName
  DestructorName=s349,OperatorName=s349,scopedIdentifier=s1045 | NamespaceIdentifier-1=s347,TypeIdentifier-1=s348,Identifier-1=s349
1132: ScopedNamespaceIdentifier -> NamespaceIdentifier "::" · NamespaceIdentifier-1,ScopedNamespaceIdentifier -> TemplateType "::" · NamespaceIdentifier-1,ScopedNamespaceIdentifier -> ScopedNamespaceIdentifier "::" · NamespaceIdentifier-1,ScopedTypeIdentifier -> NamespaceIdentifier "::" · TypeIdentifier-1,ScopedTypeIdentifier -> TemplateType "::" · TypeIdentifier-1,ScopedTypeIdentifier -> ScopedNamespaceIdentifier "::" · TypeIdentifier-1,ScopedIdentifier -> NamespaceIdentifier "::" · Identifier-1,ScopedIdentifier -> NamespaceIdentifier "::" · OperatorName,ScopedIdentifier -> NamespaceIdentifier "::" · DestructorName,ScopedIdentifier -> TemplateType "::" · Identifier-1,ScopedIdentifier -> TemplateType "::" · OperatorName,ScopedIdentifier -> TemplateType "::" · DestructorName,ScopedIdentifier -> ScopedNamespaceIdentifier "::" · Identifier-1,ScopedIdentifier -> ScopedNamespaceIdentifier "::" · OperatorName,ScopedIdentifier -> ScopedNamespaceIdentifier "::" · DestructorName
  DestructorName=s349,OperatorName=s349,scopedIdentifier=s1050 | NamespaceIdentifier-1=s347,TypeIdentifier-1=s348,Identifier-1=s349
1133: ScopedNamespaceIdentifier -> NamespaceIdentifier "::" · NamespaceIdentifier-1,ScopedNamespaceIdentifier -> TemplateType "::" · NamespaceIdentifier-1,ScopedNamespaceIdentifier -> ScopedNamespaceIdentifier "::" · NamespaceIdentifier-1,ScopedTypeIdentifier -> NamespaceIdentifier "::" · TypeIdentifier-1,ScopedTypeIdentifier -> TemplateType "::" · TypeIdentifier-1,ScopedTypeIdentifier -> ScopedNamespaceIdentifier "::" · TypeIdentifier-1,ScopedIdentifier -> NamespaceIdentifier "::" · Identifier-1,ScopedIdentifier -> NamespaceIdentifier "::" · OperatorName,ScopedIdentifier -> NamespaceIdentifier "::" · DestructorName,ScopedIdentifier -> TemplateType "::" · Identifier-1,ScopedIdentifier -> TemplateType "::" · OperatorName,ScopedIdentifier -> TemplateType "::" · DestructorName,ScopedIdentifier -> ScopedNamespaceIdentifier "::" · Identifier-1,ScopedIdentifier -> ScopedNamespaceIdentifier "::" · OperatorName,ScopedIdentifier -> ScopedNamespaceIdentifier "::" · DestructorName
  DestructorName=s349,OperatorName=s349,scopedIdentifier=s1049 | NamespaceIdentifier-1=s347,TypeIdentifier-1=s348,Identifier-1=s349
1134: ScopedNamespaceIdentifier -> NamespaceIdentifier "::" · NamespaceIdentifier-1,ScopedNamespaceIdentifier -> TemplateType "::" · NamespaceIdentifier-1,ScopedNamespaceIdentifier -> ScopedNamespaceIdentifier "::" · NamespaceIdentifier-1,ScopedTypeIdentifier -> NamespaceIdentifier "::" · TypeIdentifier-1,ScopedTypeIdentifier -> TemplateType "::" · TypeIdentifier-1,ScopedTypeIdentifier -> ScopedNamespaceIdentifier "::" · TypeIdentifier-1,ScopedIdentifier -> NamespaceIdentifier "::" · Identifier-1,ScopedIdentifier -> NamespaceIdentifier "::" · OperatorName,ScopedIdentifier -> NamespaceIdentifier "::" · DestructorName,ScopedIdentifier -> TemplateType "::" · Identifier-1,ScopedIdentifier -> TemplateType "::" · OperatorName,ScopedIdentifier -> TemplateType "::" · DestructorName,ScopedIdentifier -> ScopedNamespaceIdentifier "::" · Identifier-1,ScopedIdentifier -> ScopedNamespaceIdentifier "::" · OperatorName,ScopedIdentifier -> ScopedNamespaceIdentifier "::" · DestructorName
  DestructorName=s349,OperatorName=s349,scopedIdentifier=s1044 | NamespaceIdentifier-1=s347,TypeIdentifier-1=s348,Identifier-1=s349
1135: ScopedNamespaceIdentifier -> NamespaceIdentifier "::" · NamespaceIdentifier-1,ScopedNamespaceIdentifier -> TemplateType "::" · NamespaceIdentifier-1,ScopedNamespaceIdentifier -> ScopedNamespaceIdentifier "::" · NamespaceIdentifier-1,ScopedTypeIdentifier -> NamespaceIdentifier "::" · TypeIdentifier-1,ScopedTypeIdentifier -> TemplateType "::" · TypeIdentifier-1,ScopedTypeIdentifier -> ScopedNamespaceIdentifier "::" · TypeIdentifier-1,ScopedIdentifier -> NamespaceIdentifier "::" · Identifier-1,ScopedIdentifier -> NamespaceIdentifier "::" · OperatorName,ScopedIdentifier -> NamespaceIdentifier "::" · DestructorName,ScopedIdentifier -> TemplateType "::" · Identifier-1,ScopedIdentifier -> TemplateType "::" · OperatorName,ScopedIdentifier -> TemplateType "::" · DestructorName,ScopedIdentifier -> ScopedNamespaceIdentifier "::" · Identifier-1,ScopedIdentifier -> ScopedNamespaceIdentifier "::" · OperatorName,ScopedIdentifier -> ScopedNamespaceIdentifier "::" · DestructorName
  DestructorName=s349,OperatorName=s349,scopedIdentifier=s1046 | NamespaceIdentifier-1=s347,TypeIdentifier-1=s348,Identifier-1=s349
1136: ScopedNamespaceIdentifier -> NamespaceIdentifier "::" · NamespaceIdentifier-1,ScopedNamespaceIdentifier -> TemplateType "::" · NamespaceIdentifier-1,ScopedNamespaceIdentifier -> ScopedNamespaceIdentifier "::" · NamespaceIdentifier-1,ScopedTypeIdentifier -> NamespaceIdentifier "::" · TypeIdentifier-1,ScopedTypeIdentifier -> TemplateType "::" · TypeIdentifier-1,ScopedTypeIdentifier -> ScopedNamespaceIdentifier "::" · TypeIdentifier-1,ScopedIdentifier -> NamespaceIdentifier "::" · Identifier-1,ScopedIdentifier -> NamespaceIdentifier "::" · OperatorName,ScopedIdentifier -> NamespaceIdentifier "::" · DestructorName,ScopedIdentifier -> TemplateType "::" · Identifier-1,ScopedIdentifier -> TemplateType "::" · OperatorName,ScopedIdentifier -> TemplateType "::" · DestructorName,ScopedIdentifier -> ScopedNamespaceIdentifier "::" · Identifier-1,ScopedIdentifier -> ScopedNamespaceIdentifier "::" · OperatorName,ScopedIdentifier -> ScopedNamespaceIdentifier "::" · DestructorName
  DestructorName=s349,OperatorName=s349,scopedIdentifier=s1048 | NamespaceIdentifier-1=s347,TypeIdentifier-1=s348,Identifier-1=s349
1137: typeQualifier+ -> typeQualifier+ · typeQualifier+,PointerDeclarator-1 -> "*" msPointerModifier+ typeQualifier+ · declarator,PointerDeclarator-1 -> MsBasedModifier "*" typeQualifier+ · declarator
  "("=s180,DestructorName=s26,"::"=s1075,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s182,identifier/"__based"=s63,OperatorName=s26,identifier=s1058,"*"=s1079,"&&"=s1081,"&"=s1081 | Identifier=s181,NamespaceIdentifier=s1198,TemplateType=s1198,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s1198,MsBasedModifier=s1189,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,typeQualifier+=s376,typeQualifier=s159,declarator=s1307
1138: typeQualifier+ -> typeQualifier+ · typeQualifier+,PointerDeclarator-1 -> "*" msPointerModifier+ typeQualifier+ · declarator,PointerDeclarator-1 -> MsBasedModifier "*" typeQualifier+ · declarator
  "("=s180,DestructorName=s26,"::"=s1075,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s182,identifier/"__based"=s63,OperatorName=s26,identifier=s153,"*"=s1080,"&&"=s1082,"&"=s1082 | Identifier=s181,NamespaceIdentifier=s1198,TemplateType=s1198,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s1198,MsBasedModifier=s1281,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,typeQualifier+=s376,typeQualifier=s159,declarator=s610
1139: msPointerModifier+ -> msPointerModifier+ · msPointerModifier+,PointerDeclarator-1 -> MsBasedModifier "*" msPointerModifier+ · declarator,PointerDeclarator-1 -> MsBasedModifier "*" msPointerModifier+ · typeQualifier+ declarator
  "("=s180,DestructorName=s26,"::"=s1075,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s182,identifier/"__based"=s63,identifier/"__restrict"=s165,OperatorName=s26,identifier=s1058,"*"=s1079,"&&"=s1081,"&"=s1081 | Identifier=s181,NamespaceIdentifier=s1198,TemplateType=s1198,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s1198,MsBasedModifier=s1189,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,typeQualifier+=s1165,msPointerModifier+=s379,typeQualifier=s159,declarator=s1307
1140: msPointerModifier+ -> msPointerModifier+ · msPointerModifier+,PointerDeclarator-1 -> MsBasedModifier "*" msPointerModifier+ · declarator,PointerDeclarator-1 -> MsBasedModifier "*" msPointerModifier+ · typeQualifier+ declarator
  "("=s180,DestructorName=s26,"::"=s1075,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s182,identifier/"__based"=s63,identifier/"__restrict"=s165,OperatorName=s26,identifier=s153,"*"=s1080,"&&"=s1082,"&"=s1082 | Identifier=s181,NamespaceIdentifier=s1198,TemplateType=s1198,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s1198,MsBasedModifier=s1281,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,typeQualifier+=s1166,msPointerModifier+=s379,typeQualifier=s159,declarator=s610
1141: TrailingReturnType -> "->" · typeSpecifier,TrailingReturnType -> "->" · typeSpecifier abstractDeclarator,TrailingReturnType -> "->" · typeQualifier typeSpecifier,TrailingReturnType -> "->" · typeQualifier typeSpecifier abstractDeclarator
  identifier/"bool"=s48,"::"=s141,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s1239,identifier/"typename"=s1251,identifier/"class"=s1248,identifier/"union"=s1243,identifier/"enum"=s1246,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeQualifier=s1169,typeSpecifier=s1168
1142: ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+ -> ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+ · ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,FunctionDeclarator-1 -> declarator ParameterList ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+ ·
  identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"final"=s384,identifier/"noexcept"=s386,identifier/"throw"=s387,"->"=s1272,"("=FunctionDeclarator-1(3),"["=FunctionDeclarator-1(3),")"=FunctionDeclarator-1(3),";"=FunctionDeclarator-1(3),","=FunctionDeclarator-1(3),"="=FunctionDeclarator-1(3),templateArgsEndFallback=FunctionDeclarator-1(3),templateArgsEnd=FunctionDeclarator-1(3) | Noexcept=s384,ThrowSpecifier=s384,TrailingReturnType=s384,((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+=s616,typeQualifier=s384
1143: CastExpression -> "(" TypeDescriptor ")" · expression,CompoundLiteralExpression -> "(" TypeDescriptor ")" · InitializerList
  RawString=s35,"("=s1215,identifier/"bool"=s164,"::"=s1068,"{"=s133,"["=s193,incDec=s1192,ArithOp<"+" | "-">=s1191,Number=s56,identifier/"delete"=s1032,LogicOp<"!">=s1191,BitOp<"~">=s1191,identifier/"sizeof"=s1196,identifier/"NULL"=s56,identifier/"new"=s1031,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s1084,"&"=s1084,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s1089,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s1190,FieldExpression=s1190,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s1071,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,InitializerList=s638,ParenthesizedExpression=s1190,ConcatenatedString=s56,PointerExpression=s1190,SubscriptExpression=s1190,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s1171
1144: (typeQualifier)+ -> (typeQualifier)+ · (typeQualifier)+,AbstractPointerDeclarator -> "*" (typeQualifier)+ ·,AbstractPointerDeclarator -> "*" (typeQualifier)+ · abstractDeclarator
  "("=s231,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s230,"*"=s1091,"&&"=s1092,"&"=s1092,identifier/"final"=AbstractPointerDeclarator(2),"{"=AbstractPointerDeclarator(2),identifier/"noexcept"=AbstractPointerDeclarator(2),identifier/"throw"=AbstractPointerDeclarator(2),":"=AbstractPointerDeclarator(2),"->"=AbstractPointerDeclarator(2),"="=AbstractPointerDeclarator(2),")"=AbstractPointerDeclarator(2),","=AbstractPointerDeclarator(2),";"=AbstractPointerDeclarator(2),templateArgsEndFallback=AbstractPointerDeclarator(2),templateArgsEnd=AbstractPointerDeclarator(2) | ParameterList=s804,AbstractPointerDeclarator=s233,AbstractFunctionDeclarator=s233,AbstractArrayDeclarator=s233,AbstractParenthesizedDeclarator=s233,AbstractReferenceDeclarator=s233,(typeQualifier)+=s665,typeQualifier=s440,abstractDeclarator=s1172
1145: AbstractPointerDeclarator -> "*" abstractDeclarator ·,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList TrailingReturnType,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+ TrailingReturnType,AbstractArrayDeclarator -> abstractDeclarator · "[" "]",AbstractArrayDeclarator -> abstractDeclarator · "[" expression "]",AbstractArrayDeclarator -> abstractDeclarator · "[" "*" "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ expression "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ "*" "]"
  "("=s169,"["=s447,identifier/"const"=AbstractPointerDeclarator(2),identifier/"volatile"=AbstractPointerDeclarator(2),identifier/"restrict"=AbstractPointerDeclarator(2),identifier/"_Atomic"=AbstractPointerDeclarator(2),identifier/"mutable"=AbstractPointerDeclarator(2),identifier/"constexpr"=AbstractPointerDeclarator(2),identifier/"final"=AbstractPointerDeclarator(2),"{"=AbstractPointerDeclarator(2),identifier/"noexcept"=AbstractPointerDeclarator(2),identifier/"throw"=AbstractPointerDeclarator(2),":"=AbstractPointerDeclarator(2),"->"=AbstractPointerDeclarator(2),"="=AbstractPointerDeclarator(2),")"=AbstractPointerDeclarator(2),","=AbstractPointerDeclarator(2),";"=AbstractPointerDeclarator(2),templateArgsEndFallback=AbstractPointerDeclarator(2),templateArgsEnd=AbstractPointerDeclarator(2) | ParameterList=s445
1146: AbstractFunctionDeclarator -> abstractDeclarator · ParameterList,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList TrailingReturnType,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+ TrailingReturnType,AbstractArrayDeclarator -> abstractDeclarator · "[" "]",AbstractArrayDeclarator -> abstractDeclarator · "[" expression "]",AbstractArrayDeclarator -> abstractDeclarator · "[" "*" "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ expression "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ "*" "]",AbstractReferenceDeclarator -> "&" abstractDeclarator ·,AbstractReferenceDeclarator -> "&&" abstractDeclarator ·
  "("=s169,"["=s447,identifier/"const"=AbstractReferenceDeclarator(2),identifier/"volatile"=AbstractReferenceDeclarator(2),identifier/"restrict"=AbstractReferenceDeclarator(2),identifier/"_Atomic"=AbstractReferenceDeclarator(2),identifier/"mutable"=AbstractReferenceDeclarator(2),identifier/"constexpr"=AbstractReferenceDeclarator(2),identifier/"final"=AbstractReferenceDeclarator(2),"{"=AbstractReferenceDeclarator(2),identifier/"noexcept"=AbstractReferenceDeclarator(2),identifier/"throw"=AbstractReferenceDeclarator(2),":"=AbstractReferenceDeclarator(2),"->"=AbstractReferenceDeclarator(2),"="=AbstractReferenceDeclarator(2),")"=AbstractReferenceDeclarator(2),","=AbstractReferenceDeclarator(2),";"=AbstractReferenceDeclarator(2),templateArgsEndFallback=AbstractReferenceDeclarator(2),templateArgsEnd=AbstractReferenceDeclarator(2) | ParameterList=s445
1147: ScopedNamespaceIdentifier -> TemplateType · "::" NamespaceIdentifier-1,ScopedTypeIdentifier -> TemplateType · "::" TypeIdentifier-1,ScopedIdentifier -> TemplateType · "::" Identifier-1,ScopedIdentifier -> TemplateType · "::" OperatorName,ScopedIdentifier -> TemplateType · "::" DestructorName,typeSpecifier -> TemplateType ·,OperatorCast -> TemplateType · "::" scopedIdentifier/"operator" declarationSpecifiers abstractDeclarator
  "::"=s1054,"("=typeSpecifier(1),identifier/"const"=typeSpecifier(1),identifier/"volatile"=typeSpecifier(1),identifier/"restrict"=typeSpecifier(1),identifier/"_Atomic"=typeSpecifier(1),identifier/"mutable"=typeSpecifier(1),identifier/"constexpr"=typeSpecifier(1),identifier/"__declspec"=typeSpecifier(1),"{"=typeSpecifier(1),identifier/"extern"=typeSpecifier(1),identifier/"static"=typeSpecifier(1),identifier/"register"=typeSpecifier(1),identifier/"inline"=typeSpecifier(1),identifier/"__attribute__"=typeSpecifier(1),identifier/"__based"=typeSpecifier(1),OperatorName=typeSpecifier(1),identifier=typeSpecifier(1),":"=typeSpecifier(1),"*"=typeSpecifier(1),"&&"=typeSpecifier(1),"&"=typeSpecifier(1),";"=typeSpecifier(1),"="=typeSpecifier(1)
1148: StructSpecifier -> identifier/"struct" MsDeclspecModifier className ·,StructSpecifier -> identifier/"struct" MsDeclspecModifier className · FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier className · BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier className · identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier className · identifier/"final" BaseClassClause FieldDeclarationList
  identifier/"final"=s754,":"=s280,"("=StructSpecifier(3),","=StructSpecifier(3),"{"=StructSpecifier(3),"["=StructSpecifier(3),incDec=StructSpecifier(3),ArithOp<"+" | "-">=StructSpecifier(3),ArithOp<"/" | "%">=StructSpecifier(3),BitOp<"|">=StructSpecifier(3),BitOp<"^">=StructSpecifier(3),CompareOp<"==" | "!=">=StructSpecifier(3),CompareOp<"<=" | ">=">=StructSpecifier(3),"<"/"<"=StructSpecifier(3),templateArgsEnd/">"=StructSpecifier(3),BitOp<"<<" | ">>">=StructSpecifier(3),"?"=StructSpecifier(3),"."=StructSpecifier(3),"->"=StructSpecifier(3),"..."=StructSpecifier(3),"*"=StructSpecifier(3),"||"=StructSpecifier(3),"&&"=StructSpecifier(3),"&"=StructSpecifier(3),";"=StructSpecifier(3),UpdateOp=StructSpecifier(3),"="=StructSpecifier(3),")"=StructSpecifier(3),"]"=StructSpecifier(3),"}"=StructSpecifier(3),templateArgsEndFallback=StructSpecifier(3),templateArgsEnd=StructSpecifier(3) | BaseClassClause=s753
1149: StructSpecifier -> identifier/"struct" MsDeclspecModifier className ·,StructSpecifier -> identifier/"struct" MsDeclspecModifier className · FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier className · BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier className · identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier className · identifier/"final" BaseClassClause FieldDeclarationList
  "{"=s281,":"=s280,"("=StructSpecifier(3),identifier/"const"=StructSpecifier(3),identifier/"volatile"=StructSpecifier(3),identifier/"restrict"=StructSpecifier(3),identifier/"_Atomic"=StructSpecifier(3),identifier/"mutable"=StructSpecifier(3),identifier/"constexpr"=StructSpecifier(3),identifier/"final"=StructSpecifier(3),"["=StructSpecifier(3),identifier/"noexcept"=StructSpecifier(3),identifier/"throw"=StructSpecifier(3),"->"=StructSpecifier(3),"*"=StructSpecifier(3),"&&"=StructSpecifier(3),"&"=StructSpecifier(3),")"=StructSpecifier(3),";"=StructSpecifier(3),","=StructSpecifier(3),"="=StructSpecifier(3),templateArgsEndFallback=StructSpecifier(3),templateArgsEnd=StructSpecifier(3) | BaseClassClause=s753,FieldDeclarationList=s752
1150: StructSpecifier -> identifier/"struct" MsDeclspecModifier className ·,StructSpecifier -> identifier/"struct" MsDeclspecModifier className · FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier className · BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier className · identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier className · identifier/"final" BaseClassClause FieldDeclarationList
  ":"=s280,"("=StructSpecifier(3),identifier/"const"=StructSpecifier(3),identifier/"volatile"=StructSpecifier(3),identifier/"restrict"=StructSpecifier(3),identifier/"_Atomic"=StructSpecifier(3),identifier/"mutable"=StructSpecifier(3),identifier/"constexpr"=StructSpecifier(3),identifier/"final"=StructSpecifier(3),","=StructSpecifier(3),"{"=StructSpecifier(3),"["=StructSpecifier(3),identifier/"noexcept"=StructSpecifier(3),identifier/"throw"=StructSpecifier(3),"->"=StructSpecifier(3),"*"=StructSpecifier(3),"&&"=StructSpecifier(3),"&"=StructSpecifier(3),";"=StructSpecifier(3),"="=StructSpecifier(3) | BaseClassClause=s753
1151: StructSpecifier -> identifier/"struct" MsDeclspecModifier className ·,StructSpecifier -> identifier/"struct" MsDeclspecModifier className · FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier className · BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier className · identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier className · identifier/"final" BaseClassClause FieldDeclarationList
  identifier/"final"=s754,"("=StructSpecifier(3),"{"=StructSpecifier(3),"["=StructSpecifier(3),incDec=StructSpecifier(3),ArithOp<"+" | "-">=StructSpecifier(3),ArithOp<"/" | "%">=StructSpecifier(3),BitOp<"|">=StructSpecifier(3),BitOp<"^">=StructSpecifier(3),CompareOp<"==" | "!=">=StructSpecifier(3),CompareOp<"<=" | ">=">=StructSpecifier(3),"<"/"<"=StructSpecifier(3),templateArgsEnd/">"=StructSpecifier(3),BitOp<"<<" | ">>">=StructSpecifier(3),"?"=StructSpecifier(3),":"=StructSpecifier(3),"."=StructSpecifier(3),"->"=StructSpecifier(3),"..."=StructSpecifier(3),"*"=StructSpecifier(3),"||"=StructSpecifier(3),"&&"=StructSpecifier(3),"&"=StructSpecifier(3),"::"=StructSpecifier(3),identifier/"const"=StructSpecifier(3),identifier/"volatile"=StructSpecifier(3),identifier/"restrict"=StructSpecifier(3),identifier/"_Atomic"=StructSpecifier(3),identifier/"mutable"=StructSpecifier(3),identifier/"constexpr"=StructSpecifier(3),identifier/"__declspec"=StructSpecifier(3),identifier/"extern"=StructSpecifier(3),identifier/"static"=StructSpecifier(3),identifier/"register"=StructSpecifier(3),identifier/"inline"=StructSpecifier(3),identifier/"__attribute__"=StructSpecifier(3),identifier/"__based"=StructSpecifier(3),OperatorName=StructSpecifier(3),identifier=StructSpecifier(3),";"=StructSpecifier(3),"="=StructSpecifier(3),UpdateOp=StructSpecifier(3)
1152: UnionSpecifier -> identifier/"union" MsDeclspecModifier className ·,UnionSpecifier -> identifier/"union" MsDeclspecModifier className · FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier className · BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier className · identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier className · identifier/"final" BaseClassClause FieldDeclarationList
  identifier/"final"=s757,":"=s280,"("=UnionSpecifier(3),","=UnionSpecifier(3),"{"=UnionSpecifier(3),"["=UnionSpecifier(3),incDec=UnionSpecifier(3),ArithOp<"+" | "-">=UnionSpecifier(3),ArithOp<"/" | "%">=UnionSpecifier(3),BitOp<"|">=UnionSpecifier(3),BitOp<"^">=UnionSpecifier(3),CompareOp<"==" | "!=">=UnionSpecifier(3),CompareOp<"<=" | ">=">=UnionSpecifier(3),"<"/"<"=UnionSpecifier(3),templateArgsEnd/">"=UnionSpecifier(3),BitOp<"<<" | ">>">=UnionSpecifier(3),"?"=UnionSpecifier(3),"."=UnionSpecifier(3),"->"=UnionSpecifier(3),"..."=UnionSpecifier(3),"*"=UnionSpecifier(3),"||"=UnionSpecifier(3),"&&"=UnionSpecifier(3),"&"=UnionSpecifier(3),";"=UnionSpecifier(3),UpdateOp=UnionSpecifier(3),"="=UnionSpecifier(3),")"=UnionSpecifier(3),"]"=UnionSpecifier(3),"}"=UnionSpecifier(3),templateArgsEndFallback=UnionSpecifier(3),templateArgsEnd=UnionSpecifier(3) | BaseClassClause=s756
1153: UnionSpecifier -> identifier/"union" MsDeclspecModifier className ·,UnionSpecifier -> identifier/"union" MsDeclspecModifier className · FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier className · BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier className · identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier className · identifier/"final" BaseClassClause FieldDeclarationList
  "{"=s281,":"=s280,"("=UnionSpecifier(3),identifier/"const"=UnionSpecifier(3),identifier/"volatile"=UnionSpecifier(3),identifier/"restrict"=UnionSpecifier(3),identifier/"_Atomic"=UnionSpecifier(3),identifier/"mutable"=UnionSpecifier(3),identifier/"constexpr"=UnionSpecifier(3),identifier/"final"=UnionSpecifier(3),"["=UnionSpecifier(3),identifier/"noexcept"=UnionSpecifier(3),identifier/"throw"=UnionSpecifier(3),"->"=UnionSpecifier(3),"*"=UnionSpecifier(3),"&&"=UnionSpecifier(3),"&"=UnionSpecifier(3),")"=UnionSpecifier(3),";"=UnionSpecifier(3),","=UnionSpecifier(3),"="=UnionSpecifier(3),templateArgsEndFallback=UnionSpecifier(3),templateArgsEnd=UnionSpecifier(3) | BaseClassClause=s756,FieldDeclarationList=s755
1154: UnionSpecifier -> identifier/"union" MsDeclspecModifier className ·,UnionSpecifier -> identifier/"union" MsDeclspecModifier className · FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier className · BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier className · identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier className · identifier/"final" BaseClassClause FieldDeclarationList
  ":"=s280,"("=UnionSpecifier(3),identifier/"const"=UnionSpecifier(3),identifier/"volatile"=UnionSpecifier(3),identifier/"restrict"=UnionSpecifier(3),identifier/"_Atomic"=UnionSpecifier(3),identifier/"mutable"=UnionSpecifier(3),identifier/"constexpr"=UnionSpecifier(3),identifier/"final"=UnionSpecifier(3),","=UnionSpecifier(3),"{"=UnionSpecifier(3),"["=UnionSpecifier(3),identifier/"noexcept"=UnionSpecifier(3),identifier/"throw"=UnionSpecifier(3),"->"=UnionSpecifier(3),"*"=UnionSpecifier(3),"&&"=UnionSpecifier(3),"&"=UnionSpecifier(3),";"=UnionSpecifier(3),"="=UnionSpecifier(3) | BaseClassClause=s756
1155: UnionSpecifier -> identifier/"union" MsDeclspecModifier className ·,UnionSpecifier -> identifier/"union" MsDeclspecModifier className · FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier className · BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier className · identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier className · identifier/"final" BaseClassClause FieldDeclarationList
  identifier/"final"=s757,"("=UnionSpecifier(3),"{"=UnionSpecifier(3),"["=UnionSpecifier(3),incDec=UnionSpecifier(3),ArithOp<"+" | "-">=UnionSpecifier(3),ArithOp<"/" | "%">=UnionSpecifier(3),BitOp<"|">=UnionSpecifier(3),BitOp<"^">=UnionSpecifier(3),CompareOp<"==" | "!=">=UnionSpecifier(3),CompareOp<"<=" | ">=">=UnionSpecifier(3),"<"/"<"=UnionSpecifier(3),templateArgsEnd/">"=UnionSpecifier(3),BitOp<"<<" | ">>">=UnionSpecifier(3),"?"=UnionSpecifier(3),":"=UnionSpecifier(3),"."=UnionSpecifier(3),"->"=UnionSpecifier(3),"..."=UnionSpecifier(3),"*"=UnionSpecifier(3),"||"=UnionSpecifier(3),"&&"=UnionSpecifier(3),"&"=UnionSpecifier(3),"::"=UnionSpecifier(3),identifier/"const"=UnionSpecifier(3),identifier/"volatile"=UnionSpecifier(3),identifier/"restrict"=UnionSpecifier(3),identifier/"_Atomic"=UnionSpecifier(3),identifier/"mutable"=UnionSpecifier(3),identifier/"constexpr"=UnionSpecifier(3),identifier/"__declspec"=UnionSpecifier(3),identifier/"extern"=UnionSpecifier(3),identifier/"static"=UnionSpecifier(3),identifier/"register"=UnionSpecifier(3),identifier/"inline"=UnionSpecifier(3),identifier/"__attribute__"=UnionSpecifier(3),identifier/"__based"=UnionSpecifier(3),OperatorName=UnionSpecifier(3),identifier=UnionSpecifier(3),";"=UnionSpecifier(3),"="=UnionSpecifier(3),UpdateOp=UnionSpecifier(3)
1156: EnumSpecifier -> identifier/"enum" identifier/"class" className ·,EnumSpecifier -> identifier/"enum" identifier/"class" className · EnumeratorList,EnumSpecifier -> identifier/"enum" identifier/"class" className · enumBaseClause,EnumSpecifier -> identifier/"enum" identifier/"class" className · enumBaseClause EnumeratorList,EnumSpecifier -> identifier/"enum" identifier/"struct" className ·,EnumSpecifier -> identifier/"enum" identifier/"struct" className · EnumeratorList,EnumSpecifier -> identifier/"enum" identifier/"struct" className · enumBaseClause,EnumSpecifier -> identifier/"enum" identifier/"struct" className · enumBaseClause EnumeratorList
  ":"=s547,"("=EnumSpecifier(3),","=EnumSpecifier(3),"{"=EnumSpecifier(3),"["=EnumSpecifier(3),incDec=EnumSpecifier(3),ArithOp<"+" | "-">=EnumSpecifier(3),ArithOp<"/" | "%">=EnumSpecifier(3),BitOp<"|">=EnumSpecifier(3),BitOp<"^">=EnumSpecifier(3),CompareOp<"==" | "!=">=EnumSpecifier(3),CompareOp<"<=" | ">=">=EnumSpecifier(3),"<"/"<"=EnumSpecifier(3),templateArgsEnd/">"=EnumSpecifier(3),BitOp<"<<" | ">>">=EnumSpecifier(3),"?"=EnumSpecifier(3),"."=EnumSpecifier(3),"->"=EnumSpecifier(3),"..."=EnumSpecifier(3),"*"=EnumSpecifier(3),"||"=EnumSpecifier(3),"&&"=EnumSpecifier(3),"&"=EnumSpecifier(3),";"=EnumSpecifier(3),UpdateOp=EnumSpecifier(3),"="=EnumSpecifier(3),")"=EnumSpecifier(3),"]"=EnumSpecifier(3),"}"=EnumSpecifier(3),templateArgsEndFallback=EnumSpecifier(3),templateArgsEnd=EnumSpecifier(3),identifier/"const"=EnumSpecifier(3),identifier/"volatile"=EnumSpecifier(3),identifier/"restrict"=EnumSpecifier(3),identifier/"_Atomic"=EnumSpecifier(3),identifier/"mutable"=EnumSpecifier(3),identifier/"constexpr"=EnumSpecifier(3),identifier/"final"=EnumSpecifier(3),identifier/"noexcept"=EnumSpecifier(3),identifier/"throw"=EnumSpecifier(3) | enumBaseClause=s764
1157: ClassSpecifier -> identifier/"class" MsDeclspecModifier className ·,ClassSpecifier -> identifier/"class" MsDeclspecModifier className · FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier className · BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier className · identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier className · identifier/"final" BaseClassClause FieldDeclarationList
  identifier/"final"=s768,":"=s280,"("=ClassSpecifier(3),","=ClassSpecifier(3),"{"=ClassSpecifier(3),"["=ClassSpecifier(3),incDec=ClassSpecifier(3),ArithOp<"+" | "-">=ClassSpecifier(3),ArithOp<"/" | "%">=ClassSpecifier(3),BitOp<"|">=ClassSpecifier(3),BitOp<"^">=ClassSpecifier(3),CompareOp<"==" | "!=">=ClassSpecifier(3),CompareOp<"<=" | ">=">=ClassSpecifier(3),"<"/"<"=ClassSpecifier(3),templateArgsEnd/">"=ClassSpecifier(3),BitOp<"<<" | ">>">=ClassSpecifier(3),"?"=ClassSpecifier(3),"."=ClassSpecifier(3),"->"=ClassSpecifier(3),"..."=ClassSpecifier(3),"*"=ClassSpecifier(3),"||"=ClassSpecifier(3),"&&"=ClassSpecifier(3),"&"=ClassSpecifier(3),";"=ClassSpecifier(3),UpdateOp=ClassSpecifier(3),"="=ClassSpecifier(3),")"=ClassSpecifier(3),"]"=ClassSpecifier(3),"::"=ClassSpecifier(3),identifier/"const"=ClassSpecifier(3),identifier/"volatile"=ClassSpecifier(3),identifier/"restrict"=ClassSpecifier(3),identifier/"_Atomic"=ClassSpecifier(3),identifier/"mutable"=ClassSpecifier(3),identifier/"constexpr"=ClassSpecifier(3),identifier/"__declspec"=ClassSpecifier(3),identifier/"extern"=ClassSpecifier(3),identifier/"static"=ClassSpecifier(3),identifier/"register"=ClassSpecifier(3),identifier/"inline"=ClassSpecifier(3),identifier/"__attribute__"=ClassSpecifier(3),identifier/"__based"=ClassSpecifier(3),OperatorName=ClassSpecifier(3),identifier=ClassSpecifier(3),"}"=ClassSpecifier(3),templateArgsEndFallback=ClassSpecifier(3),templateArgsEnd=ClassSpecifier(3) | BaseClassClause=s767
1158: ClassSpecifier -> identifier/"class" MsDeclspecModifier className ·,ClassSpecifier -> identifier/"class" MsDeclspecModifier className · FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier className · BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier className · identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier className · identifier/"final" BaseClassClause FieldDeclarationList
  "{"=s281,":"=s280,"("=ClassSpecifier(3),identifier/"const"=ClassSpecifier(3),identifier/"volatile"=ClassSpecifier(3),identifier/"restrict"=ClassSpecifier(3),identifier/"_Atomic"=ClassSpecifier(3),identifier/"mutable"=ClassSpecifier(3),identifier/"constexpr"=ClassSpecifier(3),identifier/"final"=ClassSpecifier(3),"["=ClassSpecifier(3),identifier/"noexcept"=ClassSpecifier(3),identifier/"throw"=ClassSpecifier(3),"->"=ClassSpecifier(3),"*"=ClassSpecifier(3),"&&"=ClassSpecifier(3),"&"=ClassSpecifier(3),")"=ClassSpecifier(3),";"=ClassSpecifier(3),","=ClassSpecifier(3),"="=ClassSpecifier(3),templateArgsEndFallback=ClassSpecifier(3),templateArgsEnd=ClassSpecifier(3) | BaseClassClause=s767,FieldDeclarationList=s766
1159: ClassSpecifier -> identifier/"class" MsDeclspecModifier className ·,ClassSpecifier -> identifier/"class" MsDeclspecModifier className · FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier className · BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier className · identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier className · identifier/"final" BaseClassClause FieldDeclarationList
  ":"=s280,"("=ClassSpecifier(3),identifier/"const"=ClassSpecifier(3),identifier/"volatile"=ClassSpecifier(3),identifier/"restrict"=ClassSpecifier(3),identifier/"_Atomic"=ClassSpecifier(3),identifier/"mutable"=ClassSpecifier(3),identifier/"constexpr"=ClassSpecifier(3),identifier/"final"=ClassSpecifier(3),"{"=ClassSpecifier(3),"["=ClassSpecifier(3),identifier/"noexcept"=ClassSpecifier(3),identifier/"throw"=ClassSpecifier(3),"->"=ClassSpecifier(3),"*"=ClassSpecifier(3),"&&"=ClassSpecifier(3),"&"=ClassSpecifier(3),"="=ClassSpecifier(3),","=ClassSpecifier(3),";"=ClassSpecifier(3) | BaseClassClause=s767
1160: LambdaCaptureSpecifier -> "[" "]" ·,DeleteExpression -> identifier/"delete" "[" "]" · expression
  RawString=s35,identifier/"bool"=s164,"::"=s1068,incDec=s1192,ArithOp<"+" | "-">=s1191,Number=s56,identifier/"delete"=s1032,LogicOp<"!">=s1191,BitOp<"~">=s1191,identifier/"sizeof"=s1196,identifier/"NULL"=s56,identifier/"new"=s1031,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54,"("=LambdaCaptureSpecifier(2),"{"=LambdaCaptureSpecifier(2),"["=LambdaCaptureSpecifier(2),"*"=LambdaCaptureSpecifier(2),"&&"=LambdaCaptureSpecifier(2),"&"=LambdaCaptureSpecifier(2) | String=s35,Identifier=s1089,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s1190,FieldExpression=s1190,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s1071,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ConcatenatedString=s56,SubscriptExpression=s1190,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,ParameterPackExpansion-2=s56,expression=s1174
1161: ConditionalExpression -> expression "?" expression ":" · expression
  RawString=s35,"("=s1215,identifier/"bool"=s164,"::"=s1068,"["=s193,incDec=s1192,ArithOp<"+" | "-">=s1191,Number=s56,identifier/"delete"=s1032,LogicOp<"!">=s1191,BitOp<"~">=s1191,identifier/"sizeof"=s1196,identifier/"NULL"=s56,identifier/"new"=s1031,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s1084,"&"=s1084,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s1089,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s1190,FieldExpression=s1190,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s1071,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s1190,ConcatenatedString=s56,PointerExpression=s1190,SubscriptExpression=s1190,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s1175
1162: NamespaceIdentifier-1 -> scopedIdentifier ·,TypeIdentifier-1 -> scopedIdentifier ·,FieldIdentifier-1 -> scopedIdentifier ·
  "("=FieldIdentifier-1(1),"::"=NamespaceIdentifier-1(1),"<"=TypeIdentifier-1(1),"{"=FieldIdentifier-1(1)
1163: ScopedNamespaceIdentifier -> NamespaceIdentifier "::" · NamespaceIdentifier-1,ScopedNamespaceIdentifier -> TemplateType "::" · NamespaceIdentifier-1,ScopedNamespaceIdentifier -> ScopedNamespaceIdentifier "::" · NamespaceIdentifier-1,ScopedTypeIdentifier -> NamespaceIdentifier "::" · TypeIdentifier-1,ScopedTypeIdentifier -> TemplateType "::" · TypeIdentifier-1,ScopedTypeIdentifier -> ScopedNamespaceIdentifier "::" · TypeIdentifier-1,ScopedFieldIdentifier -> NamespaceIdentifier "::" · FieldIdentifier-1,ScopedFieldIdentifier -> NamespaceIdentifier "::" · OperatorName,ScopedFieldIdentifier -> NamespaceIdentifier "::" · DestructorName,ScopedFieldIdentifier -> TemplateType "::" · FieldIdentifier-1,ScopedFieldIdentifier -> TemplateType "::" · OperatorName,ScopedFieldIdentifier -> TemplateType "::" · DestructorName,ScopedFieldIdentifier -> ScopedNamespaceIdentifier "::" · FieldIdentifier-1,ScopedFieldIdentifier -> ScopedNamespaceIdentifier "::" · OperatorName,ScopedFieldIdentifier -> ScopedNamespaceIdentifier "::" · DestructorName
  DestructorName=s779,OperatorName=s779,scopedIdentifier=s1162 | NamespaceIdentifier-1=s347,TypeIdentifier-1=s348,FieldIdentifier-1=s779
1164: LambdaCaptureSpecifier -> "[" "]" ·,DeleteExpression -> "::" scopedIdentifier/"delete" "[" "]" · expression
  RawString=s35,identifier/"bool"=s164,"::"=s1068,incDec=s1192,ArithOp<"+" | "-">=s1191,Number=s56,identifier/"delete"=s1032,LogicOp<"!">=s1191,BitOp<"~">=s1191,identifier/"sizeof"=s1196,identifier/"NULL"=s56,identifier/"new"=s1031,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54,"("=LambdaCaptureSpecifier(2),"{"=LambdaCaptureSpecifier(2),"["=LambdaCaptureSpecifier(2),"*"=LambdaCaptureSpecifier(2),"&&"=LambdaCaptureSpecifier(2),"&"=LambdaCaptureSpecifier(2) | String=s35,Identifier=s1089,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s1190,FieldExpression=s1190,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s1071,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ConcatenatedString=s56,SubscriptExpression=s1190,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,ParameterPackExpansion-2=s56,expression=s1176
1165: typeQualifier+ -> typeQualifier+ · typeQualifier+,PointerDeclarator-1 -> MsBasedModifier "*" msPointerModifier+ typeQualifier+ · declarator
  "("=s180,DestructorName=s26,"::"=s1075,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s182,identifier/"__based"=s63,OperatorName=s26,identifier=s1058,"*"=s1079,"&&"=s1081,"&"=s1081 | Identifier=s181,NamespaceIdentifier=s1198,TemplateType=s1198,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s1198,MsBasedModifier=s1189,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,typeQualifier+=s376,typeQualifier=s159,declarator=s1308
1166: typeQualifier+ -> typeQualifier+ · typeQualifier+,PointerDeclarator-1 -> MsBasedModifier "*" msPointerModifier+ typeQualifier+ · declarator
  "("=s180,DestructorName=s26,"::"=s1075,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s182,identifier/"__based"=s63,OperatorName=s26,identifier=s153,"*"=s1080,"&&"=s1082,"&"=s1082 | Identifier=s181,NamespaceIdentifier=s1198,TemplateType=s1198,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s1198,MsBasedModifier=s1281,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,typeQualifier+=s376,typeQualifier=s159,declarator=s803
1167: ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+ -> ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+ · ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,FunctionDeclarator-1 -> declarator ParameterList AttributeSpecifier+ ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+ ·
  identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"final"=s384,identifier/"noexcept"=s386,identifier/"throw"=s387,"->"=s1272,"("=FunctionDeclarator-1(4),"["=FunctionDeclarator-1(4),")"=FunctionDeclarator-1(4),";"=FunctionDeclarator-1(4),","=FunctionDeclarator-1(4),"="=FunctionDeclarator-1(4),templateArgsEndFallback=FunctionDeclarator-1(4),templateArgsEnd=FunctionDeclarator-1(4) | Noexcept=s384,ThrowSpecifier=s384,TrailingReturnType=s384,((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+=s616,typeQualifier=s384
1168: TrailingReturnType -> "->" typeSpecifier ·,TrailingReturnType -> "->" typeSpecifier · abstractDeclarator
  "("=s231,"["=s230,"*"=s1304,"&&"=s1285,"&"=s1285,"{"=TrailingReturnType(2),";"=TrailingReturnType(2),"="=TrailingReturnType(2) | ParameterList=s228,AbstractPointerDeclarator=s233,AbstractFunctionDeclarator=s233,AbstractArrayDeclarator=s233,AbstractParenthesizedDeclarator=s233,AbstractReferenceDeclarator=s233,abstractDeclarator=s1177
1169: TrailingReturnType -> "->" typeQualifier · typeSpecifier,TrailingReturnType -> "->" typeQualifier · typeSpecifier abstractDeclarator
  identifier/"bool"=s48,"::"=s141,identifier/"struct"=s1239,identifier/"typename"=s1251,identifier/"class"=s1248,identifier/"union"=s1243,identifier/"enum"=s1246,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeSpecifier=s1178
1170: PointerDeclarator-1 -> "*" · declarator,PointerDeclarator-1 -> "*" · typeQualifier+ declarator,PointerDeclarator-1 -> "*" · msPointerModifier+ declarator,PointerDeclarator-1 -> "*" · msPointerModifier+ typeQualifier+ declarator,AbstractPointerDeclarator -> "*" ·,AbstractPointerDeclarator -> "*" · abstractDeclarator,AbstractPointerDeclarator -> "*" · (typeQualifier)+,AbstractPointerDeclarator -> "*" · (typeQualifier)+ abstractDeclarator
  "("=s626,DestructorName=s26,"::"=s178,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s625,identifier/"__based"=s63,identifier/"__restrict"=s165,OperatorName=s26,identifier=s153,"*"=s1170,"&&"=s813,"&"=s813,")"=AbstractPointerDeclarator(1),","=AbstractPointerDeclarator(1),templateArgsEndFallback=AbstractPointerDeclarator(1),templateArgsEnd=AbstractPointerDeclarator(1) | Identifier=s181,NamespaceIdentifier=s156,TemplateType=s156,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s156,MsBasedModifier=s18,ParameterList=s1284,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,AbstractPointerDeclarator=s233,AbstractFunctionDeclarator=s233,AbstractArrayDeclarator=s233,AbstractParenthesizedDeclarator=s233,AbstractReferenceDeclarator=s233,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,typeQualifier+=s160,msPointerModifier+=s161,(typeQualifier)+=s441,typeQualifier=s815,declarator=s162,abstractDeclarator=s442
1171: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,CastExpression -> "(" TypeDescriptor ")" expression ·,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,incDec=s1042,ArithOp<"+" | "-">=s1033,ArithOp<"/" | "%">=s1034,BitOp<"|">=s1036,BitOp<"^">=s1037,CompareOp<"==" | "!=">=s1039,CompareOp<"<=" | ">=">=s1040,"<"/"<"=s1040,templateArgsEnd/">"=s1040,BitOp<"<<" | ">>">=s1041,"?"=s1282,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112,":"=CastExpression(4),UpdateOp=CastExpression(4),"="=CastExpression(4) | ArgumentList=s105,ArithOp-1=s1034,LogicOp-1=s1035,BitOp-1=s1038
1172: AbstractPointerDeclarator -> "*" (typeQualifier)+ abstractDeclarator ·,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList TrailingReturnType,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+ TrailingReturnType,AbstractArrayDeclarator -> abstractDeclarator · "[" "]",AbstractArrayDeclarator -> abstractDeclarator · "[" expression "]",AbstractArrayDeclarator -> abstractDeclarator · "[" "*" "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ expression "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ "*" "]"
  "("=s169,"["=s447,identifier/"const"=AbstractPointerDeclarator(3),identifier/"volatile"=AbstractPointerDeclarator(3),identifier/"restrict"=AbstractPointerDeclarator(3),identifier/"_Atomic"=AbstractPointerDeclarator(3),identifier/"mutable"=AbstractPointerDeclarator(3),identifier/"constexpr"=AbstractPointerDeclarator(3),identifier/"final"=AbstractPointerDeclarator(3),"{"=AbstractPointerDeclarator(3),identifier/"noexcept"=AbstractPointerDeclarator(3),identifier/"throw"=AbstractPointerDeclarator(3),":"=AbstractPointerDeclarator(3),"->"=AbstractPointerDeclarator(3),"="=AbstractPointerDeclarator(3),")"=AbstractPointerDeclarator(3),","=AbstractPointerDeclarator(3),";"=AbstractPointerDeclarator(3),templateArgsEndFallback=AbstractPointerDeclarator(3),templateArgsEnd=AbstractPointerDeclarator(3) | ParameterList=s445
1173: CastExpression -> "(" TypeDescriptor ")" · expression,_anon-4 -> "(" TypeDescriptor ")" ·,CompoundLiteralExpression -> "(" TypeDescriptor ")" · InitializerList
  RawString=s35,identifier/"bool"=s164,"::"=s1068,"{"=s133,Number=s56,identifier/"delete"=s1032,LogicOp<"!">=s1191,BitOp<"~">=s1191,identifier/"sizeof"=s1196,identifier/"NULL"=s56,identifier/"new"=s1031,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54,"("=_anon-4(3),"["=_anon-4(3),incDec=_anon-4(3),ArithOp<"+" | "-">=_anon-4(3),ArithOp<"/" | "%">=_anon-4(3),BitOp<"|">=_anon-4(3),BitOp<"^">=_anon-4(3),CompareOp<"==" | "!=">=_anon-4(3),CompareOp<"<=" | ">=">=_anon-4(3),"<"/"<"=_anon-4(3),templateArgsEnd/">"=_anon-4(3),BitOp<"<<" | ">>">=_anon-4(3),"?"=_anon-4(3),":"=_anon-4(3),"."=_anon-4(3),"->"=_anon-4(3),"..."=_anon-4(3),"*"=_anon-4(3),"||"=_anon-4(3),"&&"=_anon-4(3),"&"=_anon-4(3),UpdateOp=_anon-4(3),"="=_anon-4(3) | String=s35,Identifier=s1089,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s1190,FieldExpression=s1190,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s1071,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,InitializerList=s638,ConcatenatedString=s56,SubscriptExpression=s1190,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,ParameterPackExpansion-2=s56,expression=s1171
1174: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "...",DeleteExpression -> identifier/"delete" "[" "]" expression ·
  "("=s124,"["=s109,incDec=s1042,ArithOp<"+" | "-">=s1033,ArithOp<"/" | "%">=s1034,BitOp<"|">=s1036,BitOp<"^">=s1037,CompareOp<"==" | "!=">=s1039,CompareOp<"<=" | ">=">=s1040,"<"/"<"=s1040,templateArgsEnd/">"=s1040,BitOp<"<<" | ">>">=s1041,"?"=s1282,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112,":"=DeleteExpression(4),UpdateOp=DeleteExpression(4),"="=DeleteExpression(4) | ArgumentList=s105,ArithOp-1=s1034,LogicOp-1=s1035,BitOp-1=s1038
1175: ConditionalExpression -> expression · "?" expression ":" expression,ConditionalExpression -> expression "?" expression ":" expression ·,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,incDec=s1042,ArithOp<"+" | "-">=s1033,ArithOp<"/" | "%">=s1034,BitOp<"|">=s1036,BitOp<"^">=s1037,CompareOp<"==" | "!=">=s1039,CompareOp<"<=" | ">=">=s1040,"<"/"<"=s1040,templateArgsEnd/">"=s1040,BitOp<"<<" | ">>">=s1041,"?"=s1282,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112,":"=ConditionalExpression(5),UpdateOp=ConditionalExpression(5),"="=ConditionalExpression(5) | ArgumentList=s105,ArithOp-1=s1034,LogicOp-1=s1035,BitOp-1=s1038
1176: ConditionalExpression -> expression · "?" expression ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "...",DeleteExpression -> "::" scopedIdentifier/"delete" "[" "]" expression ·
  "("=s124,"["=s109,incDec=s1042,ArithOp<"+" | "-">=s1033,ArithOp<"/" | "%">=s1034,BitOp<"|">=s1036,BitOp<"^">=s1037,CompareOp<"==" | "!=">=s1039,CompareOp<"<=" | ">=">=s1040,"<"/"<"=s1040,templateArgsEnd/">"=s1040,BitOp<"<<" | ">>">=s1041,"?"=s1282,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112,":"=DeleteExpression(5),UpdateOp=DeleteExpression(5),"="=DeleteExpression(5) | ArgumentList=s105,ArithOp-1=s1034,LogicOp-1=s1035,BitOp-1=s1038
1177: AbstractFunctionDeclarator -> abstractDeclarator · ParameterList,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList TrailingReturnType,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+ TrailingReturnType,AbstractArrayDeclarator -> abstractDeclarator · "[" "]",AbstractArrayDeclarator -> abstractDeclarator · "[" expression "]",AbstractArrayDeclarator -> abstractDeclarator · "[" "*" "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ expression "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ "*" "]",TrailingReturnType -> "->" typeSpecifier abstractDeclarator ·
  "("=s169,"["=s447,"{"=TrailingReturnType(3),";"=TrailingReturnType(3),"="=TrailingReturnType(3) | ParameterList=s446
1178: TrailingReturnType -> "->" typeQualifier typeSpecifier ·,TrailingReturnType -> "->" typeQualifier typeSpecifier · abstractDeclarator
  "("=s231,"["=s230,"*"=s1304,"&&"=s1285,"&"=s1285,"{"=TrailingReturnType(3),";"=TrailingReturnType(3),"="=TrailingReturnType(3) | ParameterList=s228,AbstractPointerDeclarator=s233,AbstractFunctionDeclarator=s233,AbstractArrayDeclarator=s233,AbstractParenthesizedDeclarator=s233,AbstractReferenceDeclarator=s233,abstractDeclarator=s1182
1179: AbstractReferenceDeclarator -> "&" ·,AbstractReferenceDeclarator -> "&" · abstractDeclarator,AbstractReferenceDeclarator -> "&&" ·,AbstractReferenceDeclarator -> "&&" · abstractDeclarator,ReferenceDeclarator -> "&" · declarator,ReferenceDeclarator -> "&&" · declarator
  "("=s626,DestructorName=s26,"::"=s1075,"["=s625,identifier/"__based"=s63,OperatorName=s26,identifier=s153,"*"=s623,"&&"=s1179,"&"=s1179,")"=AbstractReferenceDeclarator(1),","=AbstractReferenceDeclarator(1),templateArgsEndFallback=AbstractReferenceDeclarator(1),templateArgsEnd=AbstractReferenceDeclarator(1) | Identifier=s181,NamespaceIdentifier=s1198,TemplateType=s1198,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s1198,MsBasedModifier=s1281,ParameterList=s1284,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,AbstractPointerDeclarator=s233,AbstractFunctionDeclarator=s233,AbstractArrayDeclarator=s233,AbstractParenthesizedDeclarator=s233,AbstractReferenceDeclarator=s233,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,declarator=s177,abstractDeclarator=s453
1180: FunctionDeclarator -> fieldDeclarator ParameterList ·,FunctionDeclarator -> fieldDeclarator ParameterList · (typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType)+
  identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"final"=s962,identifier/"noexcept"=s386,identifier/"throw"=s387,"->"=s1272,"("=FunctionDeclarator(2),")"=FunctionDeclarator(2),"["=FunctionDeclarator(2) | Noexcept=s962,ThrowSpecifier=s962,TrailingReturnType=s962,(typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType)+=s1184,typeQualifier=s962
1181: FunctionDeclarator -> fieldDeclarator · ParameterList,FunctionDeclarator -> fieldDeclarator · ParameterList (typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType)+,ArrayDeclarator-1 -> fieldDeclarator · "[" "]",ArrayDeclarator-1 -> fieldDeclarator · "[" expression "]",ArrayDeclarator-1 -> fieldDeclarator · "[" "*" "]",ArrayDeclarator-1 -> fieldDeclarator · "[" typeQualifier+ "]",ArrayDeclarator-1 -> fieldDeclarator · "[" typeQualifier+ expression "]",ArrayDeclarator-1 -> fieldDeclarator · "[" typeQualifier+ "*" "]",ReferenceDeclarator-2 -> "&" fieldDeclarator ·,ReferenceDeclarator-2 -> "&&" fieldDeclarator ·
  "("=s169,"["=s888,")"=ReferenceDeclarator-2(2) | ParameterList=s1180
1182: AbstractFunctionDeclarator -> abstractDeclarator · ParameterList,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList TrailingReturnType,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+ TrailingReturnType,AbstractArrayDeclarator -> abstractDeclarator · "[" "]",AbstractArrayDeclarator -> abstractDeclarator · "[" expression "]",AbstractArrayDeclarator -> abstractDeclarator · "[" "*" "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ expression "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ "*" "]",TrailingReturnType -> "->" typeQualifier typeSpecifier abstractDeclarator ·
  "("=s169,"["=s447,"{"=TrailingReturnType(4),";"=TrailingReturnType(4),"="=TrailingReturnType(4) | ParameterList=s446
1183: PointerDeclarator -> "*" typeQualifier+ fieldDeclarator ·,PointerDeclarator -> "*" msPointerModifier+ fieldDeclarator ·,PointerDeclarator -> MsBasedModifier "*" fieldDeclarator ·,FunctionDeclarator -> fieldDeclarator · ParameterList,FunctionDeclarator -> fieldDeclarator · ParameterList (typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType)+,ArrayDeclarator-1 -> fieldDeclarator · "[" "]",ArrayDeclarator-1 -> fieldDeclarator · "[" expression "]",ArrayDeclarator-1 -> fieldDeclarator · "[" "*" "]",ArrayDeclarator-1 -> fieldDeclarator · "[" typeQualifier+ "]",ArrayDeclarator-1 -> fieldDeclarator · "[" typeQualifier+ expression "]",ArrayDeclarator-1 -> fieldDeclarator · "[" typeQualifier+ "*" "]"
  "("=s169,"["=s888,")"=PointerDeclarator(3) | ParameterList=s1180
1184: (typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType)+ -> (typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType)+ · (typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType)+,FunctionDeclarator -> fieldDeclarator ParameterList (typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType)+ ·
  identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"final"=s962,identifier/"noexcept"=s386,identifier/"throw"=s387,"->"=s1272,"("=FunctionDeclarator(3),")"=FunctionDeclarator(3),"["=FunctionDeclarator(3) | Noexcept=s962,ThrowSpecifier=s962,TrailingReturnType=s962,(typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType)+=s999,typeQualifier=s962
1185: PointerDeclarator -> "*" msPointerModifier+ typeQualifier+ fieldDeclarator ·,PointerDeclarator -> MsBasedModifier "*" typeQualifier+ fieldDeclarator ·,PointerDeclarator -> MsBasedModifier "*" msPointerModifier+ fieldDeclarator ·,FunctionDeclarator -> fieldDeclarator · ParameterList,FunctionDeclarator -> fieldDeclarator · ParameterList (typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType)+,ArrayDeclarator-1 -> fieldDeclarator · "[" "]",ArrayDeclarator-1 -> fieldDeclarator · "[" expression "]",ArrayDeclarator-1 -> fieldDeclarator · "[" "*" "]",ArrayDeclarator-1 -> fieldDeclarator · "[" typeQualifier+ "]",ArrayDeclarator-1 -> fieldDeclarator · "[" typeQualifier+ expression "]",ArrayDeclarator-1 -> fieldDeclarator · "[" typeQualifier+ "*" "]"
  "("=s169,"["=s888,")"=PointerDeclarator(4) | ParameterList=s1180
1186: PointerDeclarator -> MsBasedModifier "*" msPointerModifier+ typeQualifier+ fieldDeclarator ·,FunctionDeclarator -> fieldDeclarator · ParameterList,FunctionDeclarator -> fieldDeclarator · ParameterList (typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType)+,ArrayDeclarator-1 -> fieldDeclarator · "[" "]",ArrayDeclarator-1 -> fieldDeclarator · "[" expression "]",ArrayDeclarator-1 -> fieldDeclarator · "[" "*" "]",ArrayDeclarator-1 -> fieldDeclarator · "[" typeQualifier+ "]",ArrayDeclarator-1 -> fieldDeclarator · "[" typeQualifier+ expression "]",ArrayDeclarator-1 -> fieldDeclarator · "[" typeQualifier+ "*" "]"
  "("=s169,"["=s888,")"=PointerDeclarator(5) | ParameterList=s1180
1187: (storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+ -> (storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+ · (storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+,declarationSpecifiers -> (storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+ · typeSpecifier,declarationSpecifiers -> (storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+ · typeSpecifier (storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+
  identifier/"bool"=s48,"::"=s141,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s1019,identifier/"__declspec"=s59,identifier/"extern"=s61,identifier/"static"=s61,identifier/"register"=s61,identifier/"inline"=s61,identifier/"__attribute__"=s62,identifier/"typename"=s1027,identifier/"class"=s1026,identifier/"union"=s1021,identifier/"enum"=s1023,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,MsDeclspecModifier=s14,AttributeSpecifier=s14,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+=s149,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeQualifier=s14,typeSpecifier=s150,storageClassSpecifier=s14
1188: (storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+ -> (storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+ · (storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+,declarationSpecifiers -> (storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+ · typeSpecifier,declarationSpecifiers -> (storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+ · typeSpecifier (storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+
  identifier/"bool"=s48,"::"=s141,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s1193,identifier/"__declspec"=s59,identifier/"extern"=s61,identifier/"static"=s61,identifier/"register"=s61,identifier/"inline"=s61,identifier/"__attribute__"=s62,identifier/"typename"=s1030,identifier/"class"=s1195,identifier/"union"=s1194,identifier/"enum"=s1025,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,MsDeclspecModifier=s14,AttributeSpecifier=s14,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,(storageClassSpecifier | typeQualifier | AttributeSpecifier | MsDeclspecModifier)+=s149,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeQualifier=s14,typeSpecifier=s150,storageClassSpecifier=s14
1189: PointerDeclarator-1 -> MsBasedModifier · "*" declarator,PointerDeclarator-1 -> MsBasedModifier · "*" typeQualifier+ declarator,PointerDeclarator-1 -> MsBasedModifier · "*" msPointerModifier+ declarator,PointerDeclarator-1 -> MsBasedModifier · "*" msPointerModifier+ typeQualifier+ declarator
  "*"=s1074
1190: AssignmentExpression -> CallExpression · UpdateOp expression,AssignmentExpression -> CallExpression · "=" expression,AssignmentExpression -> FieldExpression · UpdateOp expression,AssignmentExpression -> FieldExpression · "=" expression,AssignmentExpression -> PointerExpression · UpdateOp expression,AssignmentExpression -> PointerExpression · "=" expression,AssignmentExpression -> SubscriptExpression · UpdateOp expression,AssignmentExpression -> SubscriptExpression · "=" expression,AssignmentExpression -> ParenthesizedExpression · UpdateOp expression,AssignmentExpression -> ParenthesizedExpression · "=" expression,expression -> PointerExpression ·,expression -> SubscriptExpression ·,expression -> CallExpression ·,expression -> FieldExpression ·,expression -> ParenthesizedExpression ·
  UpdateOp=s1056,"="=s1056,"("=expression(1),"["=expression(1),incDec=expression(1),ArithOp<"+" | "-">=expression(1),ArithOp<"/" | "%">=expression(1),BitOp<"|">=expression(1),BitOp<"^">=expression(1),CompareOp<"==" | "!=">=expression(1),CompareOp<"<=" | ">=">=expression(1),"<"/"<"=expression(1),templateArgsEnd/">"=expression(1),BitOp<"<<" | ">>">=expression(1),"?"=expression(1),":"=expression(1),"."=expression(1),"->"=expression(1),"..."=expression(1),"*"=expression(1),"||"=expression(1),"&&"=expression(1),"&"=expression(1)
1191: UnaryExpression -> LogicOp<"!"> · expression,UnaryExpression -> ArithOp<"+" | "-"> · expression,UnaryExpression -> BitOp<"~"> · expression
  RawString=s35,"("=s1215,identifier/"bool"=s164,"::"=s1068,"["=s193,incDec=s1192,ArithOp<"+" | "-">=s1191,Number=s56,identifier/"delete"=s1032,LogicOp<"!">=s1191,BitOp<"~">=s1191,identifier/"sizeof"=s1196,identifier/"NULL"=s56,identifier/"new"=s1031,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s1084,"&"=s1084,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s1089,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s1190,FieldExpression=s1190,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s1071,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s1190,ConcatenatedString=s56,PointerExpression=s1190,SubscriptExpression=s1190,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s224
1192: UpdateExpression -> incDec · expression
  RawString=s35,"("=s1215,identifier/"bool"=s164,"::"=s1068,"["=s193,incDec=s1192,ArithOp<"+" | "-">=s1191,Number=s56,identifier/"delete"=s1032,LogicOp<"!">=s1191,BitOp<"~">=s1191,identifier/"sizeof"=s1196,identifier/"NULL"=s56,identifier/"new"=s1031,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s1084,"&"=s1084,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s1089,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s1190,FieldExpression=s1190,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s1071,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s1190,ConcatenatedString=s56,PointerExpression=s1190,SubscriptExpression=s1190,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s1090
1193: StructSpecifier -> identifier/"struct" · className,StructSpecifier -> identifier/"struct" · FieldDeclarationList,StructSpecifier -> identifier/"struct" · BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" · identifier/"final" BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · className FieldDeclarationList,StructSpecifier -> identifier/"struct" · className BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · className identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" · className identifier/"final" BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier className,StructSpecifier -> identifier/"struct" · MsDeclspecModifier FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier identifier/"final" BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier className FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier className BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier className identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier className identifier/"final" BaseClassClause FieldDeclarationList
  "::"=s141,identifier/"__declspec"=s59,identifier/"final"=s285,"{"=s281,identifier=s140,":"=s280 | NamespaceIdentifier=s142,TemplateType=s278,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,MsDeclspecModifier=s1217,BaseClassClause=s284,FieldDeclarationList=s283,className=s1096
1194: UnionSpecifier -> identifier/"union" · className,UnionSpecifier -> identifier/"union" · FieldDeclarationList,UnionSpecifier -> identifier/"union" · BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" · identifier/"final" BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · className FieldDeclarationList,UnionSpecifier -> identifier/"union" · className BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · className identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" · className identifier/"final" BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier className,UnionSpecifier -> identifier/"union" · MsDeclspecModifier FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier identifier/"final" BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier className FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier className BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier className identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier className identifier/"final" BaseClassClause FieldDeclarationList
  "::"=s141,identifier/"__declspec"=s59,identifier/"final"=s290,"{"=s281,identifier=s140,":"=s280 | NamespaceIdentifier=s142,TemplateType=s278,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,MsDeclspecModifier=s1218,BaseClassClause=s289,FieldDeclarationList=s288,className=s1102
1195: ClassSpecifier -> identifier/"class" · className,ClassSpecifier -> identifier/"class" · FieldDeclarationList,ClassSpecifier -> identifier/"class" · BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" · identifier/"final" BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · className FieldDeclarationList,ClassSpecifier -> identifier/"class" · className BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · className identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" · className identifier/"final" BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier className,ClassSpecifier -> identifier/"class" · MsDeclspecModifier FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier identifier/"final" BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier className FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier className BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier className identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier className identifier/"final" BaseClassClause FieldDeclarationList
  "::"=s141,identifier/"__declspec"=s59,identifier/"final"=s299,"{"=s281,identifier=s140,":"=s280 | NamespaceIdentifier=s142,TemplateType=s278,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,MsDeclspecModifier=s1219,BaseClassClause=s298,FieldDeclarationList=s297,className=s1109
1196: SizeofExpression -> identifier/"sizeof" · expression,SizeofExpression -> identifier/"sizeof" · _anon-4,SizeofExpression -> identifier/"sizeof" · "..." "(" Identifier ")"
  RawString=s35,"("=s1286,identifier/"bool"=s164,"::"=s1068,"["=s193,incDec=s1192,ArithOp<"+" | "-">=s1191,Number=s56,identifier/"delete"=s1032,LogicOp<"!">=s1191,BitOp<"~">=s1191,identifier/"sizeof"=s1196,identifier/"NULL"=s56,identifier/"new"=s1031,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"..."=s306,"*"=s1084,"&"=s1084,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s1089,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s1190,FieldExpression=s1190,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s1071,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s1190,ConcatenatedString=s56,PointerExpression=s1190,SubscriptExpression=s1190,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s1113,_anon-4=s305
1197: ScopedNamespaceIdentifier -> NamespaceIdentifier · "::" NamespaceIdentifier-1,ScopedTypeIdentifier -> NamespaceIdentifier · "::" TypeIdentifier-1,ScopedIdentifier -> NamespaceIdentifier · "::" Identifier-1,ScopedIdentifier -> NamespaceIdentifier · "::" OperatorName,ScopedIdentifier -> NamespaceIdentifier · "::" DestructorName
  "::"=s1130
1198: ScopedNamespaceIdentifier -> NamespaceIdentifier · "::" NamespaceIdentifier-1,ScopedNamespaceIdentifier -> TemplateType · "::" NamespaceIdentifier-1,ScopedNamespaceIdentifier -> ScopedNamespaceIdentifier · "::" NamespaceIdentifier-1,ScopedTypeIdentifier -> NamespaceIdentifier · "::" TypeIdentifier-1,ScopedTypeIdentifier -> TemplateType · "::" TypeIdentifier-1,ScopedTypeIdentifier -> ScopedNamespaceIdentifier · "::" TypeIdentifier-1,ScopedIdentifier -> NamespaceIdentifier · "::" Identifier-1,ScopedIdentifier -> NamespaceIdentifier · "::" OperatorName,ScopedIdentifier -> NamespaceIdentifier · "::" DestructorName,ScopedIdentifier -> TemplateType · "::" Identifier-1,ScopedIdentifier -> TemplateType · "::" OperatorName,ScopedIdentifier -> TemplateType · "::" DestructorName,ScopedIdentifier -> ScopedNamespaceIdentifier · "::" Identifier-1,ScopedIdentifier -> ScopedNamespaceIdentifier · "::" OperatorName,ScopedIdentifier -> ScopedNamespaceIdentifier · "::" DestructorName
  "::"=s1131
1199: ScopedNamespaceIdentifier -> NamespaceIdentifier · "::" NamespaceIdentifier-1,ScopedNamespaceIdentifier -> TemplateType · "::" NamespaceIdentifier-1,ScopedNamespaceIdentifier -> ScopedNamespaceIdentifier · "::" NamespaceIdentifier-1,ScopedTypeIdentifier -> NamespaceIdentifier · "::" TypeIdentifier-1,ScopedTypeIdentifier -> TemplateType · "::" TypeIdentifier-1,ScopedTypeIdentifier -> ScopedNamespaceIdentifier · "::" TypeIdentifier-1,ScopedIdentifier -> NamespaceIdentifier · "::" Identifier-1,ScopedIdentifier -> NamespaceIdentifier · "::" OperatorName,ScopedIdentifier -> NamespaceIdentifier · "::" DestructorName,ScopedIdentifier -> TemplateType · "::" Identifier-1,ScopedIdentifier -> TemplateType · "::" OperatorName,ScopedIdentifier -> TemplateType · "::" DestructorName,ScopedIdentifier -> ScopedNamespaceIdentifier · "::" Identifier-1,ScopedIdentifier -> ScopedNamespaceIdentifier · "::" OperatorName,ScopedIdentifier -> ScopedNamespaceIdentifier · "::" DestructorName
  "::"=s1132
1200: ScopedNamespaceIdentifier -> NamespaceIdentifier · "::" NamespaceIdentifier-1,ScopedNamespaceIdentifier -> ScopedNamespaceIdentifier · "::" NamespaceIdentifier-1,ScopedTypeIdentifier -> NamespaceIdentifier · "::" TypeIdentifier-1,ScopedTypeIdentifier -> ScopedNamespaceIdentifier · "::" TypeIdentifier-1,ScopedIdentifier -> NamespaceIdentifier · "::" Identifier-1,ScopedIdentifier -> NamespaceIdentifier · "::" OperatorName,ScopedIdentifier -> NamespaceIdentifier · "::" DestructorName,ScopedIdentifier -> ScopedNamespaceIdentifier · "::" Identifier-1,ScopedIdentifier -> ScopedNamespaceIdentifier · "::" OperatorName,ScopedIdentifier -> ScopedNamespaceIdentifier · "::" DestructorName
  "::"=s1133
1201: ScopedNamespaceIdentifier -> NamespaceIdentifier · "::" NamespaceIdentifier-1,ScopedNamespaceIdentifier -> ScopedNamespaceIdentifier · "::" NamespaceIdentifier-1,ScopedTypeIdentifier -> NamespaceIdentifier · "::" TypeIdentifier-1,ScopedTypeIdentifier -> ScopedNamespaceIdentifier · "::" TypeIdentifier-1,ScopedIdentifier -> NamespaceIdentifier · "::" Identifier-1,ScopedIdentifier -> NamespaceIdentifier · "::" OperatorName,ScopedIdentifier -> NamespaceIdentifier · "::" DestructorName,ScopedIdentifier -> ScopedNamespaceIdentifier · "::" Identifier-1,ScopedIdentifier -> ScopedNamespaceIdentifier · "::" OperatorName,ScopedIdentifier -> ScopedNamespaceIdentifier · "::" DestructorName
  "::"=s1134
1202: ScopedNamespaceIdentifier -> NamespaceIdentifier · "::" NamespaceIdentifier-1,ScopedTypeIdentifier -> NamespaceIdentifier · "::" TypeIdentifier-1,ScopedIdentifier -> NamespaceIdentifier · "::" Identifier-1,ScopedIdentifier -> NamespaceIdentifier · "::" OperatorName,ScopedIdentifier -> NamespaceIdentifier · "::" DestructorName
  "::"=s1135
1203: ScopedNamespaceIdentifier -> NamespaceIdentifier · "::" NamespaceIdentifier-1,ScopedTypeIdentifier -> NamespaceIdentifier · "::" TypeIdentifier-1,ScopedIdentifier -> NamespaceIdentifier · "::" Identifier-1,ScopedIdentifier -> NamespaceIdentifier · "::" OperatorName,ScopedIdentifier -> NamespaceIdentifier · "::" DestructorName
  "::"=s1136
1204: ScopedNamespaceIdentifier -> ScopedNamespaceIdentifier · "::" NamespaceIdentifier-1,ScopedTypeIdentifier -> ScopedNamespaceIdentifier · "::" TypeIdentifier-1,ScopedIdentifier -> ScopedNamespaceIdentifier · "::" Identifier-1,ScopedIdentifier -> ScopedNamespaceIdentifier · "::" OperatorName,ScopedIdentifier -> ScopedNamespaceIdentifier · "::" DestructorName,AssignmentExpression -> ScopedNamespaceIdentifier · UpdateOp expression,AssignmentExpression -> ScopedNamespaceIdentifier · "=" expression
  "::"=s1130,UpdateOp=s135,"="=s135
1205: ScopedNamespaceIdentifier -> ScopedNamespaceIdentifier · "::" NamespaceIdentifier-1,ScopedTypeIdentifier -> ScopedNamespaceIdentifier · "::" TypeIdentifier-1,ScopedIdentifier -> ScopedNamespaceIdentifier · "::" Identifier-1,ScopedIdentifier -> ScopedNamespaceIdentifier · "::" OperatorName,ScopedIdentifier -> ScopedNamespaceIdentifier · "::" DestructorName,AssignmentExpression -> ScopedNamespaceIdentifier · UpdateOp expression,AssignmentExpression -> ScopedNamespaceIdentifier · "=" expression
  "::"=s1135,UpdateOp=s135,"="=s135
1206: ScopedNamespaceIdentifier -> ScopedNamespaceIdentifier · "::" NamespaceIdentifier-1,ScopedTypeIdentifier -> ScopedNamespaceIdentifier · "::" TypeIdentifier-1,ScopedIdentifier -> ScopedNamespaceIdentifier · "::" Identifier-1,ScopedIdentifier -> ScopedNamespaceIdentifier · "::" OperatorName,ScopedIdentifier -> ScopedNamespaceIdentifier · "::" DestructorName,AssignmentExpression -> ScopedNamespaceIdentifier · UpdateOp expression,AssignmentExpression -> ScopedNamespaceIdentifier · "=" expression
  "::"=s1136,UpdateOp=s135,"="=s135
1207: typeQualifier+ -> typeQualifier+ · typeQualifier+,PointerDeclarator-1 -> "*" typeQualifier+ · declarator
  "("=s180,DestructorName=s26,"::"=s1075,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s182,identifier/"__based"=s63,OperatorName=s26,identifier=s153,"*"=s1080,"&&"=s1082,"&"=s1082 | Identifier=s181,NamespaceIdentifier=s1198,TemplateType=s1198,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s1198,MsBasedModifier=s1281,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,typeQualifier+=s376,typeQualifier=s159,declarator=s377
1208: msPointerModifier+ -> msPointerModifier+ · msPointerModifier+,PointerDeclarator-1 -> "*" msPointerModifier+ · declarator,PointerDeclarator-1 -> "*" msPointerModifier+ · typeQualifier+ declarator
  "("=s180,DestructorName=s26,"::"=s1075,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s182,identifier/"__based"=s63,identifier/"__restrict"=s165,OperatorName=s26,identifier=s153,"*"=s1080,"&&"=s1082,"&"=s1082 | Identifier=s181,NamespaceIdentifier=s1198,TemplateType=s1198,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s1198,MsBasedModifier=s1281,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,typeQualifier+=s1138,msPointerModifier+=s379,typeQualifier=s159,declarator=s377
1209: PointerDeclarator-1 -> MsBasedModifier "*" · declarator,PointerDeclarator-1 -> MsBasedModifier "*" · typeQualifier+ declarator,PointerDeclarator-1 -> MsBasedModifier "*" · msPointerModifier+ declarator,PointerDeclarator-1 -> MsBasedModifier "*" · msPointerModifier+ typeQualifier+ declarator
  "("=s180,DestructorName=s26,"::"=s1075,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s182,identifier/"__based"=s63,identifier/"__restrict"=s165,OperatorName=s26,identifier=s153,"*"=s1080,"&&"=s1082,"&"=s1082 | Identifier=s181,NamespaceIdentifier=s1198,TemplateType=s1198,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s1198,MsBasedModifier=s1281,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,typeQualifier+=s1138,msPointerModifier+=s1140,typeQualifier=s159,declarator=s377
1210: FunctionDeclarator-1 -> declarator ParameterList ·,FunctionDeclarator-1 -> declarator ParameterList · ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,FunctionDeclarator-1 -> declarator ParameterList · AttributeSpecifier+,FunctionDeclarator-1 -> declarator ParameterList · AttributeSpecifier+ ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+
  identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"final"=s384,identifier/"__attribute__"=s62,identifier/"noexcept"=s386,identifier/"throw"=s387,"->"=s1272,"("=FunctionDeclarator-1(2),"["=FunctionDeclarator-1(2),")"=FunctionDeclarator-1(2),";"=FunctionDeclarator-1(2),","=FunctionDeclarator-1(2),"="=FunctionDeclarator-1(2),templateArgsEndFallback=FunctionDeclarator-1(2),templateArgsEnd=FunctionDeclarator-1(2) | AttributeSpecifier=s381,Noexcept=s384,ThrowSpecifier=s384,TrailingReturnType=s384,AttributeSpecifier+=s1226,((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+=s1142,typeQualifier=s384
1211: ScopedNamespaceIdentifier -> TemplateType · "::" NamespaceIdentifier-1,ScopedTypeIdentifier -> TemplateType · "::" TypeIdentifier-1,ScopedIdentifier -> TemplateType · "::" Identifier-1,ScopedIdentifier -> TemplateType · "::" OperatorName,ScopedIdentifier -> TemplateType · "::" DestructorName,typeSpecifier -> TemplateType ·,CompoundLiteralExpression -> TemplateType · InitializerList
  "::"=s1135,"{"=s133,templateArgsEndFallback=typeSpecifier(1),"("=typeSpecifier(1),identifier/"const"=typeSpecifier(1),identifier/"volatile"=typeSpecifier(1),identifier/"restrict"=typeSpecifier(1),identifier/"_Atomic"=typeSpecifier(1),identifier/"mutable"=typeSpecifier(1),identifier/"constexpr"=typeSpecifier(1),","=typeSpecifier(1),"["=typeSpecifier(1),templateArgsEnd=typeSpecifier(1),"..."=typeSpecifier(1),"*"=typeSpecifier(1),"&&"=typeSpecifier(1),"&"=typeSpecifier(1),DestructorName=typeSpecifier(1),identifier/"__declspec"=typeSpecifier(1),")"=typeSpecifier(1),identifier/"extern"=typeSpecifier(1),identifier/"static"=typeSpecifier(1),identifier/"register"=typeSpecifier(1),identifier/"inline"=typeSpecifier(1),identifier/"__attribute__"=typeSpecifier(1),identifier/"__based"=typeSpecifier(1),OperatorName=typeSpecifier(1),identifier=typeSpecifier(1),"="=typeSpecifier(1) | InitializerList=s134
1212: ScopedNamespaceIdentifier -> TemplateType · "::" NamespaceIdentifier-1,ScopedTypeIdentifier -> TemplateType · "::" TypeIdentifier-1,ScopedIdentifier -> TemplateType · "::" Identifier-1,ScopedIdentifier -> TemplateType · "::" OperatorName,ScopedIdentifier -> TemplateType · "::" DestructorName,typeSpecifier -> TemplateType ·,CompoundLiteralExpression -> TemplateType · InitializerList
  "::"=s1136,"{"=s133,"("=typeSpecifier(1),DestructorName=typeSpecifier(1),identifier/"const"=typeSpecifier(1),identifier/"volatile"=typeSpecifier(1),identifier/"restrict"=typeSpecifier(1),identifier/"_Atomic"=typeSpecifier(1),identifier/"mutable"=typeSpecifier(1),identifier/"constexpr"=typeSpecifier(1),identifier/"__declspec"=typeSpecifier(1),"["=typeSpecifier(1),identifier/"extern"=typeSpecifier(1),identifier/"static"=typeSpecifier(1),identifier/"register"=typeSpecifier(1),identifier/"inline"=typeSpecifier(1),identifier/"__attribute__"=typeSpecifier(1),identifier/"__based"=typeSpecifier(1),OperatorName=typeSpecifier(1),identifier=typeSpecifier(1),"*"=typeSpecifier(1),"&&"=typeSpecifier(1),"&"=typeSpecifier(1) | InitializerList=s134
1213: CastExpression -> "(" TypeDescriptor · ")" expression,CompoundLiteralExpression -> "(" TypeDescriptor · ")" InitializerList
  ")"=s1143
1214: FunctionDeclarator-1 -> declarator · ParameterList,FunctionDeclarator-1 -> declarator · ParameterList ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+ ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,ArrayDeclarator -> declarator · "[" "]",ArrayDeclarator -> declarator · "[" expression "]",ArrayDeclarator -> declarator · "[" "*" "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "]",ArrayDeclarator -> declarator · "[" typeQualifier+ expression "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "*" "]",ReferenceDeclarator -> "&" declarator ·,ReferenceDeclarator -> "&&" declarator ·
  "("=s169,"["=s168,","=ReferenceDeclarator(2),"{"=ReferenceDeclarator(2),":"=ReferenceDeclarator(2),";"=ReferenceDeclarator(2),"="=ReferenceDeclarator(2) | ParameterList=s167
1215: ParenthesizedExpression -> "(" · expression ")",ParenthesizedExpression -> "(" · CommaExpression ")",CastExpression -> "(" · TypeDescriptor ")" expression,CompoundLiteralExpression -> "(" · TypeDescriptor ")" InitializerList
  RawString=s35,"("=s190,identifier/"bool"=s57,"::"=s1067,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s1019,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"typename"=s1027,identifier/"class"=s1026,identifier/"delete"=s93,identifier/"union"=s1021,identifier/"enum"=s1023,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s1057,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s1197,TemplateType=s171,TypeIdentifier=s49,ScopedTypeIdentifier=s49,ScopedNamespaceIdentifier=s1204,TypeDescriptor=s1213,StructSpecifier=s48,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,CommaExpression=s174,ParenthesizedExpression=s50,ConcatenatedString=s56,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,typeQualifier+=s172,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,expression=s170,typeQualifier=s159,typeSpecifier=s175
1216: ScopedNamespaceIdentifier -> TemplateType · "::" NamespaceIdentifier-1,ScopedTypeIdentifier -> TemplateType · "::" TypeIdentifier-1,ScopedIdentifier -> TemplateType · "::" Identifier-1,ScopedIdentifier -> TemplateType · "::" OperatorName,ScopedIdentifier -> TemplateType · "::" DestructorName,typeSpecifier -> TemplateType ·
  "::"=s1134,"("=typeSpecifier(1),DestructorName=typeSpecifier(1),identifier/"const"=typeSpecifier(1),identifier/"volatile"=typeSpecifier(1),identifier/"restrict"=typeSpecifier(1),identifier/"_Atomic"=typeSpecifier(1),identifier/"mutable"=typeSpecifier(1),identifier/"constexpr"=typeSpecifier(1),identifier/"__declspec"=typeSpecifier(1),")"=typeSpecifier(1),","=typeSpecifier(1),"["=typeSpecifier(1),identifier/"extern"=typeSpecifier(1),identifier/"static"=typeSpecifier(1),identifier/"register"=typeSpecifier(1),identifier/"inline"=typeSpecifier(1),identifier/"__attribute__"=typeSpecifier(1),identifier/"__based"=typeSpecifier(1),OperatorName=typeSpecifier(1),identifier=typeSpecifier(1),"..."=typeSpecifier(1),"*"=typeSpecifier(1),"&&"=typeSpecifier(1),"&"=typeSpecifier(1),"="=typeSpecifier(1)
1217: StructSpecifier -> identifier/"struct" MsDeclspecModifier · className,StructSpecifier -> identifier/"struct" MsDeclspecModifier · FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · identifier/"final" BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · className FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · className BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · className identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · className identifier/"final" BaseClassClause FieldDeclarationList
  "::"=s141,identifier/"final"=s538,"{"=s281,identifier=s140,":"=s280 | NamespaceIdentifier=s142,TemplateType=s278,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,BaseClassClause=s537,FieldDeclarationList=s536,className=s1151
1218: UnionSpecifier -> identifier/"union" MsDeclspecModifier · className,UnionSpecifier -> identifier/"union" MsDeclspecModifier · FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · identifier/"final" BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · className FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · className BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · className identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · className identifier/"final" BaseClassClause FieldDeclarationList
  "::"=s141,identifier/"final"=s542,"{"=s281,identifier=s140,":"=s280 | NamespaceIdentifier=s142,TemplateType=s278,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,BaseClassClause=s541,FieldDeclarationList=s540,className=s1155
1219: ClassSpecifier -> identifier/"class" MsDeclspecModifier · className,ClassSpecifier -> identifier/"class" MsDeclspecModifier · FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier · BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier · identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier · identifier/"final" BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier · className FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier · className BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier · className identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier · className identifier/"final" BaseClassClause FieldDeclarationList
  "::"=s141,identifier/"final"=s553,"{"=s281,identifier=s140,":"=s280 | NamespaceIdentifier=s142,TemplateType=s278,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,BaseClassClause=s552,FieldDeclarationList=s551,className=s1157
1220: LambdaCaptureSpecifier -> "[" · "=" "]",LambdaCaptureSpecifier -> "[" · "=" "," commaSep1<expression> "]",LambdaCaptureSpecifier -> "[" · "&" "]",LambdaCaptureSpecifier -> "[" · "&" "," commaSep1<expression> "]",LambdaCaptureSpecifier -> "[" · commaSep1<expression> "]",LambdaCaptureSpecifier -> "[" · "]",DeleteExpression -> identifier/"delete" "[" · "]" expression
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s193,"]"=s1160,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s192,charLiteralStart=s9,"="=s194,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s186,commaSep1<expression>=s195
1221: ConditionalExpression -> expression · "?" expression ":" expression,ConditionalExpression -> expression "?" expression · ":" expression,CallExpression -> expression · ArgumentList,FieldExpression -> expression · "." FieldIdentifier,FieldExpression -> expression · "->" FieldIdentifier,FieldExpression -> expression · "." DestructorName,FieldExpression -> expression · "." TemplateMethod,FieldExpression -> expression · "->" DestructorName,FieldExpression -> expression · "->" TemplateMethod,SubscriptExpression -> expression · "[" expression "]",BinaryExpression -> expression · ArithOp<"+" | "-"> expression,BinaryExpression -> expression · ArithOp-1 expression,BinaryExpression -> expression · ArithOp<"/" | "%"> expression,BinaryExpression -> expression · LogicOp-1 expression,BinaryExpression -> expression · BitOp<"|"> expression,BinaryExpression -> expression · BitOp<"^"> expression,BinaryExpression -> expression · BitOp-1 expression,BinaryExpression -> expression · CompareOp<"==" | "!="> expression,BinaryExpression -> expression · CompareOp<"<=" | ">="> expression,BinaryExpression -> expression · "<"/"<" expression,BinaryExpression -> expression · templateArgsEnd/">" expression,BinaryExpression -> expression · BitOp<"<<" | ">>"> expression,BinaryExpression -> expression · incDec expression,UpdateExpression -> expression · incDec,ParameterPackExpansion-2 -> expression · "..."
  "("=s124,"["=s109,incDec=s1042,ArithOp<"+" | "-">=s1033,ArithOp<"/" | "%">=s1034,BitOp<"|">=s1036,BitOp<"^">=s1037,CompareOp<"==" | "!=">=s1039,CompareOp<"<=" | ">=">=s1040,"<"/"<"=s1040,templateArgsEnd/">"=s1040,BitOp<"<<" | ">>">=s1041,"?"=s1282,":"=s1161,"."=s108,"->"=s108,"..."=s123,"*"=s110,"||"=s111,"&&"=s111,"&"=s112 | ArgumentList=s105,ArithOp-1=s1034,LogicOp-1=s1035,BitOp-1=s1038
1222: ScopedNamespaceIdentifier -> "::" · NamespaceIdentifier-1,ScopedTypeIdentifier -> "::" · TypeIdentifier-1,ScopedFieldIdentifier -> "::" · FieldIdentifier-1,ScopedFieldIdentifier -> "::" · OperatorName,ScopedFieldIdentifier -> "::" · DestructorName
  DestructorName=s569,OperatorName=s569,scopedIdentifier=s1162 | NamespaceIdentifier-1=s126,TypeIdentifier-1=s127,FieldIdentifier-1=s569
1223: ScopedNamespaceIdentifier -> NamespaceIdentifier · "::" NamespaceIdentifier-1,ScopedNamespaceIdentifier -> TemplateType · "::" NamespaceIdentifier-1,ScopedNamespaceIdentifier -> ScopedNamespaceIdentifier · "::" NamespaceIdentifier-1,ScopedTypeIdentifier -> NamespaceIdentifier · "::" TypeIdentifier-1,ScopedTypeIdentifier -> TemplateType · "::" TypeIdentifier-1,ScopedTypeIdentifier -> ScopedNamespaceIdentifier · "::" TypeIdentifier-1,ScopedFieldIdentifier -> NamespaceIdentifier · "::" FieldIdentifier-1,ScopedFieldIdentifier -> NamespaceIdentifier · "::" OperatorName,ScopedFieldIdentifier -> NamespaceIdentifier · "::" DestructorName,ScopedFieldIdentifier -> TemplateType · "::" FieldIdentifier-1,ScopedFieldIdentifier -> TemplateType · "::" OperatorName,ScopedFieldIdentifier -> TemplateType · "::" DestructorName,ScopedFieldIdentifier -> ScopedNamespaceIdentifier · "::" FieldIdentifier-1,ScopedFieldIdentifier -> ScopedNamespaceIdentifier · "::" OperatorName,ScopedFieldIdentifier -> ScopedNamespaceIdentifier · "::" DestructorName
  "::"=s1163
1224: LambdaCaptureSpecifier -> "[" · "=" "]",LambdaCaptureSpecifier -> "[" · "=" "," commaSep1<expression> "]",LambdaCaptureSpecifier -> "[" · "&" "]",LambdaCaptureSpecifier -> "[" · "&" "," commaSep1<expression> "]",LambdaCaptureSpecifier -> "[" · commaSep1<expression> "]",LambdaCaptureSpecifier -> "[" · "]",DeleteExpression -> "::" scopedIdentifier/"delete" "[" · "]" expression
  RawString=s35,"("=s190,identifier/"bool"=s164,"::"=s155,"["=s193,"]"=s1164,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"delete"=s93,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s191,"&"=s192,charLiteralStart=s9,"="=s194,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s158,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s50,ConcatenatedString=s56,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s186,commaSep1<expression>=s195
1225: PointerDeclarator-1 -> "*" typeQualifier+ declarator ·,PointerDeclarator-1 -> "*" msPointerModifier+ declarator ·,PointerDeclarator-1 -> MsBasedModifier "*" declarator ·,FunctionDeclarator-1 -> declarator · ParameterList,FunctionDeclarator-1 -> declarator · ParameterList ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+ ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,ArrayDeclarator -> declarator · "[" "]",ArrayDeclarator -> declarator · "[" expression "]",ArrayDeclarator -> declarator · "[" "*" "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "]",ArrayDeclarator -> declarator · "[" typeQualifier+ expression "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "*" "]"
  "("=s169,"["=s168,","=PointerDeclarator-1(3),"{"=PointerDeclarator-1(3),":"=PointerDeclarator-1(3),";"=PointerDeclarator-1(3),"="=PointerDeclarator-1(3) | ParameterList=s167
1226: AttributeSpecifier+ -> AttributeSpecifier+ · AttributeSpecifier+,FunctionDeclarator-1 -> declarator ParameterList AttributeSpecifier+ ·,FunctionDeclarator-1 -> declarator ParameterList AttributeSpecifier+ · ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+
  identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"final"=s384,identifier/"__attribute__"=s62,identifier/"noexcept"=s386,identifier/"throw"=s387,"->"=s1272,"("=FunctionDeclarator-1(3),"["=FunctionDeclarator-1(3),")"=FunctionDeclarator-1(3),";"=FunctionDeclarator-1(3),","=FunctionDeclarator-1(3),"="=FunctionDeclarator-1(3),templateArgsEndFallback=FunctionDeclarator-1(3),templateArgsEnd=FunctionDeclarator-1(3) | AttributeSpecifier=s381,Noexcept=s384,ThrowSpecifier=s384,TrailingReturnType=s384,AttributeSpecifier+=s612,((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+=s1167,typeQualifier=s384
1227: CastExpression -> "(" TypeDescriptor · ")" expression,_anon-4 -> "(" TypeDescriptor · ")",CompoundLiteralExpression -> "(" TypeDescriptor · ")" InitializerList
  ")"=s1173
1228: PointerDeclarator-1 -> "*" msPointerModifier+ typeQualifier+ declarator ·,PointerDeclarator-1 -> MsBasedModifier "*" typeQualifier+ declarator ·,PointerDeclarator-1 -> MsBasedModifier "*" msPointerModifier+ declarator ·,FunctionDeclarator-1 -> declarator · ParameterList,FunctionDeclarator-1 -> declarator · ParameterList ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+ ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,ArrayDeclarator -> declarator · "[" "]",ArrayDeclarator -> declarator · "[" expression "]",ArrayDeclarator -> declarator · "[" "*" "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "]",ArrayDeclarator -> declarator · "[" typeQualifier+ expression "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "*" "]"
  "("=s169,"["=s168,","=PointerDeclarator-1(4),"{"=PointerDeclarator-1(4),":"=PointerDeclarator-1(4),";"=PointerDeclarator-1(4),"="=PointerDeclarator-1(4) | ParameterList=s167
1229: ReferenceDeclarator-2 -> "&" · fieldDeclarator,ReferenceDeclarator-2 -> "&&" · fieldDeclarator
  "("=s733,"::"=s323,identifier/"__based"=s63,OperatorName=s735,identifier=s322,"*"=s1293,"&&"=s1229,"&"=s1229 | FieldIdentifier=s736,TemplateMethod=s735,ScopedFieldIdentifier=s326,NamespaceIdentifier=s324,TemplateType=s324,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s324,PointerDeclarator=s735,MsBasedModifier=s1294,FunctionDeclarator=s735,ArrayDeclarator-1=s735,ParenthesizedDeclarator-1=s735,ReferenceDeclarator-2=s735,fieldDeclarator=s1181
1230: PointerDeclarator-1 -> MsBasedModifier "*" msPointerModifier+ typeQualifier+ declarator ·,FunctionDeclarator-1 -> declarator · ParameterList,FunctionDeclarator-1 -> declarator · ParameterList ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+ ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,ArrayDeclarator -> declarator · "[" "]",ArrayDeclarator -> declarator · "[" expression "]",ArrayDeclarator -> declarator · "[" "*" "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "]",ArrayDeclarator -> declarator · "[" typeQualifier+ expression "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "*" "]"
  "("=s169,"["=s168,","=PointerDeclarator-1(5),"{"=PointerDeclarator-1(5),":"=PointerDeclarator-1(5),";"=PointerDeclarator-1(5),"="=PointerDeclarator-1(5) | ParameterList=s167
1231: typeQualifier+ -> typeQualifier+ · typeQualifier+,PointerDeclarator -> "*" typeQualifier+ · fieldDeclarator
  "("=s733,"::"=s323,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"__based"=s63,OperatorName=s735,identifier=s322,"*"=s1293,"&&"=s1229,"&"=s1229 | FieldIdentifier=s736,TemplateMethod=s735,ScopedFieldIdentifier=s326,NamespaceIdentifier=s324,TemplateType=s324,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s324,PointerDeclarator=s735,MsBasedModifier=s1294,FunctionDeclarator=s735,ArrayDeclarator-1=s735,ParenthesizedDeclarator-1=s735,ReferenceDeclarator-2=s735,typeQualifier+=s376,typeQualifier=s159,fieldDeclarator=s1183
1232: msPointerModifier+ -> msPointerModifier+ · msPointerModifier+,PointerDeclarator -> "*" msPointerModifier+ · fieldDeclarator,PointerDeclarator -> "*" msPointerModifier+ · typeQualifier+ fieldDeclarator
  "("=s733,"::"=s323,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"__based"=s63,identifier/"__restrict"=s165,OperatorName=s735,identifier=s322,"*"=s1293,"&&"=s1229,"&"=s1229 | FieldIdentifier=s736,TemplateMethod=s735,ScopedFieldIdentifier=s326,NamespaceIdentifier=s324,TemplateType=s324,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s324,PointerDeclarator=s735,MsBasedModifier=s1294,FunctionDeclarator=s735,ArrayDeclarator-1=s735,ParenthesizedDeclarator-1=s735,ReferenceDeclarator-2=s735,typeQualifier+=s1235,msPointerModifier+=s379,typeQualifier=s159,fieldDeclarator=s1183
1233: PointerDeclarator -> "*" fieldDeclarator ·,FunctionDeclarator -> fieldDeclarator · ParameterList,FunctionDeclarator -> fieldDeclarator · ParameterList (typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType)+,ArrayDeclarator-1 -> fieldDeclarator · "[" "]",ArrayDeclarator-1 -> fieldDeclarator · "[" expression "]",ArrayDeclarator-1 -> fieldDeclarator · "[" "*" "]",ArrayDeclarator-1 -> fieldDeclarator · "[" typeQualifier+ "]",ArrayDeclarator-1 -> fieldDeclarator · "[" typeQualifier+ expression "]",ArrayDeclarator-1 -> fieldDeclarator · "[" typeQualifier+ "*" "]"
  "("=s169,"["=s888,")"=PointerDeclarator(2) | ParameterList=s1180
1234: PointerDeclarator -> MsBasedModifier "*" · fieldDeclarator,PointerDeclarator -> MsBasedModifier "*" · typeQualifier+ fieldDeclarator,PointerDeclarator -> MsBasedModifier "*" · msPointerModifier+ fieldDeclarator,PointerDeclarator -> MsBasedModifier "*" · msPointerModifier+ typeQualifier+ fieldDeclarator
  "("=s733,"::"=s323,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"__based"=s63,identifier/"__restrict"=s165,OperatorName=s735,identifier=s322,"*"=s1293,"&&"=s1229,"&"=s1229 | FieldIdentifier=s736,TemplateMethod=s735,ScopedFieldIdentifier=s326,NamespaceIdentifier=s324,TemplateType=s324,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s324,PointerDeclarator=s735,MsBasedModifier=s1294,FunctionDeclarator=s735,ArrayDeclarator-1=s735,ParenthesizedDeclarator-1=s735,ReferenceDeclarator-2=s735,typeQualifier+=s1235,msPointerModifier+=s1236,typeQualifier=s159,fieldDeclarator=s1183
1235: typeQualifier+ -> typeQualifier+ · typeQualifier+,PointerDeclarator -> "*" msPointerModifier+ typeQualifier+ · fieldDeclarator,PointerDeclarator -> MsBasedModifier "*" typeQualifier+ · fieldDeclarator
  "("=s733,"::"=s323,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"__based"=s63,OperatorName=s735,identifier=s322,"*"=s1293,"&&"=s1229,"&"=s1229 | FieldIdentifier=s736,TemplateMethod=s735,ScopedFieldIdentifier=s326,NamespaceIdentifier=s324,TemplateType=s324,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s324,PointerDeclarator=s735,MsBasedModifier=s1294,FunctionDeclarator=s735,ArrayDeclarator-1=s735,ParenthesizedDeclarator-1=s735,ReferenceDeclarator-2=s735,typeQualifier+=s376,typeQualifier=s159,fieldDeclarator=s1185
1236: msPointerModifier+ -> msPointerModifier+ · msPointerModifier+,PointerDeclarator -> MsBasedModifier "*" msPointerModifier+ · fieldDeclarator,PointerDeclarator -> MsBasedModifier "*" msPointerModifier+ · typeQualifier+ fieldDeclarator
  "("=s733,"::"=s323,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"__based"=s63,identifier/"__restrict"=s165,OperatorName=s735,identifier=s322,"*"=s1293,"&&"=s1229,"&"=s1229 | FieldIdentifier=s736,TemplateMethod=s735,ScopedFieldIdentifier=s326,NamespaceIdentifier=s324,TemplateType=s324,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s324,PointerDeclarator=s735,MsBasedModifier=s1294,FunctionDeclarator=s735,ArrayDeclarator-1=s735,ParenthesizedDeclarator-1=s735,ReferenceDeclarator-2=s735,typeQualifier+=s1237,msPointerModifier+=s379,typeQualifier=s159,fieldDeclarator=s1185
1237: typeQualifier+ -> typeQualifier+ · typeQualifier+,PointerDeclarator -> MsBasedModifier "*" msPointerModifier+ typeQualifier+ · fieldDeclarator
  "("=s733,"::"=s323,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"__based"=s63,OperatorName=s735,identifier=s322,"*"=s1293,"&&"=s1229,"&"=s1229 | FieldIdentifier=s736,TemplateMethod=s735,ScopedFieldIdentifier=s326,NamespaceIdentifier=s324,TemplateType=s324,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s324,PointerDeclarator=s735,MsBasedModifier=s1294,FunctionDeclarator=s735,ArrayDeclarator-1=s735,ParenthesizedDeclarator-1=s735,ReferenceDeclarator-2=s735,typeQualifier+=s376,typeQualifier=s159,fieldDeclarator=s1186
1238: StructSpecifier -> identifier/"struct" · className,StructSpecifier -> identifier/"struct" · FieldDeclarationList,StructSpecifier -> identifier/"struct" · BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" · identifier/"final" BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · className FieldDeclarationList,StructSpecifier -> identifier/"struct" · className BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · className identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" · className identifier/"final" BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier className,StructSpecifier -> identifier/"struct" · MsDeclspecModifier FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier identifier/"final" BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier className FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier className BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier className identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier className identifier/"final" BaseClassClause FieldDeclarationList
  "::"=s141,identifier/"__declspec"=s59,identifier/"final"=s285,"{"=s281,identifier=s140,":"=s280 | NamespaceIdentifier=s142,TemplateType=s402,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,MsDeclspecModifier=s1258,BaseClassClause=s284,FieldDeclarationList=s283,className=s1094
1239: StructSpecifier -> identifier/"struct" · className,StructSpecifier -> identifier/"struct" · FieldDeclarationList,StructSpecifier -> identifier/"struct" · BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" · identifier/"final" BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · className FieldDeclarationList,StructSpecifier -> identifier/"struct" · className BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · className identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" · className identifier/"final" BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier className,StructSpecifier -> identifier/"struct" · MsDeclspecModifier FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier identifier/"final" BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier className FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier className BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier className identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier className identifier/"final" BaseClassClause FieldDeclarationList
  "::"=s141,identifier/"__declspec"=s59,identifier/"final"=s285,"{"=s281,identifier=s140,":"=s280 | NamespaceIdentifier=s142,TemplateType=s402,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,MsDeclspecModifier=s1259,BaseClassClause=s284,FieldDeclarationList=s283,className=s1093
1240: StructSpecifier -> identifier/"struct" · className,StructSpecifier -> identifier/"struct" · FieldDeclarationList,StructSpecifier -> identifier/"struct" · BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" · identifier/"final" BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · className FieldDeclarationList,StructSpecifier -> identifier/"struct" · className BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · className identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" · className identifier/"final" BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier className,StructSpecifier -> identifier/"struct" · MsDeclspecModifier FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier identifier/"final" BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier className FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier className BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier className identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier className identifier/"final" BaseClassClause FieldDeclarationList
  "::"=s141,identifier/"__declspec"=s59,identifier/"final"=s285,"{"=s281,identifier=s140,":"=s280 | NamespaceIdentifier=s142,TemplateType=s402,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,MsDeclspecModifier=s1260,BaseClassClause=s284,FieldDeclarationList=s283,className=s1096
1241: StructSpecifier -> identifier/"struct" · className,StructSpecifier -> identifier/"struct" · FieldDeclarationList,StructSpecifier -> identifier/"struct" · BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" · identifier/"final" BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · className FieldDeclarationList,StructSpecifier -> identifier/"struct" · className BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · className identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" · className identifier/"final" BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier className,StructSpecifier -> identifier/"struct" · MsDeclspecModifier FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier identifier/"final" BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier className FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier className BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier className identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" · MsDeclspecModifier className identifier/"final" BaseClassClause FieldDeclarationList
  "::"=s141,identifier/"__declspec"=s59,identifier/"final"=s285,"{"=s281,identifier=s140,":"=s280 | NamespaceIdentifier=s142,TemplateType=s402,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,MsDeclspecModifier=s1261,BaseClassClause=s284,FieldDeclarationList=s283,className=s1095
1242: UnionSpecifier -> identifier/"union" · className,UnionSpecifier -> identifier/"union" · FieldDeclarationList,UnionSpecifier -> identifier/"union" · BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" · identifier/"final" BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · className FieldDeclarationList,UnionSpecifier -> identifier/"union" · className BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · className identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" · className identifier/"final" BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier className,UnionSpecifier -> identifier/"union" · MsDeclspecModifier FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier identifier/"final" BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier className FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier className BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier className identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier className identifier/"final" BaseClassClause FieldDeclarationList
  "::"=s141,identifier/"__declspec"=s59,identifier/"final"=s290,"{"=s281,identifier=s140,":"=s280 | NamespaceIdentifier=s142,TemplateType=s402,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,MsDeclspecModifier=s1262,BaseClassClause=s289,FieldDeclarationList=s288,className=s1100
1243: UnionSpecifier -> identifier/"union" · className,UnionSpecifier -> identifier/"union" · FieldDeclarationList,UnionSpecifier -> identifier/"union" · BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" · identifier/"final" BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · className FieldDeclarationList,UnionSpecifier -> identifier/"union" · className BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · className identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" · className identifier/"final" BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier className,UnionSpecifier -> identifier/"union" · MsDeclspecModifier FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier identifier/"final" BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier className FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier className BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier className identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier className identifier/"final" BaseClassClause FieldDeclarationList
  "::"=s141,identifier/"__declspec"=s59,identifier/"final"=s290,"{"=s281,identifier=s140,":"=s280 | NamespaceIdentifier=s142,TemplateType=s402,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,MsDeclspecModifier=s1263,BaseClassClause=s289,FieldDeclarationList=s288,className=s1099
1244: UnionSpecifier -> identifier/"union" · className,UnionSpecifier -> identifier/"union" · FieldDeclarationList,UnionSpecifier -> identifier/"union" · BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" · identifier/"final" BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · className FieldDeclarationList,UnionSpecifier -> identifier/"union" · className BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · className identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" · className identifier/"final" BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier className,UnionSpecifier -> identifier/"union" · MsDeclspecModifier FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier identifier/"final" BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier className FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier className BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier className identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier className identifier/"final" BaseClassClause FieldDeclarationList
  "::"=s141,identifier/"__declspec"=s59,identifier/"final"=s290,"{"=s281,identifier=s140,":"=s280 | NamespaceIdentifier=s142,TemplateType=s402,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,MsDeclspecModifier=s1264,BaseClassClause=s289,FieldDeclarationList=s288,className=s1102
1245: UnionSpecifier -> identifier/"union" · className,UnionSpecifier -> identifier/"union" · FieldDeclarationList,UnionSpecifier -> identifier/"union" · BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" · identifier/"final" BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · className FieldDeclarationList,UnionSpecifier -> identifier/"union" · className BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · className identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" · className identifier/"final" BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier className,UnionSpecifier -> identifier/"union" · MsDeclspecModifier FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier identifier/"final" BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier className FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier className BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier className identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" · MsDeclspecModifier className identifier/"final" BaseClassClause FieldDeclarationList
  "::"=s141,identifier/"__declspec"=s59,identifier/"final"=s290,"{"=s281,identifier=s140,":"=s280 | NamespaceIdentifier=s142,TemplateType=s402,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,MsDeclspecModifier=s1265,BaseClassClause=s289,FieldDeclarationList=s288,className=s1101
1246: EnumSpecifier -> identifier/"enum" · className,EnumSpecifier -> identifier/"enum" · className EnumeratorList,EnumSpecifier -> identifier/"enum" · className enumBaseClause,EnumSpecifier -> identifier/"enum" · className enumBaseClause EnumeratorList,EnumSpecifier -> identifier/"enum" · EnumeratorList,EnumSpecifier -> identifier/"enum" · identifier/"class" className,EnumSpecifier -> identifier/"enum" · identifier/"class" className EnumeratorList,EnumSpecifier -> identifier/"enum" · identifier/"class" className enumBaseClause,EnumSpecifier -> identifier/"enum" · identifier/"class" className enumBaseClause EnumeratorList,EnumSpecifier -> identifier/"enum" · identifier/"class" EnumeratorList,EnumSpecifier -> identifier/"enum" · identifier/"struct" className,EnumSpecifier -> identifier/"enum" · identifier/"struct" className EnumeratorList,EnumSpecifier -> identifier/"enum" · identifier/"struct" className enumBaseClause,EnumSpecifier -> identifier/"enum" · identifier/"struct" className enumBaseClause EnumeratorList,EnumSpecifier -> identifier/"enum" · identifier/"struct" EnumeratorList
  "::"=s141,identifier/"struct"=s1266,"{"=s292,identifier/"class"=s1266,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s402,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,EnumeratorList=s294,className=s1105
1247: ClassSpecifier -> identifier/"class" · className,ClassSpecifier -> identifier/"class" · FieldDeclarationList,ClassSpecifier -> identifier/"class" · BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" · identifier/"final" BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · className FieldDeclarationList,ClassSpecifier -> identifier/"class" · className BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · className identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" · className identifier/"final" BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier className,ClassSpecifier -> identifier/"class" · MsDeclspecModifier FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier identifier/"final" BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier className FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier className BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier className identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier className identifier/"final" BaseClassClause FieldDeclarationList
  "::"=s141,identifier/"__declspec"=s59,identifier/"final"=s299,"{"=s281,identifier=s140,":"=s280 | NamespaceIdentifier=s142,TemplateType=s402,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,MsDeclspecModifier=s1267,BaseClassClause=s298,FieldDeclarationList=s297,className=s1110
1248: ClassSpecifier -> identifier/"class" · className,ClassSpecifier -> identifier/"class" · FieldDeclarationList,ClassSpecifier -> identifier/"class" · BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" · identifier/"final" BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · className FieldDeclarationList,ClassSpecifier -> identifier/"class" · className BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · className identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" · className identifier/"final" BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier className,ClassSpecifier -> identifier/"class" · MsDeclspecModifier FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier identifier/"final" BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier className FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier className BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier className identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier className identifier/"final" BaseClassClause FieldDeclarationList
  "::"=s141,identifier/"__declspec"=s59,identifier/"final"=s299,"{"=s281,identifier=s140,":"=s280 | NamespaceIdentifier=s142,TemplateType=s402,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,MsDeclspecModifier=s1268,BaseClassClause=s298,FieldDeclarationList=s297,className=s1109
1249: ClassSpecifier -> identifier/"class" · className,ClassSpecifier -> identifier/"class" · FieldDeclarationList,ClassSpecifier -> identifier/"class" · BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" · identifier/"final" BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · className FieldDeclarationList,ClassSpecifier -> identifier/"class" · className BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · className identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" · className identifier/"final" BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier className,ClassSpecifier -> identifier/"class" · MsDeclspecModifier FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier identifier/"final" BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier className FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier className BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier className identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" · MsDeclspecModifier className identifier/"final" BaseClassClause FieldDeclarationList
  "::"=s141,identifier/"__declspec"=s59,identifier/"final"=s299,"{"=s281,identifier=s140,":"=s280 | NamespaceIdentifier=s142,TemplateType=s402,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,MsDeclspecModifier=s1269,BaseClassClause=s298,FieldDeclarationList=s297,className=s1111
1250: DependentType -> identifier/"typename" · typeSpecifier
  identifier/"bool"=s48,"::"=s141,identifier/"struct"=s1238,identifier/"typename"=s1250,identifier/"class"=s1247,identifier/"union"=s1242,identifier/"enum"=s1023,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeSpecifier=s301
1251: DependentType -> identifier/"typename" · typeSpecifier
  identifier/"bool"=s48,"::"=s141,identifier/"struct"=s1239,identifier/"typename"=s1251,identifier/"class"=s1248,identifier/"union"=s1243,identifier/"enum"=s1246,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeSpecifier=s301
1252: DependentType -> identifier/"typename" · typeSpecifier
  identifier/"bool"=s48,"::"=s141,identifier/"struct"=s1241,identifier/"typename"=s1252,identifier/"class"=s1249,identifier/"union"=s1245,identifier/"enum"=s1246,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeSpecifier=s301
1253: typeQualifier+ -> typeQualifier+ · typeQualifier+,PointerDeclarator-1 -> "*" typeQualifier+ · declarator
  "("=s180,DestructorName=s26,"::"=s1075,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s182,identifier/"__based"=s63,OperatorName=s26,identifier=s1058,"*"=s1256,"&&"=s1257,"&"=s1257 | Identifier=s181,NamespaceIdentifier=s1198,TemplateType=s1198,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s1198,MsBasedModifier=s1299,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,typeQualifier+=s376,typeQualifier=s159,declarator=s1225
1254: msPointerModifier+ -> msPointerModifier+ · msPointerModifier+,PointerDeclarator-1 -> "*" msPointerModifier+ · declarator,PointerDeclarator-1 -> "*" msPointerModifier+ · typeQualifier+ declarator
  "("=s180,DestructorName=s26,"::"=s1075,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s182,identifier/"__based"=s63,identifier/"__restrict"=s165,OperatorName=s26,identifier=s1058,"*"=s1256,"&&"=s1257,"&"=s1257 | Identifier=s181,NamespaceIdentifier=s1198,TemplateType=s1198,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s1198,MsBasedModifier=s1299,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,typeQualifier+=s1270,msPointerModifier+=s379,typeQualifier=s159,declarator=s1225
1255: PointerDeclarator-1 -> MsBasedModifier "*" · declarator,PointerDeclarator-1 -> MsBasedModifier "*" · typeQualifier+ declarator,PointerDeclarator-1 -> MsBasedModifier "*" · msPointerModifier+ declarator,PointerDeclarator-1 -> MsBasedModifier "*" · msPointerModifier+ typeQualifier+ declarator
  "("=s180,DestructorName=s26,"::"=s1075,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s182,identifier/"__based"=s63,identifier/"__restrict"=s165,OperatorName=s26,identifier=s1058,"*"=s1256,"&&"=s1257,"&"=s1257 | Identifier=s181,NamespaceIdentifier=s1198,TemplateType=s1198,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s1198,MsBasedModifier=s1299,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,typeQualifier+=s1270,msPointerModifier+=s1271,typeQualifier=s159,declarator=s1225
1256: PointerDeclarator-1 -> "*" · declarator,PointerDeclarator-1 -> "*" · typeQualifier+ declarator,PointerDeclarator-1 -> "*" · msPointerModifier+ declarator,PointerDeclarator-1 -> "*" · msPointerModifier+ typeQualifier+ declarator
  "("=s180,DestructorName=s26,"::"=s1075,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s182,identifier/"__based"=s63,identifier/"__restrict"=s165,OperatorName=s26,identifier=s1058,"*"=s1256,"&&"=s1257,"&"=s1257 | Identifier=s181,NamespaceIdentifier=s1198,TemplateType=s1198,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s1198,MsBasedModifier=s1299,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,typeQualifier+=s1253,msPointerModifier+=s1254,typeQualifier=s159,declarator=s1283
1257: ReferenceDeclarator -> "&" · declarator,ReferenceDeclarator -> "&&" · declarator
  "("=s180,DestructorName=s26,"::"=s1075,"["=s182,identifier/"__based"=s63,OperatorName=s26,identifier=s1058,"*"=s1256,"&&"=s1257,"&"=s1257 | Identifier=s181,NamespaceIdentifier=s1198,TemplateType=s1198,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s1198,MsBasedModifier=s1299,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,declarator=s1214
1258: StructSpecifier -> identifier/"struct" MsDeclspecModifier · className,StructSpecifier -> identifier/"struct" MsDeclspecModifier · FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · identifier/"final" BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · className FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · className BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · className identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · className identifier/"final" BaseClassClause FieldDeclarationList
  "::"=s141,identifier/"final"=s538,"{"=s281,identifier=s140,":"=s280 | NamespaceIdentifier=s142,TemplateType=s402,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,BaseClassClause=s537,FieldDeclarationList=s536,className=s1149
1259: StructSpecifier -> identifier/"struct" MsDeclspecModifier · className,StructSpecifier -> identifier/"struct" MsDeclspecModifier · FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · identifier/"final" BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · className FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · className BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · className identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · className identifier/"final" BaseClassClause FieldDeclarationList
  "::"=s141,identifier/"final"=s538,"{"=s281,identifier=s140,":"=s280 | NamespaceIdentifier=s142,TemplateType=s402,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,BaseClassClause=s537,FieldDeclarationList=s536,className=s1148
1260: StructSpecifier -> identifier/"struct" MsDeclspecModifier · className,StructSpecifier -> identifier/"struct" MsDeclspecModifier · FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · identifier/"final" BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · className FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · className BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · className identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · className identifier/"final" BaseClassClause FieldDeclarationList
  "::"=s141,identifier/"final"=s538,"{"=s281,identifier=s140,":"=s280 | NamespaceIdentifier=s142,TemplateType=s402,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,BaseClassClause=s537,FieldDeclarationList=s536,className=s1151
1261: StructSpecifier -> identifier/"struct" MsDeclspecModifier · className,StructSpecifier -> identifier/"struct" MsDeclspecModifier · FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · identifier/"final" BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · className FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · className BaseClassClause FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · className identifier/"final" FieldDeclarationList,StructSpecifier -> identifier/"struct" MsDeclspecModifier · className identifier/"final" BaseClassClause FieldDeclarationList
  "::"=s141,identifier/"final"=s538,"{"=s281,identifier=s140,":"=s280 | NamespaceIdentifier=s142,TemplateType=s402,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,BaseClassClause=s537,FieldDeclarationList=s536,className=s1150
1262: UnionSpecifier -> identifier/"union" MsDeclspecModifier · className,UnionSpecifier -> identifier/"union" MsDeclspecModifier · FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · identifier/"final" BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · className FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · className BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · className identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · className identifier/"final" BaseClassClause FieldDeclarationList
  "::"=s141,identifier/"final"=s542,"{"=s281,identifier=s140,":"=s280 | NamespaceIdentifier=s142,TemplateType=s402,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,BaseClassClause=s541,FieldDeclarationList=s540,className=s1153
1263: UnionSpecifier -> identifier/"union" MsDeclspecModifier · className,UnionSpecifier -> identifier/"union" MsDeclspecModifier · FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · identifier/"final" BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · className FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · className BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · className identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · className identifier/"final" BaseClassClause FieldDeclarationList
  "::"=s141,identifier/"final"=s542,"{"=s281,identifier=s140,":"=s280 | NamespaceIdentifier=s142,TemplateType=s402,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,BaseClassClause=s541,FieldDeclarationList=s540,className=s1152
1264: UnionSpecifier -> identifier/"union" MsDeclspecModifier · className,UnionSpecifier -> identifier/"union" MsDeclspecModifier · FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · identifier/"final" BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · className FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · className BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · className identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · className identifier/"final" BaseClassClause FieldDeclarationList
  "::"=s141,identifier/"final"=s542,"{"=s281,identifier=s140,":"=s280 | NamespaceIdentifier=s142,TemplateType=s402,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,BaseClassClause=s541,FieldDeclarationList=s540,className=s1155
1265: UnionSpecifier -> identifier/"union" MsDeclspecModifier · className,UnionSpecifier -> identifier/"union" MsDeclspecModifier · FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · identifier/"final" BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · className FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · className BaseClassClause FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · className identifier/"final" FieldDeclarationList,UnionSpecifier -> identifier/"union" MsDeclspecModifier · className identifier/"final" BaseClassClause FieldDeclarationList
  "::"=s141,identifier/"final"=s542,"{"=s281,identifier=s140,":"=s280 | NamespaceIdentifier=s142,TemplateType=s402,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,BaseClassClause=s541,FieldDeclarationList=s540,className=s1154
1266: EnumSpecifier -> identifier/"enum" identifier/"class" · className,EnumSpecifier -> identifier/"enum" identifier/"class" · className EnumeratorList,EnumSpecifier -> identifier/"enum" identifier/"class" · className enumBaseClause,EnumSpecifier -> identifier/"enum" identifier/"class" · className enumBaseClause EnumeratorList,EnumSpecifier -> identifier/"enum" identifier/"class" · EnumeratorList,EnumSpecifier -> identifier/"enum" identifier/"struct" · className,EnumSpecifier -> identifier/"enum" identifier/"struct" · className EnumeratorList,EnumSpecifier -> identifier/"enum" identifier/"struct" · className enumBaseClause,EnumSpecifier -> identifier/"enum" identifier/"struct" · className enumBaseClause EnumeratorList,EnumSpecifier -> identifier/"enum" identifier/"struct" · EnumeratorList
  "::"=s141,"{"=s292,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s402,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,EnumeratorList=s548,className=s1156
1267: ClassSpecifier -> identifier/"class" MsDeclspecModifier · className,ClassSpecifier -> identifier/"class" MsDeclspecModifier · FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier · BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier · identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier · identifier/"final" BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier · className FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier · className BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier · className identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier · className identifier/"final" BaseClassClause FieldDeclarationList
  "::"=s141,identifier/"final"=s553,"{"=s281,identifier=s140,":"=s280 | NamespaceIdentifier=s142,TemplateType=s402,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,BaseClassClause=s552,FieldDeclarationList=s551,className=s1158
1268: ClassSpecifier -> identifier/"class" MsDeclspecModifier · className,ClassSpecifier -> identifier/"class" MsDeclspecModifier · FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier · BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier · identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier · identifier/"final" BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier · className FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier · className BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier · className identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier · className identifier/"final" BaseClassClause FieldDeclarationList
  "::"=s141,identifier/"final"=s553,"{"=s281,identifier=s140,":"=s280 | NamespaceIdentifier=s142,TemplateType=s402,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,BaseClassClause=s552,FieldDeclarationList=s551,className=s1157
1269: ClassSpecifier -> identifier/"class" MsDeclspecModifier · className,ClassSpecifier -> identifier/"class" MsDeclspecModifier · FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier · BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier · identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier · identifier/"final" BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier · className FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier · className BaseClassClause FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier · className identifier/"final" FieldDeclarationList,ClassSpecifier -> identifier/"class" MsDeclspecModifier · className identifier/"final" BaseClassClause FieldDeclarationList
  "::"=s141,identifier/"final"=s553,"{"=s281,identifier=s140,":"=s280 | NamespaceIdentifier=s142,TemplateType=s402,TypeIdentifier=s279,ScopedTypeIdentifier=s279,ScopedNamespaceIdentifier=s142,BaseClassClause=s552,FieldDeclarationList=s551,className=s1159
1270: typeQualifier+ -> typeQualifier+ · typeQualifier+,PointerDeclarator-1 -> "*" msPointerModifier+ typeQualifier+ · declarator,PointerDeclarator-1 -> MsBasedModifier "*" typeQualifier+ · declarator
  "("=s180,DestructorName=s26,"::"=s1075,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s182,identifier/"__based"=s63,OperatorName=s26,identifier=s1058,"*"=s1256,"&&"=s1257,"&"=s1257 | Identifier=s181,NamespaceIdentifier=s1198,TemplateType=s1198,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s1198,MsBasedModifier=s1299,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,typeQualifier+=s376,typeQualifier=s159,declarator=s1228
1271: msPointerModifier+ -> msPointerModifier+ · msPointerModifier+,PointerDeclarator-1 -> MsBasedModifier "*" msPointerModifier+ · declarator,PointerDeclarator-1 -> MsBasedModifier "*" msPointerModifier+ · typeQualifier+ declarator
  "("=s180,DestructorName=s26,"::"=s1075,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s182,identifier/"__based"=s63,identifier/"__restrict"=s165,OperatorName=s26,identifier=s1058,"*"=s1256,"&&"=s1257,"&"=s1257 | Identifier=s181,NamespaceIdentifier=s1198,TemplateType=s1198,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s1198,MsBasedModifier=s1299,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,typeQualifier+=s1276,msPointerModifier+=s379,typeQualifier=s159,declarator=s1228
1272: TrailingReturnType -> "->" · typeSpecifier,TrailingReturnType -> "->" · typeSpecifier abstractDeclarator,TrailingReturnType -> "->" · typeQualifier typeSpecifier,TrailingReturnType -> "->" · typeQualifier typeSpecifier abstractDeclarator
  identifier/"bool"=s48,"::"=s141,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s1238,identifier/"typename"=s1250,identifier/"class"=s1247,identifier/"union"=s1242,identifier/"enum"=s1023,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeQualifier=s1278,typeSpecifier=s614
1273: TrailingReturnType -> "->" · typeSpecifier,TrailingReturnType -> "->" · typeSpecifier abstractDeclarator,TrailingReturnType -> "->" · typeQualifier typeSpecifier,TrailingReturnType -> "->" · typeQualifier typeSpecifier abstractDeclarator
  identifier/"bool"=s48,"::"=s141,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s1019,identifier/"typename"=s1027,identifier/"class"=s1026,identifier/"union"=s1021,identifier/"enum"=s1023,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeQualifier=s1279,typeSpecifier=s1295
1274: TrailingReturnType -> "->" · typeSpecifier,TrailingReturnType -> "->" · typeSpecifier abstractDeclarator,TrailingReturnType -> "->" · typeQualifier typeSpecifier,TrailingReturnType -> "->" · typeQualifier typeSpecifier abstractDeclarator
  identifier/"bool"=s48,"::"=s141,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s1241,identifier/"typename"=s1252,identifier/"class"=s1249,identifier/"union"=s1245,identifier/"enum"=s1246,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeQualifier=s1280,typeSpecifier=s614
1275: ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+ -> ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+ · ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,FunctionDeclarator-1 -> declarator ParameterList ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+ ·
  identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"final"=s384,identifier/"noexcept"=s386,identifier/"throw"=s387,"->"=s1274,"("=FunctionDeclarator-1(3),","=FunctionDeclarator-1(3),"{"=FunctionDeclarator-1(3),"["=FunctionDeclarator-1(3),";"=FunctionDeclarator-1(3),"="=FunctionDeclarator-1(3) | Noexcept=s384,ThrowSpecifier=s384,TrailingReturnType=s384,((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+=s616,typeQualifier=s384
1276: typeQualifier+ -> typeQualifier+ · typeQualifier+,PointerDeclarator-1 -> MsBasedModifier "*" msPointerModifier+ typeQualifier+ · declarator
  "("=s180,DestructorName=s26,"::"=s1075,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s182,identifier/"__based"=s63,OperatorName=s26,identifier=s1058,"*"=s1256,"&&"=s1257,"&"=s1257 | Identifier=s181,NamespaceIdentifier=s1198,TemplateType=s1198,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s1198,MsBasedModifier=s1299,PointerDeclarator-1=s26,FunctionDeclarator-1=s26,ArrayDeclarator=s26,ParenthesizedDeclarator=s26,ReferenceDeclarator=s26,ScopedIdentifier=s181,TemplateFunction=s26,StructuredBindingDeclarator=s26,typeQualifier+=s376,typeQualifier=s159,declarator=s1230
1277: ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+ -> ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+ · ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,FunctionDeclarator-1 -> declarator ParameterList AttributeSpecifier+ ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+ ·
  identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"final"=s384,identifier/"noexcept"=s386,identifier/"throw"=s387,"->"=s1274,"("=FunctionDeclarator-1(4),","=FunctionDeclarator-1(4),"{"=FunctionDeclarator-1(4),"["=FunctionDeclarator-1(4),";"=FunctionDeclarator-1(4),"="=FunctionDeclarator-1(4) | Noexcept=s384,ThrowSpecifier=s384,TrailingReturnType=s384,((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+=s616,typeQualifier=s384
1278: TrailingReturnType -> "->" typeQualifier · typeSpecifier,TrailingReturnType -> "->" typeQualifier · typeSpecifier abstractDeclarator
  identifier/"bool"=s48,"::"=s141,identifier/"struct"=s1238,identifier/"typename"=s1250,identifier/"class"=s1247,identifier/"union"=s1242,identifier/"enum"=s1023,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeSpecifier=s806
1279: TrailingReturnType -> "->" typeQualifier · typeSpecifier,TrailingReturnType -> "->" typeQualifier · typeSpecifier abstractDeclarator
  identifier/"bool"=s48,"::"=s141,identifier/"struct"=s1019,identifier/"typename"=s1027,identifier/"class"=s1026,identifier/"union"=s1021,identifier/"enum"=s1023,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeSpecifier=s1297
1280: TrailingReturnType -> "->" typeQualifier · typeSpecifier,TrailingReturnType -> "->" typeQualifier · typeSpecifier abstractDeclarator
  identifier/"bool"=s48,"::"=s141,identifier/"struct"=s1241,identifier/"typename"=s1252,identifier/"class"=s1249,identifier/"union"=s1245,identifier/"enum"=s1246,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,identifier=s140 | NamespaceIdentifier=s142,TemplateType=s143,TypeIdentifier=s147,ScopedTypeIdentifier=s147,ScopedNamespaceIdentifier=s142,StructSpecifier=s48,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,typeSpecifier=s806
1281: PointerDeclarator-1 -> MsBasedModifier · "*" declarator,PointerDeclarator-1 -> MsBasedModifier · "*" typeQualifier+ declarator,PointerDeclarator-1 -> MsBasedModifier · "*" msPointerModifier+ declarator,PointerDeclarator-1 -> MsBasedModifier · "*" msPointerModifier+ typeQualifier+ declarator
  "*"=s1209
1282: ConditionalExpression -> expression "?" · expression ":" expression
  RawString=s35,"("=s1215,identifier/"bool"=s164,"::"=s1068,"["=s193,incDec=s1192,ArithOp<"+" | "-">=s1191,Number=s56,identifier/"delete"=s1032,LogicOp<"!">=s1191,BitOp<"~">=s1191,identifier/"sizeof"=s1196,identifier/"NULL"=s56,identifier/"new"=s1031,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s153,"*"=s1084,"&"=s1084,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s1089,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s1190,FieldExpression=s1190,NamespaceIdentifier=s156,TemplateType=s157,TypeIdentifier=s163,ScopedTypeIdentifier=s163,ScopedNamespaceIdentifier=s1071,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,ParenthesizedExpression=s1190,ConcatenatedString=s56,PointerExpression=s1190,SubscriptExpression=s1190,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,expression=s1221
1283: PointerDeclarator-1 -> "*" declarator ·,FunctionDeclarator-1 -> declarator · ParameterList,FunctionDeclarator-1 -> declarator · ParameterList ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+ ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,ArrayDeclarator -> declarator · "[" "]",ArrayDeclarator -> declarator · "[" expression "]",ArrayDeclarator -> declarator · "[" "*" "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "]",ArrayDeclarator -> declarator · "[" typeQualifier+ expression "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "*" "]"
  "("=s169,"["=s168,","=PointerDeclarator-1(2),"{"=PointerDeclarator-1(2),":"=PointerDeclarator-1(2),";"=PointerDeclarator-1(2),"="=PointerDeclarator-1(2) | ParameterList=s167
1284: AbstractFunctionDeclarator -> ParameterList ·,AbstractFunctionDeclarator -> ParameterList · TrailingReturnType,AbstractFunctionDeclarator -> ParameterList · (typeQualifier | Noexcept | ThrowSpecifier)+,AbstractFunctionDeclarator -> ParameterList · (typeQualifier | Noexcept | ThrowSpecifier)+ TrailingReturnType
  identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"noexcept"=s386,identifier/"throw"=s387,"->"=s1273,"("=AbstractFunctionDeclarator(1),")"=AbstractFunctionDeclarator(1),"["=AbstractFunctionDeclarator(1),","=AbstractFunctionDeclarator(1),templateArgsEndFallback=AbstractFunctionDeclarator(1),templateArgsEnd=AbstractFunctionDeclarator(1),"..."=AbstractFunctionDeclarator(1),";"=AbstractFunctionDeclarator(1) | Noexcept=s443,ThrowSpecifier=s443,TrailingReturnType=s445,(typeQualifier | Noexcept | ThrowSpecifier)+=s1288,typeQualifier=s443
1285: AbstractReferenceDeclarator -> "&" ·,AbstractReferenceDeclarator -> "&" · abstractDeclarator,AbstractReferenceDeclarator -> "&&" ·,AbstractReferenceDeclarator -> "&&" · abstractDeclarator
  "("=s231,"["=s230,"*"=s1304,"&&"=s1285,"&"=s1285,"{"=AbstractReferenceDeclarator(1),";"=AbstractReferenceDeclarator(1),"="=AbstractReferenceDeclarator(1) | ParameterList=s228,AbstractPointerDeclarator=s233,AbstractFunctionDeclarator=s233,AbstractArrayDeclarator=s233,AbstractParenthesizedDeclarator=s233,AbstractReferenceDeclarator=s233,abstractDeclarator=s1290
1286: ParenthesizedExpression -> "(" · expression ")",ParenthesizedExpression -> "(" · CommaExpression ")",CastExpression -> "(" · TypeDescriptor ")" expression,_anon-4 -> "(" · TypeDescriptor ")",CompoundLiteralExpression -> "(" · TypeDescriptor ")" InitializerList
  RawString=s35,"("=s190,identifier/"bool"=s57,"::"=s1067,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"struct"=s1019,"["=s193,incDec=s52,ArithOp<"+" | "-">=s51,Number=s56,identifier/"typename"=s1027,identifier/"class"=s1026,identifier/"delete"=s93,identifier/"union"=s1021,identifier/"enum"=s1023,identifier/"signed"=s46,identifier/"decltype"=s90,identifier/"auto"=s48,LogicOp<"!">=s51,BitOp<"~">=s51,identifier/"sizeof"=s91,identifier/"NULL"=s56,identifier/"new"=s92,identifier/"nullptr"=s56,identifier/"this"=s56,stringLiteralStart=s2,identifier=s1057,"*"=s191,"&"=s191,charLiteralStart=s9,identifier/"TRUE"=s53,identifier/"FALSE"=s54 | String=s35,Identifier=s225,ConditionalExpression=s56,AssignmentExpression=s56,CallExpression=s50,FieldExpression=s50,NamespaceIdentifier=s1197,TemplateType=s171,TypeIdentifier=s49,ScopedTypeIdentifier=s49,ScopedNamespaceIdentifier=s1204,TypeDescriptor=s1227,StructSpecifier=s48,CharLiteral=s56,ScopedIdentifier=s188,TemplateFunction=s56,CommaExpression=s174,ParenthesizedExpression=s50,ConcatenatedString=s56,UnionSpecifier=s48,EnumSpecifier=s48,SizedTypeSpecifier=s48,ClassSpecifier=s48,DependentType=s48,Decltype=s48,PointerExpression=s50,SubscriptExpression=s50,BinaryExpression=s56,UnaryExpression=s56,UpdateExpression=s56,CastExpression=s56,SizeofExpression=s56,CompoundLiteralExpression=s56,True=s56,False=s56,NewExpression=s56,DeleteExpression=s56,LambdaExpression=s56,LambdaCaptureSpecifier=s55,ParameterPackExpansion-2=s56,typeQualifier+=s172,@specialize[@name=TypeSize]<identifier, "signed" | "unsigned" | "long" | "short">+=s47,expression=s170,typeQualifier=s159,typeSpecifier=s175
1287: (typeQualifier)+ -> (typeQualifier)+ · (typeQualifier)+,AbstractPointerDeclarator -> "*" (typeQualifier)+ ·,AbstractPointerDeclarator -> "*" (typeQualifier)+ · abstractDeclarator
  "("=s231,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s230,"*"=s1304,"&&"=s1285,"&"=s1285,"{"=AbstractPointerDeclarator(2),";"=AbstractPointerDeclarator(2),"="=AbstractPointerDeclarator(2) | ParameterList=s228,AbstractPointerDeclarator=s233,AbstractFunctionDeclarator=s233,AbstractArrayDeclarator=s233,AbstractParenthesizedDeclarator=s233,AbstractReferenceDeclarator=s233,(typeQualifier)+=s665,typeQualifier=s440,abstractDeclarator=s1291
1288: (typeQualifier | Noexcept | ThrowSpecifier)+ -> (typeQualifier | Noexcept | ThrowSpecifier)+ · (typeQualifier | Noexcept | ThrowSpecifier)+,AbstractFunctionDeclarator -> ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+ ·,AbstractFunctionDeclarator -> ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+ · TrailingReturnType
  identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"noexcept"=s386,identifier/"throw"=s387,"->"=s1273,"("=AbstractFunctionDeclarator(2),")"=AbstractFunctionDeclarator(2),"["=AbstractFunctionDeclarator(2),","=AbstractFunctionDeclarator(2),templateArgsEndFallback=AbstractFunctionDeclarator(2),templateArgsEnd=AbstractFunctionDeclarator(2),"..."=AbstractFunctionDeclarator(2),";"=AbstractFunctionDeclarator(2) | Noexcept=s443,ThrowSpecifier=s443,TrailingReturnType=s668,(typeQualifier | Noexcept | ThrowSpecifier)+=s667,typeQualifier=s443
1289: AbstractFunctionDeclarator -> abstractDeclarator ParameterList ·,AbstractFunctionDeclarator -> abstractDeclarator ParameterList · TrailingReturnType,AbstractFunctionDeclarator -> abstractDeclarator ParameterList · (typeQualifier | Noexcept | ThrowSpecifier)+,AbstractFunctionDeclarator -> abstractDeclarator ParameterList · (typeQualifier | Noexcept | ThrowSpecifier)+ TrailingReturnType
  identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"noexcept"=s386,identifier/"throw"=s387,"->"=s1273,"("=AbstractFunctionDeclarator(2),")"=AbstractFunctionDeclarator(2),"["=AbstractFunctionDeclarator(2),","=AbstractFunctionDeclarator(2),templateArgsEndFallback=AbstractFunctionDeclarator(2),templateArgsEnd=AbstractFunctionDeclarator(2),"..."=AbstractFunctionDeclarator(2),";"=AbstractFunctionDeclarator(2) | Noexcept=s443,ThrowSpecifier=s443,TrailingReturnType=s668,(typeQualifier | Noexcept | ThrowSpecifier)+=s1292,typeQualifier=s443
1290: AbstractFunctionDeclarator -> abstractDeclarator · ParameterList,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList TrailingReturnType,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+ TrailingReturnType,AbstractArrayDeclarator -> abstractDeclarator · "[" "]",AbstractArrayDeclarator -> abstractDeclarator · "[" expression "]",AbstractArrayDeclarator -> abstractDeclarator · "[" "*" "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ expression "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ "*" "]",AbstractReferenceDeclarator -> "&" abstractDeclarator ·,AbstractReferenceDeclarator -> "&&" abstractDeclarator ·
  "("=s169,"["=s447,"{"=AbstractReferenceDeclarator(2),";"=AbstractReferenceDeclarator(2),"="=AbstractReferenceDeclarator(2) | ParameterList=s446
1291: AbstractPointerDeclarator -> "*" (typeQualifier)+ abstractDeclarator ·,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList TrailingReturnType,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+ TrailingReturnType,AbstractArrayDeclarator -> abstractDeclarator · "[" "]",AbstractArrayDeclarator -> abstractDeclarator · "[" expression "]",AbstractArrayDeclarator -> abstractDeclarator · "[" "*" "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ expression "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ "*" "]"
  "("=s169,"["=s447,"{"=AbstractPointerDeclarator(3),";"=AbstractPointerDeclarator(3),"="=AbstractPointerDeclarator(3) | ParameterList=s446
1292: (typeQualifier | Noexcept | ThrowSpecifier)+ -> (typeQualifier | Noexcept | ThrowSpecifier)+ · (typeQualifier | Noexcept | ThrowSpecifier)+,AbstractFunctionDeclarator -> abstractDeclarator ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+ ·,AbstractFunctionDeclarator -> abstractDeclarator ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+ · TrailingReturnType
  identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"noexcept"=s386,identifier/"throw"=s387,"->"=s1273,"("=AbstractFunctionDeclarator(3),")"=AbstractFunctionDeclarator(3),"["=AbstractFunctionDeclarator(3),","=AbstractFunctionDeclarator(3),templateArgsEndFallback=AbstractFunctionDeclarator(3),templateArgsEnd=AbstractFunctionDeclarator(3),"..."=AbstractFunctionDeclarator(3),";"=AbstractFunctionDeclarator(3) | Noexcept=s443,ThrowSpecifier=s443,TrailingReturnType=s834,(typeQualifier | Noexcept | ThrowSpecifier)+=s667,typeQualifier=s443
1293: PointerDeclarator -> "*" · fieldDeclarator,PointerDeclarator -> "*" · typeQualifier+ fieldDeclarator,PointerDeclarator -> "*" · msPointerModifier+ fieldDeclarator,PointerDeclarator -> "*" · msPointerModifier+ typeQualifier+ fieldDeclarator
  "("=s733,"::"=s323,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"__based"=s63,identifier/"__restrict"=s165,OperatorName=s735,identifier=s322,"*"=s1293,"&&"=s1229,"&"=s1229 | FieldIdentifier=s736,TemplateMethod=s735,ScopedFieldIdentifier=s326,NamespaceIdentifier=s324,TemplateType=s324,TypeIdentifier=s183,ScopedTypeIdentifier=s183,ScopedNamespaceIdentifier=s324,PointerDeclarator=s735,MsBasedModifier=s1294,FunctionDeclarator=s735,ArrayDeclarator-1=s735,ParenthesizedDeclarator-1=s735,ReferenceDeclarator-2=s735,typeQualifier+=s1231,msPointerModifier+=s1232,typeQualifier=s159,fieldDeclarator=s1233
1294: PointerDeclarator -> MsBasedModifier · "*" fieldDeclarator,PointerDeclarator -> MsBasedModifier · "*" typeQualifier+ fieldDeclarator,PointerDeclarator -> MsBasedModifier · "*" msPointerModifier+ fieldDeclarator,PointerDeclarator -> MsBasedModifier · "*" msPointerModifier+ typeQualifier+ fieldDeclarator
  "*"=s1234
1295: TrailingReturnType -> "->" typeSpecifier ·,TrailingReturnType -> "->" typeSpecifier · abstractDeclarator
  "("=s231,"["=s230,"*"=s227,"&&"=s232,"&"=s232,")"=TrailingReturnType(2),","=TrailingReturnType(2),templateArgsEndFallback=TrailingReturnType(2),templateArgsEnd=TrailingReturnType(2),"..."=TrailingReturnType(2),";"=TrailingReturnType(2) | ParameterList=s1284,AbstractPointerDeclarator=s233,AbstractFunctionDeclarator=s233,AbstractArrayDeclarator=s233,AbstractParenthesizedDeclarator=s233,AbstractReferenceDeclarator=s233,abstractDeclarator=s1296
1296: AbstractFunctionDeclarator -> abstractDeclarator · ParameterList,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList TrailingReturnType,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+ TrailingReturnType,AbstractArrayDeclarator -> abstractDeclarator · "[" "]",AbstractArrayDeclarator -> abstractDeclarator · "[" expression "]",AbstractArrayDeclarator -> abstractDeclarator · "[" "*" "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ expression "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ "*" "]",TrailingReturnType -> "->" typeSpecifier abstractDeclarator ·
  "("=s169,"["=s447,")"=TrailingReturnType(3),","=TrailingReturnType(3),templateArgsEndFallback=TrailingReturnType(3),templateArgsEnd=TrailingReturnType(3),"..."=TrailingReturnType(3),";"=TrailingReturnType(3) | ParameterList=s1289
1297: TrailingReturnType -> "->" typeQualifier typeSpecifier ·,TrailingReturnType -> "->" typeQualifier typeSpecifier · abstractDeclarator
  "("=s231,"["=s230,"*"=s227,"&&"=s232,"&"=s232,")"=TrailingReturnType(3),","=TrailingReturnType(3),templateArgsEndFallback=TrailingReturnType(3),templateArgsEnd=TrailingReturnType(3),"..."=TrailingReturnType(3),";"=TrailingReturnType(3) | ParameterList=s1284,AbstractPointerDeclarator=s233,AbstractFunctionDeclarator=s233,AbstractArrayDeclarator=s233,AbstractParenthesizedDeclarator=s233,AbstractReferenceDeclarator=s233,abstractDeclarator=s1298
1298: AbstractFunctionDeclarator -> abstractDeclarator · ParameterList,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList TrailingReturnType,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+ TrailingReturnType,AbstractArrayDeclarator -> abstractDeclarator · "[" "]",AbstractArrayDeclarator -> abstractDeclarator · "[" expression "]",AbstractArrayDeclarator -> abstractDeclarator · "[" "*" "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ expression "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ "*" "]",TrailingReturnType -> "->" typeQualifier typeSpecifier abstractDeclarator ·
  "("=s169,"["=s447,")"=TrailingReturnType(4),","=TrailingReturnType(4),templateArgsEndFallback=TrailingReturnType(4),templateArgsEnd=TrailingReturnType(4),"..."=TrailingReturnType(4),";"=TrailingReturnType(4) | ParameterList=s1289
1299: PointerDeclarator-1 -> MsBasedModifier · "*" declarator,PointerDeclarator-1 -> MsBasedModifier · "*" typeQualifier+ declarator,PointerDeclarator-1 -> MsBasedModifier · "*" msPointerModifier+ declarator,PointerDeclarator-1 -> MsBasedModifier · "*" msPointerModifier+ typeQualifier+ declarator
  "*"=s1255
1300: FunctionDeclarator-1 -> declarator ParameterList ·,FunctionDeclarator-1 -> declarator ParameterList · ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,FunctionDeclarator-1 -> declarator ParameterList · AttributeSpecifier+,FunctionDeclarator-1 -> declarator ParameterList · AttributeSpecifier+ ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+
  identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"final"=s384,identifier/"__attribute__"=s62,identifier/"noexcept"=s386,identifier/"throw"=s387,"->"=s1274,"("=FunctionDeclarator-1(2),","=FunctionDeclarator-1(2),"{"=FunctionDeclarator-1(2),"["=FunctionDeclarator-1(2),";"=FunctionDeclarator-1(2),"="=FunctionDeclarator-1(2) | AttributeSpecifier=s381,Noexcept=s384,ThrowSpecifier=s384,TrailingReturnType=s384,AttributeSpecifier+=s1301,((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+=s1275,typeQualifier=s384
1301: AttributeSpecifier+ -> AttributeSpecifier+ · AttributeSpecifier+,FunctionDeclarator-1 -> declarator ParameterList AttributeSpecifier+ ·,FunctionDeclarator-1 -> declarator ParameterList AttributeSpecifier+ · ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+
  identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,identifier/"final"=s384,identifier/"__attribute__"=s62,identifier/"noexcept"=s386,identifier/"throw"=s387,"->"=s1274,"("=FunctionDeclarator-1(3),","=FunctionDeclarator-1(3),"{"=FunctionDeclarator-1(3),"["=FunctionDeclarator-1(3),";"=FunctionDeclarator-1(3),"="=FunctionDeclarator-1(3) | AttributeSpecifier=s381,Noexcept=s384,ThrowSpecifier=s384,TrailingReturnType=s384,AttributeSpecifier+=s612,((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+=s1277,typeQualifier=s384
1302: PointerDeclarator-1 -> "*" declarator ·,FunctionDeclarator-1 -> declarator · ParameterList,FunctionDeclarator-1 -> declarator · ParameterList ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+ ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,ArrayDeclarator -> declarator · "[" "]",ArrayDeclarator -> declarator · "[" expression "]",ArrayDeclarator -> declarator · "[" "*" "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "]",ArrayDeclarator -> declarator · "[" typeQualifier+ expression "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "*" "]"
  "("=s169,"["=s168,","=PointerDeclarator-1(2),"{"=PointerDeclarator-1(2),";"=PointerDeclarator-1(2),"="=PointerDeclarator-1(2) | ParameterList=s1300
1303: FunctionDeclarator-1 -> declarator · ParameterList,FunctionDeclarator-1 -> declarator · ParameterList ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+ ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,ArrayDeclarator -> declarator · "[" "]",ArrayDeclarator -> declarator · "[" expression "]",ArrayDeclarator -> declarator · "[" "*" "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "]",ArrayDeclarator -> declarator · "[" typeQualifier+ expression "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "*" "]",ReferenceDeclarator -> "&" declarator ·,ReferenceDeclarator -> "&&" declarator ·
  "("=s169,"["=s168,","=ReferenceDeclarator(2),"{"=ReferenceDeclarator(2),";"=ReferenceDeclarator(2),"="=ReferenceDeclarator(2) | ParameterList=s1300
1304: AbstractPointerDeclarator -> "*" ·,AbstractPointerDeclarator -> "*" · abstractDeclarator,AbstractPointerDeclarator -> "*" · (typeQualifier)+,AbstractPointerDeclarator -> "*" · (typeQualifier)+ abstractDeclarator
  "("=s231,identifier/"const"=s58,identifier/"volatile"=s58,identifier/"restrict"=s58,identifier/"_Atomic"=s58,identifier/"mutable"=s58,identifier/"constexpr"=s58,"["=s230,"*"=s1304,"&&"=s1285,"&"=s1285,"{"=AbstractPointerDeclarator(1),";"=AbstractPointerDeclarator(1),"="=AbstractPointerDeclarator(1) | ParameterList=s228,AbstractPointerDeclarator=s233,AbstractFunctionDeclarator=s233,AbstractArrayDeclarator=s233,AbstractParenthesizedDeclarator=s233,AbstractReferenceDeclarator=s233,(typeQualifier)+=s1287,typeQualifier=s440,abstractDeclarator=s1306
1305: PointerDeclarator-1 -> "*" typeQualifier+ declarator ·,PointerDeclarator-1 -> "*" msPointerModifier+ declarator ·,PointerDeclarator-1 -> MsBasedModifier "*" declarator ·,FunctionDeclarator-1 -> declarator · ParameterList,FunctionDeclarator-1 -> declarator · ParameterList ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+ ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,ArrayDeclarator -> declarator · "[" "]",ArrayDeclarator -> declarator · "[" expression "]",ArrayDeclarator -> declarator · "[" "*" "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "]",ArrayDeclarator -> declarator · "[" typeQualifier+ expression "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "*" "]"
  "("=s169,"["=s168,","=PointerDeclarator-1(3),"{"=PointerDeclarator-1(3),";"=PointerDeclarator-1(3),"="=PointerDeclarator-1(3) | ParameterList=s1300
1306: AbstractPointerDeclarator -> "*" abstractDeclarator ·,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList TrailingReturnType,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+,AbstractFunctionDeclarator -> abstractDeclarator · ParameterList (typeQualifier | Noexcept | ThrowSpecifier)+ TrailingReturnType,AbstractArrayDeclarator -> abstractDeclarator · "[" "]",AbstractArrayDeclarator -> abstractDeclarator · "[" expression "]",AbstractArrayDeclarator -> abstractDeclarator · "[" "*" "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ expression "]",AbstractArrayDeclarator -> abstractDeclarator · "[" typeQualifier+ "*" "]"
  "("=s169,"["=s447,"{"=AbstractPointerDeclarator(2),";"=AbstractPointerDeclarator(2),"="=AbstractPointerDeclarator(2) | ParameterList=s446
1307: PointerDeclarator-1 -> "*" msPointerModifier+ typeQualifier+ declarator ·,PointerDeclarator-1 -> MsBasedModifier "*" typeQualifier+ declarator ·,PointerDeclarator-1 -> MsBasedModifier "*" msPointerModifier+ declarator ·,FunctionDeclarator-1 -> declarator · ParameterList,FunctionDeclarator-1 -> declarator · ParameterList ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+ ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,ArrayDeclarator -> declarator · "[" "]",ArrayDeclarator -> declarator · "[" expression "]",ArrayDeclarator -> declarator · "[" "*" "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "]",ArrayDeclarator -> declarator · "[" typeQualifier+ expression "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "*" "]"
  "("=s169,"["=s168,","=PointerDeclarator-1(4),"{"=PointerDeclarator-1(4),";"=PointerDeclarator-1(4),"="=PointerDeclarator-1(4) | ParameterList=s1300
1308: PointerDeclarator-1 -> MsBasedModifier "*" msPointerModifier+ typeQualifier+ declarator ·,FunctionDeclarator-1 -> declarator · ParameterList,FunctionDeclarator-1 -> declarator · ParameterList ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+,FunctionDeclarator-1 -> declarator · ParameterList AttributeSpecifier+ ((typeQualifier | virtualSpecifier | Noexcept | ThrowSpecifier | TrailingReturnType))+,ArrayDeclarator -> declarator · "[" "]",ArrayDeclarator -> declarator · "[" expression "]",ArrayDeclarator -> declarator · "[" "*" "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "]",ArrayDeclarator -> declarator · "[" typeQualifier+ expression "]",ArrayDeclarator -> declarator · "[" typeQualifier+ "*" "]"
  "("=s169,"["=s168,","=PointerDeclarator-1(5),"{"=PointerDeclarator-1(5),";"=PointerDeclarator-1(5),"="=PointerDeclarator-1(5) | ParameterList=s1300
Wrote src/parser.js and src/parser.terms.js
