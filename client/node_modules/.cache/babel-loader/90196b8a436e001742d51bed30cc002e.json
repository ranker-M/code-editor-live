{"ast":null,"code":"import { Parser, NodeSet, NodeType, DefaultBufferLength, NodeProp, Tree } from '@lezer/common'; /// A parse stack. These are used internally by the parser to track\n/// parsing progress. They also provide some properties and methods\n/// that external code such as a tokenizer can use to get information\n/// about the parse state.\n\nclass Stack {\n  /// @internal\n  constructor( /// The parse that this stack is part of @internal\n  p, /// Holds state, input pos, buffer index triplets for all but the\n  /// top state @internal\n  stack, /// The current parse state @internal\n  state, // The position at which the next reduce should take place. This\n  // can be less than `this.pos` when skipped expressions have been\n  // added to the stack (which should be moved outside of the next\n  // reduction)\n  /// @internal\n  reducePos, /// The input position up to which this stack has parsed.\n  pos, /// The dynamic score of the stack, including dynamic precedence\n  /// and error-recovery penalties\n  /// @internal\n  score, // The output buffer. Holds (type, start, end, size) quads\n  // representing nodes created by the parser, where `size` is\n  // amount of buffer array entries covered by this node.\n  /// @internal\n  buffer, // The base offset of the buffer. When stacks are split, the split\n  // instance shared the buffer history with its parent up to\n  // `bufferBase`, which is the absolute offset (including the\n  // offset of previous splits) into the buffer at which this stack\n  // starts writing.\n  /// @internal\n  bufferBase, /// @internal\n  curContext) {\n    let lookAhead = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;\n    let // A parent stack from which this was split off, if any. This is\n    // set up so that it always points to a stack that has some\n    // additional buffer content, never to a stack with an equal\n    // `bufferBase`.\n    /// @internal\n    parent = arguments.length > 10 ? arguments[10] : undefined;\n    this.p = p;\n    this.stack = stack;\n    this.state = state;\n    this.reducePos = reducePos;\n    this.pos = pos;\n    this.score = score;\n    this.buffer = buffer;\n    this.bufferBase = bufferBase;\n    this.curContext = curContext;\n    this.lookAhead = lookAhead;\n    this.parent = parent;\n  } /// @internal\n\n\n  toString() {\n    return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? \"!\" + this.score : \"\"}`;\n  } // Start an empty stack\n  /// @internal\n\n\n  static start(p, state) {\n    let pos = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let cx = p.parser.context;\n    return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, 0, null);\n  } /// The stack's current [context](#lr.ContextTracker) value, if\n  /// any. Its type will depend on the context tracker's type\n  /// parameter, or it will be `null` if there is no context\n  /// tracker.\n\n\n  get context() {\n    return this.curContext ? this.curContext.context : null;\n  } // Push a state onto the stack, tracking its start position as well\n  // as the buffer base at that point.\n  /// @internal\n\n\n  pushState(state, start) {\n    this.stack.push(this.state, start, this.bufferBase + this.buffer.length);\n    this.state = state;\n  } // Apply a reduce action\n  /// @internal\n\n\n  reduce(action) {\n    let depth = action >> 19\n    /* ReduceDepthShift */\n    ,\n        type = action & 65535\n    /* ValueMask */\n    ;\n    let {\n      parser\n    } = this.p;\n    let dPrec = parser.dynamicPrecedence(type);\n    if (dPrec) this.score += dPrec;\n\n    if (depth == 0) {\n      // Zero-depth reductions are a special caseâ€”they add stuff to\n      // the stack without popping anything off.\n      if (type < parser.minRepeatTerm) this.storeNode(type, this.reducePos, this.reducePos, 4, true);\n      this.pushState(parser.getGoto(this.state, type, true), this.reducePos);\n      this.reduceContext(type, this.reducePos);\n      return;\n    } // Find the base index into `this.stack`, content after which will\n    // be dropped. Note that with `StayFlag` reductions we need to\n    // consume two extra frames (the dummy parent node for the skipped\n    // expression and the state that we'll be staying in, which should\n    // be moved to `this.state`).\n\n\n    let base = this.stack.length - (depth - 1) * 3 - (action & 262144\n    /* StayFlag */\n    ? 6 : 0);\n    let start = this.stack[base - 2];\n    let bufferBase = this.stack[base - 1],\n        count = this.bufferBase + this.buffer.length - bufferBase; // Store normal terms or `R -> R R` repeat reductions\n\n    if (type < parser.minRepeatTerm || action & 131072\n    /* RepeatFlag */\n    ) {\n      let pos = parser.stateFlag(this.state, 1\n      /* Skipped */\n      ) ? this.pos : this.reducePos;\n      this.storeNode(type, start, pos, count + 4, true);\n    }\n\n    if (action & 262144\n    /* StayFlag */\n    ) {\n      this.state = this.stack[base];\n    } else {\n      let baseStateID = this.stack[base - 3];\n      this.state = parser.getGoto(baseStateID, type, true);\n    }\n\n    while (this.stack.length > base) this.stack.pop();\n\n    this.reduceContext(type, start);\n  } // Shift a value into the buffer\n  /// @internal\n\n\n  storeNode(term, start, end) {\n    let size = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 4;\n    let isReduce = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n    if (term == 0\n    /* Err */\n    ) {\n      // Try to omit/merge adjacent error nodes\n      let cur = this,\n          top = this.buffer.length;\n\n      if (top == 0 && cur.parent) {\n        top = cur.bufferBase - cur.parent.bufferBase;\n        cur = cur.parent;\n      }\n\n      if (top > 0 && cur.buffer[top - 4] == 0\n      /* Err */\n      && cur.buffer[top - 1] > -1) {\n        if (start == end) return;\n\n        if (cur.buffer[top - 2] >= start) {\n          cur.buffer[top - 2] = end;\n          return;\n        }\n      }\n    }\n\n    if (!isReduce || this.pos == end) {\n      // Simple case, just append\n      this.buffer.push(term, start, end, size);\n    } else {\n      // There may be skipped nodes that have to be moved forward\n      let index = this.buffer.length;\n      if (index > 0 && this.buffer[index - 4] != 0\n      /* Err */\n      ) while (index > 0 && this.buffer[index - 2] > end) {\n        // Move this record forward\n        this.buffer[index] = this.buffer[index - 4];\n        this.buffer[index + 1] = this.buffer[index - 3];\n        this.buffer[index + 2] = this.buffer[index - 2];\n        this.buffer[index + 3] = this.buffer[index - 1];\n        index -= 4;\n        if (size > 4) size -= 4;\n      }\n      this.buffer[index] = term;\n      this.buffer[index + 1] = start;\n      this.buffer[index + 2] = end;\n      this.buffer[index + 3] = size;\n    }\n  } // Apply a shift action\n  /// @internal\n\n\n  shift(action, next, nextEnd) {\n    let start = this.pos;\n\n    if (action & 131072\n    /* GotoFlag */\n    ) {\n      this.pushState(action & 65535\n      /* ValueMask */\n      , this.pos);\n    } else if ((action & 262144\n    /* StayFlag */\n    ) == 0) {\n      // Regular shift\n      let nextState = action,\n          {\n        parser\n      } = this.p;\n\n      if (nextEnd > this.pos || next <= parser.maxNode) {\n        this.pos = nextEnd;\n        if (!parser.stateFlag(nextState, 1\n        /* Skipped */\n        )) this.reducePos = nextEnd;\n      }\n\n      this.pushState(nextState, start);\n      this.shiftContext(next, start);\n      if (next <= parser.maxNode) this.buffer.push(next, start, nextEnd, 4);\n    } else {\n      // Shift-and-stay, which means this is a skipped token\n      this.pos = nextEnd;\n      this.shiftContext(next, start);\n      if (next <= this.p.parser.maxNode) this.buffer.push(next, start, nextEnd, 4);\n    }\n  } // Apply an action\n  /// @internal\n\n\n  apply(action, next, nextEnd) {\n    if (action & 65536\n    /* ReduceFlag */\n    ) this.reduce(action);else this.shift(action, next, nextEnd);\n  } // Add a prebuilt (reused) node into the buffer.\n  /// @internal\n\n\n  useNode(value, next) {\n    let index = this.p.reused.length - 1;\n\n    if (index < 0 || this.p.reused[index] != value) {\n      this.p.reused.push(value);\n      index++;\n    }\n\n    let start = this.pos;\n    this.reducePos = this.pos = start + value.length;\n    this.pushState(next, start);\n    this.buffer.push(index, start, this.reducePos, -1\n    /* size == -1 means this is a reused value */\n    );\n    if (this.curContext) this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));\n  } // Split the stack. Due to the buffer sharing and the fact\n  // that `this.stack` tends to stay quite shallow, this isn't very\n  // expensive.\n  /// @internal\n\n\n  split() {\n    let parent = this;\n    let off = parent.buffer.length; // Because the top of the buffer (after this.pos) may be mutated\n    // to reorder reductions and skipped tokens, and shared buffers\n    // should be immutable, this copies any outstanding skipped tokens\n    // to the new buffer, and puts the base pointer before them.\n\n    while (off > 0 && parent.buffer[off - 2] > parent.reducePos) off -= 4;\n\n    let buffer = parent.buffer.slice(off),\n        base = parent.bufferBase + off; // Make sure parent points to an actual parent with content, if there is such a parent.\n\n    while (parent && base == parent.bufferBase) parent = parent.parent;\n\n    return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, this.lookAhead, parent);\n  } // Try to recover from an error by 'deleting' (ignoring) one token.\n  /// @internal\n\n\n  recoverByDelete(next, nextEnd) {\n    let isNode = next <= this.p.parser.maxNode;\n    if (isNode) this.storeNode(next, this.pos, nextEnd, 4);\n    this.storeNode(0\n    /* Err */\n    , this.pos, nextEnd, isNode ? 8 : 4);\n    this.pos = this.reducePos = nextEnd;\n    this.score -= 190\n    /* Delete */\n    ;\n  } /// Check if the given term would be able to be shifted (optionally\n  /// after some reductions) on this stack. This can be useful for\n  /// external tokenizers that want to make sure they only provide a\n  /// given token when it applies.\n\n\n  canShift(term) {\n    for (let sim = new SimulatedStack(this);;) {\n      let action = this.p.parser.stateSlot(sim.state, 4\n      /* DefaultReduce */\n      ) || this.p.parser.hasAction(sim.state, term);\n      if ((action & 65536\n      /* ReduceFlag */\n      ) == 0) return true;\n      if (action == 0) return false;\n      sim.reduce(action);\n    }\n  } // Apply up to Recover.MaxNext recovery actions that conceptually\n  // inserts some missing token or rule.\n  /// @internal\n\n\n  recoverByInsert(next) {\n    if (this.stack.length >= 300\n    /* MaxInsertStackDepth */\n    ) return [];\n    let nextStates = this.p.parser.nextStates(this.state);\n\n    if (nextStates.length > 4\n    /* MaxNext */\n    << 1 || this.stack.length >= 120\n    /* DampenInsertStackDepth */\n    ) {\n      let best = [];\n\n      for (let i = 0, s; i < nextStates.length; i += 2) {\n        if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next)) best.push(nextStates[i], s);\n      }\n\n      if (this.stack.length < 120\n      /* DampenInsertStackDepth */\n      ) for (let i = 0; best.length < 4\n      /* MaxNext */\n      << 1 && i < nextStates.length; i += 2) {\n        let s = nextStates[i + 1];\n        if (!best.some((v, i) => i & 1 && v == s)) best.push(nextStates[i], s);\n      }\n      nextStates = best;\n    }\n\n    let result = [];\n\n    for (let i = 0; i < nextStates.length && result.length < 4\n    /* MaxNext */\n    ; i += 2) {\n      let s = nextStates[i + 1];\n      if (s == this.state) continue;\n      let stack = this.split();\n      stack.storeNode(0\n      /* Err */\n      , stack.pos, stack.pos, 4, true);\n      stack.pushState(s, this.pos);\n      stack.shiftContext(nextStates[i], this.pos);\n      stack.score -= 200\n      /* Insert */\n      ;\n      result.push(stack);\n    }\n\n    return result;\n  } // Force a reduce, if possible. Return false if that can't\n  // be done.\n  /// @internal\n\n\n  forceReduce() {\n    let reduce = this.p.parser.stateSlot(this.state, 5\n    /* ForcedReduce */\n    );\n    if ((reduce & 65536\n    /* ReduceFlag */\n    ) == 0) return false;\n    let {\n      parser\n    } = this.p;\n\n    if (!parser.validAction(this.state, reduce)) {\n      let depth = reduce >> 19\n      /* ReduceDepthShift */\n      ,\n          term = reduce & 65535\n      /* ValueMask */\n      ;\n      let target = this.stack.length - depth * 3;\n      if (target < 0 || parser.getGoto(this.stack[target], term, false) < 0) return false;\n      this.storeNode(0\n      /* Err */\n      , this.reducePos, this.reducePos, 4, true);\n      this.score -= 100\n      /* Reduce */\n      ;\n    }\n\n    this.reduce(reduce);\n    return true;\n  } /// @internal\n\n\n  forceAll() {\n    while (!this.p.parser.stateFlag(this.state, 2\n    /* Accepting */\n    )) {\n      if (!this.forceReduce()) {\n        this.storeNode(0\n        /* Err */\n        , this.pos, this.pos, 4, true);\n        break;\n      }\n    }\n\n    return this;\n  } /// Check whether this state has no further actions (assumed to be a direct descendant of the\n  /// top state, since any other states must be able to continue\n  /// somehow). @internal\n\n\n  get deadEnd() {\n    if (this.stack.length != 3) return false;\n    let {\n      parser\n    } = this.p;\n    return parser.data[parser.stateSlot(this.state, 1\n    /* Actions */\n    )] == 65535\n    /* End */\n    && !parser.stateSlot(this.state, 4\n    /* DefaultReduce */\n    );\n  } /// Restart the stack (put it back in its start state). Only safe\n  /// when this.stack.length == 3 (state is directly below the top\n  /// state). @internal\n\n\n  restart() {\n    this.state = this.stack[0];\n    this.stack.length = 0;\n  } /// @internal\n\n\n  sameState(other) {\n    if (this.state != other.state || this.stack.length != other.stack.length) return false;\n\n    for (let i = 0; i < this.stack.length; i += 3) if (this.stack[i] != other.stack[i]) return false;\n\n    return true;\n  } /// Get the parser used by this stack.\n\n\n  get parser() {\n    return this.p.parser;\n  } /// Test whether a given dialect (by numeric ID, as exported from\n  /// the terms file) is enabled.\n\n\n  dialectEnabled(dialectID) {\n    return this.p.parser.dialect.flags[dialectID];\n  }\n\n  shiftContext(term, start) {\n    if (this.curContext) this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));\n  }\n\n  reduceContext(term, start) {\n    if (this.curContext) this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));\n  } /// @internal\n\n\n  emitContext() {\n    let last = this.buffer.length - 1;\n    if (last < 0 || this.buffer[last] != -3) this.buffer.push(this.curContext.hash, this.reducePos, this.reducePos, -3);\n  } /// @internal\n\n\n  emitLookAhead() {\n    let last = this.buffer.length - 1;\n    if (last < 0 || this.buffer[last] != -4) this.buffer.push(this.lookAhead, this.reducePos, this.reducePos, -4);\n  }\n\n  updateContext(context) {\n    if (context != this.curContext.context) {\n      let newCx = new StackContext(this.curContext.tracker, context);\n      if (newCx.hash != this.curContext.hash) this.emitContext();\n      this.curContext = newCx;\n    }\n  } /// @internal\n\n\n  setLookAhead(lookAhead) {\n    if (lookAhead > this.lookAhead) {\n      this.emitLookAhead();\n      this.lookAhead = lookAhead;\n    }\n  } /// @internal\n\n\n  close() {\n    if (this.curContext && this.curContext.tracker.strict) this.emitContext();\n    if (this.lookAhead > 0) this.emitLookAhead();\n  }\n\n}\n\nclass StackContext {\n  constructor(tracker, context) {\n    this.tracker = tracker;\n    this.context = context;\n    this.hash = tracker.strict ? tracker.hash(context) : 0;\n  }\n\n}\n\nvar Recover;\n\n(function (Recover) {\n  Recover[Recover[\"Insert\"] = 200] = \"Insert\";\n  Recover[Recover[\"Delete\"] = 190] = \"Delete\";\n  Recover[Recover[\"Reduce\"] = 100] = \"Reduce\";\n  Recover[Recover[\"MaxNext\"] = 4] = \"MaxNext\";\n  Recover[Recover[\"MaxInsertStackDepth\"] = 300] = \"MaxInsertStackDepth\";\n  Recover[Recover[\"DampenInsertStackDepth\"] = 120] = \"DampenInsertStackDepth\";\n})(Recover || (Recover = {})); // Used to cheaply run some reductions to scan ahead without mutating\n// an entire stack\n\n\nclass SimulatedStack {\n  constructor(start) {\n    this.start = start;\n    this.state = start.state;\n    this.stack = start.stack;\n    this.base = this.stack.length;\n  }\n\n  reduce(action) {\n    let term = action & 65535\n    /* ValueMask */\n    ,\n        depth = action >> 19\n    /* ReduceDepthShift */\n    ;\n\n    if (depth == 0) {\n      if (this.stack == this.start.stack) this.stack = this.stack.slice();\n      this.stack.push(this.state, 0, 0);\n      this.base += 3;\n    } else {\n      this.base -= (depth - 1) * 3;\n    }\n\n    let goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);\n    this.state = goto;\n  }\n\n} // This is given to `Tree.build` to build a buffer, and encapsulates\n// the parent-stack-walking necessary to read the nodes.\n\n\nclass StackBufferCursor {\n  constructor(stack, pos, index) {\n    this.stack = stack;\n    this.pos = pos;\n    this.index = index;\n    this.buffer = stack.buffer;\n    if (this.index == 0) this.maybeNext();\n  }\n\n  static create(stack) {\n    let pos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : stack.bufferBase + stack.buffer.length;\n    return new StackBufferCursor(stack, pos, pos - stack.bufferBase);\n  }\n\n  maybeNext() {\n    let next = this.stack.parent;\n\n    if (next != null) {\n      this.index = this.stack.bufferBase - next.bufferBase;\n      this.stack = next;\n      this.buffer = next.buffer;\n    }\n  }\n\n  get id() {\n    return this.buffer[this.index - 4];\n  }\n\n  get start() {\n    return this.buffer[this.index - 3];\n  }\n\n  get end() {\n    return this.buffer[this.index - 2];\n  }\n\n  get size() {\n    return this.buffer[this.index - 1];\n  }\n\n  next() {\n    this.index -= 4;\n    this.pos -= 4;\n    if (this.index == 0) this.maybeNext();\n  }\n\n  fork() {\n    return new StackBufferCursor(this.stack, this.pos, this.index);\n  }\n\n}\n\nclass CachedToken {\n  constructor() {\n    this.start = -1;\n    this.value = -1;\n    this.end = -1;\n    this.extended = -1;\n    this.lookAhead = 0;\n    this.mask = 0;\n    this.context = 0;\n  }\n\n}\n\nconst nullToken = new CachedToken(); /// [Tokenizers](#lr.ExternalTokenizer) interact with the input\n/// through this interface. It presents the input as a stream of\n/// characters, tracking lookahead and hiding the complexity of\n/// [ranges](#common.Parser.parse^ranges) from tokenizer code.\n\nclass InputStream {\n  /// @internal\n  constructor( /// @internal\n  input, /// @internal\n  ranges) {\n    this.input = input;\n    this.ranges = ranges; /// @internal\n\n    this.chunk = \"\"; /// @internal\n\n    this.chunkOff = 0; /// Backup chunk\n\n    this.chunk2 = \"\";\n    this.chunk2Pos = 0; /// The character code of the next code unit in the input, or -1\n    /// when the stream is at the end of the input.\n\n    this.next = -1; /// @internal\n\n    this.token = nullToken;\n    this.rangeIndex = 0;\n    this.pos = this.chunkPos = ranges[0].from;\n    this.range = ranges[0];\n    this.end = ranges[ranges.length - 1].to;\n    this.readNext();\n  }\n\n  resolveOffset(offset, assoc) {\n    let range = this.range,\n        index = this.rangeIndex;\n    let pos = this.pos + offset;\n\n    while (pos < range.from) {\n      if (!index) return null;\n      let next = this.ranges[--index];\n      pos -= range.from - next.to;\n      range = next;\n    }\n\n    while (assoc < 0 ? pos > range.to : pos >= range.to) {\n      if (index == this.ranges.length - 1) return null;\n      let next = this.ranges[++index];\n      pos += next.from - range.to;\n      range = next;\n    }\n\n    return pos;\n  } /// Look at a code unit near the stream position. `.peek(0)` equals\n  /// `.next`, `.peek(-1)` gives you the previous character, and so\n  /// on.\n  ///\n  /// Note that looking around during tokenizing creates dependencies\n  /// on potentially far-away content, which may reduce the\n  /// effectiveness incremental parsingâ€”when looking forwardâ€”or even\n  /// cause invalid reparses when looking backward more than 25 code\n  /// units, since the library does not track lookbehind.\n\n\n  peek(offset) {\n    let idx = this.chunkOff + offset,\n        pos,\n        result;\n\n    if (idx >= 0 && idx < this.chunk.length) {\n      pos = this.pos + offset;\n      result = this.chunk.charCodeAt(idx);\n    } else {\n      let resolved = this.resolveOffset(offset, 1);\n      if (resolved == null) return -1;\n      pos = resolved;\n\n      if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {\n        result = this.chunk2.charCodeAt(pos - this.chunk2Pos);\n      } else {\n        let i = this.rangeIndex,\n            range = this.range;\n\n        while (range.to <= pos) range = this.ranges[++i];\n\n        this.chunk2 = this.input.chunk(this.chunk2Pos = pos);\n        if (pos + this.chunk2.length > range.to) this.chunk2 = this.chunk2.slice(0, range.to - pos);\n        result = this.chunk2.charCodeAt(0);\n      }\n    }\n\n    if (pos >= this.token.lookAhead) this.token.lookAhead = pos + 1;\n    return result;\n  } /// Accept a token. By default, the end of the token is set to the\n  /// current stream position, but you can pass an offset (relative to\n  /// the stream position) to change that.\n\n\n  acceptToken(token) {\n    let endOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;\n    if (end == null || end < this.token.start) throw new RangeError(\"Token end out of bounds\");\n    this.token.value = token;\n    this.token.end = end;\n  }\n\n  getChunk() {\n    if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {\n      let {\n        chunk,\n        chunkPos\n      } = this;\n      this.chunk = this.chunk2;\n      this.chunkPos = this.chunk2Pos;\n      this.chunk2 = chunk;\n      this.chunk2Pos = chunkPos;\n      this.chunkOff = this.pos - this.chunkPos;\n    } else {\n      this.chunk2 = this.chunk;\n      this.chunk2Pos = this.chunkPos;\n      let nextChunk = this.input.chunk(this.pos);\n      let end = this.pos + nextChunk.length;\n      this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;\n      this.chunkPos = this.pos;\n      this.chunkOff = 0;\n    }\n  }\n\n  readNext() {\n    if (this.chunkOff >= this.chunk.length) {\n      this.getChunk();\n      if (this.chunkOff == this.chunk.length) return this.next = -1;\n    }\n\n    return this.next = this.chunk.charCodeAt(this.chunkOff);\n  } /// Move the stream forward N (defaults to 1) code units. Returns\n  /// the new value of [`next`](#lr.InputStream.next).\n\n\n  advance() {\n    let n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    this.chunkOff += n;\n\n    while (this.pos + n >= this.range.to) {\n      if (this.rangeIndex == this.ranges.length - 1) return this.setDone();\n      n -= this.range.to - this.pos;\n      this.range = this.ranges[++this.rangeIndex];\n      this.pos = this.range.from;\n    }\n\n    this.pos += n;\n    if (this.pos >= this.token.lookAhead) this.token.lookAhead = this.pos + 1;\n    return this.readNext();\n  }\n\n  setDone() {\n    this.pos = this.chunkPos = this.end;\n    this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];\n    this.chunk = \"\";\n    return this.next = -1;\n  } /// @internal\n\n\n  reset(pos, token) {\n    if (token) {\n      this.token = token;\n      token.start = pos;\n      token.lookAhead = pos + 1;\n      token.value = token.extended = -1;\n    } else {\n      this.token = nullToken;\n    }\n\n    if (this.pos != pos) {\n      this.pos = pos;\n\n      if (pos == this.end) {\n        this.setDone();\n        return this;\n      }\n\n      while (pos < this.range.from) this.range = this.ranges[--this.rangeIndex];\n\n      while (pos >= this.range.to) this.range = this.ranges[++this.rangeIndex];\n\n      if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {\n        this.chunkOff = pos - this.chunkPos;\n      } else {\n        this.chunk = \"\";\n        this.chunkOff = 0;\n      }\n\n      this.readNext();\n    }\n\n    return this;\n  } /// @internal\n\n\n  read(from, to) {\n    if (from >= this.chunkPos && to <= this.chunkPos + this.chunk.length) return this.chunk.slice(from - this.chunkPos, to - this.chunkPos);\n    if (from >= this.range.from && to <= this.range.to) return this.input.read(from, to);\n    let result = \"\";\n\n    for (let r of this.ranges) {\n      if (r.from >= to) break;\n      if (r.to > from) result += this.input.read(Math.max(r.from, from), Math.min(r.to, to));\n    }\n\n    return result;\n  }\n\n} /// @internal\n\n\nclass TokenGroup {\n  constructor(data, id) {\n    this.data = data;\n    this.id = id;\n  }\n\n  token(input, stack) {\n    readToken(this.data, input, stack, this.id);\n  }\n\n}\n\nTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false; /// `@external tokens` declarations in the grammar should resolve to\n/// an instance of this class.\n\nclass ExternalTokenizer {\n  /// Create a tokenizer. The first argument is the function that,\n  /// given an input stream, scans for the types of tokens it\n  /// recognizes at the stream's position, and calls\n  /// [`acceptToken`](#lr.InputStream.acceptToken) when it finds\n  /// one.\n  constructor( /// @internal\n  token) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.token = token;\n    this.contextual = !!options.contextual;\n    this.fallback = !!options.fallback;\n    this.extend = !!options.extend;\n  }\n\n} // Tokenizer data is stored a big uint16 array containing, for each\n// state:\n//\n//  - A group bitmask, indicating what token groups are reachable from\n//    this state, so that paths that can only lead to tokens not in\n//    any of the current groups can be cut off early.\n//\n//  - The position of the end of the state's sequence of accepting\n//    tokens\n//\n//  - The number of outgoing edges for the state\n//\n//  - The accepting tokens, as (token id, group mask) pairs\n//\n//  - The outgoing edges, as (start character, end character, state\n//    index) triples, with end character being exclusive\n//\n// This function interprets that data, running through a stream as\n// long as new states with the a matching group mask can be reached,\n// and updating `token` when it matches a token.\n\n\nfunction readToken(data, input, stack, group) {\n  let state = 0,\n      groupMask = 1 << group,\n      {\n    parser\n  } = stack.p,\n      {\n    dialect\n  } = parser;\n\n  scan: for (;;) {\n    if ((groupMask & data[state]) == 0) break;\n    let accEnd = data[state + 1]; // Check whether this state can lead to a token in the current group\n    // Accept tokens in this state, possibly overwriting\n    // lower-precedence / shorter tokens\n\n    for (let i = state + 3; i < accEnd; i += 2) if ((data[i + 1] & groupMask) > 0) {\n      let term = data[i];\n\n      if (dialect.allows(term) && (input.token.value == -1 || input.token.value == term || parser.overrides(term, input.token.value))) {\n        input.acceptToken(term);\n        break;\n      }\n    } // Do a binary search on the state's edges\n\n\n    for (let next = input.next, low = 0, high = data[state + 2]; low < high;) {\n      let mid = low + high >> 1;\n      let index = accEnd + mid + (mid << 1);\n      let from = data[index],\n          to = data[index + 1];\n      if (next < from) high = mid;else if (next >= to) low = mid + 1;else {\n        state = data[index + 2];\n        input.advance();\n        continue scan;\n      }\n    }\n\n    break;\n  }\n} // See lezer-generator/src/encode.ts for comments about the encoding\n// used here\n\n\nfunction decodeArray(input) {\n  let Type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Uint16Array;\n  if (typeof input != \"string\") return input;\n  let array = null;\n\n  for (let pos = 0, out = 0; pos < input.length;) {\n    let value = 0;\n\n    for (;;) {\n      let next = input.charCodeAt(pos++),\n          stop = false;\n\n      if (next == 126\n      /* BigValCode */\n      ) {\n        value = 65535\n        /* BigVal */\n        ;\n        break;\n      }\n\n      if (next >= 92\n      /* Gap2 */\n      ) next--;\n      if (next >= 34\n      /* Gap1 */\n      ) next--;\n      let digit = next - 32\n      /* Start */\n      ;\n\n      if (digit >= 46\n      /* Base */\n      ) {\n        digit -= 46\n        /* Base */\n        ;\n        stop = true;\n      }\n\n      value += digit;\n      if (stop) break;\n      value *= 46\n      /* Base */\n      ;\n    }\n\n    if (array) array[out++] = value;else array = new Type(value);\n  }\n\n  return array;\n} // FIXME find some way to reduce recovery work done when the input\n// doesn't match the grammar at all.\n// Environment variable used to control console output\n\n\nconst verbose = typeof process != \"undefined\" && /\\bparse\\b/.test(process.env.LOG);\nlet stackIDs = null;\nvar Safety;\n\n(function (Safety) {\n  Safety[Safety[\"Margin\"] = 25] = \"Margin\";\n})(Safety || (Safety = {}));\n\nfunction cutAt(tree, pos, side) {\n  let cursor = tree.fullCursor();\n  cursor.moveTo(pos);\n\n  for (;;) {\n    if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos))) for (;;) {\n      if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError) return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 25\n      /* Margin */\n      )) : Math.min(tree.length, Math.max(cursor.from + 1, pos + 25\n      /* Margin */\n      ));\n      if (side < 0 ? cursor.prevSibling() : cursor.nextSibling()) break;\n      if (!cursor.parent()) return side < 0 ? 0 : tree.length;\n    }\n  }\n}\n\nclass FragmentCursor {\n  constructor(fragments, nodeSet) {\n    this.fragments = fragments;\n    this.nodeSet = nodeSet;\n    this.i = 0;\n    this.fragment = null;\n    this.safeFrom = -1;\n    this.safeTo = -1;\n    this.trees = [];\n    this.start = [];\n    this.index = [];\n    this.nextFragment();\n  }\n\n  nextFragment() {\n    let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];\n\n    if (fr) {\n      this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;\n      this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;\n\n      while (this.trees.length) {\n        this.trees.pop();\n        this.start.pop();\n        this.index.pop();\n      }\n\n      this.trees.push(fr.tree);\n      this.start.push(-fr.offset);\n      this.index.push(0);\n      this.nextStart = this.safeFrom;\n    } else {\n      this.nextStart = 1e9;\n    }\n  } // `pos` must be >= any previously given `pos` for this cursor\n\n\n  nodeAt(pos) {\n    if (pos < this.nextStart) return null;\n\n    while (this.fragment && this.safeTo <= pos) this.nextFragment();\n\n    if (!this.fragment) return null;\n\n    for (;;) {\n      let last = this.trees.length - 1;\n\n      if (last < 0) {\n        // End of tree\n        this.nextFragment();\n        return null;\n      }\n\n      let top = this.trees[last],\n          index = this.index[last];\n\n      if (index == top.children.length) {\n        this.trees.pop();\n        this.start.pop();\n        this.index.pop();\n        continue;\n      }\n\n      let next = top.children[index];\n      let start = this.start[last] + top.positions[index];\n\n      if (start > pos) {\n        this.nextStart = start;\n        return null;\n      }\n\n      if (next instanceof Tree) {\n        if (start == pos) {\n          if (start < this.safeFrom) return null;\n          let end = start + next.length;\n\n          if (end <= this.safeTo) {\n            let lookAhead = next.prop(NodeProp.lookAhead);\n            if (!lookAhead || end + lookAhead < this.fragment.to) return next;\n          }\n        }\n\n        this.index[last]++;\n\n        if (start + next.length >= Math.max(this.safeFrom, pos)) {\n          // Enter this node\n          this.trees.push(next);\n          this.start.push(start);\n          this.index.push(0);\n        }\n      } else {\n        this.index[last]++;\n        this.nextStart = start + next.length;\n      }\n    }\n  }\n\n}\n\nclass TokenCache {\n  constructor(parser, stream) {\n    this.stream = stream;\n    this.tokens = [];\n    this.mainToken = null;\n    this.actions = [];\n    this.tokens = parser.tokenizers.map(_ => new CachedToken());\n  }\n\n  getActions(stack) {\n    let actionIndex = 0;\n    let main = null;\n    let {\n      parser\n    } = stack.p,\n        {\n      tokenizers\n    } = parser;\n    let mask = parser.stateSlot(stack.state, 3\n    /* TokenizerMask */\n    );\n    let context = stack.curContext ? stack.curContext.hash : 0;\n    let lookAhead = 0;\n\n    for (let i = 0; i < tokenizers.length; i++) {\n      if ((1 << i & mask) == 0) continue;\n      let tokenizer = tokenizers[i],\n          token = this.tokens[i];\n      if (main && !tokenizer.fallback) continue;\n\n      if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {\n        this.updateCachedToken(token, tokenizer, stack);\n        token.mask = mask;\n        token.context = context;\n      }\n\n      if (token.lookAhead > token.end + 25\n      /* Margin */\n      ) lookAhead = Math.max(token.lookAhead, lookAhead);\n\n      if (token.value != 0\n      /* Err */\n      ) {\n        let startIndex = actionIndex;\n        if (token.extended > -1) actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);\n        actionIndex = this.addActions(stack, token.value, token.end, actionIndex);\n\n        if (!tokenizer.extend) {\n          main = token;\n          if (actionIndex > startIndex) break;\n        }\n      }\n    }\n\n    while (this.actions.length > actionIndex) this.actions.pop();\n\n    if (lookAhead) stack.setLookAhead(lookAhead);\n\n    if (!main && stack.pos == this.stream.end) {\n      main = new CachedToken();\n      main.value = stack.p.parser.eofTerm;\n      main.start = main.end = stack.pos;\n      actionIndex = this.addActions(stack, main.value, main.end, actionIndex);\n    }\n\n    this.mainToken = main;\n    return this.actions;\n  }\n\n  getMainToken(stack) {\n    if (this.mainToken) return this.mainToken;\n    let main = new CachedToken(),\n        {\n      pos,\n      p\n    } = stack;\n    main.start = pos;\n    main.end = Math.min(pos + 1, p.stream.end);\n    main.value = pos == p.stream.end ? p.parser.eofTerm : 0\n    /* Err */\n    ;\n    return main;\n  }\n\n  updateCachedToken(token, tokenizer, stack) {\n    tokenizer.token(this.stream.reset(stack.pos, token), stack);\n\n    if (token.value > -1) {\n      let {\n        parser\n      } = stack.p;\n\n      for (let i = 0; i < parser.specialized.length; i++) if (parser.specialized[i] == token.value) {\n        let result = parser.specializers[i](this.stream.read(token.start, token.end), stack);\n\n        if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {\n          if ((result & 1) == 0\n          /* Specialize */\n          ) token.value = result >> 1;else token.extended = result >> 1;\n          break;\n        }\n      }\n    } else {\n      token.value = 0\n      /* Err */\n      ;\n      token.end = Math.min(stack.p.stream.end, stack.pos + 1);\n    }\n  }\n\n  putAction(action, token, end, index) {\n    // Don't add duplicate actions\n    for (let i = 0; i < index; i += 3) if (this.actions[i] == action) return index;\n\n    this.actions[index++] = action;\n    this.actions[index++] = token;\n    this.actions[index++] = end;\n    return index;\n  }\n\n  addActions(stack, token, end, index) {\n    let {\n      state\n    } = stack,\n        {\n      parser\n    } = stack.p,\n        {\n      data\n    } = parser;\n\n    for (let set = 0; set < 2; set++) {\n      for (let i = parser.stateSlot(state, set ? 2\n      /* Skip */\n      : 1\n      /* Actions */\n      );; i += 3) {\n        if (data[i] == 65535\n        /* End */\n        ) {\n          if (data[i + 1] == 1\n          /* Next */\n          ) {\n            i = pair(data, i + 2);\n          } else {\n            if (index == 0 && data[i + 1] == 2\n            /* Other */\n            ) index = this.putAction(pair(data, i + 2), token, end, index);\n            break;\n          }\n        }\n\n        if (data[i] == token) index = this.putAction(pair(data, i + 1), token, end, index);\n      }\n    }\n\n    return index;\n  }\n\n}\n\nvar Rec;\n\n(function (Rec) {\n  Rec[Rec[\"Distance\"] = 5] = \"Distance\";\n  Rec[Rec[\"MaxRemainingPerStep\"] = 3] = \"MaxRemainingPerStep\"; // When two stacks have been running independently long enough to\n  // add this many elements to their buffers, prune one.\n\n  Rec[Rec[\"MinBufferLengthPrune\"] = 500] = \"MinBufferLengthPrune\";\n  Rec[Rec[\"ForceReduceLimit\"] = 10] = \"ForceReduceLimit\"; // Once a stack reaches this depth (in .stack.length) force-reduce\n  // it back to CutTo to avoid creating trees that overflow the stack\n  // on recursive traversal.\n\n  Rec[Rec[\"CutDepth\"] = 15000] = \"CutDepth\";\n  Rec[Rec[\"CutTo\"] = 9000] = \"CutTo\";\n})(Rec || (Rec = {}));\n\nclass Parse {\n  constructor(parser, input, fragments, ranges) {\n    this.parser = parser;\n    this.input = input;\n    this.ranges = ranges;\n    this.recovering = 0;\n    this.nextStackID = 0x2654; // â™”, â™•, â™–, â™—, â™˜, â™™, â™ , â™¡, â™¢, â™£, â™¤, â™¥, â™¦, â™§\n\n    this.minStackPos = 0;\n    this.reused = [];\n    this.stoppedAt = null;\n    this.stream = new InputStream(input, ranges);\n    this.tokens = new TokenCache(parser, this.stream);\n    this.topTerm = parser.top[1];\n    let {\n      from\n    } = ranges[0];\n    this.stacks = [Stack.start(this, parser.top[0], from)];\n    this.fragments = fragments.length && this.stream.end - from > parser.bufferLength * 4 ? new FragmentCursor(fragments, parser.nodeSet) : null;\n  }\n\n  get parsedPos() {\n    return this.minStackPos;\n  } // Move the parser forward. This will process all parse stacks at\n  // `this.pos` and try to advance them to a further position. If no\n  // stack for such a position is found, it'll start error-recovery.\n  //\n  // When the parse is finished, this will return a syntax tree. When\n  // not, it returns `null`.\n\n\n  advance() {\n    let stacks = this.stacks,\n        pos = this.minStackPos; // This will hold stacks beyond `pos`.\n\n    let newStacks = this.stacks = [];\n    let stopped, stoppedTokens; // Keep advancing any stacks at `pos` until they either move\n    // forward or can't be advanced. Gather stacks that can't be\n    // advanced further in `stopped`.\n\n    for (let i = 0; i < stacks.length; i++) {\n      let stack = stacks[i];\n\n      for (;;) {\n        this.tokens.mainToken = null;\n\n        if (stack.pos > pos) {\n          newStacks.push(stack);\n        } else if (this.advanceStack(stack, newStacks, stacks)) {\n          continue;\n        } else {\n          if (!stopped) {\n            stopped = [];\n            stoppedTokens = [];\n          }\n\n          stopped.push(stack);\n          let tok = this.tokens.getMainToken(stack);\n          stoppedTokens.push(tok.value, tok.end);\n        }\n\n        break;\n      }\n    }\n\n    if (!newStacks.length) {\n      let finished = stopped && findFinished(stopped);\n      if (finished) return this.stackToTree(finished);\n\n      if (this.parser.strict) {\n        if (verbose && stopped) console.log(\"Stuck with token \" + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : \"none\"));\n        throw new SyntaxError(\"No parse at \" + pos);\n      }\n\n      if (!this.recovering) this.recovering = 5\n      /* Distance */\n      ;\n    }\n\n    if (this.recovering && stopped) {\n      let finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0] : this.runRecovery(stopped, stoppedTokens, newStacks);\n      if (finished) return this.stackToTree(finished.forceAll());\n    }\n\n    if (this.recovering) {\n      let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3\n      /* MaxRemainingPerStep */\n      ;\n\n      if (newStacks.length > maxRemaining) {\n        newStacks.sort((a, b) => b.score - a.score);\n\n        while (newStacks.length > maxRemaining) newStacks.pop();\n      }\n\n      if (newStacks.some(s => s.reducePos > pos)) this.recovering--;\n    } else if (newStacks.length > 1) {\n      // Prune stacks that are in the same state, or that have been\n      // running without splitting for a while, to avoid getting stuck\n      // with multiple successful stacks running endlessly on.\n      outer: for (let i = 0; i < newStacks.length - 1; i++) {\n        let stack = newStacks[i];\n\n        for (let j = i + 1; j < newStacks.length; j++) {\n          let other = newStacks[j];\n\n          if (stack.sameState(other) || stack.buffer.length > 500\n          /* MinBufferLengthPrune */\n          && other.buffer.length > 500\n          /* MinBufferLengthPrune */\n          ) {\n            if ((stack.score - other.score || stack.buffer.length - other.buffer.length) > 0) {\n              newStacks.splice(j--, 1);\n            } else {\n              newStacks.splice(i--, 1);\n              continue outer;\n            }\n          }\n        }\n      }\n    }\n\n    this.minStackPos = newStacks[0].pos;\n\n    for (let i = 1; i < newStacks.length; i++) if (newStacks[i].pos < this.minStackPos) this.minStackPos = newStacks[i].pos;\n\n    return null;\n  }\n\n  stopAt(pos) {\n    if (this.stoppedAt != null && this.stoppedAt < pos) throw new RangeError(\"Can't move stoppedAt forward\");\n    this.stoppedAt = pos;\n  } // Returns an updated version of the given stack, or null if the\n  // stack can't advance normally. When `split` and `stacks` are\n  // given, stacks split off by ambiguous operations will be pushed to\n  // `split`, or added to `stacks` if they move `pos` forward.\n\n\n  advanceStack(stack, stacks, split) {\n    let start = stack.pos,\n        {\n      parser\n    } = this;\n    let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n    if (this.stoppedAt != null && start > this.stoppedAt) return stack.forceReduce() ? stack : null;\n\n    if (this.fragments) {\n      let strictCx = stack.curContext && stack.curContext.tracker.strict,\n          cxHash = strictCx ? stack.curContext.hash : 0;\n\n      for (let cached = this.fragments.nodeAt(start); cached;) {\n        let match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;\n\n        if (match > -1 && cached.length && (!strictCx || (cached.prop(NodeProp.contextHash) || 0) == cxHash)) {\n          stack.useNode(cached, match);\n          if (verbose) console.log(base + this.stackID(stack) + ` (via reuse of ${parser.getName(cached.type.id)})`);\n          return true;\n        }\n\n        if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0) break;\n        let inner = cached.children[0];\n        if (inner instanceof Tree && cached.positions[0] == 0) cached = inner;else break;\n      }\n    }\n\n    let defaultReduce = parser.stateSlot(stack.state, 4\n    /* DefaultReduce */\n    );\n\n    if (defaultReduce > 0) {\n      stack.reduce(defaultReduce);\n      if (verbose) console.log(base + this.stackID(stack) + ` (via always-reduce ${parser.getName(defaultReduce & 65535\n      /* ValueMask */\n      )})`);\n      return true;\n    }\n\n    if (stack.stack.length >= 15000\n    /* CutDepth */\n    ) {\n      while (stack.stack.length > 9000\n      /* CutTo */\n      && stack.forceReduce()) {}\n    }\n\n    let actions = this.tokens.getActions(stack);\n\n    for (let i = 0; i < actions.length;) {\n      let action = actions[i++],\n          term = actions[i++],\n          end = actions[i++];\n      let last = i == actions.length || !split;\n      let localStack = last ? stack : stack.split();\n      localStack.apply(action, term, end);\n      if (verbose) console.log(base + this.stackID(localStack) + ` (via ${(action & 65536\n      /* ReduceFlag */\n      ) == 0 ? \"shift\" : `reduce of ${parser.getName(action & 65535\n      /* ValueMask */\n      )}`} for ${parser.getName(term)} @ ${start}${localStack == stack ? \"\" : \", split\"})`);\n      if (last) return true;else if (localStack.pos > start) stacks.push(localStack);else split.push(localStack);\n    }\n\n    return false;\n  } // Advance a given stack forward as far as it will go. Returns the\n  // (possibly updated) stack if it got stuck, or null if it moved\n  // forward and was given to `pushStackDedup`.\n\n\n  advanceFully(stack, newStacks) {\n    let pos = stack.pos;\n\n    for (;;) {\n      if (!this.advanceStack(stack, null, null)) return false;\n\n      if (stack.pos > pos) {\n        pushStackDedup(stack, newStacks);\n        return true;\n      }\n    }\n  }\n\n  runRecovery(stacks, tokens, newStacks) {\n    let finished = null,\n        restarted = false;\n\n    for (let i = 0; i < stacks.length; i++) {\n      let stack = stacks[i],\n          token = tokens[i << 1],\n          tokenEnd = tokens[(i << 1) + 1];\n      let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n\n      if (stack.deadEnd) {\n        if (restarted) continue;\n        restarted = true;\n        stack.restart();\n        if (verbose) console.log(base + this.stackID(stack) + \" (restarted)\");\n        let done = this.advanceFully(stack, newStacks);\n        if (done) continue;\n      }\n\n      let force = stack.split(),\n          forceBase = base;\n\n      for (let j = 0; force.forceReduce() && j < 10\n      /* ForceReduceLimit */\n      ; j++) {\n        if (verbose) console.log(forceBase + this.stackID(force) + \" (via force-reduce)\");\n        let done = this.advanceFully(force, newStacks);\n        if (done) break;\n        if (verbose) forceBase = this.stackID(force) + \" -> \";\n      }\n\n      for (let insert of stack.recoverByInsert(token)) {\n        if (verbose) console.log(base + this.stackID(insert) + \" (via recover-insert)\");\n        this.advanceFully(insert, newStacks);\n      }\n\n      if (this.stream.end > stack.pos) {\n        if (tokenEnd == stack.pos) {\n          tokenEnd++;\n          token = 0\n          /* Err */\n          ;\n        }\n\n        stack.recoverByDelete(token, tokenEnd);\n        if (verbose) console.log(base + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);\n        pushStackDedup(stack, newStacks);\n      } else if (!finished || finished.score < stack.score) {\n        finished = stack;\n      }\n    }\n\n    return finished;\n  } // Convert the stack's buffer to a syntax tree.\n\n\n  stackToTree(stack) {\n    stack.close();\n    return Tree.build({\n      buffer: StackBufferCursor.create(stack),\n      nodeSet: this.parser.nodeSet,\n      topID: this.topTerm,\n      maxBufferLength: this.parser.bufferLength,\n      reused: this.reused,\n      start: this.ranges[0].from,\n      length: stack.pos - this.ranges[0].from,\n      minRepeatType: this.parser.minRepeatTerm\n    });\n  }\n\n  stackID(stack) {\n    let id = (stackIDs || (stackIDs = new WeakMap())).get(stack);\n    if (!id) stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));\n    return id + stack;\n  }\n\n}\n\nfunction pushStackDedup(stack, newStacks) {\n  for (let i = 0; i < newStacks.length; i++) {\n    let other = newStacks[i];\n\n    if (other.pos == stack.pos && other.sameState(stack)) {\n      if (newStacks[i].score < stack.score) newStacks[i] = stack;\n      return;\n    }\n  }\n\n  newStacks.push(stack);\n}\n\nclass Dialect {\n  constructor(source, flags, disabled) {\n    this.source = source;\n    this.flags = flags;\n    this.disabled = disabled;\n  }\n\n  allows(term) {\n    return !this.disabled || this.disabled[term] == 0;\n  }\n\n}\n\nconst id = x => x; /// Context trackers are used to track stateful context (such as\n/// indentation in the Python grammar, or parent elements in the XML\n/// grammar) needed by external tokenizers. You declare them in a\n/// grammar file as `@context exportName from \"module\"`.\n///\n/// Context values should be immutable, and can be updated (replaced)\n/// on shift or reduce actions.\n///\n/// The export used in a `@context` declaration should be of this\n/// type.\n\n\nclass ContextTracker {\n  /// Define a context tracker.\n  constructor(spec) {\n    this.start = spec.start;\n    this.shift = spec.shift || id;\n    this.reduce = spec.reduce || id;\n    this.reuse = spec.reuse || id;\n\n    this.hash = spec.hash || (() => 0);\n\n    this.strict = spec.strict !== false;\n  }\n\n} /// A parser holds the parse tables for a given grammar, as generated\n/// by `lezer-generator`.\n\n\nclass LRParser extends Parser {\n  /// @internal\n  constructor(spec) {\n    super(); /// @internal\n\n    this.wrappers = [];\n    if (spec.version != 13\n    /* Version */\n    ) throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${13\n    /* Version */\n    })`);\n    let nodeNames = spec.nodeNames.split(\" \");\n    this.minRepeatTerm = nodeNames.length;\n\n    for (let i = 0; i < spec.repeatNodeCount; i++) nodeNames.push(\"\");\n\n    let topTerms = Object.keys(spec.topRules).map(r => spec.topRules[r][1]);\n    let nodeProps = [];\n\n    for (let i = 0; i < nodeNames.length; i++) nodeProps.push([]);\n\n    function setProp(nodeID, prop, value) {\n      nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);\n    }\n\n    if (spec.nodeProps) for (let propSpec of spec.nodeProps) {\n      let prop = propSpec[0];\n\n      for (let i = 1; i < propSpec.length;) {\n        let next = propSpec[i++];\n\n        if (next >= 0) {\n          setProp(next, prop, propSpec[i++]);\n        } else {\n          let value = propSpec[i + -next];\n\n          for (let j = -next; j > 0; j--) setProp(propSpec[i++], prop, value);\n\n          i++;\n        }\n      }\n    }\n    this.nodeSet = new NodeSet(nodeNames.map((name, i) => NodeType.define({\n      name: i >= this.minRepeatTerm ? undefined : name,\n      id: i,\n      props: nodeProps[i],\n      top: topTerms.indexOf(i) > -1,\n      error: i == 0,\n      skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1\n    })));\n    this.strict = false;\n    this.bufferLength = DefaultBufferLength;\n    let tokenArray = decodeArray(spec.tokenData);\n    this.context = spec.context;\n    this.specialized = new Uint16Array(spec.specialized ? spec.specialized.length : 0);\n    this.specializers = [];\n    if (spec.specialized) for (let i = 0; i < spec.specialized.length; i++) {\n      this.specialized[i] = spec.specialized[i].term;\n      this.specializers[i] = spec.specialized[i].get;\n    }\n    this.states = decodeArray(spec.states, Uint32Array);\n    this.data = decodeArray(spec.stateData);\n    this.goto = decodeArray(spec.goto);\n    this.maxTerm = spec.maxTerm;\n    this.tokenizers = spec.tokenizers.map(value => typeof value == \"number\" ? new TokenGroup(tokenArray, value) : value);\n    this.topRules = spec.topRules;\n    this.dialects = spec.dialects || {};\n    this.dynamicPrecedences = spec.dynamicPrecedences || null;\n    this.tokenPrecTable = spec.tokenPrec;\n    this.termNames = spec.termNames || null;\n    this.maxNode = this.nodeSet.types.length - 1;\n    this.dialect = this.parseDialect();\n    this.top = this.topRules[Object.keys(this.topRules)[0]];\n  }\n\n  createParse(input, fragments, ranges) {\n    let parse = new Parse(this, input, fragments, ranges);\n\n    for (let w of this.wrappers) parse = w(parse, input, fragments, ranges);\n\n    return parse;\n  } /// Get a goto table entry @internal\n\n\n  getGoto(state, term) {\n    let loose = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let table = this.goto;\n    if (term >= table[0]) return -1;\n\n    for (let pos = table[term + 1];;) {\n      let groupTag = table[pos++],\n          last = groupTag & 1;\n      let target = table[pos++];\n      if (last && loose) return target;\n\n      for (let end = pos + (groupTag >> 1); pos < end; pos++) if (table[pos] == state) return target;\n\n      if (last) return -1;\n    }\n  } /// Check if this state has an action for a given terminal @internal\n\n\n  hasAction(state, terminal) {\n    let data = this.data;\n\n    for (let set = 0; set < 2; set++) {\n      for (let i = this.stateSlot(state, set ? 2\n      /* Skip */\n      : 1\n      /* Actions */\n      ), next;; i += 3) {\n        if ((next = data[i]) == 65535\n        /* End */\n        ) {\n          if (data[i + 1] == 1\n          /* Next */\n          ) next = data[i = pair(data, i + 2)];else if (data[i + 1] == 2\n          /* Other */\n          ) return pair(data, i + 2);else break;\n        }\n\n        if (next == terminal || next == 0\n        /* Err */\n        ) return pair(data, i + 1);\n      }\n    }\n\n    return 0;\n  } /// @internal\n\n\n  stateSlot(state, slot) {\n    return this.states[state * 6\n    /* Size */\n    + slot];\n  } /// @internal\n\n\n  stateFlag(state, flag) {\n    return (this.stateSlot(state, 0\n    /* Flags */\n    ) & flag) > 0;\n  } /// @internal\n\n\n  validAction(state, action) {\n    if (action == this.stateSlot(state, 4\n    /* DefaultReduce */\n    )) return true;\n\n    for (let i = this.stateSlot(state, 1\n    /* Actions */\n    );; i += 3) {\n      if (this.data[i] == 65535\n      /* End */\n      ) {\n        if (this.data[i + 1] == 1\n        /* Next */\n        ) i = pair(this.data, i + 2);else return false;\n      }\n\n      if (action == pair(this.data, i + 1)) return true;\n    }\n  } /// Get the states that can follow this one through shift actions or\n  /// goto jumps. @internal\n\n\n  nextStates(state) {\n    let result = [];\n\n    for (let i = this.stateSlot(state, 1\n    /* Actions */\n    );; i += 3) {\n      if (this.data[i] == 65535\n      /* End */\n      ) {\n        if (this.data[i + 1] == 1\n        /* Next */\n        ) i = pair(this.data, i + 2);else break;\n      }\n\n      if ((this.data[i + 2] & 65536\n      /* ReduceFlag */\n      >> 16) == 0) {\n        let value = this.data[i + 1];\n        if (!result.some((v, i) => i & 1 && v == value)) result.push(this.data[i], value);\n      }\n    }\n\n    return result;\n  } /// @internal\n\n\n  overrides(token, prev) {\n    let iPrev = findOffset(this.data, this.tokenPrecTable, prev);\n    return iPrev < 0 || findOffset(this.data, this.tokenPrecTable, token) < iPrev;\n  } /// Configure the parser. Returns a new parser instance that has the\n  /// given settings modified. Settings not provided in `config` are\n  /// kept from the original parser.\n\n\n  configure(config) {\n    // Hideous reflection-based kludge to make it easy to create a\n    // slightly modified copy of a parser.\n    let copy = Object.assign(Object.create(LRParser.prototype), this);\n    if (config.props) copy.nodeSet = this.nodeSet.extend(...config.props);\n\n    if (config.top) {\n      let info = this.topRules[config.top];\n      if (!info) throw new RangeError(`Invalid top rule name ${config.top}`);\n      copy.top = info;\n    }\n\n    if (config.tokenizers) copy.tokenizers = this.tokenizers.map(t => {\n      let found = config.tokenizers.find(r => r.from == t);\n      return found ? found.to : t;\n    });\n    if (config.contextTracker) copy.context = config.contextTracker;\n    if (config.dialect) copy.dialect = this.parseDialect(config.dialect);\n    if (config.strict != null) copy.strict = config.strict;\n    if (config.wrap) copy.wrappers = copy.wrappers.concat(config.wrap);\n    if (config.bufferLength != null) copy.bufferLength = config.bufferLength;\n    return copy;\n  } /// Returns the name associated with a given term. This will only\n  /// work for all terms when the parser was generated with the\n  /// `--names` option. By default, only the names of tagged terms are\n  /// stored.\n\n\n  getName(term) {\n    return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);\n  } /// The eof term id is always allocated directly after the node\n  /// types. @internal\n\n\n  get eofTerm() {\n    return this.maxNode + 1;\n  } /// The type of top node produced by the parser.\n\n\n  get topNode() {\n    return this.nodeSet.types[this.top[1]];\n  } /// @internal\n\n\n  dynamicPrecedence(term) {\n    let prec = this.dynamicPrecedences;\n    return prec == null ? 0 : prec[term] || 0;\n  } /// @internal\n\n\n  parseDialect(dialect) {\n    let values = Object.keys(this.dialects),\n        flags = values.map(() => false);\n    if (dialect) for (let part of dialect.split(\" \")) {\n      let id = values.indexOf(part);\n      if (id >= 0) flags[id] = true;\n    }\n    let disabled = null;\n\n    for (let i = 0; i < values.length; i++) if (!flags[i]) {\n      for (let j = this.dialects[values[i]], id; (id = this.data[j++]) != 65535\n      /* End */\n      ;) (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id] = 1;\n    }\n\n    return new Dialect(dialect, flags, disabled);\n  } /// (used by the output of the parser generator) @internal\n\n\n  static deserialize(spec) {\n    return new LRParser(spec);\n  }\n\n}\n\nfunction pair(data, off) {\n  return data[off] | data[off + 1] << 16;\n}\n\nfunction findOffset(data, start, term) {\n  for (let i = start, next; (next = data[i]) != 65535\n  /* End */\n  ; i++) if (next == term) return i - start;\n\n  return -1;\n}\n\nfunction findFinished(stacks) {\n  let best = null;\n\n  for (let stack of stacks) {\n    let stopped = stack.p.stoppedAt;\n    if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) && stack.p.parser.stateFlag(stack.state, 2\n    /* Accepting */\n    ) && (!best || best.score < stack.score)) best = stack;\n  }\n\n  return best;\n}\n\nexport { ContextTracker, ExternalTokenizer, InputStream, LRParser, Stack };","map":{"version":3,"sources":["C:/Users/pc/Desktop/live-code-editor/client/node_modules/@lezer/lr/dist/index.js"],"names":["Parser","NodeSet","NodeType","DefaultBufferLength","NodeProp","Tree","Stack","constructor","p","stack","state","reducePos","pos","score","buffer","bufferBase","curContext","lookAhead","parent","toString","filter","_","i","concat","start","cx","parser","context","StackContext","pushState","push","length","reduce","action","depth","type","dPrec","dynamicPrecedence","minRepeatTerm","storeNode","getGoto","reduceContext","base","count","stateFlag","baseStateID","pop","term","end","size","isReduce","cur","top","index","shift","next","nextEnd","nextState","maxNode","shiftContext","apply","useNode","value","reused","updateContext","tracker","reuse","stream","reset","split","off","slice","recoverByDelete","isNode","canShift","sim","SimulatedStack","stateSlot","hasAction","recoverByInsert","nextStates","best","s","some","v","result","forceReduce","validAction","target","forceAll","deadEnd","data","restart","sameState","other","dialectEnabled","dialectID","dialect","flags","emitContext","last","hash","emitLookAhead","newCx","setLookAhead","close","strict","Recover","goto","StackBufferCursor","maybeNext","create","id","fork","CachedToken","extended","mask","nullToken","InputStream","input","ranges","chunk","chunkOff","chunk2","chunk2Pos","token","rangeIndex","chunkPos","from","range","to","readNext","resolveOffset","offset","assoc","peek","idx","charCodeAt","resolved","acceptToken","endOffset","RangeError","getChunk","nextChunk","advance","n","setDone","read","r","Math","max","min","TokenGroup","readToken","prototype","contextual","fallback","extend","ExternalTokenizer","options","group","groupMask","scan","accEnd","allows","overrides","low","high","mid","decodeArray","Type","Uint16Array","array","out","stop","digit","verbose","process","test","env","LOG","stackIDs","Safety","cutAt","tree","side","cursor","fullCursor","moveTo","childBefore","childAfter","isError","prevSibling","nextSibling","FragmentCursor","fragments","nodeSet","fragment","safeFrom","safeTo","trees","nextFragment","fr","openStart","openEnd","nextStart","nodeAt","children","positions","prop","TokenCache","tokens","mainToken","actions","tokenizers","map","getActions","actionIndex","main","tokenizer","updateCachedToken","startIndex","addActions","eofTerm","getMainToken","specialized","specializers","putAction","set","pair","Rec","Parse","recovering","nextStackID","minStackPos","stoppedAt","topTerm","stacks","bufferLength","parsedPos","newStacks","stopped","stoppedTokens","advanceStack","tok","finished","findFinished","stackToTree","console","log","getName","SyntaxError","runRecovery","maxRemaining","sort","a","b","outer","j","splice","stopAt","stackID","strictCx","cxHash","cached","match","types","contextHash","inner","defaultReduce","localStack","advanceFully","pushStackDedup","restarted","tokenEnd","done","force","forceBase","insert","build","topID","maxBufferLength","minRepeatType","WeakMap","get","String","fromCodePoint","Dialect","source","disabled","x","ContextTracker","spec","LRParser","wrappers","version","nodeNames","repeatNodeCount","topTerms","Object","keys","topRules","nodeProps","setProp","nodeID","deserialize","propSpec","name","define","undefined","props","indexOf","error","skipped","skippedNodes","tokenArray","tokenData","states","Uint32Array","stateData","maxTerm","dialects","dynamicPrecedences","tokenPrecTable","tokenPrec","termNames","parseDialect","createParse","parse","w","loose","table","groupTag","terminal","slot","flag","prev","iPrev","findOffset","configure","config","copy","assign","info","t","found","find","contextTracker","wrap","topNode","prec","values","part","Uint8Array"],"mappings":"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","sourcesContent":["import { Parser, NodeSet, NodeType, DefaultBufferLength, NodeProp, Tree } from '@lezer/common';\n\n/// A parse stack. These are used internally by the parser to track\n/// parsing progress. They also provide some properties and methods\n/// that external code such as a tokenizer can use to get information\n/// about the parse state.\nclass Stack {\n    /// @internal\n    constructor(\n    /// The parse that this stack is part of @internal\n    p, \n    /// Holds state, input pos, buffer index triplets for all but the\n    /// top state @internal\n    stack, \n    /// The current parse state @internal\n    state, \n    // The position at which the next reduce should take place. This\n    // can be less than `this.pos` when skipped expressions have been\n    // added to the stack (which should be moved outside of the next\n    // reduction)\n    /// @internal\n    reducePos, \n    /// The input position up to which this stack has parsed.\n    pos, \n    /// The dynamic score of the stack, including dynamic precedence\n    /// and error-recovery penalties\n    /// @internal\n    score, \n    // The output buffer. Holds (type, start, end, size) quads\n    // representing nodes created by the parser, where `size` is\n    // amount of buffer array entries covered by this node.\n    /// @internal\n    buffer, \n    // The base offset of the buffer. When stacks are split, the split\n    // instance shared the buffer history with its parent up to\n    // `bufferBase`, which is the absolute offset (including the\n    // offset of previous splits) into the buffer at which this stack\n    // starts writing.\n    /// @internal\n    bufferBase, \n    /// @internal\n    curContext, \n    /// @internal\n    lookAhead = 0, \n    // A parent stack from which this was split off, if any. This is\n    // set up so that it always points to a stack that has some\n    // additional buffer content, never to a stack with an equal\n    // `bufferBase`.\n    /// @internal\n    parent) {\n        this.p = p;\n        this.stack = stack;\n        this.state = state;\n        this.reducePos = reducePos;\n        this.pos = pos;\n        this.score = score;\n        this.buffer = buffer;\n        this.bufferBase = bufferBase;\n        this.curContext = curContext;\n        this.lookAhead = lookAhead;\n        this.parent = parent;\n    }\n    /// @internal\n    toString() {\n        return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? \"!\" + this.score : \"\"}`;\n    }\n    // Start an empty stack\n    /// @internal\n    static start(p, state, pos = 0) {\n        let cx = p.parser.context;\n        return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, 0, null);\n    }\n    /// The stack's current [context](#lr.ContextTracker) value, if\n    /// any. Its type will depend on the context tracker's type\n    /// parameter, or it will be `null` if there is no context\n    /// tracker.\n    get context() { return this.curContext ? this.curContext.context : null; }\n    // Push a state onto the stack, tracking its start position as well\n    // as the buffer base at that point.\n    /// @internal\n    pushState(state, start) {\n        this.stack.push(this.state, start, this.bufferBase + this.buffer.length);\n        this.state = state;\n    }\n    // Apply a reduce action\n    /// @internal\n    reduce(action) {\n        let depth = action >> 19 /* ReduceDepthShift */, type = action & 65535 /* ValueMask */;\n        let { parser } = this.p;\n        let dPrec = parser.dynamicPrecedence(type);\n        if (dPrec)\n            this.score += dPrec;\n        if (depth == 0) {\n            // Zero-depth reductions are a special caseâ€”they add stuff to\n            // the stack without popping anything off.\n            if (type < parser.minRepeatTerm)\n                this.storeNode(type, this.reducePos, this.reducePos, 4, true);\n            this.pushState(parser.getGoto(this.state, type, true), this.reducePos);\n            this.reduceContext(type, this.reducePos);\n            return;\n        }\n        // Find the base index into `this.stack`, content after which will\n        // be dropped. Note that with `StayFlag` reductions we need to\n        // consume two extra frames (the dummy parent node for the skipped\n        // expression and the state that we'll be staying in, which should\n        // be moved to `this.state`).\n        let base = this.stack.length - ((depth - 1) * 3) - (action & 262144 /* StayFlag */ ? 6 : 0);\n        let start = this.stack[base - 2];\n        let bufferBase = this.stack[base - 1], count = this.bufferBase + this.buffer.length - bufferBase;\n        // Store normal terms or `R -> R R` repeat reductions\n        if (type < parser.minRepeatTerm || (action & 131072 /* RepeatFlag */)) {\n            let pos = parser.stateFlag(this.state, 1 /* Skipped */) ? this.pos : this.reducePos;\n            this.storeNode(type, start, pos, count + 4, true);\n        }\n        if (action & 262144 /* StayFlag */) {\n            this.state = this.stack[base];\n        }\n        else {\n            let baseStateID = this.stack[base - 3];\n            this.state = parser.getGoto(baseStateID, type, true);\n        }\n        while (this.stack.length > base)\n            this.stack.pop();\n        this.reduceContext(type, start);\n    }\n    // Shift a value into the buffer\n    /// @internal\n    storeNode(term, start, end, size = 4, isReduce = false) {\n        if (term == 0 /* Err */) { // Try to omit/merge adjacent error nodes\n            let cur = this, top = this.buffer.length;\n            if (top == 0 && cur.parent) {\n                top = cur.bufferBase - cur.parent.bufferBase;\n                cur = cur.parent;\n            }\n            if (top > 0 && cur.buffer[top - 4] == 0 /* Err */ && cur.buffer[top - 1] > -1) {\n                if (start == end)\n                    return;\n                if (cur.buffer[top - 2] >= start) {\n                    cur.buffer[top - 2] = end;\n                    return;\n                }\n            }\n        }\n        if (!isReduce || this.pos == end) { // Simple case, just append\n            this.buffer.push(term, start, end, size);\n        }\n        else { // There may be skipped nodes that have to be moved forward\n            let index = this.buffer.length;\n            if (index > 0 && this.buffer[index - 4] != 0 /* Err */)\n                while (index > 0 && this.buffer[index - 2] > end) {\n                    // Move this record forward\n                    this.buffer[index] = this.buffer[index - 4];\n                    this.buffer[index + 1] = this.buffer[index - 3];\n                    this.buffer[index + 2] = this.buffer[index - 2];\n                    this.buffer[index + 3] = this.buffer[index - 1];\n                    index -= 4;\n                    if (size > 4)\n                        size -= 4;\n                }\n            this.buffer[index] = term;\n            this.buffer[index + 1] = start;\n            this.buffer[index + 2] = end;\n            this.buffer[index + 3] = size;\n        }\n    }\n    // Apply a shift action\n    /// @internal\n    shift(action, next, nextEnd) {\n        let start = this.pos;\n        if (action & 131072 /* GotoFlag */) {\n            this.pushState(action & 65535 /* ValueMask */, this.pos);\n        }\n        else if ((action & 262144 /* StayFlag */) == 0) { // Regular shift\n            let nextState = action, { parser } = this.p;\n            if (nextEnd > this.pos || next <= parser.maxNode) {\n                this.pos = nextEnd;\n                if (!parser.stateFlag(nextState, 1 /* Skipped */))\n                    this.reducePos = nextEnd;\n            }\n            this.pushState(nextState, start);\n            this.shiftContext(next, start);\n            if (next <= parser.maxNode)\n                this.buffer.push(next, start, nextEnd, 4);\n        }\n        else { // Shift-and-stay, which means this is a skipped token\n            this.pos = nextEnd;\n            this.shiftContext(next, start);\n            if (next <= this.p.parser.maxNode)\n                this.buffer.push(next, start, nextEnd, 4);\n        }\n    }\n    // Apply an action\n    /// @internal\n    apply(action, next, nextEnd) {\n        if (action & 65536 /* ReduceFlag */)\n            this.reduce(action);\n        else\n            this.shift(action, next, nextEnd);\n    }\n    // Add a prebuilt (reused) node into the buffer.\n    /// @internal\n    useNode(value, next) {\n        let index = this.p.reused.length - 1;\n        if (index < 0 || this.p.reused[index] != value) {\n            this.p.reused.push(value);\n            index++;\n        }\n        let start = this.pos;\n        this.reducePos = this.pos = start + value.length;\n        this.pushState(next, start);\n        this.buffer.push(index, start, this.reducePos, -1 /* size == -1 means this is a reused value */);\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));\n    }\n    // Split the stack. Due to the buffer sharing and the fact\n    // that `this.stack` tends to stay quite shallow, this isn't very\n    // expensive.\n    /// @internal\n    split() {\n        let parent = this;\n        let off = parent.buffer.length;\n        // Because the top of the buffer (after this.pos) may be mutated\n        // to reorder reductions and skipped tokens, and shared buffers\n        // should be immutable, this copies any outstanding skipped tokens\n        // to the new buffer, and puts the base pointer before them.\n        while (off > 0 && parent.buffer[off - 2] > parent.reducePos)\n            off -= 4;\n        let buffer = parent.buffer.slice(off), base = parent.bufferBase + off;\n        // Make sure parent points to an actual parent with content, if there is such a parent.\n        while (parent && base == parent.bufferBase)\n            parent = parent.parent;\n        return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, this.lookAhead, parent);\n    }\n    // Try to recover from an error by 'deleting' (ignoring) one token.\n    /// @internal\n    recoverByDelete(next, nextEnd) {\n        let isNode = next <= this.p.parser.maxNode;\n        if (isNode)\n            this.storeNode(next, this.pos, nextEnd, 4);\n        this.storeNode(0 /* Err */, this.pos, nextEnd, isNode ? 8 : 4);\n        this.pos = this.reducePos = nextEnd;\n        this.score -= 190 /* Delete */;\n    }\n    /// Check if the given term would be able to be shifted (optionally\n    /// after some reductions) on this stack. This can be useful for\n    /// external tokenizers that want to make sure they only provide a\n    /// given token when it applies.\n    canShift(term) {\n        for (let sim = new SimulatedStack(this);;) {\n            let action = this.p.parser.stateSlot(sim.state, 4 /* DefaultReduce */) || this.p.parser.hasAction(sim.state, term);\n            if ((action & 65536 /* ReduceFlag */) == 0)\n                return true;\n            if (action == 0)\n                return false;\n            sim.reduce(action);\n        }\n    }\n    // Apply up to Recover.MaxNext recovery actions that conceptually\n    // inserts some missing token or rule.\n    /// @internal\n    recoverByInsert(next) {\n        if (this.stack.length >= 300 /* MaxInsertStackDepth */)\n            return [];\n        let nextStates = this.p.parser.nextStates(this.state);\n        if (nextStates.length > 4 /* MaxNext */ << 1 || this.stack.length >= 120 /* DampenInsertStackDepth */) {\n            let best = [];\n            for (let i = 0, s; i < nextStates.length; i += 2) {\n                if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next))\n                    best.push(nextStates[i], s);\n            }\n            if (this.stack.length < 120 /* DampenInsertStackDepth */)\n                for (let i = 0; best.length < 4 /* MaxNext */ << 1 && i < nextStates.length; i += 2) {\n                    let s = nextStates[i + 1];\n                    if (!best.some((v, i) => (i & 1) && v == s))\n                        best.push(nextStates[i], s);\n                }\n            nextStates = best;\n        }\n        let result = [];\n        for (let i = 0; i < nextStates.length && result.length < 4 /* MaxNext */; i += 2) {\n            let s = nextStates[i + 1];\n            if (s == this.state)\n                continue;\n            let stack = this.split();\n            stack.storeNode(0 /* Err */, stack.pos, stack.pos, 4, true);\n            stack.pushState(s, this.pos);\n            stack.shiftContext(nextStates[i], this.pos);\n            stack.score -= 200 /* Insert */;\n            result.push(stack);\n        }\n        return result;\n    }\n    // Force a reduce, if possible. Return false if that can't\n    // be done.\n    /// @internal\n    forceReduce() {\n        let reduce = this.p.parser.stateSlot(this.state, 5 /* ForcedReduce */);\n        if ((reduce & 65536 /* ReduceFlag */) == 0)\n            return false;\n        let { parser } = this.p;\n        if (!parser.validAction(this.state, reduce)) {\n            let depth = reduce >> 19 /* ReduceDepthShift */, term = reduce & 65535 /* ValueMask */;\n            let target = this.stack.length - depth * 3;\n            if (target < 0 || parser.getGoto(this.stack[target], term, false) < 0)\n                return false;\n            this.storeNode(0 /* Err */, this.reducePos, this.reducePos, 4, true);\n            this.score -= 100 /* Reduce */;\n        }\n        this.reduce(reduce);\n        return true;\n    }\n    /// @internal\n    forceAll() {\n        while (!this.p.parser.stateFlag(this.state, 2 /* Accepting */)) {\n            if (!this.forceReduce()) {\n                this.storeNode(0 /* Err */, this.pos, this.pos, 4, true);\n                break;\n            }\n        }\n        return this;\n    }\n    /// Check whether this state has no further actions (assumed to be a direct descendant of the\n    /// top state, since any other states must be able to continue\n    /// somehow). @internal\n    get deadEnd() {\n        if (this.stack.length != 3)\n            return false;\n        let { parser } = this.p;\n        return parser.data[parser.stateSlot(this.state, 1 /* Actions */)] == 65535 /* End */ &&\n            !parser.stateSlot(this.state, 4 /* DefaultReduce */);\n    }\n    /// Restart the stack (put it back in its start state). Only safe\n    /// when this.stack.length == 3 (state is directly below the top\n    /// state). @internal\n    restart() {\n        this.state = this.stack[0];\n        this.stack.length = 0;\n    }\n    /// @internal\n    sameState(other) {\n        if (this.state != other.state || this.stack.length != other.stack.length)\n            return false;\n        for (let i = 0; i < this.stack.length; i += 3)\n            if (this.stack[i] != other.stack[i])\n                return false;\n        return true;\n    }\n    /// Get the parser used by this stack.\n    get parser() { return this.p.parser; }\n    /// Test whether a given dialect (by numeric ID, as exported from\n    /// the terms file) is enabled.\n    dialectEnabled(dialectID) { return this.p.parser.dialect.flags[dialectID]; }\n    shiftContext(term, start) {\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));\n    }\n    reduceContext(term, start) {\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));\n    }\n    /// @internal\n    emitContext() {\n        let last = this.buffer.length - 1;\n        if (last < 0 || this.buffer[last] != -3)\n            this.buffer.push(this.curContext.hash, this.reducePos, this.reducePos, -3);\n    }\n    /// @internal\n    emitLookAhead() {\n        let last = this.buffer.length - 1;\n        if (last < 0 || this.buffer[last] != -4)\n            this.buffer.push(this.lookAhead, this.reducePos, this.reducePos, -4);\n    }\n    updateContext(context) {\n        if (context != this.curContext.context) {\n            let newCx = new StackContext(this.curContext.tracker, context);\n            if (newCx.hash != this.curContext.hash)\n                this.emitContext();\n            this.curContext = newCx;\n        }\n    }\n    /// @internal\n    setLookAhead(lookAhead) {\n        if (lookAhead > this.lookAhead) {\n            this.emitLookAhead();\n            this.lookAhead = lookAhead;\n        }\n    }\n    /// @internal\n    close() {\n        if (this.curContext && this.curContext.tracker.strict)\n            this.emitContext();\n        if (this.lookAhead > 0)\n            this.emitLookAhead();\n    }\n}\nclass StackContext {\n    constructor(tracker, context) {\n        this.tracker = tracker;\n        this.context = context;\n        this.hash = tracker.strict ? tracker.hash(context) : 0;\n    }\n}\nvar Recover;\n(function (Recover) {\n    Recover[Recover[\"Insert\"] = 200] = \"Insert\";\n    Recover[Recover[\"Delete\"] = 190] = \"Delete\";\n    Recover[Recover[\"Reduce\"] = 100] = \"Reduce\";\n    Recover[Recover[\"MaxNext\"] = 4] = \"MaxNext\";\n    Recover[Recover[\"MaxInsertStackDepth\"] = 300] = \"MaxInsertStackDepth\";\n    Recover[Recover[\"DampenInsertStackDepth\"] = 120] = \"DampenInsertStackDepth\";\n})(Recover || (Recover = {}));\n// Used to cheaply run some reductions to scan ahead without mutating\n// an entire stack\nclass SimulatedStack {\n    constructor(start) {\n        this.start = start;\n        this.state = start.state;\n        this.stack = start.stack;\n        this.base = this.stack.length;\n    }\n    reduce(action) {\n        let term = action & 65535 /* ValueMask */, depth = action >> 19 /* ReduceDepthShift */;\n        if (depth == 0) {\n            if (this.stack == this.start.stack)\n                this.stack = this.stack.slice();\n            this.stack.push(this.state, 0, 0);\n            this.base += 3;\n        }\n        else {\n            this.base -= (depth - 1) * 3;\n        }\n        let goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);\n        this.state = goto;\n    }\n}\n// This is given to `Tree.build` to build a buffer, and encapsulates\n// the parent-stack-walking necessary to read the nodes.\nclass StackBufferCursor {\n    constructor(stack, pos, index) {\n        this.stack = stack;\n        this.pos = pos;\n        this.index = index;\n        this.buffer = stack.buffer;\n        if (this.index == 0)\n            this.maybeNext();\n    }\n    static create(stack, pos = stack.bufferBase + stack.buffer.length) {\n        return new StackBufferCursor(stack, pos, pos - stack.bufferBase);\n    }\n    maybeNext() {\n        let next = this.stack.parent;\n        if (next != null) {\n            this.index = this.stack.bufferBase - next.bufferBase;\n            this.stack = next;\n            this.buffer = next.buffer;\n        }\n    }\n    get id() { return this.buffer[this.index - 4]; }\n    get start() { return this.buffer[this.index - 3]; }\n    get end() { return this.buffer[this.index - 2]; }\n    get size() { return this.buffer[this.index - 1]; }\n    next() {\n        this.index -= 4;\n        this.pos -= 4;\n        if (this.index == 0)\n            this.maybeNext();\n    }\n    fork() {\n        return new StackBufferCursor(this.stack, this.pos, this.index);\n    }\n}\n\nclass CachedToken {\n    constructor() {\n        this.start = -1;\n        this.value = -1;\n        this.end = -1;\n        this.extended = -1;\n        this.lookAhead = 0;\n        this.mask = 0;\n        this.context = 0;\n    }\n}\nconst nullToken = new CachedToken;\n/// [Tokenizers](#lr.ExternalTokenizer) interact with the input\n/// through this interface. It presents the input as a stream of\n/// characters, tracking lookahead and hiding the complexity of\n/// [ranges](#common.Parser.parse^ranges) from tokenizer code.\nclass InputStream {\n    /// @internal\n    constructor(\n    /// @internal\n    input, \n    /// @internal\n    ranges) {\n        this.input = input;\n        this.ranges = ranges;\n        /// @internal\n        this.chunk = \"\";\n        /// @internal\n        this.chunkOff = 0;\n        /// Backup chunk\n        this.chunk2 = \"\";\n        this.chunk2Pos = 0;\n        /// The character code of the next code unit in the input, or -1\n        /// when the stream is at the end of the input.\n        this.next = -1;\n        /// @internal\n        this.token = nullToken;\n        this.rangeIndex = 0;\n        this.pos = this.chunkPos = ranges[0].from;\n        this.range = ranges[0];\n        this.end = ranges[ranges.length - 1].to;\n        this.readNext();\n    }\n    resolveOffset(offset, assoc) {\n        let range = this.range, index = this.rangeIndex;\n        let pos = this.pos + offset;\n        while (pos < range.from) {\n            if (!index)\n                return null;\n            let next = this.ranges[--index];\n            pos -= range.from - next.to;\n            range = next;\n        }\n        while (assoc < 0 ? pos > range.to : pos >= range.to) {\n            if (index == this.ranges.length - 1)\n                return null;\n            let next = this.ranges[++index];\n            pos += next.from - range.to;\n            range = next;\n        }\n        return pos;\n    }\n    /// Look at a code unit near the stream position. `.peek(0)` equals\n    /// `.next`, `.peek(-1)` gives you the previous character, and so\n    /// on.\n    ///\n    /// Note that looking around during tokenizing creates dependencies\n    /// on potentially far-away content, which may reduce the\n    /// effectiveness incremental parsingâ€”when looking forwardâ€”or even\n    /// cause invalid reparses when looking backward more than 25 code\n    /// units, since the library does not track lookbehind.\n    peek(offset) {\n        let idx = this.chunkOff + offset, pos, result;\n        if (idx >= 0 && idx < this.chunk.length) {\n            pos = this.pos + offset;\n            result = this.chunk.charCodeAt(idx);\n        }\n        else {\n            let resolved = this.resolveOffset(offset, 1);\n            if (resolved == null)\n                return -1;\n            pos = resolved;\n            if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {\n                result = this.chunk2.charCodeAt(pos - this.chunk2Pos);\n            }\n            else {\n                let i = this.rangeIndex, range = this.range;\n                while (range.to <= pos)\n                    range = this.ranges[++i];\n                this.chunk2 = this.input.chunk(this.chunk2Pos = pos);\n                if (pos + this.chunk2.length > range.to)\n                    this.chunk2 = this.chunk2.slice(0, range.to - pos);\n                result = this.chunk2.charCodeAt(0);\n            }\n        }\n        if (pos >= this.token.lookAhead)\n            this.token.lookAhead = pos + 1;\n        return result;\n    }\n    /// Accept a token. By default, the end of the token is set to the\n    /// current stream position, but you can pass an offset (relative to\n    /// the stream position) to change that.\n    acceptToken(token, endOffset = 0) {\n        let end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;\n        if (end == null || end < this.token.start)\n            throw new RangeError(\"Token end out of bounds\");\n        this.token.value = token;\n        this.token.end = end;\n    }\n    getChunk() {\n        if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {\n            let { chunk, chunkPos } = this;\n            this.chunk = this.chunk2;\n            this.chunkPos = this.chunk2Pos;\n            this.chunk2 = chunk;\n            this.chunk2Pos = chunkPos;\n            this.chunkOff = this.pos - this.chunkPos;\n        }\n        else {\n            this.chunk2 = this.chunk;\n            this.chunk2Pos = this.chunkPos;\n            let nextChunk = this.input.chunk(this.pos);\n            let end = this.pos + nextChunk.length;\n            this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;\n            this.chunkPos = this.pos;\n            this.chunkOff = 0;\n        }\n    }\n    readNext() {\n        if (this.chunkOff >= this.chunk.length) {\n            this.getChunk();\n            if (this.chunkOff == this.chunk.length)\n                return this.next = -1;\n        }\n        return this.next = this.chunk.charCodeAt(this.chunkOff);\n    }\n    /// Move the stream forward N (defaults to 1) code units. Returns\n    /// the new value of [`next`](#lr.InputStream.next).\n    advance(n = 1) {\n        this.chunkOff += n;\n        while (this.pos + n >= this.range.to) {\n            if (this.rangeIndex == this.ranges.length - 1)\n                return this.setDone();\n            n -= this.range.to - this.pos;\n            this.range = this.ranges[++this.rangeIndex];\n            this.pos = this.range.from;\n        }\n        this.pos += n;\n        if (this.pos >= this.token.lookAhead)\n            this.token.lookAhead = this.pos + 1;\n        return this.readNext();\n    }\n    setDone() {\n        this.pos = this.chunkPos = this.end;\n        this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];\n        this.chunk = \"\";\n        return this.next = -1;\n    }\n    /// @internal\n    reset(pos, token) {\n        if (token) {\n            this.token = token;\n            token.start = pos;\n            token.lookAhead = pos + 1;\n            token.value = token.extended = -1;\n        }\n        else {\n            this.token = nullToken;\n        }\n        if (this.pos != pos) {\n            this.pos = pos;\n            if (pos == this.end) {\n                this.setDone();\n                return this;\n            }\n            while (pos < this.range.from)\n                this.range = this.ranges[--this.rangeIndex];\n            while (pos >= this.range.to)\n                this.range = this.ranges[++this.rangeIndex];\n            if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {\n                this.chunkOff = pos - this.chunkPos;\n            }\n            else {\n                this.chunk = \"\";\n                this.chunkOff = 0;\n            }\n            this.readNext();\n        }\n        return this;\n    }\n    /// @internal\n    read(from, to) {\n        if (from >= this.chunkPos && to <= this.chunkPos + this.chunk.length)\n            return this.chunk.slice(from - this.chunkPos, to - this.chunkPos);\n        if (from >= this.range.from && to <= this.range.to)\n            return this.input.read(from, to);\n        let result = \"\";\n        for (let r of this.ranges) {\n            if (r.from >= to)\n                break;\n            if (r.to > from)\n                result += this.input.read(Math.max(r.from, from), Math.min(r.to, to));\n        }\n        return result;\n    }\n}\n/// @internal\nclass TokenGroup {\n    constructor(data, id) {\n        this.data = data;\n        this.id = id;\n    }\n    token(input, stack) { readToken(this.data, input, stack, this.id); }\n}\nTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;\n/// `@external tokens` declarations in the grammar should resolve to\n/// an instance of this class.\nclass ExternalTokenizer {\n    /// Create a tokenizer. The first argument is the function that,\n    /// given an input stream, scans for the types of tokens it\n    /// recognizes at the stream's position, and calls\n    /// [`acceptToken`](#lr.InputStream.acceptToken) when it finds\n    /// one.\n    constructor(\n    /// @internal\n    token, options = {}) {\n        this.token = token;\n        this.contextual = !!options.contextual;\n        this.fallback = !!options.fallback;\n        this.extend = !!options.extend;\n    }\n}\n// Tokenizer data is stored a big uint16 array containing, for each\n// state:\n//\n//  - A group bitmask, indicating what token groups are reachable from\n//    this state, so that paths that can only lead to tokens not in\n//    any of the current groups can be cut off early.\n//\n//  - The position of the end of the state's sequence of accepting\n//    tokens\n//\n//  - The number of outgoing edges for the state\n//\n//  - The accepting tokens, as (token id, group mask) pairs\n//\n//  - The outgoing edges, as (start character, end character, state\n//    index) triples, with end character being exclusive\n//\n// This function interprets that data, running through a stream as\n// long as new states with the a matching group mask can be reached,\n// and updating `token` when it matches a token.\nfunction readToken(data, input, stack, group) {\n    let state = 0, groupMask = 1 << group, { parser } = stack.p, { dialect } = parser;\n    scan: for (;;) {\n        if ((groupMask & data[state]) == 0)\n            break;\n        let accEnd = data[state + 1];\n        // Check whether this state can lead to a token in the current group\n        // Accept tokens in this state, possibly overwriting\n        // lower-precedence / shorter tokens\n        for (let i = state + 3; i < accEnd; i += 2)\n            if ((data[i + 1] & groupMask) > 0) {\n                let term = data[i];\n                if (dialect.allows(term) &&\n                    (input.token.value == -1 || input.token.value == term || parser.overrides(term, input.token.value))) {\n                    input.acceptToken(term);\n                    break;\n                }\n            }\n        // Do a binary search on the state's edges\n        for (let next = input.next, low = 0, high = data[state + 2]; low < high;) {\n            let mid = (low + high) >> 1;\n            let index = accEnd + mid + (mid << 1);\n            let from = data[index], to = data[index + 1];\n            if (next < from)\n                high = mid;\n            else if (next >= to)\n                low = mid + 1;\n            else {\n                state = data[index + 2];\n                input.advance();\n                continue scan;\n            }\n        }\n        break;\n    }\n}\n\n// See lezer-generator/src/encode.ts for comments about the encoding\n// used here\nfunction decodeArray(input, Type = Uint16Array) {\n    if (typeof input != \"string\")\n        return input;\n    let array = null;\n    for (let pos = 0, out = 0; pos < input.length;) {\n        let value = 0;\n        for (;;) {\n            let next = input.charCodeAt(pos++), stop = false;\n            if (next == 126 /* BigValCode */) {\n                value = 65535 /* BigVal */;\n                break;\n            }\n            if (next >= 92 /* Gap2 */)\n                next--;\n            if (next >= 34 /* Gap1 */)\n                next--;\n            let digit = next - 32 /* Start */;\n            if (digit >= 46 /* Base */) {\n                digit -= 46 /* Base */;\n                stop = true;\n            }\n            value += digit;\n            if (stop)\n                break;\n            value *= 46 /* Base */;\n        }\n        if (array)\n            array[out++] = value;\n        else\n            array = new Type(value);\n    }\n    return array;\n}\n\n// FIXME find some way to reduce recovery work done when the input\n// doesn't match the grammar at all.\n// Environment variable used to control console output\nconst verbose = typeof process != \"undefined\" && /\\bparse\\b/.test(process.env.LOG);\nlet stackIDs = null;\nvar Safety;\n(function (Safety) {\n    Safety[Safety[\"Margin\"] = 25] = \"Margin\";\n})(Safety || (Safety = {}));\nfunction cutAt(tree, pos, side) {\n    let cursor = tree.fullCursor();\n    cursor.moveTo(pos);\n    for (;;) {\n        if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos)))\n            for (;;) {\n                if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError)\n                    return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 25 /* Margin */))\n                        : Math.min(tree.length, Math.max(cursor.from + 1, pos + 25 /* Margin */));\n                if (side < 0 ? cursor.prevSibling() : cursor.nextSibling())\n                    break;\n                if (!cursor.parent())\n                    return side < 0 ? 0 : tree.length;\n            }\n    }\n}\nclass FragmentCursor {\n    constructor(fragments, nodeSet) {\n        this.fragments = fragments;\n        this.nodeSet = nodeSet;\n        this.i = 0;\n        this.fragment = null;\n        this.safeFrom = -1;\n        this.safeTo = -1;\n        this.trees = [];\n        this.start = [];\n        this.index = [];\n        this.nextFragment();\n    }\n    nextFragment() {\n        let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];\n        if (fr) {\n            this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;\n            this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;\n            while (this.trees.length) {\n                this.trees.pop();\n                this.start.pop();\n                this.index.pop();\n            }\n            this.trees.push(fr.tree);\n            this.start.push(-fr.offset);\n            this.index.push(0);\n            this.nextStart = this.safeFrom;\n        }\n        else {\n            this.nextStart = 1e9;\n        }\n    }\n    // `pos` must be >= any previously given `pos` for this cursor\n    nodeAt(pos) {\n        if (pos < this.nextStart)\n            return null;\n        while (this.fragment && this.safeTo <= pos)\n            this.nextFragment();\n        if (!this.fragment)\n            return null;\n        for (;;) {\n            let last = this.trees.length - 1;\n            if (last < 0) { // End of tree\n                this.nextFragment();\n                return null;\n            }\n            let top = this.trees[last], index = this.index[last];\n            if (index == top.children.length) {\n                this.trees.pop();\n                this.start.pop();\n                this.index.pop();\n                continue;\n            }\n            let next = top.children[index];\n            let start = this.start[last] + top.positions[index];\n            if (start > pos) {\n                this.nextStart = start;\n                return null;\n            }\n            if (next instanceof Tree) {\n                if (start == pos) {\n                    if (start < this.safeFrom)\n                        return null;\n                    let end = start + next.length;\n                    if (end <= this.safeTo) {\n                        let lookAhead = next.prop(NodeProp.lookAhead);\n                        if (!lookAhead || end + lookAhead < this.fragment.to)\n                            return next;\n                    }\n                }\n                this.index[last]++;\n                if (start + next.length >= Math.max(this.safeFrom, pos)) { // Enter this node\n                    this.trees.push(next);\n                    this.start.push(start);\n                    this.index.push(0);\n                }\n            }\n            else {\n                this.index[last]++;\n                this.nextStart = start + next.length;\n            }\n        }\n    }\n}\nclass TokenCache {\n    constructor(parser, stream) {\n        this.stream = stream;\n        this.tokens = [];\n        this.mainToken = null;\n        this.actions = [];\n        this.tokens = parser.tokenizers.map(_ => new CachedToken);\n    }\n    getActions(stack) {\n        let actionIndex = 0;\n        let main = null;\n        let { parser } = stack.p, { tokenizers } = parser;\n        let mask = parser.stateSlot(stack.state, 3 /* TokenizerMask */);\n        let context = stack.curContext ? stack.curContext.hash : 0;\n        let lookAhead = 0;\n        for (let i = 0; i < tokenizers.length; i++) {\n            if (((1 << i) & mask) == 0)\n                continue;\n            let tokenizer = tokenizers[i], token = this.tokens[i];\n            if (main && !tokenizer.fallback)\n                continue;\n            if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {\n                this.updateCachedToken(token, tokenizer, stack);\n                token.mask = mask;\n                token.context = context;\n            }\n            if (token.lookAhead > token.end + 25 /* Margin */)\n                lookAhead = Math.max(token.lookAhead, lookAhead);\n            if (token.value != 0 /* Err */) {\n                let startIndex = actionIndex;\n                if (token.extended > -1)\n                    actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);\n                actionIndex = this.addActions(stack, token.value, token.end, actionIndex);\n                if (!tokenizer.extend) {\n                    main = token;\n                    if (actionIndex > startIndex)\n                        break;\n                }\n            }\n        }\n        while (this.actions.length > actionIndex)\n            this.actions.pop();\n        if (lookAhead)\n            stack.setLookAhead(lookAhead);\n        if (!main && stack.pos == this.stream.end) {\n            main = new CachedToken;\n            main.value = stack.p.parser.eofTerm;\n            main.start = main.end = stack.pos;\n            actionIndex = this.addActions(stack, main.value, main.end, actionIndex);\n        }\n        this.mainToken = main;\n        return this.actions;\n    }\n    getMainToken(stack) {\n        if (this.mainToken)\n            return this.mainToken;\n        let main = new CachedToken, { pos, p } = stack;\n        main.start = pos;\n        main.end = Math.min(pos + 1, p.stream.end);\n        main.value = pos == p.stream.end ? p.parser.eofTerm : 0 /* Err */;\n        return main;\n    }\n    updateCachedToken(token, tokenizer, stack) {\n        tokenizer.token(this.stream.reset(stack.pos, token), stack);\n        if (token.value > -1) {\n            let { parser } = stack.p;\n            for (let i = 0; i < parser.specialized.length; i++)\n                if (parser.specialized[i] == token.value) {\n                    let result = parser.specializers[i](this.stream.read(token.start, token.end), stack);\n                    if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {\n                        if ((result & 1) == 0 /* Specialize */)\n                            token.value = result >> 1;\n                        else\n                            token.extended = result >> 1;\n                        break;\n                    }\n                }\n        }\n        else {\n            token.value = 0 /* Err */;\n            token.end = Math.min(stack.p.stream.end, stack.pos + 1);\n        }\n    }\n    putAction(action, token, end, index) {\n        // Don't add duplicate actions\n        for (let i = 0; i < index; i += 3)\n            if (this.actions[i] == action)\n                return index;\n        this.actions[index++] = action;\n        this.actions[index++] = token;\n        this.actions[index++] = end;\n        return index;\n    }\n    addActions(stack, token, end, index) {\n        let { state } = stack, { parser } = stack.p, { data } = parser;\n        for (let set = 0; set < 2; set++) {\n            for (let i = parser.stateSlot(state, set ? 2 /* Skip */ : 1 /* Actions */);; i += 3) {\n                if (data[i] == 65535 /* End */) {\n                    if (data[i + 1] == 1 /* Next */) {\n                        i = pair(data, i + 2);\n                    }\n                    else {\n                        if (index == 0 && data[i + 1] == 2 /* Other */)\n                            index = this.putAction(pair(data, i + 2), token, end, index);\n                        break;\n                    }\n                }\n                if (data[i] == token)\n                    index = this.putAction(pair(data, i + 1), token, end, index);\n            }\n        }\n        return index;\n    }\n}\nvar Rec;\n(function (Rec) {\n    Rec[Rec[\"Distance\"] = 5] = \"Distance\";\n    Rec[Rec[\"MaxRemainingPerStep\"] = 3] = \"MaxRemainingPerStep\";\n    // When two stacks have been running independently long enough to\n    // add this many elements to their buffers, prune one.\n    Rec[Rec[\"MinBufferLengthPrune\"] = 500] = \"MinBufferLengthPrune\";\n    Rec[Rec[\"ForceReduceLimit\"] = 10] = \"ForceReduceLimit\";\n    // Once a stack reaches this depth (in .stack.length) force-reduce\n    // it back to CutTo to avoid creating trees that overflow the stack\n    // on recursive traversal.\n    Rec[Rec[\"CutDepth\"] = 15000] = \"CutDepth\";\n    Rec[Rec[\"CutTo\"] = 9000] = \"CutTo\";\n})(Rec || (Rec = {}));\nclass Parse {\n    constructor(parser, input, fragments, ranges) {\n        this.parser = parser;\n        this.input = input;\n        this.ranges = ranges;\n        this.recovering = 0;\n        this.nextStackID = 0x2654; // â™”, â™•, â™–, â™—, â™˜, â™™, â™ , â™¡, â™¢, â™£, â™¤, â™¥, â™¦, â™§\n        this.minStackPos = 0;\n        this.reused = [];\n        this.stoppedAt = null;\n        this.stream = new InputStream(input, ranges);\n        this.tokens = new TokenCache(parser, this.stream);\n        this.topTerm = parser.top[1];\n        let { from } = ranges[0];\n        this.stacks = [Stack.start(this, parser.top[0], from)];\n        this.fragments = fragments.length && this.stream.end - from > parser.bufferLength * 4\n            ? new FragmentCursor(fragments, parser.nodeSet) : null;\n    }\n    get parsedPos() {\n        return this.minStackPos;\n    }\n    // Move the parser forward. This will process all parse stacks at\n    // `this.pos` and try to advance them to a further position. If no\n    // stack for such a position is found, it'll start error-recovery.\n    //\n    // When the parse is finished, this will return a syntax tree. When\n    // not, it returns `null`.\n    advance() {\n        let stacks = this.stacks, pos = this.minStackPos;\n        // This will hold stacks beyond `pos`.\n        let newStacks = this.stacks = [];\n        let stopped, stoppedTokens;\n        // Keep advancing any stacks at `pos` until they either move\n        // forward or can't be advanced. Gather stacks that can't be\n        // advanced further in `stopped`.\n        for (let i = 0; i < stacks.length; i++) {\n            let stack = stacks[i];\n            for (;;) {\n                this.tokens.mainToken = null;\n                if (stack.pos > pos) {\n                    newStacks.push(stack);\n                }\n                else if (this.advanceStack(stack, newStacks, stacks)) {\n                    continue;\n                }\n                else {\n                    if (!stopped) {\n                        stopped = [];\n                        stoppedTokens = [];\n                    }\n                    stopped.push(stack);\n                    let tok = this.tokens.getMainToken(stack);\n                    stoppedTokens.push(tok.value, tok.end);\n                }\n                break;\n            }\n        }\n        if (!newStacks.length) {\n            let finished = stopped && findFinished(stopped);\n            if (finished)\n                return this.stackToTree(finished);\n            if (this.parser.strict) {\n                if (verbose && stopped)\n                    console.log(\"Stuck with token \" + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : \"none\"));\n                throw new SyntaxError(\"No parse at \" + pos);\n            }\n            if (!this.recovering)\n                this.recovering = 5 /* Distance */;\n        }\n        if (this.recovering && stopped) {\n            let finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0]\n                : this.runRecovery(stopped, stoppedTokens, newStacks);\n            if (finished)\n                return this.stackToTree(finished.forceAll());\n        }\n        if (this.recovering) {\n            let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3 /* MaxRemainingPerStep */;\n            if (newStacks.length > maxRemaining) {\n                newStacks.sort((a, b) => b.score - a.score);\n                while (newStacks.length > maxRemaining)\n                    newStacks.pop();\n            }\n            if (newStacks.some(s => s.reducePos > pos))\n                this.recovering--;\n        }\n        else if (newStacks.length > 1) {\n            // Prune stacks that are in the same state, or that have been\n            // running without splitting for a while, to avoid getting stuck\n            // with multiple successful stacks running endlessly on.\n            outer: for (let i = 0; i < newStacks.length - 1; i++) {\n                let stack = newStacks[i];\n                for (let j = i + 1; j < newStacks.length; j++) {\n                    let other = newStacks[j];\n                    if (stack.sameState(other) ||\n                        stack.buffer.length > 500 /* MinBufferLengthPrune */ && other.buffer.length > 500 /* MinBufferLengthPrune */) {\n                        if (((stack.score - other.score) || (stack.buffer.length - other.buffer.length)) > 0) {\n                            newStacks.splice(j--, 1);\n                        }\n                        else {\n                            newStacks.splice(i--, 1);\n                            continue outer;\n                        }\n                    }\n                }\n            }\n        }\n        this.minStackPos = newStacks[0].pos;\n        for (let i = 1; i < newStacks.length; i++)\n            if (newStacks[i].pos < this.minStackPos)\n                this.minStackPos = newStacks[i].pos;\n        return null;\n    }\n    stopAt(pos) {\n        if (this.stoppedAt != null && this.stoppedAt < pos)\n            throw new RangeError(\"Can't move stoppedAt forward\");\n        this.stoppedAt = pos;\n    }\n    // Returns an updated version of the given stack, or null if the\n    // stack can't advance normally. When `split` and `stacks` are\n    // given, stacks split off by ambiguous operations will be pushed to\n    // `split`, or added to `stacks` if they move `pos` forward.\n    advanceStack(stack, stacks, split) {\n        let start = stack.pos, { parser } = this;\n        let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n        if (this.stoppedAt != null && start > this.stoppedAt)\n            return stack.forceReduce() ? stack : null;\n        if (this.fragments) {\n            let strictCx = stack.curContext && stack.curContext.tracker.strict, cxHash = strictCx ? stack.curContext.hash : 0;\n            for (let cached = this.fragments.nodeAt(start); cached;) {\n                let match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;\n                if (match > -1 && cached.length && (!strictCx || (cached.prop(NodeProp.contextHash) || 0) == cxHash)) {\n                    stack.useNode(cached, match);\n                    if (verbose)\n                        console.log(base + this.stackID(stack) + ` (via reuse of ${parser.getName(cached.type.id)})`);\n                    return true;\n                }\n                if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0)\n                    break;\n                let inner = cached.children[0];\n                if (inner instanceof Tree && cached.positions[0] == 0)\n                    cached = inner;\n                else\n                    break;\n            }\n        }\n        let defaultReduce = parser.stateSlot(stack.state, 4 /* DefaultReduce */);\n        if (defaultReduce > 0) {\n            stack.reduce(defaultReduce);\n            if (verbose)\n                console.log(base + this.stackID(stack) + ` (via always-reduce ${parser.getName(defaultReduce & 65535 /* ValueMask */)})`);\n            return true;\n        }\n        if (stack.stack.length >= 15000 /* CutDepth */) {\n            while (stack.stack.length > 9000 /* CutTo */ && stack.forceReduce()) { }\n        }\n        let actions = this.tokens.getActions(stack);\n        for (let i = 0; i < actions.length;) {\n            let action = actions[i++], term = actions[i++], end = actions[i++];\n            let last = i == actions.length || !split;\n            let localStack = last ? stack : stack.split();\n            localStack.apply(action, term, end);\n            if (verbose)\n                console.log(base + this.stackID(localStack) + ` (via ${(action & 65536 /* ReduceFlag */) == 0 ? \"shift\"\n                    : `reduce of ${parser.getName(action & 65535 /* ValueMask */)}`} for ${parser.getName(term)} @ ${start}${localStack == stack ? \"\" : \", split\"})`);\n            if (last)\n                return true;\n            else if (localStack.pos > start)\n                stacks.push(localStack);\n            else\n                split.push(localStack);\n        }\n        return false;\n    }\n    // Advance a given stack forward as far as it will go. Returns the\n    // (possibly updated) stack if it got stuck, or null if it moved\n    // forward and was given to `pushStackDedup`.\n    advanceFully(stack, newStacks) {\n        let pos = stack.pos;\n        for (;;) {\n            if (!this.advanceStack(stack, null, null))\n                return false;\n            if (stack.pos > pos) {\n                pushStackDedup(stack, newStacks);\n                return true;\n            }\n        }\n    }\n    runRecovery(stacks, tokens, newStacks) {\n        let finished = null, restarted = false;\n        for (let i = 0; i < stacks.length; i++) {\n            let stack = stacks[i], token = tokens[i << 1], tokenEnd = tokens[(i << 1) + 1];\n            let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n            if (stack.deadEnd) {\n                if (restarted)\n                    continue;\n                restarted = true;\n                stack.restart();\n                if (verbose)\n                    console.log(base + this.stackID(stack) + \" (restarted)\");\n                let done = this.advanceFully(stack, newStacks);\n                if (done)\n                    continue;\n            }\n            let force = stack.split(), forceBase = base;\n            for (let j = 0; force.forceReduce() && j < 10 /* ForceReduceLimit */; j++) {\n                if (verbose)\n                    console.log(forceBase + this.stackID(force) + \" (via force-reduce)\");\n                let done = this.advanceFully(force, newStacks);\n                if (done)\n                    break;\n                if (verbose)\n                    forceBase = this.stackID(force) + \" -> \";\n            }\n            for (let insert of stack.recoverByInsert(token)) {\n                if (verbose)\n                    console.log(base + this.stackID(insert) + \" (via recover-insert)\");\n                this.advanceFully(insert, newStacks);\n            }\n            if (this.stream.end > stack.pos) {\n                if (tokenEnd == stack.pos) {\n                    tokenEnd++;\n                    token = 0 /* Err */;\n                }\n                stack.recoverByDelete(token, tokenEnd);\n                if (verbose)\n                    console.log(base + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);\n                pushStackDedup(stack, newStacks);\n            }\n            else if (!finished || finished.score < stack.score) {\n                finished = stack;\n            }\n        }\n        return finished;\n    }\n    // Convert the stack's buffer to a syntax tree.\n    stackToTree(stack) {\n        stack.close();\n        return Tree.build({ buffer: StackBufferCursor.create(stack),\n            nodeSet: this.parser.nodeSet,\n            topID: this.topTerm,\n            maxBufferLength: this.parser.bufferLength,\n            reused: this.reused,\n            start: this.ranges[0].from,\n            length: stack.pos - this.ranges[0].from,\n            minRepeatType: this.parser.minRepeatTerm });\n    }\n    stackID(stack) {\n        let id = (stackIDs || (stackIDs = new WeakMap)).get(stack);\n        if (!id)\n            stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));\n        return id + stack;\n    }\n}\nfunction pushStackDedup(stack, newStacks) {\n    for (let i = 0; i < newStacks.length; i++) {\n        let other = newStacks[i];\n        if (other.pos == stack.pos && other.sameState(stack)) {\n            if (newStacks[i].score < stack.score)\n                newStacks[i] = stack;\n            return;\n        }\n    }\n    newStacks.push(stack);\n}\nclass Dialect {\n    constructor(source, flags, disabled) {\n        this.source = source;\n        this.flags = flags;\n        this.disabled = disabled;\n    }\n    allows(term) { return !this.disabled || this.disabled[term] == 0; }\n}\nconst id = x => x;\n/// Context trackers are used to track stateful context (such as\n/// indentation in the Python grammar, or parent elements in the XML\n/// grammar) needed by external tokenizers. You declare them in a\n/// grammar file as `@context exportName from \"module\"`.\n///\n/// Context values should be immutable, and can be updated (replaced)\n/// on shift or reduce actions.\n///\n/// The export used in a `@context` declaration should be of this\n/// type.\nclass ContextTracker {\n    /// Define a context tracker.\n    constructor(spec) {\n        this.start = spec.start;\n        this.shift = spec.shift || id;\n        this.reduce = spec.reduce || id;\n        this.reuse = spec.reuse || id;\n        this.hash = spec.hash || (() => 0);\n        this.strict = spec.strict !== false;\n    }\n}\n/// A parser holds the parse tables for a given grammar, as generated\n/// by `lezer-generator`.\nclass LRParser extends Parser {\n    /// @internal\n    constructor(spec) {\n        super();\n        /// @internal\n        this.wrappers = [];\n        if (spec.version != 13 /* Version */)\n            throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${13 /* Version */})`);\n        let nodeNames = spec.nodeNames.split(\" \");\n        this.minRepeatTerm = nodeNames.length;\n        for (let i = 0; i < spec.repeatNodeCount; i++)\n            nodeNames.push(\"\");\n        let topTerms = Object.keys(spec.topRules).map(r => spec.topRules[r][1]);\n        let nodeProps = [];\n        for (let i = 0; i < nodeNames.length; i++)\n            nodeProps.push([]);\n        function setProp(nodeID, prop, value) {\n            nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);\n        }\n        if (spec.nodeProps)\n            for (let propSpec of spec.nodeProps) {\n                let prop = propSpec[0];\n                for (let i = 1; i < propSpec.length;) {\n                    let next = propSpec[i++];\n                    if (next >= 0) {\n                        setProp(next, prop, propSpec[i++]);\n                    }\n                    else {\n                        let value = propSpec[i + -next];\n                        for (let j = -next; j > 0; j--)\n                            setProp(propSpec[i++], prop, value);\n                        i++;\n                    }\n                }\n            }\n        this.nodeSet = new NodeSet(nodeNames.map((name, i) => NodeType.define({\n            name: i >= this.minRepeatTerm ? undefined : name,\n            id: i,\n            props: nodeProps[i],\n            top: topTerms.indexOf(i) > -1,\n            error: i == 0,\n            skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1\n        })));\n        this.strict = false;\n        this.bufferLength = DefaultBufferLength;\n        let tokenArray = decodeArray(spec.tokenData);\n        this.context = spec.context;\n        this.specialized = new Uint16Array(spec.specialized ? spec.specialized.length : 0);\n        this.specializers = [];\n        if (spec.specialized)\n            for (let i = 0; i < spec.specialized.length; i++) {\n                this.specialized[i] = spec.specialized[i].term;\n                this.specializers[i] = spec.specialized[i].get;\n            }\n        this.states = decodeArray(spec.states, Uint32Array);\n        this.data = decodeArray(spec.stateData);\n        this.goto = decodeArray(spec.goto);\n        this.maxTerm = spec.maxTerm;\n        this.tokenizers = spec.tokenizers.map(value => typeof value == \"number\" ? new TokenGroup(tokenArray, value) : value);\n        this.topRules = spec.topRules;\n        this.dialects = spec.dialects || {};\n        this.dynamicPrecedences = spec.dynamicPrecedences || null;\n        this.tokenPrecTable = spec.tokenPrec;\n        this.termNames = spec.termNames || null;\n        this.maxNode = this.nodeSet.types.length - 1;\n        this.dialect = this.parseDialect();\n        this.top = this.topRules[Object.keys(this.topRules)[0]];\n    }\n    createParse(input, fragments, ranges) {\n        let parse = new Parse(this, input, fragments, ranges);\n        for (let w of this.wrappers)\n            parse = w(parse, input, fragments, ranges);\n        return parse;\n    }\n    /// Get a goto table entry @internal\n    getGoto(state, term, loose = false) {\n        let table = this.goto;\n        if (term >= table[0])\n            return -1;\n        for (let pos = table[term + 1];;) {\n            let groupTag = table[pos++], last = groupTag & 1;\n            let target = table[pos++];\n            if (last && loose)\n                return target;\n            for (let end = pos + (groupTag >> 1); pos < end; pos++)\n                if (table[pos] == state)\n                    return target;\n            if (last)\n                return -1;\n        }\n    }\n    /// Check if this state has an action for a given terminal @internal\n    hasAction(state, terminal) {\n        let data = this.data;\n        for (let set = 0; set < 2; set++) {\n            for (let i = this.stateSlot(state, set ? 2 /* Skip */ : 1 /* Actions */), next;; i += 3) {\n                if ((next = data[i]) == 65535 /* End */) {\n                    if (data[i + 1] == 1 /* Next */)\n                        next = data[i = pair(data, i + 2)];\n                    else if (data[i + 1] == 2 /* Other */)\n                        return pair(data, i + 2);\n                    else\n                        break;\n                }\n                if (next == terminal || next == 0 /* Err */)\n                    return pair(data, i + 1);\n            }\n        }\n        return 0;\n    }\n    /// @internal\n    stateSlot(state, slot) {\n        return this.states[(state * 6 /* Size */) + slot];\n    }\n    /// @internal\n    stateFlag(state, flag) {\n        return (this.stateSlot(state, 0 /* Flags */) & flag) > 0;\n    }\n    /// @internal\n    validAction(state, action) {\n        if (action == this.stateSlot(state, 4 /* DefaultReduce */))\n            return true;\n        for (let i = this.stateSlot(state, 1 /* Actions */);; i += 3) {\n            if (this.data[i] == 65535 /* End */) {\n                if (this.data[i + 1] == 1 /* Next */)\n                    i = pair(this.data, i + 2);\n                else\n                    return false;\n            }\n            if (action == pair(this.data, i + 1))\n                return true;\n        }\n    }\n    /// Get the states that can follow this one through shift actions or\n    /// goto jumps. @internal\n    nextStates(state) {\n        let result = [];\n        for (let i = this.stateSlot(state, 1 /* Actions */);; i += 3) {\n            if (this.data[i] == 65535 /* End */) {\n                if (this.data[i + 1] == 1 /* Next */)\n                    i = pair(this.data, i + 2);\n                else\n                    break;\n            }\n            if ((this.data[i + 2] & (65536 /* ReduceFlag */ >> 16)) == 0) {\n                let value = this.data[i + 1];\n                if (!result.some((v, i) => (i & 1) && v == value))\n                    result.push(this.data[i], value);\n            }\n        }\n        return result;\n    }\n    /// @internal\n    overrides(token, prev) {\n        let iPrev = findOffset(this.data, this.tokenPrecTable, prev);\n        return iPrev < 0 || findOffset(this.data, this.tokenPrecTable, token) < iPrev;\n    }\n    /// Configure the parser. Returns a new parser instance that has the\n    /// given settings modified. Settings not provided in `config` are\n    /// kept from the original parser.\n    configure(config) {\n        // Hideous reflection-based kludge to make it easy to create a\n        // slightly modified copy of a parser.\n        let copy = Object.assign(Object.create(LRParser.prototype), this);\n        if (config.props)\n            copy.nodeSet = this.nodeSet.extend(...config.props);\n        if (config.top) {\n            let info = this.topRules[config.top];\n            if (!info)\n                throw new RangeError(`Invalid top rule name ${config.top}`);\n            copy.top = info;\n        }\n        if (config.tokenizers)\n            copy.tokenizers = this.tokenizers.map(t => {\n                let found = config.tokenizers.find(r => r.from == t);\n                return found ? found.to : t;\n            });\n        if (config.contextTracker)\n            copy.context = config.contextTracker;\n        if (config.dialect)\n            copy.dialect = this.parseDialect(config.dialect);\n        if (config.strict != null)\n            copy.strict = config.strict;\n        if (config.wrap)\n            copy.wrappers = copy.wrappers.concat(config.wrap);\n        if (config.bufferLength != null)\n            copy.bufferLength = config.bufferLength;\n        return copy;\n    }\n    /// Returns the name associated with a given term. This will only\n    /// work for all terms when the parser was generated with the\n    /// `--names` option. By default, only the names of tagged terms are\n    /// stored.\n    getName(term) {\n        return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);\n    }\n    /// The eof term id is always allocated directly after the node\n    /// types. @internal\n    get eofTerm() { return this.maxNode + 1; }\n    /// The type of top node produced by the parser.\n    get topNode() { return this.nodeSet.types[this.top[1]]; }\n    /// @internal\n    dynamicPrecedence(term) {\n        let prec = this.dynamicPrecedences;\n        return prec == null ? 0 : prec[term] || 0;\n    }\n    /// @internal\n    parseDialect(dialect) {\n        let values = Object.keys(this.dialects), flags = values.map(() => false);\n        if (dialect)\n            for (let part of dialect.split(\" \")) {\n                let id = values.indexOf(part);\n                if (id >= 0)\n                    flags[id] = true;\n            }\n        let disabled = null;\n        for (let i = 0; i < values.length; i++)\n            if (!flags[i]) {\n                for (let j = this.dialects[values[i]], id; (id = this.data[j++]) != 65535 /* End */;)\n                    (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id] = 1;\n            }\n        return new Dialect(dialect, flags, disabled);\n    }\n    /// (used by the output of the parser generator) @internal\n    static deserialize(spec) {\n        return new LRParser(spec);\n    }\n}\nfunction pair(data, off) { return data[off] | (data[off + 1] << 16); }\nfunction findOffset(data, start, term) {\n    for (let i = start, next; (next = data[i]) != 65535 /* End */; i++)\n        if (next == term)\n            return i - start;\n    return -1;\n}\nfunction findFinished(stacks) {\n    let best = null;\n    for (let stack of stacks) {\n        let stopped = stack.p.stoppedAt;\n        if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) &&\n            stack.p.parser.stateFlag(stack.state, 2 /* Accepting */) &&\n            (!best || best.score < stack.score))\n            best = stack;\n    }\n    return best;\n}\n\nexport { ContextTracker, ExternalTokenizer, InputStream, LRParser, Stack };\n"]},"metadata":{},"sourceType":"module"}