{"ast":null,"code":"import { parser } from '@lezer/json';\nimport { LRLanguage, indentNodeProp, continuedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';\nimport { styleTags, tags } from '@codemirror/highlight';\n/**\nCalls\n[`JSON.parse`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse)\non the document and, if that throws an error, reports it as a\nsingle diagnostic.\n*/\n\nconst jsonParseLinter = () => view => {\n  try {\n    JSON.parse(view.state.doc.toString());\n  } catch (e) {\n    if (!(e instanceof SyntaxError)) throw e;\n    const pos = getErrorPosition(e, view.state.doc);\n    return [{\n      from: pos,\n      message: e.message,\n      severity: 'error',\n      to: pos\n    }];\n  }\n\n  return [];\n};\n\nfunction getErrorPosition(error, doc) {\n  let m;\n  if (m = error.message.match(/at position (\\d+)/)) return Math.min(+m[1], doc.length);\n  if (m = error.message.match(/at line (\\d+) column (\\d+)/)) return Math.min(doc.line(+m[1]).from + +m[2] - 1, doc.length);\n  return 0;\n}\n/**\nA language provider that provides JSON parsing.\n*/\n\n\nconst jsonLanguage = /*@__PURE__*/LRLanguage.define({\n  parser: /*@__PURE__*/parser.configure({\n    props: [/*@__PURE__*/indentNodeProp.add({\n      Object: /*@__PURE__*/continuedIndent({\n        except: /^\\s*\\}/\n      }),\n      Array: /*@__PURE__*/continuedIndent({\n        except: /^\\s*\\]/\n      })\n    }), /*@__PURE__*/foldNodeProp.add({\n      \"Object Array\": foldInside\n    }), /*@__PURE__*/styleTags({\n      String: tags.string,\n      Number: tags.number,\n      \"True False\": tags.bool,\n      PropertyName: tags.propertyName,\n      null: tags.null,\n      \",\": tags.separator,\n      \"[ ]\": tags.squareBracket,\n      \"{ }\": tags.brace\n    })]\n  }),\n  languageData: {\n    closeBrackets: {\n      brackets: [\"[\", \"{\", '\"']\n    },\n    indentOnInput: /^\\s*[\\}\\]]$/\n  }\n});\n/**\nJSON language support.\n*/\n\nfunction json() {\n  return new LanguageSupport(jsonLanguage);\n}\n\nexport { json, jsonLanguage, jsonParseLinter };","map":{"version":3,"sources":["C:/Users/pc/Desktop/live-code-editor/client/node_modules/@codemirror/lang-json/dist/index.js"],"names":["parser","LRLanguage","indentNodeProp","continuedIndent","foldNodeProp","foldInside","LanguageSupport","styleTags","tags","jsonParseLinter","view","JSON","parse","state","doc","toString","e","SyntaxError","pos","getErrorPosition","from","message","severity","to","error","m","match","Math","min","length","line","jsonLanguage","define","configure","props","add","Object","except","Array","String","string","Number","number","bool","PropertyName","propertyName","null","separator","squareBracket","brace","languageData","closeBrackets","brackets","indentOnInput","json"],"mappings":"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","sourcesContent":["import { parser } from '@lezer/json';\nimport { LRLanguage, indentNodeProp, continuedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';\nimport { styleTags, tags } from '@codemirror/highlight';\n\n/**\nCalls\n[`JSON.parse`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse)\non the document and, if that throws an error, reports it as a\nsingle diagnostic.\n*/\nconst jsonParseLinter = () => (view) => {\n    try {\n        JSON.parse(view.state.doc.toString());\n    }\n    catch (e) {\n        if (!(e instanceof SyntaxError))\n            throw e;\n        const pos = getErrorPosition(e, view.state.doc);\n        return [{\n                from: pos,\n                message: e.message,\n                severity: 'error',\n                to: pos\n            }];\n    }\n    return [];\n};\nfunction getErrorPosition(error, doc) {\n    let m;\n    if (m = error.message.match(/at position (\\d+)/))\n        return Math.min(+m[1], doc.length);\n    if (m = error.message.match(/at line (\\d+) column (\\d+)/))\n        return Math.min(doc.line(+m[1]).from + (+m[2]) - 1, doc.length);\n    return 0;\n}\n\n/**\nA language provider that provides JSON parsing.\n*/\nconst jsonLanguage = /*@__PURE__*/LRLanguage.define({\n    parser: /*@__PURE__*/parser.configure({\n        props: [\n            /*@__PURE__*/indentNodeProp.add({\n                Object: /*@__PURE__*/continuedIndent({ except: /^\\s*\\}/ }),\n                Array: /*@__PURE__*/continuedIndent({ except: /^\\s*\\]/ })\n            }),\n            /*@__PURE__*/foldNodeProp.add({\n                \"Object Array\": foldInside\n            }),\n            /*@__PURE__*/styleTags({\n                String: tags.string,\n                Number: tags.number,\n                \"True False\": tags.bool,\n                PropertyName: tags.propertyName,\n                null: tags.null,\n                \",\": tags.separator,\n                \"[ ]\": tags.squareBracket,\n                \"{ }\": tags.brace\n            })\n        ]\n    }),\n    languageData: {\n        closeBrackets: { brackets: [\"[\", \"{\", '\"'] },\n        indentOnInput: /^\\s*[\\}\\]]$/\n    }\n});\n/**\nJSON language support.\n*/\nfunction json() {\n    return new LanguageSupport(jsonLanguage);\n}\n\nexport { json, jsonLanguage, jsonParseLinter };\n"]},"metadata":{},"sourceType":"module"}