{"ast":null,"code":"import { ViewPlugin, PluginField, EditorView } from '@codemirror/view';\nimport { Facet } from '@codemirror/state';\nconst panelConfig = /*@__PURE__*/Facet.define({\n  combine(configs) {\n    let topContainer, bottomContainer;\n\n    for (let c of configs) {\n      topContainer = topContainer || c.topContainer;\n      bottomContainer = bottomContainer || c.bottomContainer;\n    }\n\n    return {\n      topContainer,\n      bottomContainer\n    };\n  }\n\n});\n/**\nConfigures the panel-managing extension.\n*/\n\nfunction panels(config) {\n  return config ? [panelConfig.of(config)] : [];\n}\n/**\nGet the active panel created by the given constructor, if any.\nThis can be useful when you need access to your panels' DOM\nstructure.\n*/\n\n\nfunction getPanel(view, panel) {\n  let plugin = view.plugin(panelPlugin);\n  let index = plugin ? plugin.specs.indexOf(panel) : -1;\n  return index > -1 ? plugin.panels[index] : null;\n}\n\nconst panelPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {\n  constructor(view) {\n    this.input = view.state.facet(showPanel);\n    this.specs = this.input.filter(s => s);\n    this.panels = this.specs.map(spec => spec(view));\n    let conf = view.state.facet(panelConfig);\n    this.top = new PanelGroup(view, true, conf.topContainer);\n    this.bottom = new PanelGroup(view, false, conf.bottomContainer);\n    this.top.sync(this.panels.filter(p => p.top));\n    this.bottom.sync(this.panels.filter(p => !p.top));\n\n    for (let p of this.panels) {\n      p.dom.classList.add(\"cm-panel\");\n      if (p.mount) p.mount();\n    }\n  }\n\n  update(update) {\n    let conf = update.state.facet(panelConfig);\n\n    if (this.top.container != conf.topContainer) {\n      this.top.sync([]);\n      this.top = new PanelGroup(update.view, true, conf.topContainer);\n    }\n\n    if (this.bottom.container != conf.bottomContainer) {\n      this.bottom.sync([]);\n      this.bottom = new PanelGroup(update.view, false, conf.bottomContainer);\n    }\n\n    this.top.syncClasses();\n    this.bottom.syncClasses();\n    let input = update.state.facet(showPanel);\n\n    if (input != this.input) {\n      let specs = input.filter(x => x);\n      let panels = [],\n          top = [],\n          bottom = [],\n          mount = [];\n\n      for (let spec of specs) {\n        let known = this.specs.indexOf(spec),\n            panel;\n\n        if (known < 0) {\n          panel = spec(update.view);\n          mount.push(panel);\n        } else {\n          panel = this.panels[known];\n          if (panel.update) panel.update(update);\n        }\n\n        panels.push(panel);\n        (panel.top ? top : bottom).push(panel);\n      }\n\n      this.specs = specs;\n      this.panels = panels;\n      this.top.sync(top);\n      this.bottom.sync(bottom);\n\n      for (let p of mount) {\n        p.dom.classList.add(\"cm-panel\");\n        if (p.mount) p.mount();\n      }\n    } else {\n      for (let p of this.panels) if (p.update) p.update(update);\n    }\n  }\n\n  destroy() {\n    this.top.sync([]);\n    this.bottom.sync([]);\n  }\n\n}, {\n  provide: /*@__PURE__*/PluginField.scrollMargins.from(value => ({\n    top: value.top.scrollMargin(),\n    bottom: value.bottom.scrollMargin()\n  }))\n});\n\nclass PanelGroup {\n  constructor(view, top, container) {\n    this.view = view;\n    this.top = top;\n    this.container = container;\n    this.dom = undefined;\n    this.classes = \"\";\n    this.panels = [];\n    this.syncClasses();\n  }\n\n  sync(panels) {\n    for (let p of this.panels) if (p.destroy && panels.indexOf(p) < 0) p.destroy();\n\n    this.panels = panels;\n    this.syncDOM();\n  }\n\n  syncDOM() {\n    if (this.panels.length == 0) {\n      if (this.dom) {\n        this.dom.remove();\n        this.dom = undefined;\n      }\n\n      return;\n    }\n\n    if (!this.dom) {\n      this.dom = document.createElement(\"div\");\n      this.dom.className = this.top ? \"cm-panels cm-panels-top\" : \"cm-panels cm-panels-bottom\";\n      this.dom.style[this.top ? \"top\" : \"bottom\"] = \"0\";\n      let parent = this.container || this.view.dom;\n      parent.insertBefore(this.dom, this.top ? parent.firstChild : null);\n    }\n\n    let curDOM = this.dom.firstChild;\n\n    for (let panel of this.panels) {\n      if (panel.dom.parentNode == this.dom) {\n        while (curDOM != panel.dom) curDOM = rm(curDOM);\n\n        curDOM = curDOM.nextSibling;\n      } else {\n        this.dom.insertBefore(panel.dom, curDOM);\n      }\n    }\n\n    while (curDOM) curDOM = rm(curDOM);\n  }\n\n  scrollMargin() {\n    return !this.dom || this.container ? 0 : Math.max(0, this.top ? this.dom.getBoundingClientRect().bottom - Math.max(0, this.view.scrollDOM.getBoundingClientRect().top) : Math.min(innerHeight, this.view.scrollDOM.getBoundingClientRect().bottom) - this.dom.getBoundingClientRect().top);\n  }\n\n  syncClasses() {\n    if (!this.container || this.classes == this.view.themeClasses) return;\n\n    for (let cls of this.classes.split(\" \")) if (cls) this.container.classList.remove(cls);\n\n    for (let cls of (this.classes = this.view.themeClasses).split(\" \")) if (cls) this.container.classList.add(cls);\n  }\n\n}\n\nfunction rm(node) {\n  let next = node.nextSibling;\n  node.remove();\n  return next;\n}\n\nconst baseTheme = /*@__PURE__*/EditorView.baseTheme({\n  \".cm-panels\": {\n    boxSizing: \"border-box\",\n    position: \"sticky\",\n    left: 0,\n    right: 0\n  },\n  \"&light .cm-panels\": {\n    backgroundColor: \"#f5f5f5\",\n    color: \"black\"\n  },\n  \"&light .cm-panels-top\": {\n    borderBottom: \"1px solid #ddd\"\n  },\n  \"&light .cm-panels-bottom\": {\n    borderTop: \"1px solid #ddd\"\n  },\n  \"&dark .cm-panels\": {\n    backgroundColor: \"#333338\",\n    color: \"white\"\n  }\n});\n/**\nOpening a panel is done by providing a constructor function for\nthe panel through this facet. (The panel is closed again when its\nconstructor is no longer provided.) Values of `null` are ignored.\n*/\n\nconst showPanel = /*@__PURE__*/Facet.define({\n  enables: [panelPlugin, baseTheme]\n});\nexport { getPanel, panels, showPanel };","map":{"version":3,"sources":["C:/Users/pc/Desktop/live-code-editor/client/node_modules/@codemirror/panel/dist/index.js"],"names":["ViewPlugin","PluginField","EditorView","Facet","panelConfig","define","combine","configs","topContainer","bottomContainer","c","panels","config","of","getPanel","view","panel","plugin","panelPlugin","index","specs","indexOf","fromClass","constructor","input","state","facet","showPanel","filter","s","map","spec","conf","top","PanelGroup","bottom","sync","p","dom","classList","add","mount","update","container","syncClasses","x","known","push","destroy","provide","scrollMargins","from","value","scrollMargin","undefined","classes","syncDOM","length","remove","document","createElement","className","style","parent","insertBefore","firstChild","curDOM","parentNode","rm","nextSibling","Math","max","getBoundingClientRect","scrollDOM","min","innerHeight","themeClasses","cls","split","node","next","baseTheme","boxSizing","position","left","right","backgroundColor","color","borderBottom","borderTop","enables"],"mappings":"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","sourcesContent":["import { ViewPlugin, PluginField, EditorView } from '@codemirror/view';\nimport { Facet } from '@codemirror/state';\n\nconst panelConfig = /*@__PURE__*/Facet.define({\n    combine(configs) {\n        let topContainer, bottomContainer;\n        for (let c of configs) {\n            topContainer = topContainer || c.topContainer;\n            bottomContainer = bottomContainer || c.bottomContainer;\n        }\n        return { topContainer, bottomContainer };\n    }\n});\n/**\nConfigures the panel-managing extension.\n*/\nfunction panels(config) {\n    return config ? [panelConfig.of(config)] : [];\n}\n/**\nGet the active panel created by the given constructor, if any.\nThis can be useful when you need access to your panels' DOM\nstructure.\n*/\nfunction getPanel(view, panel) {\n    let plugin = view.plugin(panelPlugin);\n    let index = plugin ? plugin.specs.indexOf(panel) : -1;\n    return index > -1 ? plugin.panels[index] : null;\n}\nconst panelPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {\n    constructor(view) {\n        this.input = view.state.facet(showPanel);\n        this.specs = this.input.filter(s => s);\n        this.panels = this.specs.map(spec => spec(view));\n        let conf = view.state.facet(panelConfig);\n        this.top = new PanelGroup(view, true, conf.topContainer);\n        this.bottom = new PanelGroup(view, false, conf.bottomContainer);\n        this.top.sync(this.panels.filter(p => p.top));\n        this.bottom.sync(this.panels.filter(p => !p.top));\n        for (let p of this.panels) {\n            p.dom.classList.add(\"cm-panel\");\n            if (p.mount)\n                p.mount();\n        }\n    }\n    update(update) {\n        let conf = update.state.facet(panelConfig);\n        if (this.top.container != conf.topContainer) {\n            this.top.sync([]);\n            this.top = new PanelGroup(update.view, true, conf.topContainer);\n        }\n        if (this.bottom.container != conf.bottomContainer) {\n            this.bottom.sync([]);\n            this.bottom = new PanelGroup(update.view, false, conf.bottomContainer);\n        }\n        this.top.syncClasses();\n        this.bottom.syncClasses();\n        let input = update.state.facet(showPanel);\n        if (input != this.input) {\n            let specs = input.filter(x => x);\n            let panels = [], top = [], bottom = [], mount = [];\n            for (let spec of specs) {\n                let known = this.specs.indexOf(spec), panel;\n                if (known < 0) {\n                    panel = spec(update.view);\n                    mount.push(panel);\n                }\n                else {\n                    panel = this.panels[known];\n                    if (panel.update)\n                        panel.update(update);\n                }\n                panels.push(panel);\n                (panel.top ? top : bottom).push(panel);\n            }\n            this.specs = specs;\n            this.panels = panels;\n            this.top.sync(top);\n            this.bottom.sync(bottom);\n            for (let p of mount) {\n                p.dom.classList.add(\"cm-panel\");\n                if (p.mount)\n                    p.mount();\n            }\n        }\n        else {\n            for (let p of this.panels)\n                if (p.update)\n                    p.update(update);\n        }\n    }\n    destroy() {\n        this.top.sync([]);\n        this.bottom.sync([]);\n    }\n}, {\n    provide: /*@__PURE__*/PluginField.scrollMargins.from(value => ({ top: value.top.scrollMargin(), bottom: value.bottom.scrollMargin() }))\n});\nclass PanelGroup {\n    constructor(view, top, container) {\n        this.view = view;\n        this.top = top;\n        this.container = container;\n        this.dom = undefined;\n        this.classes = \"\";\n        this.panels = [];\n        this.syncClasses();\n    }\n    sync(panels) {\n        for (let p of this.panels)\n            if (p.destroy && panels.indexOf(p) < 0)\n                p.destroy();\n        this.panels = panels;\n        this.syncDOM();\n    }\n    syncDOM() {\n        if (this.panels.length == 0) {\n            if (this.dom) {\n                this.dom.remove();\n                this.dom = undefined;\n            }\n            return;\n        }\n        if (!this.dom) {\n            this.dom = document.createElement(\"div\");\n            this.dom.className = this.top ? \"cm-panels cm-panels-top\" : \"cm-panels cm-panels-bottom\";\n            this.dom.style[this.top ? \"top\" : \"bottom\"] = \"0\";\n            let parent = this.container || this.view.dom;\n            parent.insertBefore(this.dom, this.top ? parent.firstChild : null);\n        }\n        let curDOM = this.dom.firstChild;\n        for (let panel of this.panels) {\n            if (panel.dom.parentNode == this.dom) {\n                while (curDOM != panel.dom)\n                    curDOM = rm(curDOM);\n                curDOM = curDOM.nextSibling;\n            }\n            else {\n                this.dom.insertBefore(panel.dom, curDOM);\n            }\n        }\n        while (curDOM)\n            curDOM = rm(curDOM);\n    }\n    scrollMargin() {\n        return !this.dom || this.container ? 0\n            : Math.max(0, this.top ?\n                this.dom.getBoundingClientRect().bottom - Math.max(0, this.view.scrollDOM.getBoundingClientRect().top) :\n                Math.min(innerHeight, this.view.scrollDOM.getBoundingClientRect().bottom) - this.dom.getBoundingClientRect().top);\n    }\n    syncClasses() {\n        if (!this.container || this.classes == this.view.themeClasses)\n            return;\n        for (let cls of this.classes.split(\" \"))\n            if (cls)\n                this.container.classList.remove(cls);\n        for (let cls of (this.classes = this.view.themeClasses).split(\" \"))\n            if (cls)\n                this.container.classList.add(cls);\n    }\n}\nfunction rm(node) {\n    let next = node.nextSibling;\n    node.remove();\n    return next;\n}\nconst baseTheme = /*@__PURE__*/EditorView.baseTheme({\n    \".cm-panels\": {\n        boxSizing: \"border-box\",\n        position: \"sticky\",\n        left: 0,\n        right: 0\n    },\n    \"&light .cm-panels\": {\n        backgroundColor: \"#f5f5f5\",\n        color: \"black\"\n    },\n    \"&light .cm-panels-top\": {\n        borderBottom: \"1px solid #ddd\"\n    },\n    \"&light .cm-panels-bottom\": {\n        borderTop: \"1px solid #ddd\"\n    },\n    \"&dark .cm-panels\": {\n        backgroundColor: \"#333338\",\n        color: \"white\"\n    }\n});\n/**\nOpening a panel is done by providing a constructor function for\nthe panel through this facet. (The panel is closed again when its\nconstructor is no longer provided.) Values of `null` are ignored.\n*/\nconst showPanel = /*@__PURE__*/Facet.define({\n    enables: [panelPlugin, baseTheme]\n});\n\nexport { getPanel, panels, showPanel };\n"]},"metadata":{},"sourceType":"module"}