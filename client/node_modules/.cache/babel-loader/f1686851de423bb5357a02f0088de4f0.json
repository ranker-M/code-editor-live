{"ast":null,"code":"// Compressed representation of the Grapheme_Cluster_Break=Extend\n// information from\n// http://www.unicode.org/Public/13.0.0/ucd/auxiliary/GraphemeBreakProperty.txt.\n// Each pair of elements represents a range, as an offet from the\n// previous range and a length. Numbers are in base-36, with the empty\n// string being a shorthand for 1.\nlet extend = /*@__PURE__*/\"lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o\".split(\",\").map(s => s ? parseInt(s, 36) : 1); // Convert offsets into absolute values\n\nfor (let i = 1; i < extend.length; i++) extend[i] += extend[i - 1];\n\nfunction isExtendingChar(code) {\n  for (let i = 1; i < extend.length; i += 2) if (extend[i] > code) return extend[i - 1] <= code;\n\n  return false;\n}\n\nfunction isRegionalIndicator(code) {\n  return code >= 0x1F1E6 && code <= 0x1F1FF;\n}\n\nconst ZWJ = 0x200d;\n/**\nReturns a next grapheme cluster break _after_ (not equal to)\n`pos`, if `forward` is true, or before otherwise. Returns `pos`\nitself if no further cluster break is available in the string.\nMoves across surrogate pairs, extending characters (when\n`includeExtending` is true), characters joined with zero-width\njoiners, and flag emoji.\n*/\n\nfunction findClusterBreak(str, pos) {\n  let forward = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  let includeExtending = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  return (forward ? nextClusterBreak : prevClusterBreak)(str, pos, includeExtending);\n}\n\nfunction nextClusterBreak(str, pos, includeExtending) {\n  if (pos == str.length) return pos; // If pos is in the middle of a surrogate pair, move to its start\n\n  if (pos && surrogateLow(str.charCodeAt(pos)) && surrogateHigh(str.charCodeAt(pos - 1))) pos--;\n  let prev = codePointAt(str, pos);\n  pos += codePointSize(prev);\n\n  while (pos < str.length) {\n    let next = codePointAt(str, pos);\n\n    if (prev == ZWJ || next == ZWJ || includeExtending && isExtendingChar(next)) {\n      pos += codePointSize(next);\n      prev = next;\n    } else if (isRegionalIndicator(next)) {\n      let countBefore = 0,\n          i = pos - 2;\n\n      while (i >= 0 && isRegionalIndicator(codePointAt(str, i))) {\n        countBefore++;\n        i -= 2;\n      }\n\n      if (countBefore % 2 == 0) break;else pos += 2;\n    } else {\n      break;\n    }\n  }\n\n  return pos;\n}\n\nfunction prevClusterBreak(str, pos, includeExtending) {\n  while (pos > 0) {\n    let found = nextClusterBreak(str, pos - 2, includeExtending);\n    if (found < pos) return found;\n    pos--;\n  }\n\n  return 0;\n}\n\nfunction surrogateLow(ch) {\n  return ch >= 0xDC00 && ch < 0xE000;\n}\n\nfunction surrogateHigh(ch) {\n  return ch >= 0xD800 && ch < 0xDC00;\n}\n/**\nFind the code point at the given position in a string (like the\n[`codePointAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt)\nstring method).\n*/\n\n\nfunction codePointAt(str, pos) {\n  let code0 = str.charCodeAt(pos);\n  if (!surrogateHigh(code0) || pos + 1 == str.length) return code0;\n  let code1 = str.charCodeAt(pos + 1);\n  if (!surrogateLow(code1)) return code0;\n  return (code0 - 0xd800 << 10) + (code1 - 0xdc00) + 0x10000;\n}\n/**\nGiven a Unicode codepoint, return the JavaScript string that\nrespresents it (like\n[`String.fromCodePoint`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)).\n*/\n\n\nfunction fromCodePoint(code) {\n  if (code <= 0xffff) return String.fromCharCode(code);\n  code -= 0x10000;\n  return String.fromCharCode((code >> 10) + 0xd800, (code & 1023) + 0xdc00);\n}\n/**\nThe first character that takes up two positions in a JavaScript\nstring. It is often useful to compare with this after calling\n`codePointAt`, to figure out whether your character takes up 1 or\n2 index positions.\n*/\n\n\nfunction codePointSize(code) {\n  return code < 0x10000 ? 1 : 2;\n}\n/**\nCount the column position at the given offset into the string,\ntaking extending characters and tab size into account.\n*/\n\n\nfunction countColumn(string, tabSize) {\n  let to = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : string.length;\n  let n = 0;\n\n  for (let i = 0; i < to;) {\n    if (string.charCodeAt(i) == 9) {\n      n += tabSize - n % tabSize;\n      i++;\n    } else {\n      n++;\n      i = findClusterBreak(string, i);\n    }\n  }\n\n  return n;\n}\n/**\nFind the offset that corresponds to the given column position in a\nstring, taking extending characters and tab size into account. By\ndefault, the string length is returned when it is too short to\nreach the column. Pass `strict` true to make it return -1 in that\nsituation.\n*/\n\n\nfunction findColumn(string, col, tabSize, strict) {\n  for (let i = 0, n = 0;;) {\n    if (n >= col) return i;\n    if (i == string.length) break;\n    n += string.charCodeAt(i) == 9 ? tabSize - n % tabSize : 1;\n    i = findClusterBreak(string, i);\n  }\n\n  return strict === true ? -1 : string.length;\n}\n/**\nThe data structure for documents.\n*/\n\n\nclass Text {\n  /**\n  @internal\n  */\n  constructor() {}\n  /**\n  Get the line description around the given position.\n  */\n\n\n  lineAt(pos) {\n    if (pos < 0 || pos > this.length) throw new RangeError(`Invalid position ${pos} in document of length ${this.length}`);\n    return this.lineInner(pos, false, 1, 0);\n  }\n  /**\n  Get the description for the given (1-based) line number.\n  */\n\n\n  line(n) {\n    if (n < 1 || n > this.lines) throw new RangeError(`Invalid line number ${n} in ${this.lines}-line document`);\n    return this.lineInner(n, true, 1, 0);\n  }\n  /**\n  Replace a range of the text with the given content.\n  */\n\n\n  replace(from, to, text) {\n    let parts = [];\n    this.decompose(0, from, parts, 2\n    /* To */\n    );\n    if (text.length) text.decompose(0, text.length, parts, 1\n    /* From */\n    | 2\n    /* To */\n    );\n    this.decompose(to, this.length, parts, 1\n    /* From */\n    );\n    return TextNode.from(parts, this.length - (to - from) + text.length);\n  }\n  /**\n  Append another document to this one.\n  */\n\n\n  append(other) {\n    return this.replace(this.length, this.length, other);\n  }\n  /**\n  Retrieve the text between the given points.\n  */\n\n\n  slice(from) {\n    let to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.length;\n    let parts = [];\n    this.decompose(from, to, parts, 0);\n    return TextNode.from(parts, to - from);\n  }\n  /**\n  Test whether this text is equal to another instance.\n  */\n\n\n  eq(other) {\n    if (other == this) return true;\n    if (other.length != this.length || other.lines != this.lines) return false;\n    let start = this.scanIdentical(other, 1),\n        end = this.length - this.scanIdentical(other, -1);\n    let a = new RawTextCursor(this),\n        b = new RawTextCursor(other);\n\n    for (let skip = start, pos = start;;) {\n      a.next(skip);\n      b.next(skip);\n      skip = 0;\n      if (a.lineBreak != b.lineBreak || a.done != b.done || a.value != b.value) return false;\n      pos += a.value.length;\n      if (a.done || pos >= end) return true;\n    }\n  }\n  /**\n  Iterate over the text. When `dir` is `-1`, iteration happens\n  from end to start. This will return lines and the breaks between\n  them as separate strings, and for long lines, might split lines\n  themselves into multiple chunks as well.\n  */\n\n\n  iter() {\n    let dir = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return new RawTextCursor(this, dir);\n  }\n  /**\n  Iterate over a range of the text. When `from` > `to`, the\n  iterator will run in reverse.\n  */\n\n\n  iterRange(from) {\n    let to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.length;\n    return new PartialTextCursor(this, from, to);\n  }\n  /**\n  Return a cursor that iterates over the given range of lines,\n  _without_ returning the line breaks between, and yielding empty\n  strings for empty lines.\n  \n  When `from` and `to` are given, they should be 1-based line numbers.\n  */\n\n\n  iterLines(from, to) {\n    let inner;\n\n    if (from == null) {\n      inner = this.iter();\n    } else {\n      if (to == null) to = this.lines + 1;\n      let start = this.line(from).from;\n      inner = this.iterRange(start, Math.max(start, to == this.lines + 1 ? this.length : to <= 1 ? 0 : this.line(to - 1).to));\n    }\n\n    return new LineCursor(inner);\n  }\n  /**\n  @internal\n  */\n\n\n  toString() {\n    return this.sliceString(0);\n  }\n  /**\n  Convert the document to an array of lines (which can be\n  deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#text.Text^of)).\n  */\n\n\n  toJSON() {\n    let lines = [];\n    this.flatten(lines);\n    return lines;\n  }\n  /**\n  Create a `Text` instance for the given array of lines.\n  */\n\n\n  static of(text) {\n    if (text.length == 0) throw new RangeError(\"A document must have at least one line\");\n    if (text.length == 1 && !text[0]) return Text.empty;\n    return text.length <= 32\n    /* Branch */\n    ? new TextLeaf(text) : TextNode.from(TextLeaf.split(text, []));\n  }\n\n} // Leaves store an array of line strings. There are always line breaks\n// between these strings. Leaves are limited in size and have to be\n// contained in TextNode instances for bigger documents.\n\n\nclass TextLeaf extends Text {\n  constructor(text) {\n    let length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : textLength(text);\n    super();\n    this.text = text;\n    this.length = length;\n  }\n\n  get lines() {\n    return this.text.length;\n  }\n\n  get children() {\n    return null;\n  }\n\n  lineInner(target, isLine, line, offset) {\n    for (let i = 0;; i++) {\n      let string = this.text[i],\n          end = offset + string.length;\n      if ((isLine ? line : end) >= target) return new Line(offset, end, line, string);\n      offset = end + 1;\n      line++;\n    }\n  }\n\n  decompose(from, to, target, open) {\n    let text = from <= 0 && to >= this.length ? this : new TextLeaf(sliceText(this.text, from, to), Math.min(to, this.length) - Math.max(0, from));\n\n    if (open & 1\n    /* From */\n    ) {\n      let prev = target.pop();\n      let joined = appendText(text.text, prev.text.slice(), 0, text.length);\n\n      if (joined.length <= 32\n      /* Branch */\n      ) {\n        target.push(new TextLeaf(joined, prev.length + text.length));\n      } else {\n        let mid = joined.length >> 1;\n        target.push(new TextLeaf(joined.slice(0, mid)), new TextLeaf(joined.slice(mid)));\n      }\n    } else {\n      target.push(text);\n    }\n  }\n\n  replace(from, to, text) {\n    if (!(text instanceof TextLeaf)) return super.replace(from, to, text);\n    let lines = appendText(this.text, appendText(text.text, sliceText(this.text, 0, from)), to);\n    let newLen = this.length + text.length - (to - from);\n    if (lines.length <= 32\n    /* Branch */\n    ) return new TextLeaf(lines, newLen);\n    return TextNode.from(TextLeaf.split(lines, []), newLen);\n  }\n\n  sliceString(from) {\n    let to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.length;\n    let lineSep = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\\n\";\n    let result = \"\";\n\n    for (let pos = 0, i = 0; pos <= to && i < this.text.length; i++) {\n      let line = this.text[i],\n          end = pos + line.length;\n      if (pos > from && i) result += lineSep;\n      if (from < end && to > pos) result += line.slice(Math.max(0, from - pos), to - pos);\n      pos = end + 1;\n    }\n\n    return result;\n  }\n\n  flatten(target) {\n    for (let line of this.text) target.push(line);\n  }\n\n  scanIdentical() {\n    return 0;\n  }\n\n  static split(text, target) {\n    let part = [],\n        len = -1;\n\n    for (let line of text) {\n      part.push(line);\n      len += line.length + 1;\n\n      if (part.length == 32\n      /* Branch */\n      ) {\n        target.push(new TextLeaf(part, len));\n        part = [];\n        len = -1;\n      }\n    }\n\n    if (len > -1) target.push(new TextLeaf(part, len));\n    return target;\n  }\n\n} // Nodes provide the tree structure of the `Text` type. They store a\n// number of other nodes or leaves, taking care to balance themselves\n// on changes. There are implied line breaks _between_ the children of\n// a node (but not before the first or after the last child).\n\n\nclass TextNode extends Text {\n  constructor(children, length) {\n    super();\n    this.children = children;\n    this.length = length;\n    this.lines = 0;\n\n    for (let child of children) this.lines += child.lines;\n  }\n\n  lineInner(target, isLine, line, offset) {\n    for (let i = 0;; i++) {\n      let child = this.children[i],\n          end = offset + child.length,\n          endLine = line + child.lines - 1;\n      if ((isLine ? endLine : end) >= target) return child.lineInner(target, isLine, line, offset);\n      offset = end + 1;\n      line = endLine + 1;\n    }\n  }\n\n  decompose(from, to, target, open) {\n    for (let i = 0, pos = 0; pos <= to && i < this.children.length; i++) {\n      let child = this.children[i],\n          end = pos + child.length;\n\n      if (from <= end && to >= pos) {\n        let childOpen = open & ((pos <= from ? 1\n        /* From */\n        : 0) | (end >= to ? 2\n        /* To */\n        : 0));\n        if (pos >= from && end <= to && !childOpen) target.push(child);else child.decompose(from - pos, to - pos, target, childOpen);\n      }\n\n      pos = end + 1;\n    }\n  }\n\n  replace(from, to, text) {\n    if (text.lines < this.lines) for (let i = 0, pos = 0; i < this.children.length; i++) {\n      let child = this.children[i],\n          end = pos + child.length; // Fast path: if the change only affects one child and the\n      // child's size remains in the acceptable range, only update\n      // that child\n\n      if (from >= pos && to <= end) {\n        let updated = child.replace(from - pos, to - pos, text);\n        let totalLines = this.lines - child.lines + updated.lines;\n\n        if (updated.lines < totalLines >> 5\n        /* BranchShift */\n        - 1 && updated.lines > totalLines >> 5\n        /* BranchShift */\n        + 1) {\n          let copy = this.children.slice();\n          copy[i] = updated;\n          return new TextNode(copy, this.length - (to - from) + text.length);\n        }\n\n        return super.replace(pos, end, updated);\n      }\n\n      pos = end + 1;\n    }\n    return super.replace(from, to, text);\n  }\n\n  sliceString(from) {\n    let to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.length;\n    let lineSep = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\\n\";\n    let result = \"\";\n\n    for (let i = 0, pos = 0; i < this.children.length && pos <= to; i++) {\n      let child = this.children[i],\n          end = pos + child.length;\n      if (pos > from && i) result += lineSep;\n      if (from < end && to > pos) result += child.sliceString(from - pos, to - pos, lineSep);\n      pos = end + 1;\n    }\n\n    return result;\n  }\n\n  flatten(target) {\n    for (let child of this.children) child.flatten(target);\n  }\n\n  scanIdentical(other, dir) {\n    if (!(other instanceof TextNode)) return 0;\n    let length = 0;\n    let [iA, iB, eA, eB] = dir > 0 ? [0, 0, this.children.length, other.children.length] : [this.children.length - 1, other.children.length - 1, -1, -1];\n\n    for (;; iA += dir, iB += dir) {\n      if (iA == eA || iB == eB) return length;\n      let chA = this.children[iA],\n          chB = other.children[iB];\n      if (chA != chB) return length + chA.scanIdentical(chB, dir);\n      length += chA.length + 1;\n    }\n  }\n\n  static from(children) {\n    let length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : children.reduce((l, ch) => l + ch.length + 1, -1);\n    let lines = 0;\n\n    for (let ch of children) lines += ch.lines;\n\n    if (lines < 32\n    /* Branch */\n    ) {\n      let flat = [];\n\n      for (let ch of children) ch.flatten(flat);\n\n      return new TextLeaf(flat, length);\n    }\n\n    let chunk = Math.max(32\n    /* Branch */\n    , lines >> 5\n    /* BranchShift */\n    ),\n        maxChunk = chunk << 1,\n        minChunk = chunk >> 1;\n    let chunked = [],\n        currentLines = 0,\n        currentLen = -1,\n        currentChunk = [];\n\n    function add(child) {\n      let last;\n\n      if (child.lines > maxChunk && child instanceof TextNode) {\n        for (let node of child.children) add(node);\n      } else if (child.lines > minChunk && (currentLines > minChunk || !currentLines)) {\n        flush();\n        chunked.push(child);\n      } else if (child instanceof TextLeaf && currentLines && (last = currentChunk[currentChunk.length - 1]) instanceof TextLeaf && child.lines + last.lines <= 32\n      /* Branch */\n      ) {\n        currentLines += child.lines;\n        currentLen += child.length + 1;\n        currentChunk[currentChunk.length - 1] = new TextLeaf(last.text.concat(child.text), last.length + 1 + child.length);\n      } else {\n        if (currentLines + child.lines > chunk) flush();\n        currentLines += child.lines;\n        currentLen += child.length + 1;\n        currentChunk.push(child);\n      }\n    }\n\n    function flush() {\n      if (currentLines == 0) return;\n      chunked.push(currentChunk.length == 1 ? currentChunk[0] : TextNode.from(currentChunk, currentLen));\n      currentLen = -1;\n      currentLines = currentChunk.length = 0;\n    }\n\n    for (let child of children) add(child);\n\n    flush();\n    return chunked.length == 1 ? chunked[0] : new TextNode(chunked, length);\n  }\n\n}\n\nText.empty = /*@__PURE__*/new TextLeaf([\"\"], 0);\n\nfunction textLength(text) {\n  let length = -1;\n\n  for (let line of text) length += line.length + 1;\n\n  return length;\n}\n\nfunction appendText(text, target) {\n  let from = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  let to = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1e9;\n\n  for (let pos = 0, i = 0, first = true; i < text.length && pos <= to; i++) {\n    let line = text[i],\n        end = pos + line.length;\n\n    if (end >= from) {\n      if (end > to) line = line.slice(0, to - pos);\n      if (pos < from) line = line.slice(from - pos);\n\n      if (first) {\n        target[target.length - 1] += line;\n        first = false;\n      } else target.push(line);\n    }\n\n    pos = end + 1;\n  }\n\n  return target;\n}\n\nfunction sliceText(text, from, to) {\n  return appendText(text, [\"\"], from, to);\n}\n\nclass RawTextCursor {\n  constructor(text) {\n    let dir = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    this.dir = dir;\n    this.done = false;\n    this.lineBreak = false;\n    this.value = \"\";\n    this.nodes = [text];\n    this.offsets = [dir > 0 ? 1 : (text instanceof TextLeaf ? text.text.length : text.children.length) << 1];\n  }\n\n  nextInner(skip, dir) {\n    this.done = this.lineBreak = false;\n\n    for (;;) {\n      let last = this.nodes.length - 1;\n      let top = this.nodes[last],\n          offsetValue = this.offsets[last],\n          offset = offsetValue >> 1;\n      let size = top instanceof TextLeaf ? top.text.length : top.children.length;\n\n      if (offset == (dir > 0 ? size : 0)) {\n        if (last == 0) {\n          this.done = true;\n          this.value = \"\";\n          return this;\n        }\n\n        if (dir > 0) this.offsets[last - 1]++;\n        this.nodes.pop();\n        this.offsets.pop();\n      } else if ((offsetValue & 1) == (dir > 0 ? 0 : 1)) {\n        this.offsets[last] += dir;\n\n        if (skip == 0) {\n          this.lineBreak = true;\n          this.value = \"\\n\";\n          return this;\n        }\n\n        skip--;\n      } else if (top instanceof TextLeaf) {\n        // Move to the next string\n        let next = top.text[offset + (dir < 0 ? -1 : 0)];\n        this.offsets[last] += dir;\n\n        if (next.length > Math.max(0, skip)) {\n          this.value = skip == 0 ? next : dir > 0 ? next.slice(skip) : next.slice(0, next.length - skip);\n          return this;\n        }\n\n        skip -= next.length;\n      } else {\n        let next = top.children[offset + (dir < 0 ? -1 : 0)];\n\n        if (skip > next.length) {\n          skip -= next.length;\n          this.offsets[last] += dir;\n        } else {\n          if (dir < 0) this.offsets[last]--;\n          this.nodes.push(next);\n          this.offsets.push(dir > 0 ? 1 : (next instanceof TextLeaf ? next.text.length : next.children.length) << 1);\n        }\n      }\n    }\n  }\n\n  next() {\n    let skip = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n    if (skip < 0) {\n      this.nextInner(-skip, -this.dir);\n      skip = this.value.length;\n    }\n\n    return this.nextInner(skip, this.dir);\n  }\n\n}\n\nclass PartialTextCursor {\n  constructor(text, start, end) {\n    this.value = \"\";\n    this.done = false;\n    this.cursor = new RawTextCursor(text, start > end ? -1 : 1);\n    this.pos = start > end ? text.length : 0;\n    this.from = Math.min(start, end);\n    this.to = Math.max(start, end);\n  }\n\n  nextInner(skip, dir) {\n    if (dir < 0 ? this.pos <= this.from : this.pos >= this.to) {\n      this.value = \"\";\n      this.done = true;\n      return this;\n    }\n\n    skip += Math.max(0, dir < 0 ? this.pos - this.to : this.from - this.pos);\n    let limit = dir < 0 ? this.pos - this.from : this.to - this.pos;\n    if (skip > limit) skip = limit;\n    limit -= skip;\n    let {\n      value\n    } = this.cursor.next(skip);\n    this.pos += (value.length + skip) * dir;\n    this.value = value.length <= limit ? value : dir < 0 ? value.slice(value.length - limit) : value.slice(0, limit);\n    this.done = !this.value;\n    return this;\n  }\n\n  next() {\n    let skip = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    if (skip < 0) skip = Math.max(skip, this.from - this.pos);else if (skip > 0) skip = Math.min(skip, this.to - this.pos);\n    return this.nextInner(skip, this.cursor.dir);\n  }\n\n  get lineBreak() {\n    return this.cursor.lineBreak && this.value != \"\";\n  }\n\n}\n\nclass LineCursor {\n  constructor(inner) {\n    this.inner = inner;\n    this.afterBreak = true;\n    this.value = \"\";\n    this.done = false;\n  }\n\n  next() {\n    let skip = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let {\n      done,\n      lineBreak,\n      value\n    } = this.inner.next(skip);\n\n    if (done) {\n      this.done = true;\n      this.value = \"\";\n    } else if (lineBreak) {\n      if (this.afterBreak) {\n        this.value = \"\";\n      } else {\n        this.afterBreak = true;\n        this.next();\n      }\n    } else {\n      this.value = value;\n      this.afterBreak = false;\n    }\n\n    return this;\n  }\n\n  get lineBreak() {\n    return false;\n  }\n\n}\n\nif (typeof Symbol != \"undefined\") {\n  Text.prototype[Symbol.iterator] = function () {\n    return this.iter();\n  };\n\n  RawTextCursor.prototype[Symbol.iterator] = PartialTextCursor.prototype[Symbol.iterator] = LineCursor.prototype[Symbol.iterator] = function () {\n    return this;\n  };\n}\n/**\nThis type describes a line in the document. It is created\non-demand when lines are [queried](https://codemirror.net/6/docs/ref/#text.Text.lineAt).\n*/\n\n\nclass Line {\n  /**\n  @internal\n  */\n  constructor(\n  /**\n  The position of the start of the line.\n  */\n  from,\n  /**\n  The position at the end of the line (_before_ the line break,\n  or at the end of document for the last line).\n  */\n  to,\n  /**\n  This line's line number (1-based).\n  */\n  number,\n  /**\n  The line's content.\n  */\n  text) {\n    this.from = from;\n    this.to = to;\n    this.number = number;\n    this.text = text;\n  }\n  /**\n  The length of the line (not including any line break after it).\n  */\n\n\n  get length() {\n    return this.to - this.from;\n  }\n\n}\n\nexport { Line, Text, codePointAt, codePointSize, countColumn, findClusterBreak, findColumn, fromCodePoint };","map":{"version":3,"sources":["C:/Users/pc/Desktop/live-code-editor/client/node_modules/@codemirror/text/dist/index.js"],"names":["extend","split","map","s","parseInt","i","length","isExtendingChar","code","isRegionalIndicator","ZWJ","findClusterBreak","str","pos","forward","includeExtending","nextClusterBreak","prevClusterBreak","surrogateLow","charCodeAt","surrogateHigh","prev","codePointAt","codePointSize","next","countBefore","found","ch","code0","code1","fromCodePoint","String","fromCharCode","countColumn","string","tabSize","to","n","findColumn","col","strict","Text","constructor","lineAt","RangeError","lineInner","line","lines","replace","from","text","parts","decompose","TextNode","append","other","slice","eq","start","scanIdentical","end","a","RawTextCursor","b","skip","lineBreak","done","value","iter","dir","iterRange","PartialTextCursor","iterLines","inner","Math","max","LineCursor","toString","sliceString","toJSON","flatten","of","empty","TextLeaf","textLength","children","target","isLine","offset","Line","open","sliceText","min","pop","joined","appendText","push","mid","newLen","lineSep","result","part","len","child","endLine","childOpen","updated","totalLines","copy","iA","iB","eA","eB","chA","chB","reduce","l","flat","chunk","maxChunk","minChunk","chunked","currentLines","currentLen","currentChunk","add","last","node","flush","concat","first","nodes","offsets","nextInner","top","offsetValue","size","cursor","limit","afterBreak","Symbol","prototype","iterator","number"],"mappings":"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","sourcesContent":["// Compressed representation of the Grapheme_Cluster_Break=Extend\n// information from\n// http://www.unicode.org/Public/13.0.0/ucd/auxiliary/GraphemeBreakProperty.txt.\n// Each pair of elements represents a range, as an offet from the\n// previous range and a length. Numbers are in base-36, with the empty\n// string being a shorthand for 1.\nlet extend = /*@__PURE__*/\"lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o\".split(\",\").map(s => s ? parseInt(s, 36) : 1);\n// Convert offsets into absolute values\nfor (let i = 1; i < extend.length; i++)\n    extend[i] += extend[i - 1];\nfunction isExtendingChar(code) {\n    for (let i = 1; i < extend.length; i += 2)\n        if (extend[i] > code)\n            return extend[i - 1] <= code;\n    return false;\n}\nfunction isRegionalIndicator(code) {\n    return code >= 0x1F1E6 && code <= 0x1F1FF;\n}\nconst ZWJ = 0x200d;\n/**\nReturns a next grapheme cluster break _after_ (not equal to)\n`pos`, if `forward` is true, or before otherwise. Returns `pos`\nitself if no further cluster break is available in the string.\nMoves across surrogate pairs, extending characters (when\n`includeExtending` is true), characters joined with zero-width\njoiners, and flag emoji.\n*/\nfunction findClusterBreak(str, pos, forward = true, includeExtending = true) {\n    return (forward ? nextClusterBreak : prevClusterBreak)(str, pos, includeExtending);\n}\nfunction nextClusterBreak(str, pos, includeExtending) {\n    if (pos == str.length)\n        return pos;\n    // If pos is in the middle of a surrogate pair, move to its start\n    if (pos && surrogateLow(str.charCodeAt(pos)) && surrogateHigh(str.charCodeAt(pos - 1)))\n        pos--;\n    let prev = codePointAt(str, pos);\n    pos += codePointSize(prev);\n    while (pos < str.length) {\n        let next = codePointAt(str, pos);\n        if (prev == ZWJ || next == ZWJ || includeExtending && isExtendingChar(next)) {\n            pos += codePointSize(next);\n            prev = next;\n        }\n        else if (isRegionalIndicator(next)) {\n            let countBefore = 0, i = pos - 2;\n            while (i >= 0 && isRegionalIndicator(codePointAt(str, i))) {\n                countBefore++;\n                i -= 2;\n            }\n            if (countBefore % 2 == 0)\n                break;\n            else\n                pos += 2;\n        }\n        else {\n            break;\n        }\n    }\n    return pos;\n}\nfunction prevClusterBreak(str, pos, includeExtending) {\n    while (pos > 0) {\n        let found = nextClusterBreak(str, pos - 2, includeExtending);\n        if (found < pos)\n            return found;\n        pos--;\n    }\n    return 0;\n}\nfunction surrogateLow(ch) { return ch >= 0xDC00 && ch < 0xE000; }\nfunction surrogateHigh(ch) { return ch >= 0xD800 && ch < 0xDC00; }\n/**\nFind the code point at the given position in a string (like the\n[`codePointAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt)\nstring method).\n*/\nfunction codePointAt(str, pos) {\n    let code0 = str.charCodeAt(pos);\n    if (!surrogateHigh(code0) || pos + 1 == str.length)\n        return code0;\n    let code1 = str.charCodeAt(pos + 1);\n    if (!surrogateLow(code1))\n        return code0;\n    return ((code0 - 0xd800) << 10) + (code1 - 0xdc00) + 0x10000;\n}\n/**\nGiven a Unicode codepoint, return the JavaScript string that\nrespresents it (like\n[`String.fromCodePoint`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)).\n*/\nfunction fromCodePoint(code) {\n    if (code <= 0xffff)\n        return String.fromCharCode(code);\n    code -= 0x10000;\n    return String.fromCharCode((code >> 10) + 0xd800, (code & 1023) + 0xdc00);\n}\n/**\nThe first character that takes up two positions in a JavaScript\nstring. It is often useful to compare with this after calling\n`codePointAt`, to figure out whether your character takes up 1 or\n2 index positions.\n*/\nfunction codePointSize(code) { return code < 0x10000 ? 1 : 2; }\n\n/**\nCount the column position at the given offset into the string,\ntaking extending characters and tab size into account.\n*/\nfunction countColumn(string, tabSize, to = string.length) {\n    let n = 0;\n    for (let i = 0; i < to;) {\n        if (string.charCodeAt(i) == 9) {\n            n += tabSize - (n % tabSize);\n            i++;\n        }\n        else {\n            n++;\n            i = findClusterBreak(string, i);\n        }\n    }\n    return n;\n}\n/**\nFind the offset that corresponds to the given column position in a\nstring, taking extending characters and tab size into account. By\ndefault, the string length is returned when it is too short to\nreach the column. Pass `strict` true to make it return -1 in that\nsituation.\n*/\nfunction findColumn(string, col, tabSize, strict) {\n    for (let i = 0, n = 0;;) {\n        if (n >= col)\n            return i;\n        if (i == string.length)\n            break;\n        n += string.charCodeAt(i) == 9 ? tabSize - (n % tabSize) : 1;\n        i = findClusterBreak(string, i);\n    }\n    return strict === true ? -1 : string.length;\n}\n\n/**\nThe data structure for documents.\n*/\nclass Text {\n    /**\n    @internal\n    */\n    constructor() { }\n    /**\n    Get the line description around the given position.\n    */\n    lineAt(pos) {\n        if (pos < 0 || pos > this.length)\n            throw new RangeError(`Invalid position ${pos} in document of length ${this.length}`);\n        return this.lineInner(pos, false, 1, 0);\n    }\n    /**\n    Get the description for the given (1-based) line number.\n    */\n    line(n) {\n        if (n < 1 || n > this.lines)\n            throw new RangeError(`Invalid line number ${n} in ${this.lines}-line document`);\n        return this.lineInner(n, true, 1, 0);\n    }\n    /**\n    Replace a range of the text with the given content.\n    */\n    replace(from, to, text) {\n        let parts = [];\n        this.decompose(0, from, parts, 2 /* To */);\n        if (text.length)\n            text.decompose(0, text.length, parts, 1 /* From */ | 2 /* To */);\n        this.decompose(to, this.length, parts, 1 /* From */);\n        return TextNode.from(parts, this.length - (to - from) + text.length);\n    }\n    /**\n    Append another document to this one.\n    */\n    append(other) {\n        return this.replace(this.length, this.length, other);\n    }\n    /**\n    Retrieve the text between the given points.\n    */\n    slice(from, to = this.length) {\n        let parts = [];\n        this.decompose(from, to, parts, 0);\n        return TextNode.from(parts, to - from);\n    }\n    /**\n    Test whether this text is equal to another instance.\n    */\n    eq(other) {\n        if (other == this)\n            return true;\n        if (other.length != this.length || other.lines != this.lines)\n            return false;\n        let start = this.scanIdentical(other, 1), end = this.length - this.scanIdentical(other, -1);\n        let a = new RawTextCursor(this), b = new RawTextCursor(other);\n        for (let skip = start, pos = start;;) {\n            a.next(skip);\n            b.next(skip);\n            skip = 0;\n            if (a.lineBreak != b.lineBreak || a.done != b.done || a.value != b.value)\n                return false;\n            pos += a.value.length;\n            if (a.done || pos >= end)\n                return true;\n        }\n    }\n    /**\n    Iterate over the text. When `dir` is `-1`, iteration happens\n    from end to start. This will return lines and the breaks between\n    them as separate strings, and for long lines, might split lines\n    themselves into multiple chunks as well.\n    */\n    iter(dir = 1) { return new RawTextCursor(this, dir); }\n    /**\n    Iterate over a range of the text. When `from` > `to`, the\n    iterator will run in reverse.\n    */\n    iterRange(from, to = this.length) { return new PartialTextCursor(this, from, to); }\n    /**\n    Return a cursor that iterates over the given range of lines,\n    _without_ returning the line breaks between, and yielding empty\n    strings for empty lines.\n    \n    When `from` and `to` are given, they should be 1-based line numbers.\n    */\n    iterLines(from, to) {\n        let inner;\n        if (from == null) {\n            inner = this.iter();\n        }\n        else {\n            if (to == null)\n                to = this.lines + 1;\n            let start = this.line(from).from;\n            inner = this.iterRange(start, Math.max(start, to == this.lines + 1 ? this.length : to <= 1 ? 0 : this.line(to - 1).to));\n        }\n        return new LineCursor(inner);\n    }\n    /**\n    @internal\n    */\n    toString() { return this.sliceString(0); }\n    /**\n    Convert the document to an array of lines (which can be\n    deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#text.Text^of)).\n    */\n    toJSON() {\n        let lines = [];\n        this.flatten(lines);\n        return lines;\n    }\n    /**\n    Create a `Text` instance for the given array of lines.\n    */\n    static of(text) {\n        if (text.length == 0)\n            throw new RangeError(\"A document must have at least one line\");\n        if (text.length == 1 && !text[0])\n            return Text.empty;\n        return text.length <= 32 /* Branch */ ? new TextLeaf(text) : TextNode.from(TextLeaf.split(text, []));\n    }\n}\n// Leaves store an array of line strings. There are always line breaks\n// between these strings. Leaves are limited in size and have to be\n// contained in TextNode instances for bigger documents.\nclass TextLeaf extends Text {\n    constructor(text, length = textLength(text)) {\n        super();\n        this.text = text;\n        this.length = length;\n    }\n    get lines() { return this.text.length; }\n    get children() { return null; }\n    lineInner(target, isLine, line, offset) {\n        for (let i = 0;; i++) {\n            let string = this.text[i], end = offset + string.length;\n            if ((isLine ? line : end) >= target)\n                return new Line(offset, end, line, string);\n            offset = end + 1;\n            line++;\n        }\n    }\n    decompose(from, to, target, open) {\n        let text = from <= 0 && to >= this.length ? this\n            : new TextLeaf(sliceText(this.text, from, to), Math.min(to, this.length) - Math.max(0, from));\n        if (open & 1 /* From */) {\n            let prev = target.pop();\n            let joined = appendText(text.text, prev.text.slice(), 0, text.length);\n            if (joined.length <= 32 /* Branch */) {\n                target.push(new TextLeaf(joined, prev.length + text.length));\n            }\n            else {\n                let mid = joined.length >> 1;\n                target.push(new TextLeaf(joined.slice(0, mid)), new TextLeaf(joined.slice(mid)));\n            }\n        }\n        else {\n            target.push(text);\n        }\n    }\n    replace(from, to, text) {\n        if (!(text instanceof TextLeaf))\n            return super.replace(from, to, text);\n        let lines = appendText(this.text, appendText(text.text, sliceText(this.text, 0, from)), to);\n        let newLen = this.length + text.length - (to - from);\n        if (lines.length <= 32 /* Branch */)\n            return new TextLeaf(lines, newLen);\n        return TextNode.from(TextLeaf.split(lines, []), newLen);\n    }\n    sliceString(from, to = this.length, lineSep = \"\\n\") {\n        let result = \"\";\n        for (let pos = 0, i = 0; pos <= to && i < this.text.length; i++) {\n            let line = this.text[i], end = pos + line.length;\n            if (pos > from && i)\n                result += lineSep;\n            if (from < end && to > pos)\n                result += line.slice(Math.max(0, from - pos), to - pos);\n            pos = end + 1;\n        }\n        return result;\n    }\n    flatten(target) {\n        for (let line of this.text)\n            target.push(line);\n    }\n    scanIdentical() { return 0; }\n    static split(text, target) {\n        let part = [], len = -1;\n        for (let line of text) {\n            part.push(line);\n            len += line.length + 1;\n            if (part.length == 32 /* Branch */) {\n                target.push(new TextLeaf(part, len));\n                part = [];\n                len = -1;\n            }\n        }\n        if (len > -1)\n            target.push(new TextLeaf(part, len));\n        return target;\n    }\n}\n// Nodes provide the tree structure of the `Text` type. They store a\n// number of other nodes or leaves, taking care to balance themselves\n// on changes. There are implied line breaks _between_ the children of\n// a node (but not before the first or after the last child).\nclass TextNode extends Text {\n    constructor(children, length) {\n        super();\n        this.children = children;\n        this.length = length;\n        this.lines = 0;\n        for (let child of children)\n            this.lines += child.lines;\n    }\n    lineInner(target, isLine, line, offset) {\n        for (let i = 0;; i++) {\n            let child = this.children[i], end = offset + child.length, endLine = line + child.lines - 1;\n            if ((isLine ? endLine : end) >= target)\n                return child.lineInner(target, isLine, line, offset);\n            offset = end + 1;\n            line = endLine + 1;\n        }\n    }\n    decompose(from, to, target, open) {\n        for (let i = 0, pos = 0; pos <= to && i < this.children.length; i++) {\n            let child = this.children[i], end = pos + child.length;\n            if (from <= end && to >= pos) {\n                let childOpen = open & ((pos <= from ? 1 /* From */ : 0) | (end >= to ? 2 /* To */ : 0));\n                if (pos >= from && end <= to && !childOpen)\n                    target.push(child);\n                else\n                    child.decompose(from - pos, to - pos, target, childOpen);\n            }\n            pos = end + 1;\n        }\n    }\n    replace(from, to, text) {\n        if (text.lines < this.lines)\n            for (let i = 0, pos = 0; i < this.children.length; i++) {\n                let child = this.children[i], end = pos + child.length;\n                // Fast path: if the change only affects one child and the\n                // child's size remains in the acceptable range, only update\n                // that child\n                if (from >= pos && to <= end) {\n                    let updated = child.replace(from - pos, to - pos, text);\n                    let totalLines = this.lines - child.lines + updated.lines;\n                    if (updated.lines < (totalLines >> (5 /* BranchShift */ - 1)) &&\n                        updated.lines > (totalLines >> (5 /* BranchShift */ + 1))) {\n                        let copy = this.children.slice();\n                        copy[i] = updated;\n                        return new TextNode(copy, this.length - (to - from) + text.length);\n                    }\n                    return super.replace(pos, end, updated);\n                }\n                pos = end + 1;\n            }\n        return super.replace(from, to, text);\n    }\n    sliceString(from, to = this.length, lineSep = \"\\n\") {\n        let result = \"\";\n        for (let i = 0, pos = 0; i < this.children.length && pos <= to; i++) {\n            let child = this.children[i], end = pos + child.length;\n            if (pos > from && i)\n                result += lineSep;\n            if (from < end && to > pos)\n                result += child.sliceString(from - pos, to - pos, lineSep);\n            pos = end + 1;\n        }\n        return result;\n    }\n    flatten(target) {\n        for (let child of this.children)\n            child.flatten(target);\n    }\n    scanIdentical(other, dir) {\n        if (!(other instanceof TextNode))\n            return 0;\n        let length = 0;\n        let [iA, iB, eA, eB] = dir > 0 ? [0, 0, this.children.length, other.children.length]\n            : [this.children.length - 1, other.children.length - 1, -1, -1];\n        for (;; iA += dir, iB += dir) {\n            if (iA == eA || iB == eB)\n                return length;\n            let chA = this.children[iA], chB = other.children[iB];\n            if (chA != chB)\n                return length + chA.scanIdentical(chB, dir);\n            length += chA.length + 1;\n        }\n    }\n    static from(children, length = children.reduce((l, ch) => l + ch.length + 1, -1)) {\n        let lines = 0;\n        for (let ch of children)\n            lines += ch.lines;\n        if (lines < 32 /* Branch */) {\n            let flat = [];\n            for (let ch of children)\n                ch.flatten(flat);\n            return new TextLeaf(flat, length);\n        }\n        let chunk = Math.max(32 /* Branch */, lines >> 5 /* BranchShift */), maxChunk = chunk << 1, minChunk = chunk >> 1;\n        let chunked = [], currentLines = 0, currentLen = -1, currentChunk = [];\n        function add(child) {\n            let last;\n            if (child.lines > maxChunk && child instanceof TextNode) {\n                for (let node of child.children)\n                    add(node);\n            }\n            else if (child.lines > minChunk && (currentLines > minChunk || !currentLines)) {\n                flush();\n                chunked.push(child);\n            }\n            else if (child instanceof TextLeaf && currentLines &&\n                (last = currentChunk[currentChunk.length - 1]) instanceof TextLeaf &&\n                child.lines + last.lines <= 32 /* Branch */) {\n                currentLines += child.lines;\n                currentLen += child.length + 1;\n                currentChunk[currentChunk.length - 1] = new TextLeaf(last.text.concat(child.text), last.length + 1 + child.length);\n            }\n            else {\n                if (currentLines + child.lines > chunk)\n                    flush();\n                currentLines += child.lines;\n                currentLen += child.length + 1;\n                currentChunk.push(child);\n            }\n        }\n        function flush() {\n            if (currentLines == 0)\n                return;\n            chunked.push(currentChunk.length == 1 ? currentChunk[0] : TextNode.from(currentChunk, currentLen));\n            currentLen = -1;\n            currentLines = currentChunk.length = 0;\n        }\n        for (let child of children)\n            add(child);\n        flush();\n        return chunked.length == 1 ? chunked[0] : new TextNode(chunked, length);\n    }\n}\nText.empty = /*@__PURE__*/new TextLeaf([\"\"], 0);\nfunction textLength(text) {\n    let length = -1;\n    for (let line of text)\n        length += line.length + 1;\n    return length;\n}\nfunction appendText(text, target, from = 0, to = 1e9) {\n    for (let pos = 0, i = 0, first = true; i < text.length && pos <= to; i++) {\n        let line = text[i], end = pos + line.length;\n        if (end >= from) {\n            if (end > to)\n                line = line.slice(0, to - pos);\n            if (pos < from)\n                line = line.slice(from - pos);\n            if (first) {\n                target[target.length - 1] += line;\n                first = false;\n            }\n            else\n                target.push(line);\n        }\n        pos = end + 1;\n    }\n    return target;\n}\nfunction sliceText(text, from, to) {\n    return appendText(text, [\"\"], from, to);\n}\nclass RawTextCursor {\n    constructor(text, dir = 1) {\n        this.dir = dir;\n        this.done = false;\n        this.lineBreak = false;\n        this.value = \"\";\n        this.nodes = [text];\n        this.offsets = [dir > 0 ? 1 : (text instanceof TextLeaf ? text.text.length : text.children.length) << 1];\n    }\n    nextInner(skip, dir) {\n        this.done = this.lineBreak = false;\n        for (;;) {\n            let last = this.nodes.length - 1;\n            let top = this.nodes[last], offsetValue = this.offsets[last], offset = offsetValue >> 1;\n            let size = top instanceof TextLeaf ? top.text.length : top.children.length;\n            if (offset == (dir > 0 ? size : 0)) {\n                if (last == 0) {\n                    this.done = true;\n                    this.value = \"\";\n                    return this;\n                }\n                if (dir > 0)\n                    this.offsets[last - 1]++;\n                this.nodes.pop();\n                this.offsets.pop();\n            }\n            else if ((offsetValue & 1) == (dir > 0 ? 0 : 1)) {\n                this.offsets[last] += dir;\n                if (skip == 0) {\n                    this.lineBreak = true;\n                    this.value = \"\\n\";\n                    return this;\n                }\n                skip--;\n            }\n            else if (top instanceof TextLeaf) {\n                // Move to the next string\n                let next = top.text[offset + (dir < 0 ? -1 : 0)];\n                this.offsets[last] += dir;\n                if (next.length > Math.max(0, skip)) {\n                    this.value = skip == 0 ? next : dir > 0 ? next.slice(skip) : next.slice(0, next.length - skip);\n                    return this;\n                }\n                skip -= next.length;\n            }\n            else {\n                let next = top.children[offset + (dir < 0 ? -1 : 0)];\n                if (skip > next.length) {\n                    skip -= next.length;\n                    this.offsets[last] += dir;\n                }\n                else {\n                    if (dir < 0)\n                        this.offsets[last]--;\n                    this.nodes.push(next);\n                    this.offsets.push(dir > 0 ? 1 : (next instanceof TextLeaf ? next.text.length : next.children.length) << 1);\n                }\n            }\n        }\n    }\n    next(skip = 0) {\n        if (skip < 0) {\n            this.nextInner(-skip, (-this.dir));\n            skip = this.value.length;\n        }\n        return this.nextInner(skip, this.dir);\n    }\n}\nclass PartialTextCursor {\n    constructor(text, start, end) {\n        this.value = \"\";\n        this.done = false;\n        this.cursor = new RawTextCursor(text, start > end ? -1 : 1);\n        this.pos = start > end ? text.length : 0;\n        this.from = Math.min(start, end);\n        this.to = Math.max(start, end);\n    }\n    nextInner(skip, dir) {\n        if (dir < 0 ? this.pos <= this.from : this.pos >= this.to) {\n            this.value = \"\";\n            this.done = true;\n            return this;\n        }\n        skip += Math.max(0, dir < 0 ? this.pos - this.to : this.from - this.pos);\n        let limit = dir < 0 ? this.pos - this.from : this.to - this.pos;\n        if (skip > limit)\n            skip = limit;\n        limit -= skip;\n        let { value } = this.cursor.next(skip);\n        this.pos += (value.length + skip) * dir;\n        this.value = value.length <= limit ? value : dir < 0 ? value.slice(value.length - limit) : value.slice(0, limit);\n        this.done = !this.value;\n        return this;\n    }\n    next(skip = 0) {\n        if (skip < 0)\n            skip = Math.max(skip, this.from - this.pos);\n        else if (skip > 0)\n            skip = Math.min(skip, this.to - this.pos);\n        return this.nextInner(skip, this.cursor.dir);\n    }\n    get lineBreak() { return this.cursor.lineBreak && this.value != \"\"; }\n}\nclass LineCursor {\n    constructor(inner) {\n        this.inner = inner;\n        this.afterBreak = true;\n        this.value = \"\";\n        this.done = false;\n    }\n    next(skip = 0) {\n        let { done, lineBreak, value } = this.inner.next(skip);\n        if (done) {\n            this.done = true;\n            this.value = \"\";\n        }\n        else if (lineBreak) {\n            if (this.afterBreak) {\n                this.value = \"\";\n            }\n            else {\n                this.afterBreak = true;\n                this.next();\n            }\n        }\n        else {\n            this.value = value;\n            this.afterBreak = false;\n        }\n        return this;\n    }\n    get lineBreak() { return false; }\n}\nif (typeof Symbol != \"undefined\") {\n    Text.prototype[Symbol.iterator] = function () { return this.iter(); };\n    RawTextCursor.prototype[Symbol.iterator] = PartialTextCursor.prototype[Symbol.iterator] =\n        LineCursor.prototype[Symbol.iterator] = function () { return this; };\n}\n/**\nThis type describes a line in the document. It is created\non-demand when lines are [queried](https://codemirror.net/6/docs/ref/#text.Text.lineAt).\n*/\nclass Line {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    The position of the start of the line.\n    */\n    from, \n    /**\n    The position at the end of the line (_before_ the line break,\n    or at the end of document for the last line).\n    */\n    to, \n    /**\n    This line's line number (1-based).\n    */\n    number, \n    /**\n    The line's content.\n    */\n    text) {\n        this.from = from;\n        this.to = to;\n        this.number = number;\n        this.text = text;\n    }\n    /**\n    The length of the line (not including any line break after it).\n    */\n    get length() { return this.to - this.from; }\n}\n\nexport { Line, Text, codePointAt, codePointSize, countColumn, findClusterBreak, findColumn, fromCodePoint };\n"]},"metadata":{},"sourceType":"module"}