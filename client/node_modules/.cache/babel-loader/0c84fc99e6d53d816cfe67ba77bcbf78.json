{"ast":null,"code":"import { parser } from '@lezer/javascript';\nimport { LRLanguage, indentNodeProp, continuedIndent, flatIndent, delimitedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';\nimport { styleTags, tags } from '@codemirror/highlight';\nimport { snippetCompletion, ifNotIn, completeFromList } from '@codemirror/autocomplete';\n/**\nA collection of JavaScript-related\n[snippets](https://codemirror.net/6/docs/ref/#autocomplete.snippet).\n*/\n\nconst snippets = [/*@__PURE__*/snippetCompletion(\"function ${name}(${params}) {\\n\\t${}\\n}\", {\n  label: \"function\",\n  detail: \"definition\",\n  type: \"keyword\"\n}), /*@__PURE__*/snippetCompletion(\"for (let ${index} = 0; ${index} < ${bound}; ${index}++) {\\n\\t${}\\n}\", {\n  label: \"for\",\n  detail: \"loop\",\n  type: \"keyword\"\n}), /*@__PURE__*/snippetCompletion(\"for (let ${name} of ${collection}) {\\n\\t${}\\n}\", {\n  label: \"for\",\n  detail: \"of loop\",\n  type: \"keyword\"\n}), /*@__PURE__*/snippetCompletion(\"try {\\n\\t${}\\n} catch (${error}) {\\n\\t${}\\n}\", {\n  label: \"try\",\n  detail: \"block\",\n  type: \"keyword\"\n}), /*@__PURE__*/snippetCompletion(\"class ${name} {\\n\\tconstructor(${params}) {\\n\\t\\t${}\\n\\t}\\n}\", {\n  label: \"class\",\n  detail: \"definition\",\n  type: \"keyword\"\n}), /*@__PURE__*/snippetCompletion(\"import {${names}} from \\\"${module}\\\"\\n${}\", {\n  label: \"import\",\n  detail: \"named\",\n  type: \"keyword\"\n}), /*@__PURE__*/snippetCompletion(\"import ${name} from \\\"${module}\\\"\\n${}\", {\n  label: \"import\",\n  detail: \"default\",\n  type: \"keyword\"\n})];\n/**\nA language provider based on the [Lezer JavaScript\nparser](https://github.com/lezer-parser/javascript), extended with\nhighlighting and indentation information.\n*/\n\nconst javascriptLanguage = /*@__PURE__*/LRLanguage.define({\n  parser: /*@__PURE__*/parser.configure({\n    props: [/*@__PURE__*/indentNodeProp.add({\n      IfStatement: /*@__PURE__*/continuedIndent({\n        except: /^\\s*({|else\\b)/\n      }),\n      TryStatement: /*@__PURE__*/continuedIndent({\n        except: /^\\s*({|catch\\b|finally\\b)/\n      }),\n      LabeledStatement: flatIndent,\n      SwitchBody: context => {\n        let after = context.textAfter,\n            closed = /^\\s*\\}/.test(after),\n            isCase = /^\\s*(case|default)\\b/.test(after);\n        return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;\n      },\n      Block: /*@__PURE__*/delimitedIndent({\n        closing: \"}\"\n      }),\n      ArrowFunction: cx => cx.baseIndent + cx.unit,\n      \"TemplateString BlockComment\": () => -1,\n      \"Statement Property\": /*@__PURE__*/continuedIndent({\n        except: /^{/\n      }),\n\n      JSXElement(context) {\n        let closed = /^\\s*<\\//.test(context.textAfter);\n        return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);\n      },\n\n      JSXEscape(context) {\n        let closed = /\\s*\\}/.test(context.textAfter);\n        return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);\n      },\n\n      \"JSXOpenTag JSXSelfClosingTag\"(context) {\n        return context.column(context.node.from) + context.unit;\n      }\n\n    }), /*@__PURE__*/foldNodeProp.add({\n      \"Block ClassBody SwitchBody EnumBody ObjectExpression ArrayExpression\": foldInside,\n\n      BlockComment(tree) {\n        return {\n          from: tree.from + 2,\n          to: tree.to - 2\n        };\n      }\n\n    }), /*@__PURE__*/styleTags({\n      \"get set async static\": tags.modifier,\n      \"for while do if else switch try catch finally return throw break continue default case\": tags.controlKeyword,\n      \"in of await yield void typeof delete instanceof\": tags.operatorKeyword,\n      \"let var const function class extends\": tags.definitionKeyword,\n      \"import export from\": tags.moduleKeyword,\n      \"with debugger as new\": tags.keyword,\n      TemplateString: /*@__PURE__*/tags.special(tags.string),\n      Super: tags.atom,\n      BooleanLiteral: tags.bool,\n      this: tags.self,\n      null: tags.null,\n      Star: tags.modifier,\n      VariableName: tags.variableName,\n      \"CallExpression/VariableName\": /*@__PURE__*/tags.function(tags.variableName),\n      VariableDefinition: /*@__PURE__*/tags.definition(tags.variableName),\n      Label: tags.labelName,\n      PropertyName: tags.propertyName,\n      PrivatePropertyName: /*@__PURE__*/tags.special(tags.propertyName),\n      \"CallExpression/MemberExpression/PropertyName\": /*@__PURE__*/tags.function(tags.propertyName),\n      \"FunctionDeclaration/VariableDefinition\": /*@__PURE__*/tags.function( /*@__PURE__*/tags.definition(tags.variableName)),\n      \"ClassDeclaration/VariableDefinition\": /*@__PURE__*/tags.definition(tags.className),\n      PropertyDefinition: /*@__PURE__*/tags.definition(tags.propertyName),\n      PrivatePropertyDefinition: /*@__PURE__*/tags.definition( /*@__PURE__*/tags.special(tags.propertyName)),\n      UpdateOp: tags.updateOperator,\n      LineComment: tags.lineComment,\n      BlockComment: tags.blockComment,\n      Number: tags.number,\n      String: tags.string,\n      ArithOp: tags.arithmeticOperator,\n      LogicOp: tags.logicOperator,\n      BitOp: tags.bitwiseOperator,\n      CompareOp: tags.compareOperator,\n      RegExp: tags.regexp,\n      Equals: tags.definitionOperator,\n      \"Arrow : Spread\": tags.punctuation,\n      \"( )\": tags.paren,\n      \"[ ]\": tags.squareBracket,\n      \"{ }\": tags.brace,\n      \".\": tags.derefOperator,\n      \", ;\": tags.separator,\n      TypeName: tags.typeName,\n      TypeDefinition: /*@__PURE__*/tags.definition(tags.typeName),\n      \"type enum interface implements namespace module declare\": tags.definitionKeyword,\n      \"abstract global Privacy readonly override\": tags.modifier,\n      \"is keyof unique infer\": tags.operatorKeyword,\n      JSXAttributeValue: tags.attributeValue,\n      JSXText: tags.content,\n      \"JSXStartTag JSXStartCloseTag JSXSelfCloseEndTag JSXEndTag\": tags.angleBracket,\n      \"JSXIdentifier JSXNameSpacedName\": tags.tagName,\n      \"JSXAttribute/JSXIdentifier JSXAttribute/JSXNameSpacedName\": tags.attributeName\n    })]\n  }),\n  languageData: {\n    closeBrackets: {\n      brackets: [\"(\", \"[\", \"{\", \"'\", '\"', \"`\"]\n    },\n    commentTokens: {\n      line: \"//\",\n      block: {\n        open: \"/*\",\n        close: \"*/\"\n      }\n    },\n    indentOnInput: /^\\s*(?:case |default:|\\{|\\}|<\\/)$/,\n    wordChars: \"$\"\n  }\n});\n/**\nA language provider for TypeScript.\n*/\n\nconst typescriptLanguage = /*@__PURE__*/javascriptLanguage.configure({\n  dialect: \"ts\"\n});\n/**\nLanguage provider for JSX.\n*/\n\nconst jsxLanguage = /*@__PURE__*/javascriptLanguage.configure({\n  dialect: \"jsx\"\n});\n/**\nLanguage provider for JSX + TypeScript.\n*/\n\nconst tsxLanguage = /*@__PURE__*/javascriptLanguage.configure({\n  dialect: \"jsx ts\"\n});\n/**\nJavaScript support. Includes [snippet](https://codemirror.net/6/docs/ref/#lang-javascript.snippets)\ncompletion.\n*/\n\nfunction javascript() {\n  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let lang = config.jsx ? config.typescript ? tsxLanguage : jsxLanguage : config.typescript ? typescriptLanguage : javascriptLanguage;\n  return new LanguageSupport(lang, javascriptLanguage.data.of({\n    autocomplete: ifNotIn([\"LineComment\", \"BlockComment\", \"String\"], completeFromList(snippets))\n  }));\n}\n/**\nConnects an [ESLint](https://eslint.org/) linter to CodeMirror's\n[lint](https://codemirror.net/6/docs/ref/#lint) integration. `eslint` should be an instance of the\n[`Linter`](https://eslint.org/docs/developer-guide/nodejs-api#linter)\nclass, and `config` an optional ESLint configuration. The return\nvalue of this function can be passed to [`linter`](https://codemirror.net/6/docs/ref/#lint.linter)\nto create a JavaScript linting extension.\n\nNote that ESLint targets node, and is tricky to run in the\nbrowser. The [eslint4b](https://github.com/mysticatea/eslint4b)\nand\n[eslint4b-prebuilt](https://github.com/marijnh/eslint4b-prebuilt/)\npackages may help with that.\n*/\n\n\nfunction esLint(eslint, config) {\n  if (!config) {\n    config = {\n      parserOptions: {\n        ecmaVersion: 2019,\n        sourceType: \"module\"\n      },\n      env: {\n        browser: true,\n        node: true,\n        es6: true,\n        es2015: true,\n        es2017: true,\n        es2020: true\n      },\n      rules: {}\n    };\n    eslint.getRules().forEach((desc, name) => {\n      if (desc.meta.docs.recommended) config.rules[name] = 2;\n    });\n  }\n\n  return view => {\n    let {\n      state\n    } = view,\n        found = [];\n\n    for (let {\n      from,\n      to\n    } of javascriptLanguage.findRegions(state)) {\n      let fromLine = state.doc.lineAt(from),\n          offset = {\n        line: fromLine.number - 1,\n        col: from - fromLine.from,\n        pos: from\n      };\n\n      for (let d of eslint.verify(state.sliceDoc(from, to), config)) found.push(translateDiagnostic(d, state.doc, offset));\n    }\n\n    return found;\n  };\n}\n\nfunction mapPos(line, col, doc, offset) {\n  return doc.line(line + offset.line).from + col + (line == 1 ? offset.col - 1 : -1);\n}\n\nfunction translateDiagnostic(input, doc, offset) {\n  let start = mapPos(input.line, input.column, doc, offset);\n  let result = {\n    from: start,\n    to: input.endLine != null && input.endColumn != 1 ? mapPos(input.endLine, input.endColumn, doc, offset) : start,\n    message: input.message,\n    source: input.ruleId ? \"jshint:\" + input.ruleId : \"jshint\",\n    severity: input.severity == 1 ? \"warning\" : \"error\"\n  };\n\n  if (input.fix) {\n    let {\n      range,\n      text\n    } = input.fix,\n        from = range[0] + offset.pos - start,\n        to = range[1] + offset.pos - start;\n    result.actions = [{\n      name: \"fix\",\n\n      apply(view, start) {\n        view.dispatch({\n          changes: {\n            from: start + from,\n            to: start + to,\n            insert: text\n          },\n          scrollIntoView: true\n        });\n      }\n\n    }];\n  }\n\n  return result;\n}\n\nexport { esLint, javascript, javascriptLanguage, jsxLanguage, snippets, tsxLanguage, typescriptLanguage };","map":{"version":3,"sources":["C:/Users/pc/Desktop/live-code-editor/client/node_modules/@codemirror/lang-javascript/dist/index.js"],"names":["parser","LRLanguage","indentNodeProp","continuedIndent","flatIndent","delimitedIndent","foldNodeProp","foldInside","LanguageSupport","styleTags","tags","snippetCompletion","ifNotIn","completeFromList","snippets","label","detail","type","javascriptLanguage","define","configure","props","add","IfStatement","except","TryStatement","LabeledStatement","SwitchBody","context","after","textAfter","closed","test","isCase","baseIndent","unit","Block","closing","ArrowFunction","cx","JSXElement","lineIndent","node","from","JSXEscape","column","BlockComment","tree","to","modifier","controlKeyword","operatorKeyword","definitionKeyword","moduleKeyword","keyword","TemplateString","special","string","Super","atom","BooleanLiteral","bool","this","self","null","Star","VariableName","variableName","function","VariableDefinition","definition","Label","labelName","PropertyName","propertyName","PrivatePropertyName","className","PropertyDefinition","PrivatePropertyDefinition","UpdateOp","updateOperator","LineComment","lineComment","blockComment","Number","number","String","ArithOp","arithmeticOperator","LogicOp","logicOperator","BitOp","bitwiseOperator","CompareOp","compareOperator","RegExp","regexp","Equals","definitionOperator","punctuation","paren","squareBracket","brace","derefOperator","separator","TypeName","typeName","TypeDefinition","JSXAttributeValue","attributeValue","JSXText","content","angleBracket","tagName","attributeName","languageData","closeBrackets","brackets","commentTokens","line","block","open","close","indentOnInput","wordChars","typescriptLanguage","dialect","jsxLanguage","tsxLanguage","javascript","config","lang","jsx","typescript","data","of","autocomplete","esLint","eslint","parserOptions","ecmaVersion","sourceType","env","browser","es6","es2015","es2017","es2020","rules","getRules","forEach","desc","name","meta","docs","recommended","view","state","found","findRegions","fromLine","doc","lineAt","offset","col","pos","d","verify","sliceDoc","push","translateDiagnostic","mapPos","input","start","result","endLine","endColumn","message","source","ruleId","severity","fix","range","text","actions","apply","dispatch","changes","insert","scrollIntoView"],"mappings":"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","sourcesContent":["import { parser } from '@lezer/javascript';\nimport { LRLanguage, indentNodeProp, continuedIndent, flatIndent, delimitedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';\nimport { styleTags, tags } from '@codemirror/highlight';\nimport { snippetCompletion, ifNotIn, completeFromList } from '@codemirror/autocomplete';\n\n/**\nA collection of JavaScript-related\n[snippets](https://codemirror.net/6/docs/ref/#autocomplete.snippet).\n*/\nconst snippets = [\n    /*@__PURE__*/snippetCompletion(\"function ${name}(${params}) {\\n\\t${}\\n}\", {\n        label: \"function\",\n        detail: \"definition\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"for (let ${index} = 0; ${index} < ${bound}; ${index}++) {\\n\\t${}\\n}\", {\n        label: \"for\",\n        detail: \"loop\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"for (let ${name} of ${collection}) {\\n\\t${}\\n}\", {\n        label: \"for\",\n        detail: \"of loop\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"try {\\n\\t${}\\n} catch (${error}) {\\n\\t${}\\n}\", {\n        label: \"try\",\n        detail: \"block\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"class ${name} {\\n\\tconstructor(${params}) {\\n\\t\\t${}\\n\\t}\\n}\", {\n        label: \"class\",\n        detail: \"definition\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"import {${names}} from \\\"${module}\\\"\\n${}\", {\n        label: \"import\",\n        detail: \"named\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"import ${name} from \\\"${module}\\\"\\n${}\", {\n        label: \"import\",\n        detail: \"default\",\n        type: \"keyword\"\n    })\n];\n\n/**\nA language provider based on the [Lezer JavaScript\nparser](https://github.com/lezer-parser/javascript), extended with\nhighlighting and indentation information.\n*/\nconst javascriptLanguage = /*@__PURE__*/LRLanguage.define({\n    parser: /*@__PURE__*/parser.configure({\n        props: [\n            /*@__PURE__*/indentNodeProp.add({\n                IfStatement: /*@__PURE__*/continuedIndent({ except: /^\\s*({|else\\b)/ }),\n                TryStatement: /*@__PURE__*/continuedIndent({ except: /^\\s*({|catch\\b|finally\\b)/ }),\n                LabeledStatement: flatIndent,\n                SwitchBody: context => {\n                    let after = context.textAfter, closed = /^\\s*\\}/.test(after), isCase = /^\\s*(case|default)\\b/.test(after);\n                    return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;\n                },\n                Block: /*@__PURE__*/delimitedIndent({ closing: \"}\" }),\n                ArrowFunction: cx => cx.baseIndent + cx.unit,\n                \"TemplateString BlockComment\": () => -1,\n                \"Statement Property\": /*@__PURE__*/continuedIndent({ except: /^{/ }),\n                JSXElement(context) {\n                    let closed = /^\\s*<\\//.test(context.textAfter);\n                    return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);\n                },\n                JSXEscape(context) {\n                    let closed = /\\s*\\}/.test(context.textAfter);\n                    return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);\n                },\n                \"JSXOpenTag JSXSelfClosingTag\"(context) {\n                    return context.column(context.node.from) + context.unit;\n                }\n            }),\n            /*@__PURE__*/foldNodeProp.add({\n                \"Block ClassBody SwitchBody EnumBody ObjectExpression ArrayExpression\": foldInside,\n                BlockComment(tree) { return { from: tree.from + 2, to: tree.to - 2 }; }\n            }),\n            /*@__PURE__*/styleTags({\n                \"get set async static\": tags.modifier,\n                \"for while do if else switch try catch finally return throw break continue default case\": tags.controlKeyword,\n                \"in of await yield void typeof delete instanceof\": tags.operatorKeyword,\n                \"let var const function class extends\": tags.definitionKeyword,\n                \"import export from\": tags.moduleKeyword,\n                \"with debugger as new\": tags.keyword,\n                TemplateString: /*@__PURE__*/tags.special(tags.string),\n                Super: tags.atom,\n                BooleanLiteral: tags.bool,\n                this: tags.self,\n                null: tags.null,\n                Star: tags.modifier,\n                VariableName: tags.variableName,\n                \"CallExpression/VariableName\": /*@__PURE__*/tags.function(tags.variableName),\n                VariableDefinition: /*@__PURE__*/tags.definition(tags.variableName),\n                Label: tags.labelName,\n                PropertyName: tags.propertyName,\n                PrivatePropertyName: /*@__PURE__*/tags.special(tags.propertyName),\n                \"CallExpression/MemberExpression/PropertyName\": /*@__PURE__*/tags.function(tags.propertyName),\n                \"FunctionDeclaration/VariableDefinition\": /*@__PURE__*/tags.function(/*@__PURE__*/tags.definition(tags.variableName)),\n                \"ClassDeclaration/VariableDefinition\": /*@__PURE__*/tags.definition(tags.className),\n                PropertyDefinition: /*@__PURE__*/tags.definition(tags.propertyName),\n                PrivatePropertyDefinition: /*@__PURE__*/tags.definition(/*@__PURE__*/tags.special(tags.propertyName)),\n                UpdateOp: tags.updateOperator,\n                LineComment: tags.lineComment,\n                BlockComment: tags.blockComment,\n                Number: tags.number,\n                String: tags.string,\n                ArithOp: tags.arithmeticOperator,\n                LogicOp: tags.logicOperator,\n                BitOp: tags.bitwiseOperator,\n                CompareOp: tags.compareOperator,\n                RegExp: tags.regexp,\n                Equals: tags.definitionOperator,\n                \"Arrow : Spread\": tags.punctuation,\n                \"( )\": tags.paren,\n                \"[ ]\": tags.squareBracket,\n                \"{ }\": tags.brace,\n                \".\": tags.derefOperator,\n                \", ;\": tags.separator,\n                TypeName: tags.typeName,\n                TypeDefinition: /*@__PURE__*/tags.definition(tags.typeName),\n                \"type enum interface implements namespace module declare\": tags.definitionKeyword,\n                \"abstract global Privacy readonly override\": tags.modifier,\n                \"is keyof unique infer\": tags.operatorKeyword,\n                JSXAttributeValue: tags.attributeValue,\n                JSXText: tags.content,\n                \"JSXStartTag JSXStartCloseTag JSXSelfCloseEndTag JSXEndTag\": tags.angleBracket,\n                \"JSXIdentifier JSXNameSpacedName\": tags.tagName,\n                \"JSXAttribute/JSXIdentifier JSXAttribute/JSXNameSpacedName\": tags.attributeName\n            })\n        ]\n    }),\n    languageData: {\n        closeBrackets: { brackets: [\"(\", \"[\", \"{\", \"'\", '\"', \"`\"] },\n        commentTokens: { line: \"//\", block: { open: \"/*\", close: \"*/\" } },\n        indentOnInput: /^\\s*(?:case |default:|\\{|\\}|<\\/)$/,\n        wordChars: \"$\"\n    }\n});\n/**\nA language provider for TypeScript.\n*/\nconst typescriptLanguage = /*@__PURE__*/javascriptLanguage.configure({ dialect: \"ts\" });\n/**\nLanguage provider for JSX.\n*/\nconst jsxLanguage = /*@__PURE__*/javascriptLanguage.configure({ dialect: \"jsx\" });\n/**\nLanguage provider for JSX + TypeScript.\n*/\nconst tsxLanguage = /*@__PURE__*/javascriptLanguage.configure({ dialect: \"jsx ts\" });\n/**\nJavaScript support. Includes [snippet](https://codemirror.net/6/docs/ref/#lang-javascript.snippets)\ncompletion.\n*/\nfunction javascript(config = {}) {\n    let lang = config.jsx ? (config.typescript ? tsxLanguage : jsxLanguage)\n        : config.typescript ? typescriptLanguage : javascriptLanguage;\n    return new LanguageSupport(lang, javascriptLanguage.data.of({\n        autocomplete: ifNotIn([\"LineComment\", \"BlockComment\", \"String\"], completeFromList(snippets))\n    }));\n}\n\n/**\nConnects an [ESLint](https://eslint.org/) linter to CodeMirror's\n[lint](https://codemirror.net/6/docs/ref/#lint) integration. `eslint` should be an instance of the\n[`Linter`](https://eslint.org/docs/developer-guide/nodejs-api#linter)\nclass, and `config` an optional ESLint configuration. The return\nvalue of this function can be passed to [`linter`](https://codemirror.net/6/docs/ref/#lint.linter)\nto create a JavaScript linting extension.\n\nNote that ESLint targets node, and is tricky to run in the\nbrowser. The [eslint4b](https://github.com/mysticatea/eslint4b)\nand\n[eslint4b-prebuilt](https://github.com/marijnh/eslint4b-prebuilt/)\npackages may help with that.\n*/\nfunction esLint(eslint, config) {\n    if (!config) {\n        config = {\n            parserOptions: { ecmaVersion: 2019, sourceType: \"module\" },\n            env: { browser: true, node: true, es6: true, es2015: true, es2017: true, es2020: true },\n            rules: {}\n        };\n        eslint.getRules().forEach((desc, name) => {\n            if (desc.meta.docs.recommended)\n                config.rules[name] = 2;\n        });\n    }\n    return (view) => {\n        let { state } = view, found = [];\n        for (let { from, to } of javascriptLanguage.findRegions(state)) {\n            let fromLine = state.doc.lineAt(from), offset = { line: fromLine.number - 1, col: from - fromLine.from, pos: from };\n            for (let d of eslint.verify(state.sliceDoc(from, to), config))\n                found.push(translateDiagnostic(d, state.doc, offset));\n        }\n        return found;\n    };\n}\nfunction mapPos(line, col, doc, offset) {\n    return doc.line(line + offset.line).from + col + (line == 1 ? offset.col - 1 : -1);\n}\nfunction translateDiagnostic(input, doc, offset) {\n    let start = mapPos(input.line, input.column, doc, offset);\n    let result = {\n        from: start,\n        to: input.endLine != null && input.endColumn != 1 ? mapPos(input.endLine, input.endColumn, doc, offset) : start,\n        message: input.message,\n        source: input.ruleId ? \"jshint:\" + input.ruleId : \"jshint\",\n        severity: input.severity == 1 ? \"warning\" : \"error\",\n    };\n    if (input.fix) {\n        let { range, text } = input.fix, from = range[0] + offset.pos - start, to = range[1] + offset.pos - start;\n        result.actions = [{\n                name: \"fix\",\n                apply(view, start) {\n                    view.dispatch({ changes: { from: start + from, to: start + to, insert: text }, scrollIntoView: true });\n                }\n            }];\n    }\n    return result;\n}\n\nexport { esLint, javascript, javascriptLanguage, jsxLanguage, snippets, tsxLanguage, typescriptLanguage };\n"]},"metadata":{},"sourceType":"module"}