{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { basicSetup as defaultBasicSetup } from '@codemirror/basic-setup';\nimport { EditorState, StateEffect } from '@codemirror/state';\nimport { indentWithTab as defaultIndentWithTab } from '@codemirror/commands';\nimport { EditorView, keymap, placeholder as extendPlaceholder } from '@codemirror/view';\nimport { oneDark } from '@codemirror/theme-one-dark';\nimport { defaultLightThemeOption } from './theme/light';\nexport function useCodeMirror(props) {\n  var {\n    value,\n    selection,\n    onChange,\n    onUpdate,\n    extensions = [],\n    autoFocus,\n    theme = 'light',\n    height = '',\n    minHeight = '',\n    maxHeight = '',\n    placeholder = '',\n    width = '',\n    minWidth = '',\n    maxWidth = '',\n    editable = true,\n    indentWithTab = true,\n    basicSetup = true,\n    root\n  } = props;\n  var [container, setContainer] = useState(props.container);\n  var [view, setView] = useState();\n  var [state, setState] = useState();\n  var defaultThemeOption = EditorView.theme({\n    '&': {\n      height,\n      minHeight,\n      maxHeight,\n      width,\n      minWidth,\n      maxWidth\n    }\n  });\n  var updateListener = EditorView.updateListener.of(vu => {\n    if (vu.docChanged && typeof onChange === 'function') {\n      var doc = vu.state.doc;\n\n      var _value = doc.toString();\n\n      onChange(_value, vu);\n    }\n  });\n  var getExtensions = [updateListener, defaultThemeOption];\n\n  if (indentWithTab) {\n    getExtensions.unshift(keymap.of([defaultIndentWithTab]));\n  }\n\n  if (basicSetup) {\n    getExtensions.unshift(defaultBasicSetup);\n  }\n\n  if (placeholder) {\n    getExtensions.unshift(extendPlaceholder(placeholder));\n  }\n\n  switch (theme) {\n    case 'light':\n      getExtensions.push(defaultLightThemeOption);\n      break;\n\n    case 'dark':\n      getExtensions.push(oneDark);\n      break;\n\n    default:\n      getExtensions.push(theme);\n      break;\n  }\n\n  if (editable === false) {\n    getExtensions.push(EditorView.editable.of(false));\n  }\n\n  if (onUpdate && typeof onUpdate === 'function') {\n    getExtensions.push(EditorView.updateListener.of(onUpdate));\n  }\n\n  getExtensions = getExtensions.concat(extensions);\n  useEffect(() => {\n    if (container && !state) {\n      var stateCurrent = EditorState.create({\n        doc: value,\n        selection,\n        extensions: getExtensions\n      });\n      setState(stateCurrent);\n\n      if (!view) {\n        var viewCurrent = new EditorView({\n          state: stateCurrent,\n          parent: container,\n          root\n        });\n        setView(viewCurrent);\n      }\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [container, state]);\n  useEffect(() => {\n    return () => {\n      if (view) {\n        view.destroy();\n      }\n    };\n  }, [view]);\n  useEffect(() => {\n    if (view) {\n      var currentValue = view.state.doc.toString();\n\n      if (value !== currentValue) {\n        view.dispatch({\n          changes: {\n            from: 0,\n            to: currentValue.length,\n            insert: value || ''\n          }\n        });\n      }\n    }\n  }, [value, view]);\n  useEffect(() => {\n    if (view) {\n      view.dispatch({\n        effects: StateEffect.reconfigure.of(getExtensions)\n      });\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [theme, extensions, placeholder, height, minHeight, maxHeight, width, minWidth, maxWidth, editable, indentWithTab, basicSetup]);\n  useEffect(() => {\n    if (autoFocus && view) {\n      view.focus();\n    }\n  }, [autoFocus, view]);\n  return {\n    state,\n    setState,\n    view,\n    setView,\n    container,\n    setContainer\n  };\n}","map":{"version":3,"sources":["../src/useCodeMirror.ts"],"names":["basicSetup","indentWithTab","placeholder","extensions","theme","height","minHeight","maxHeight","width","minWidth","maxWidth","editable","root","useState","props","defaultThemeOption","updateListener","vu","doc","value","onChange","getExtensions","keymap","extendPlaceholder","EditorView","onUpdate","useEffect","container","stateCurrent","setState","viewCurrent","state","parent","setView","view","currentValue","changes","from","to","insert","effects","StateEffect","autoFocus","setContainer"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport { basicSetup as defaultBasicSetup } from '@codemirror/basic-setup';\nimport { EditorState, StateEffect } from '@codemirror/state';\nimport { indentWithTab as defaultIndentWithTab } from '@codemirror/commands';\nimport { EditorView, keymap, ViewUpdate, placeholder as extendPlaceholder } from '@codemirror/view';\nimport { oneDark } from '@codemirror/theme-one-dark';\nimport { ReactCodeMirrorProps } from './';\nimport { defaultLightThemeOption } from './theme/light';\n\nexport interface UseCodeMirror extends ReactCodeMirrorProps {\n  container?: HTMLDivElement | null;\n}\n\nexport function useCodeMirror(props: UseCodeMirror) {\n  const {\n    value,\n    selection,\n    onChange,\n    onUpdate,\n    extensions = [],\n    autoFocus,\n    theme = 'light',\n    height = '',\n    minHeight = '',\n    maxHeight = '',\n    placeholder = '',\n    width = '',\n    minWidth = '',\n    maxWidth = '',\n    editable = true,\n    indentWithTab = true,\n    basicSetup = true,\n    root,\n  } = props;\n  const [container, setContainer] = useState(props.container);\n  const [view, setView] = useState<EditorView>();\n  const [state, setState] = useState<EditorState>();\n  const defaultThemeOption = EditorView.theme({\n    '&': {\n      height,\n      minHeight,\n      maxHeight,\n      width,\n      minWidth,\n      maxWidth,\n    },\n  });\n  const updateListener = EditorView.updateListener.of((vu: ViewUpdate) => {\n    if (vu.docChanged && typeof onChange === 'function') {\n      const doc = vu.state.doc;\n      const value = doc.toString();\n      onChange(value, vu);\n    }\n  });\n  let getExtensions = [updateListener, defaultThemeOption];\n  if (indentWithTab) {\n    getExtensions.unshift(keymap.of([defaultIndentWithTab]));\n  }\n  if (basicSetup) {\n    getExtensions.unshift(defaultBasicSetup);\n  }\n\n  if (placeholder) {\n    getExtensions.unshift(extendPlaceholder(placeholder));\n  }\n\n  switch (theme) {\n    case 'light':\n      getExtensions.push(defaultLightThemeOption);\n      break;\n    case 'dark':\n      getExtensions.push(oneDark);\n      break;\n    default:\n      getExtensions.push(theme);\n      break;\n  }\n\n  if (editable === false) {\n    getExtensions.push(EditorView.editable.of(false));\n  }\n\n  if (onUpdate && typeof onUpdate === 'function') {\n    getExtensions.push(EditorView.updateListener.of(onUpdate));\n  }\n  getExtensions = getExtensions.concat(extensions);\n\n  useEffect(() => {\n    if (container && !state) {\n      const stateCurrent = EditorState.create({\n        doc: value,\n        selection,\n        extensions: getExtensions,\n      });\n      setState(stateCurrent);\n      if (!view) {\n        const viewCurrent = new EditorView({\n          state: stateCurrent,\n          parent: container as any,\n          root,\n        });\n        setView(viewCurrent);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [container, state]);\n\n  useEffect(() => {\n    return () => {\n      if (view) {\n        view.destroy();\n      }\n    };\n  }, [view]);\n\n  useEffect(() => {\n    if (view) {\n      const currentValue = view.state.doc.toString();\n      if (value !== currentValue) {\n        view.dispatch({\n          changes: { from: 0, to: currentValue.length, insert: value || '' },\n        });\n      }\n    }\n  }, [value, view]);\n\n  useEffect(() => {\n    if (view) {\n      view.dispatch({ effects: StateEffect.reconfigure.of(getExtensions) });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    theme,\n    extensions,\n    placeholder,\n    height,\n    minHeight,\n    maxHeight,\n    width,\n    minWidth,\n    maxWidth,\n    editable,\n    indentWithTab,\n    basicSetup,\n  ]);\n\n  useEffect(() => {\n    if (autoFocus && view) {\n      view.focus();\n    }\n  }, [autoFocus, view]);\n\n  return { state, setState, view, setView, container, setContainer };\n}\n"]},"metadata":{},"sourceType":"module"}