{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"value\", \"selection\", \"extensions\", \"onChange\", \"onUpdate\", \"autoFocus\", \"theme\", \"height\", \"minHeight\", \"maxHeight\", \"width\", \"minWidth\", \"maxWidth\", \"basicSetup\", \"placeholder\", \"indentWithTab\", \"editable\", \"root\"];\nimport React, { useEffect, useRef, useImperativeHandle } from 'react';\nimport { useCodeMirror } from './useCodeMirror';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport * from '@codemirror/view';\nexport * from '@codemirror/basic-setup';\nexport * from '@codemirror/state';\nexport * from './useCodeMirror';\nvar ReactCodeMirror = /*#__PURE__*/React.forwardRef((props, ref) => {\n  var {\n    className,\n    value = '',\n    selection,\n    extensions = [],\n    onChange,\n    onUpdate,\n    autoFocus,\n    theme = 'light',\n    height,\n    minHeight,\n    maxHeight,\n    width,\n    minWidth,\n    maxWidth,\n    basicSetup,\n    placeholder,\n    indentWithTab,\n    editable,\n    root\n  } = props,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var editor = useRef(null);\n  var {\n    state,\n    view,\n    container,\n    setContainer\n  } = useCodeMirror({\n    container: editor.current,\n    root,\n    value,\n    autoFocus,\n    theme,\n    height,\n    minHeight,\n    maxHeight,\n    width,\n    minWidth,\n    maxWidth,\n    basicSetup,\n    placeholder,\n    indentWithTab,\n    editable,\n    selection,\n    onChange,\n    onUpdate,\n    extensions\n  });\n  useImperativeHandle(ref, () => ({\n    editor: container,\n    state,\n    view\n  }), [container, state, view]);\n  useEffect(() => {\n    setContainer(editor.current);\n    return () => {\n      if (view) {\n        view.destroy();\n      }\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // check type of value\n\n  if (typeof value !== 'string') {\n    throw new Error(\"value must be typeof string but got \" + typeof value);\n  }\n\n  var defaultClassNames = typeof theme === 'string' ? \"cm-theme-\" + theme : 'cm-theme';\n  return /*#__PURE__*/_jsx(\"div\", _extends({\n    ref: editor,\n    className: \"\" + defaultClassNames + (className ? \" \" + className : '')\n  }, other));\n});\nReactCodeMirror.displayName = 'CodeMirror';\nexport default ReactCodeMirror;","map":{"version":3,"sources":["../src/index.tsx"],"names":["ReactCodeMirror","value","extensions","theme","root","other","editor","useRef","setContainer","useCodeMirror","container","useImperativeHandle","view","useEffect","defaultClassNames","className"],"mappings":";;;AAAA,OAAA,KAAA,IAAA,SAAA,EAAA,MAAA,EAAA,mBAAA,QAAA,OAAA;AAGA,SAAA,aAAA,QAAA,iBAAA;;AAEA,cAAA,kBAAA;AACA,cAAA,yBAAA;AACA,cAAA,mBAAA;AACA,cAAA,iBAAA;AA6DA,IAAMA,eAAe,GAAA,aAAG,KAAK,CAAL,UAAA,CAA2D,CAAA,KAAA,EAAA,GAAA,KAAgB;AACjG,MAAM;AAAA,IAAA,SAAA;AAEJC,IAAAA,KAAK,GAFD,EAAA;AAAA,IAAA,SAAA;AAIJC,IAAAA,UAAU,GAJN,EAAA;AAAA,IAAA,QAAA;AAAA,IAAA,QAAA;AAAA,IAAA,SAAA;AAQJC,IAAAA,KAAK,GARD,OAAA;AAAA,IAAA,MAAA;AAAA,IAAA,SAAA;AAAA,IAAA,SAAA;AAAA,IAAA,KAAA;AAAA,IAAA,QAAA;AAAA,IAAA,QAAA;AAAA,IAAA,UAAA;AAAA,IAAA,WAAA;AAAA,IAAA,aAAA;AAAA,IAAA,QAAA;AAmBJC,IAAAA;AAnBI,MAAN,KAAA;AAAA,MAoBKC,KApBL,GAAA,6BAAA,CAAA,KAAA,EAAA,SAAA,CAAA;;AAsBA,MAAMC,MAAM,GAAGC,MAAM,CAArB,IAAqB,CAArB;AACA,MAAM;AAAA,IAAA,KAAA;AAAA,IAAA,IAAA;AAAA,IAAA,SAAA;AAA0BC,IAAAA;AAA1B,MAA2CC,aAAa,CAAC;AAC7DC,IAAAA,SAAS,EAAEJ,MAAM,CAD4C,OAAA;AAAA,IAAA,IAAA;AAAA,IAAA,KAAA;AAAA,IAAA,SAAA;AAAA,IAAA,KAAA;AAAA,IAAA,MAAA;AAAA,IAAA,SAAA;AAAA,IAAA,SAAA;AAAA,IAAA,KAAA;AAAA,IAAA,QAAA;AAAA,IAAA,QAAA;AAAA,IAAA,UAAA;AAAA,IAAA,WAAA;AAAA,IAAA,aAAA;AAAA,IAAA,QAAA;AAAA,IAAA,SAAA;AAAA,IAAA,QAAA;AAAA,IAAA,QAAA;AAmB7DJ,IAAAA;AAnB6D,GAAD,CAA9D;AAqBAS,EAAAA,mBAAmB,CAAA,GAAA,EAAM,OAAO;AAAEL,IAAAA,MAAM,EAAR,SAAA;AAAA,IAAA,KAAA;AAA4BM,IAAAA;AAA5B,GAAP,CAAN,EAAkD,CAAA,SAAA,EAAA,KAAA,EAArED,IAAqE,CAAlD,CAAnBA;AACAE,EAAAA,SAAS,CAAC,MAAM;AACdL,IAAAA,YAAY,CAACF,MAAM,CAAnBE,OAAY,CAAZA;AACA,WAAO,MAAM;AACX,UAAA,IAAA,EAAU;AACRI,QAAAA,IAAI,CAAJA,OAAAA;AACD;AALW,KAEd,CAFc,CAOd;AAPO,GAAA,EA9CwF,EA8CxF,CAATC,CA9CiG,CAwDjG;;AACA,MAAI,OAAA,KAAA,KAAJ,QAAA,EAA+B;AAC7B,UAAM,IAAA,KAAA,CAAA,yCAAiD,OAAvD,KAAM,CAAN;AACD;;AAED,MAAMC,iBAAiB,GAAG,OAAA,KAAA,KAAA,QAAA,GAAA,cAAA,KAAA,GAA1B,UAAA;AACA,SAAA,aAAO,IAAA,CAAA,KAAA,EAAA,QAAA,CAAA;AAAK,IAAA,GAAG,EAAR,MAAA;AAAkB,IAAA,SAAS,EAAA,KAAA,iBAAA,IAAyBC,SAAS,GAAA,MAAA,SAAA,GAAlC,EAAA;AAA3B,GAAA,EAAP,KAAO,CAAA,CAAP;AA9DF,CAAwB,CAAxB;AAiEAf,eAAe,CAAfA,WAAAA,GAAAA,YAAAA;AAEA,eAAA,eAAA","sourcesContent":["import React, { useEffect, useRef, useImperativeHandle } from 'react';\nimport { EditorState, EditorStateConfig, Extension } from '@codemirror/state';\nimport { EditorView, ViewUpdate } from '@codemirror/view';\nimport { useCodeMirror } from './useCodeMirror';\n\nexport * from '@codemirror/view';\nexport * from '@codemirror/basic-setup';\nexport * from '@codemirror/state';\nexport * from './useCodeMirror';\n\nexport interface ReactCodeMirrorProps\n  extends Omit<EditorStateConfig, 'doc' | 'extensions'>,\n    Omit<React.HTMLAttributes<HTMLDivElement>, 'onChange' | 'placeholder'> {\n  /** value of the auto created model in the editor. */\n  value?: string;\n  height?: string;\n  minHeight?: string;\n  maxHeight?: string;\n  width?: string;\n  minWidth?: string;\n  maxWidth?: string;\n  /** focus on the editor. */\n  autoFocus?: boolean;\n  /** Enables a placeholder—a piece of example content to show when the editor is empty. */\n  placeholder?: string | HTMLElement;\n  /**\n   * `light` / `dark` / `Extension` Defaults to `light`.\n   * @default light\n   */\n  theme?: 'light' | 'dark' | Extension;\n  /**\n   * Whether to optional basicSetup by default\n   * @default true\n   */\n  basicSetup?: boolean;\n  /**\n   * This disables editing of the editor content by the user.\n   * @default true\n   */\n  editable?: boolean;\n  /**\n   * Whether to optional basicSetup by default\n   * @default true\n   */\n  indentWithTab?: boolean;\n  /** Fired whenever a change occurs to the document. */\n  onChange?(value: string, viewUpdate: ViewUpdate): void;\n  /** Fired whenever a change occurs to the document. There is a certain difference with `onChange`. */\n  onUpdate?(viewUpdate: ViewUpdate): void;\n  /**\n   * Extension values can be [provided](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions) when creating a state to attach various kinds of configuration and behavior information.\n   * They can either be built-in extension-providing objects,\n   * such as [state fields](https://codemirror.net/6/docs/ref/#state.StateField) or [facet providers](https://codemirror.net/6/docs/ref/#state.Facet.of),\n   * or objects with an extension in its `extension` property. Extensions can be nested in arrays arbitrarily deep—they will be flattened when processed.\n   */\n  extensions?: Extension[];\n  /**\n   * If the view is going to be mounted in a shadow root or document other than the one held by the global variable document (the default), you should pass it here.\n   * Originally from the [config of EditorView](https://codemirror.net/6/docs/ref/#view.EditorView.constructor%5Econfig.root)\n   */\n  root?: ShadowRoot | Document;\n}\n\nexport interface ReactCodeMirrorRef {\n  editor?: HTMLDivElement | null;\n  state?: EditorState;\n  view?: EditorView;\n}\n\nconst ReactCodeMirror = React.forwardRef<ReactCodeMirrorRef, ReactCodeMirrorProps>((props, ref) => {\n  const {\n    className,\n    value = '',\n    selection,\n    extensions = [],\n    onChange,\n    onUpdate,\n    autoFocus,\n    theme = 'light',\n    height,\n    minHeight,\n    maxHeight,\n    width,\n    minWidth,\n    maxWidth,\n    basicSetup,\n    placeholder,\n    indentWithTab,\n    editable,\n    root,\n    ...other\n  } = props;\n  const editor = useRef<HTMLDivElement>(null);\n  const { state, view, container, setContainer } = useCodeMirror({\n    container: editor.current,\n    root,\n    value,\n    autoFocus,\n    theme,\n    height,\n    minHeight,\n    maxHeight,\n    width,\n    minWidth,\n    maxWidth,\n    basicSetup,\n    placeholder,\n    indentWithTab,\n    editable,\n    selection,\n    onChange,\n    onUpdate,\n    extensions,\n  });\n  useImperativeHandle(ref, () => ({ editor: container, state, view }), [container, state, view]);\n  useEffect(() => {\n    setContainer(editor.current);\n    return () => {\n      if (view) {\n        view.destroy();\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // check type of value\n  if (typeof value !== 'string') {\n    throw new Error(`value must be typeof string but got ${typeof value}`);\n  }\n\n  const defaultClassNames = typeof theme === 'string' ? `cm-theme-${theme}` : 'cm-theme';\n  return <div ref={editor} className={`${defaultClassNames}${className ? ` ${className}` : ''}`} {...other}></div>;\n});\n\nReactCodeMirror.displayName = 'CodeMirror';\n\nexport default ReactCodeMirror;\n"]},"metadata":{},"sourceType":"module"}