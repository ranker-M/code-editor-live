{"ast":null,"code":"import { parser } from '@lezer/php';\nimport { parseMixed } from '@lezer/common';\nimport { html } from '@codemirror/lang-html';\nimport { LRLanguage, indentNodeProp, continuedIndent, delimitedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';\nimport { styleTags, tags } from '@codemirror/highlight';\n/**\nA language provider based on the [Lezer PHP\nparser](https://github.com/lezer-parser/php), extended with\nhighlighting and indentation information.\n*/\n\nconst phpLanguage = /*@__PURE__*/LRLanguage.define({\n  parser: /*@__PURE__*/parser.configure({\n    props: [/*@__PURE__*/indentNodeProp.add({\n      IfStatement: /*@__PURE__*/continuedIndent({\n        except: /^\\s*({|else\\b|elseif\\b|endif\\b)/\n      }),\n      TryStatement: /*@__PURE__*/continuedIndent({\n        except: /^\\s*({|catch\\b|finally\\b)/\n      }),\n      SwitchBody: context => {\n        let after = context.textAfter,\n            closed = /^\\s*\\}/.test(after),\n            isCase = /^\\s*(case|default)\\b/.test(after);\n        return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;\n      },\n      ColonBlock: cx => cx.baseIndent + cx.unit,\n      \"Block EnumBody DeclarationList\": /*@__PURE__*/delimitedIndent({\n        closing: \"}\"\n      }),\n      ArrowFunction: cx => cx.baseIndent + cx.unit,\n      \"String BlockComment\": () => -1,\n      Statement: /*@__PURE__*/continuedIndent({\n        except: /^({|end(for|foreach|switch|while)\\b)/\n      })\n    }), /*@__PURE__*/foldNodeProp.add({\n      \"Block EnumBody DeclarationList SwitchBody ArrayExpression ValueList\": foldInside,\n\n      ColonBlock(tree) {\n        return {\n          from: tree.from + 1,\n          to: tree.to\n        };\n      },\n\n      BlockComment(tree) {\n        return {\n          from: tree.from + 2,\n          to: tree.to - 2\n        };\n      }\n\n    }), /*@__PURE__*/styleTags({\n      \"Visibility abstract final static\": tags.modifier,\n      \"for foreach while do if else elseif switch try catch finally return throw break continue default case\": tags.controlKeyword,\n      \"endif endfor endforeach endswitch endwhile goto match\": tags.controlKeyword,\n      \"and or xor yield unset clone instanceof insteadof\": tags.operatorKeyword,\n      \"function fn class trait implements extends const enum global namespace trait use var\": tags.definitionKeyword,\n      \"include include_once require require_once declare enddeclare\": tags.definitionKeyword,\n      \"new from echo print array list as\": tags.keyword,\n      null: tags.null,\n      Boolean: tags.bool,\n      VariableName: tags.variableName,\n      \"NamespaceName/...\": tags.namespace,\n      \"NamedType/...\": tags.typeName,\n      Name: tags.name,\n      \"CallExpression/Name\": /*@__PURE__*/tags.function(tags.variableName),\n      \"LabelStatement/Name\": tags.labelName,\n      \"MemberExpression/Name MemberExpression/VariableName\": tags.propertyName,\n      \"CallExpression/MemberExpression/Name\": /*@__PURE__*/tags.function(tags.propertyName),\n      \"FunctionDefinition/Name\": /*@__PURE__*/tags.function( /*@__PURE__*/tags.definition(tags.variableName)),\n      \"ClassDeclaration/Name\": /*@__PURE__*/tags.definition(tags.className),\n      UpdateOp: tags.updateOperator,\n      ArithOp: tags.arithmeticOperator,\n      LogicOp: tags.logicOperator,\n      BitOp: tags.bitwiseOperator,\n      CompareOp: tags.compareOperator,\n      ControlOp: tags.controlOperator,\n      AssignOp: tags.definitionOperator,\n      \"$ ConcatOp\": tags.operator,\n      LineComment: tags.lineComment,\n      BlockComment: tags.blockComment,\n      Integer: tags.integer,\n      Float: tags.float,\n      String: tags.string,\n      ShellExpression: /*@__PURE__*/tags.special(tags.string),\n      \"=> ->\": tags.punctuation,\n      \"( )\": tags.paren,\n      \"#[ [ ]\": tags.squareBracket,\n      \"${ { }\": tags.brace,\n      \"-> ?->\": tags.derefOperator,\n      \", ; :: : \\\\\": tags.separator,\n      \"PhpOpen PhpClose\": tags.processingInstruction\n    })]\n  }),\n  languageData: {\n    commentTokens: {\n      block: {\n        open: \"/*\",\n        close: \"*/\"\n      },\n      line: \"//\"\n    },\n    indentOnInput: /^\\s*(?:case |default:|end(?:if|for(?:each)?|switch|while)|else(?:if)?|\\{|\\})$/,\n    wordChars: \"$\"\n  }\n});\n/**\nPHP language support.\n*/\n\nfunction php() {\n  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let support = [],\n      base;\n  if (config.baseLanguage === null) ;else if (config.baseLanguage) {\n    base = config.baseLanguage;\n  } else {\n    let htmlSupport = html({\n      matchClosingTags: false\n    });\n    support.push(htmlSupport.support);\n    base = htmlSupport.language;\n  }\n  return new LanguageSupport(phpLanguage.configure({\n    wrap: base && parseMixed(node => {\n      if (!node.type.isTop) return null;\n      return {\n        parser: base.parser,\n        overlay: node => node.name == \"Text\"\n      };\n    }),\n    top: config.plain ? \"Program\" : \"Template\"\n  }), support);\n}\n\nexport { php, phpLanguage };","map":{"version":3,"sources":["C:/Users/pc/Desktop/live-code-editor/client/node_modules/@codemirror/lang-php/dist/index.js"],"names":["parser","parseMixed","html","LRLanguage","indentNodeProp","continuedIndent","delimitedIndent","foldNodeProp","foldInside","LanguageSupport","styleTags","tags","phpLanguage","define","configure","props","add","IfStatement","except","TryStatement","SwitchBody","context","after","textAfter","closed","test","isCase","baseIndent","unit","ColonBlock","cx","closing","ArrowFunction","Statement","tree","from","to","BlockComment","modifier","controlKeyword","operatorKeyword","definitionKeyword","keyword","null","Boolean","bool","VariableName","variableName","namespace","typeName","Name","name","function","labelName","propertyName","definition","className","UpdateOp","updateOperator","ArithOp","arithmeticOperator","LogicOp","logicOperator","BitOp","bitwiseOperator","CompareOp","compareOperator","ControlOp","controlOperator","AssignOp","definitionOperator","operator","LineComment","lineComment","blockComment","Integer","integer","Float","float","String","string","ShellExpression","special","punctuation","paren","squareBracket","brace","derefOperator","separator","processingInstruction","languageData","commentTokens","block","open","close","line","indentOnInput","wordChars","php","config","support","base","baseLanguage","htmlSupport","matchClosingTags","push","language","wrap","node","type","isTop","overlay","top","plain"],"mappings":"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","sourcesContent":["import { parser } from '@lezer/php';\nimport { parseMixed } from '@lezer/common';\nimport { html } from '@codemirror/lang-html';\nimport { LRLanguage, indentNodeProp, continuedIndent, delimitedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';\nimport { styleTags, tags } from '@codemirror/highlight';\n\n/**\nA language provider based on the [Lezer PHP\nparser](https://github.com/lezer-parser/php), extended with\nhighlighting and indentation information.\n*/\nconst phpLanguage = /*@__PURE__*/LRLanguage.define({\n    parser: /*@__PURE__*/parser.configure({\n        props: [\n            /*@__PURE__*/indentNodeProp.add({\n                IfStatement: /*@__PURE__*/continuedIndent({ except: /^\\s*({|else\\b|elseif\\b|endif\\b)/ }),\n                TryStatement: /*@__PURE__*/continuedIndent({ except: /^\\s*({|catch\\b|finally\\b)/ }),\n                SwitchBody: context => {\n                    let after = context.textAfter, closed = /^\\s*\\}/.test(after), isCase = /^\\s*(case|default)\\b/.test(after);\n                    return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;\n                },\n                ColonBlock: cx => cx.baseIndent + cx.unit,\n                \"Block EnumBody DeclarationList\": /*@__PURE__*/delimitedIndent({ closing: \"}\" }),\n                ArrowFunction: cx => cx.baseIndent + cx.unit,\n                \"String BlockComment\": () => -1,\n                Statement: /*@__PURE__*/continuedIndent({ except: /^({|end(for|foreach|switch|while)\\b)/ })\n            }),\n            /*@__PURE__*/foldNodeProp.add({\n                \"Block EnumBody DeclarationList SwitchBody ArrayExpression ValueList\": foldInside,\n                ColonBlock(tree) { return { from: tree.from + 1, to: tree.to }; },\n                BlockComment(tree) { return { from: tree.from + 2, to: tree.to - 2 }; }\n            }),\n            /*@__PURE__*/styleTags({\n                \"Visibility abstract final static\": tags.modifier,\n                \"for foreach while do if else elseif switch try catch finally return throw break continue default case\": tags.controlKeyword,\n                \"endif endfor endforeach endswitch endwhile goto match\": tags.controlKeyword,\n                \"and or xor yield unset clone instanceof insteadof\": tags.operatorKeyword,\n                \"function fn class trait implements extends const enum global namespace trait use var\": tags.definitionKeyword,\n                \"include include_once require require_once declare enddeclare\": tags.definitionKeyword,\n                \"new from echo print array list as\": tags.keyword,\n                null: tags.null,\n                Boolean: tags.bool,\n                VariableName: tags.variableName,\n                \"NamespaceName/...\": tags.namespace,\n                \"NamedType/...\": tags.typeName,\n                Name: tags.name,\n                \"CallExpression/Name\": /*@__PURE__*/tags.function(tags.variableName),\n                \"LabelStatement/Name\": tags.labelName,\n                \"MemberExpression/Name MemberExpression/VariableName\": tags.propertyName,\n                \"CallExpression/MemberExpression/Name\": /*@__PURE__*/tags.function(tags.propertyName),\n                \"FunctionDefinition/Name\": /*@__PURE__*/tags.function(/*@__PURE__*/tags.definition(tags.variableName)),\n                \"ClassDeclaration/Name\": /*@__PURE__*/tags.definition(tags.className),\n                UpdateOp: tags.updateOperator,\n                ArithOp: tags.arithmeticOperator,\n                LogicOp: tags.logicOperator,\n                BitOp: tags.bitwiseOperator,\n                CompareOp: tags.compareOperator,\n                ControlOp: tags.controlOperator,\n                AssignOp: tags.definitionOperator,\n                \"$ ConcatOp\": tags.operator,\n                LineComment: tags.lineComment,\n                BlockComment: tags.blockComment,\n                Integer: tags.integer,\n                Float: tags.float,\n                String: tags.string,\n                ShellExpression: /*@__PURE__*/tags.special(tags.string),\n                \"=> ->\": tags.punctuation,\n                \"( )\": tags.paren,\n                \"#[ [ ]\": tags.squareBracket,\n                \"${ { }\": tags.brace,\n                \"-> ?->\": tags.derefOperator,\n                \", ; :: : \\\\\": tags.separator,\n                \"PhpOpen PhpClose\": tags.processingInstruction,\n            })\n        ]\n    }),\n    languageData: {\n        commentTokens: { block: { open: \"/*\", close: \"*/\" }, line: \"//\" },\n        indentOnInput: /^\\s*(?:case |default:|end(?:if|for(?:each)?|switch|while)|else(?:if)?|\\{|\\})$/,\n        wordChars: \"$\"\n    }\n});\n/**\nPHP language support.\n*/\nfunction php(config = {}) {\n    let support = [], base;\n    if (config.baseLanguage === null) ;\n    else if (config.baseLanguage) {\n        base = config.baseLanguage;\n    }\n    else {\n        let htmlSupport = html({ matchClosingTags: false });\n        support.push(htmlSupport.support);\n        base = htmlSupport.language;\n    }\n    return new LanguageSupport(phpLanguage.configure({\n        wrap: base && parseMixed(node => {\n            if (!node.type.isTop)\n                return null;\n            return {\n                parser: base.parser,\n                overlay: node => node.name == \"Text\"\n            };\n        }),\n        top: config.plain ? \"Program\" : \"Template\"\n    }), support);\n}\n\nexport { php, phpLanguage };\n"]},"metadata":{},"sourceType":"module"}