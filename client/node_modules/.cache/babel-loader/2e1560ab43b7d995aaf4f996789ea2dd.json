{"ast":null,"code":"// FIXME profile adding a per-Tree TreeNode cache, validating it by\n// parent pointer\n/// The default maximum length of a `TreeBuffer` node (1024).\nconst DefaultBufferLength = 1024;\nlet nextPropID = 0;\n\nclass Range {\n  constructor(from, to) {\n    this.from = from;\n    this.to = to;\n  }\n\n} /// Each [node type](#common.NodeType) or [individual tree](#common.Tree)\n/// can have metadata associated with it in props. Instances of this\n/// class represent prop names.\n\n\nclass NodeProp {\n  /// Create a new node prop type.\n  constructor() {\n    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.id = nextPropID++;\n    this.perNode = !!config.perNode;\n\n    this.deserialize = config.deserialize || (() => {\n      throw new Error(\"This node type doesn't define a deserialize function\");\n    });\n  } /// This is meant to be used with\n  /// [`NodeSet.extend`](#common.NodeSet.extend) or\n  /// [`LRParser.configure`](#lr.ParserConfig.props) to compute\n  /// prop values for each node type in the set. Takes a [match\n  /// object](#common.NodeType^match) or function that returns undefined\n  /// if the node type doesn't get this prop, and the prop's value if\n  /// it does.\n\n\n  add(match) {\n    if (this.perNode) throw new RangeError(\"Can't add per-node props to node types\");\n    if (typeof match != \"function\") match = NodeType.match(match);\n    return type => {\n      let result = match(type);\n      return result === undefined ? null : [this, result];\n    };\n  }\n\n} /// Prop that is used to describe matching delimiters. For opening\n/// delimiters, this holds an array of node names (written as a\n/// space-separated string when declaring this prop in a grammar)\n/// for the node types of closing delimiters that match it.\n\n\nNodeProp.closedBy = new NodeProp({\n  deserialize: str => str.split(\" \")\n}); /// The inverse of [`closedBy`](#common.NodeProp^closedBy). This is\n/// attached to closing delimiters, holding an array of node names\n/// of types of matching opening delimiters.\n\nNodeProp.openedBy = new NodeProp({\n  deserialize: str => str.split(\" \")\n}); /// Used to assign node types to groups (for example, all node\n/// types that represent an expression could be tagged with an\n/// `\"Expression\"` group).\n\nNodeProp.group = new NodeProp({\n  deserialize: str => str.split(\" \")\n}); /// The hash of the [context](#lr.ContextTracker.constructor)\n/// that the node was parsed in, if any. Used to limit reuse of\n/// contextual nodes.\n\nNodeProp.contextHash = new NodeProp({\n  perNode: true\n}); /// The distance beyond the end of the node that the tokenizer\n/// looked ahead for any of the tokens inside the node. (The LR\n/// parser only stores this when it is larger than 25, for\n/// efficiency reasons.)\n\nNodeProp.lookAhead = new NodeProp({\n  perNode: true\n}); /// This per-node prop is used to replace a given node, or part of a\n/// node, with another tree. This is useful to include trees from\n/// different languages.\n\nNodeProp.mounted = new NodeProp({\n  perNode: true\n}); /// A mounted tree, which can be [stored](#common.NodeProp^mounted) on\n/// a tree node to indicate that parts of its content are\n/// represented by another tree.\n\nclass MountedTree {\n  constructor( /// The inner tree.\n  tree, /// If this is null, this tree replaces the entire node (it will\n  /// be included in the regular iteration instead of its host\n  /// node). If not, only the given ranges are considered to be\n  /// covered by this tree. This is used for trees that are mixed in\n  /// a way that isn't strictly hierarchical. Such mounted trees are\n  /// only entered by [`resolveInner`](#common.Tree.resolveInner)\n  /// and [`enter`](#common.SyntaxNode.enter).\n  overlay, /// The parser used to create this subtree.\n  parser) {\n    this.tree = tree;\n    this.overlay = overlay;\n    this.parser = parser;\n  }\n\n}\n\nconst noProps = Object.create(null); /// Each node in a syntax tree has a node type associated with it.\n\nclass NodeType {\n  /// @internal\n  constructor( /// The name of the node type. Not necessarily unique, but if the\n  /// grammar was written properly, different node types with the\n  /// same name within a node set should play the same semantic\n  /// role.\n  name, /// @internal\n  props, /// The id of this node in its set. Corresponds to the term ids\n  /// used in the parser.\n  id) {\n    let flags = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    this.name = name;\n    this.props = props;\n    this.id = id;\n    this.flags = flags;\n  }\n\n  static define(spec) {\n    let props = spec.props && spec.props.length ? Object.create(null) : noProps;\n    let flags = (spec.top ? 1\n    /* Top */\n    : 0) | (spec.skipped ? 2\n    /* Skipped */\n    : 0) | (spec.error ? 4\n    /* Error */\n    : 0) | (spec.name == null ? 8\n    /* Anonymous */\n    : 0);\n    let type = new NodeType(spec.name || \"\", props, spec.id, flags);\n    if (spec.props) for (let src of spec.props) {\n      if (!Array.isArray(src)) src = src(type);\n\n      if (src) {\n        if (src[0].perNode) throw new RangeError(\"Can't store a per-node prop on a node type\");\n        props[src[0].id] = src[1];\n      }\n    }\n    return type;\n  } /// Retrieves a node prop for this type. Will return `undefined` if\n  /// the prop isn't present on this node.\n\n\n  prop(prop) {\n    return this.props[prop.id];\n  } /// True when this is the top node of a grammar.\n\n\n  get isTop() {\n    return (this.flags & 1\n    /* Top */\n    ) > 0;\n  } /// True when this node is produced by a skip rule.\n\n\n  get isSkipped() {\n    return (this.flags & 2\n    /* Skipped */\n    ) > 0;\n  } /// Indicates whether this is an error node.\n\n\n  get isError() {\n    return (this.flags & 4\n    /* Error */\n    ) > 0;\n  } /// When true, this node type doesn't correspond to a user-declared\n  /// named node, for example because it is used to cache repetition.\n\n\n  get isAnonymous() {\n    return (this.flags & 8\n    /* Anonymous */\n    ) > 0;\n  } /// Returns true when this node's name or one of its\n  /// [groups](#common.NodeProp^group) matches the given string.\n\n\n  is(name) {\n    if (typeof name == 'string') {\n      if (this.name == name) return true;\n      let group = this.prop(NodeProp.group);\n      return group ? group.indexOf(name) > -1 : false;\n    }\n\n    return this.id == name;\n  } /// Create a function from node types to arbitrary values by\n  /// specifying an object whose property names are node or\n  /// [group](#common.NodeProp^group) names. Often useful with\n  /// [`NodeProp.add`](#common.NodeProp.add). You can put multiple\n  /// names, separated by spaces, in a single property name to map\n  /// multiple node names to a single value.\n\n\n  static match(map) {\n    let direct = Object.create(null);\n\n    for (let prop in map) for (let name of prop.split(\" \")) direct[name] = map[prop];\n\n    return node => {\n      for (let groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {\n        let found = direct[i < 0 ? node.name : groups[i]];\n        if (found) return found;\n      }\n    };\n  }\n\n} /// An empty dummy node type to use when no actual type is available.\n\n\nNodeType.none = new NodeType(\"\", Object.create(null), 0, 8\n/* Anonymous */\n); /// A node set holds a collection of node types. It is used to\n/// compactly represent trees by storing their type ids, rather than a\n/// full pointer to the type object, in a numeric array. Each parser\n/// [has](#lr.LRParser.nodeSet) a node set, and [tree\n/// buffers](#common.TreeBuffer) can only store collections of nodes\n/// from the same set. A set can have a maximum of 2**16 (65536) node\n/// types in it, so that the ids fit into 16-bit typed array slots.\n\nclass NodeSet {\n  /// Create a set with the given types. The `id` property of each\n  /// type should correspond to its position within the array.\n  constructor( /// The node types in this set, by id.\n  types) {\n    this.types = types;\n\n    for (let i = 0; i < types.length; i++) if (types[i].id != i) throw new RangeError(\"Node type ids should correspond to array positions when creating a node set\");\n  } /// Create a copy of this set with some node properties added. The\n  /// arguments to this method should be created with\n  /// [`NodeProp.add`](#common.NodeProp.add).\n\n\n  extend() {\n    let newTypes = [];\n\n    for (var _len = arguments.length, props = new Array(_len), _key = 0; _key < _len; _key++) {\n      props[_key] = arguments[_key];\n    }\n\n    for (let type of this.types) {\n      let newProps = null;\n\n      for (let source of props) {\n        let add = source(type);\n\n        if (add) {\n          if (!newProps) newProps = Object.assign({}, type.props);\n          newProps[add[0].id] = add[1];\n        }\n      }\n\n      newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);\n    }\n\n    return new NodeSet(newTypes);\n  }\n\n}\n\nconst CachedNode = new WeakMap(),\n      CachedInnerNode = new WeakMap(); /// A piece of syntax tree. There are two ways to approach these\n/// trees: the way they are actually stored in memory, and the\n/// convenient way.\n///\n/// Syntax trees are stored as a tree of `Tree` and `TreeBuffer`\n/// objects. By packing detail information into `TreeBuffer` leaf\n/// nodes, the representation is made a lot more memory-efficient.\n///\n/// However, when you want to actually work with tree nodes, this\n/// representation is very awkward, so most client code will want to\n/// use the [`TreeCursor`](#common.TreeCursor) or\n/// [`SyntaxNode`](#common.SyntaxNode) interface instead, which provides\n/// a view on some part of this data structure, and can be used to\n/// move around to adjacent nodes.\n\nclass Tree {\n  /// Construct a new tree. See also [`Tree.build`](#common.Tree^build).\n  constructor( /// The type of the top node.\n  type, /// This node's child nodes.\n  children, /// The positions (offsets relative to the start of this tree) of\n  /// the children.\n  positions, /// The total length of this tree\n  length, /// Per-node [node props](#common.NodeProp) to associate with this node.\n  props) {\n    this.type = type;\n    this.children = children;\n    this.positions = positions;\n    this.length = length; /// @internal\n\n    this.props = null;\n\n    if (props && props.length) {\n      this.props = Object.create(null);\n\n      for (let [prop, value] of props) this.props[typeof prop == \"number\" ? prop : prop.id] = value;\n    }\n  } /// @internal\n\n\n  toString() {\n    let mounted = this.prop(NodeProp.mounted);\n    if (mounted && !mounted.overlay) return mounted.tree.toString();\n    let children = \"\";\n\n    for (let ch of this.children) {\n      let str = ch.toString();\n\n      if (str) {\n        if (children) children += \",\";\n        children += str;\n      }\n    }\n\n    return !this.type.name ? children : (/\\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) + (children.length ? \"(\" + children + \")\" : \"\");\n  } /// Get a [tree cursor](#common.TreeCursor) rooted at this tree. When\n  /// `pos` is given, the cursor is [moved](#common.TreeCursor.moveTo)\n  /// to the given position and side.\n\n\n  cursor(pos) {\n    let side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let scope = pos != null && CachedNode.get(this) || this.topNode;\n    let cursor = new TreeCursor(scope);\n\n    if (pos != null) {\n      cursor.moveTo(pos, side);\n      CachedNode.set(this, cursor._tree);\n    }\n\n    return cursor;\n  } /// Get a [tree cursor](#common.TreeCursor) that, unlike regular\n  /// cursors, doesn't skip through\n  /// [anonymous](#common.NodeType.isAnonymous) nodes and doesn't\n  /// automatically enter mounted nodes.\n\n\n  fullCursor() {\n    return new TreeCursor(this.topNode, 1\n    /* Full */\n    );\n  } /// Get a [syntax node](#common.SyntaxNode) object for the top of the\n  /// tree.\n\n\n  get topNode() {\n    return new TreeNode(this, 0, 0, null);\n  } /// Get the [syntax node](#common.SyntaxNode) at the given position.\n  /// If `side` is -1, this will move into nodes that end at the\n  /// position. If 1, it'll move into nodes that start at the\n  /// position. With 0, it'll only enter nodes that cover the position\n  /// from both sides.\n\n\n  resolve(pos) {\n    let side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let node = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);\n    CachedNode.set(this, node);\n    return node;\n  } /// Like [`resolve`](#common.Tree.resolve), but will enter\n  /// [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node\n  /// pointing into the innermost overlaid tree at the given position\n  /// (with parent links going through all parent structure, including\n  /// the host trees).\n\n\n  resolveInner(pos) {\n    let side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);\n    CachedInnerNode.set(this, node);\n    return node;\n  } /// Iterate over the tree and its children, calling `enter` for any\n  /// node that touches the `from`/`to` region (if given) before\n  /// running over such a node's children, and `leave` (if given) when\n  /// leaving the node. When `enter` returns `false`, that node will\n  /// not have its children iterated over (or `leave` called).\n\n\n  iterate(spec) {\n    let {\n      enter,\n      leave,\n      from = 0,\n      to = this.length\n    } = spec;\n\n    for (let c = this.cursor(), get = () => c.node;;) {\n      let mustLeave = false;\n\n      if (c.from <= to && c.to >= from && (c.type.isAnonymous || enter(c.type, c.from, c.to, get) !== false)) {\n        if (c.firstChild()) continue;\n        if (!c.type.isAnonymous) mustLeave = true;\n      }\n\n      for (;;) {\n        if (mustLeave && leave) leave(c.type, c.from, c.to, get);\n        mustLeave = c.type.isAnonymous;\n        if (c.nextSibling()) break;\n        if (!c.parent()) return;\n        mustLeave = true;\n      }\n    }\n  } /// Get the value of the given [node prop](#common.NodeProp) for this\n  /// node. Works with both per-node and per-type props.\n\n\n  prop(prop) {\n    return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : undefined;\n  } /// Returns the node's [per-node props](#common.NodeProp.perNode) in a\n  /// format that can be passed to the [`Tree`](#common.Tree)\n  /// constructor.\n\n\n  get propValues() {\n    let result = [];\n    if (this.props) for (let id in this.props) result.push([+id, this.props[id]]);\n    return result;\n  } /// Balance the direct children of this tree, producing a copy of\n  /// which may have children grouped into subtrees with type\n  /// [`NodeType.none`](#common.NodeType^none).\n\n\n  balance() {\n    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.children.length <= 8\n    /* BranchFactor */\n    ? this : balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, (children, positions, length) => new Tree(this.type, children, positions, length, this.propValues), config.makeTree || ((children, positions, length) => new Tree(NodeType.none, children, positions, length)));\n  } /// Build a tree from a postfix-ordered buffer of node information,\n  /// or a cursor over such a buffer.\n\n\n  static build(data) {\n    return buildTree(data);\n  }\n\n} /// The empty tree\n\n\nTree.empty = new Tree(NodeType.none, [], [], 0);\n\nclass FlatBufferCursor {\n  constructor(buffer, index) {\n    this.buffer = buffer;\n    this.index = index;\n  }\n\n  get id() {\n    return this.buffer[this.index - 4];\n  }\n\n  get start() {\n    return this.buffer[this.index - 3];\n  }\n\n  get end() {\n    return this.buffer[this.index - 2];\n  }\n\n  get size() {\n    return this.buffer[this.index - 1];\n  }\n\n  get pos() {\n    return this.index;\n  }\n\n  next() {\n    this.index -= 4;\n  }\n\n  fork() {\n    return new FlatBufferCursor(this.buffer, this.index);\n  }\n\n} /// Tree buffers contain (type, start, end, endIndex) quads for each\n/// node. In such a buffer, nodes are stored in prefix order (parents\n/// before children, with the endIndex of the parent indicating which\n/// children belong to it)\n\n\nclass TreeBuffer {\n  /// Create a tree buffer.\n  constructor( /// The buffer's content.\n  buffer, /// The total length of the group of nodes in the buffer.\n  length, /// The node set used in this buffer.\n  set) {\n    this.buffer = buffer;\n    this.length = length;\n    this.set = set;\n  } /// @internal\n\n\n  get type() {\n    return NodeType.none;\n  } /// @internal\n\n\n  toString() {\n    let result = [];\n\n    for (let index = 0; index < this.buffer.length;) {\n      result.push(this.childString(index));\n      index = this.buffer[index + 3];\n    }\n\n    return result.join(\",\");\n  } /// @internal\n\n\n  childString(index) {\n    let id = this.buffer[index],\n        endIndex = this.buffer[index + 3];\n    let type = this.set.types[id],\n        result = type.name;\n    if (/\\W/.test(result) && !type.isError) result = JSON.stringify(result);\n    index += 4;\n    if (endIndex == index) return result;\n    let children = [];\n\n    while (index < endIndex) {\n      children.push(this.childString(index));\n      index = this.buffer[index + 3];\n    }\n\n    return result + \"(\" + children.join(\",\") + \")\";\n  } /// @internal\n\n\n  findChild(startIndex, endIndex, dir, pos, side) {\n    let {\n      buffer\n    } = this,\n        pick = -1;\n\n    for (let i = startIndex; i != endIndex; i = buffer[i + 3]) {\n      if (checkSide(side, pos, buffer[i + 1], buffer[i + 2])) {\n        pick = i;\n        if (dir > 0) break;\n      }\n    }\n\n    return pick;\n  } /// @internal\n\n\n  slice(startI, endI, from, to) {\n    let b = this.buffer;\n    let copy = new Uint16Array(endI - startI);\n\n    for (let i = startI, j = 0; i < endI;) {\n      copy[j++] = b[i++];\n      copy[j++] = b[i++] - from;\n      copy[j++] = b[i++] - from;\n      copy[j++] = b[i++] - startI;\n    }\n\n    return new TreeBuffer(copy, to - from, this.set);\n  }\n\n}\n\nfunction checkSide(side, pos, from, to) {\n  switch (side) {\n    case -2\n    /* Before */\n    :\n      return from < pos;\n\n    case -1\n    /* AtOrBefore */\n    :\n      return to >= pos && from < pos;\n\n    case 0\n    /* Around */\n    :\n      return from < pos && to > pos;\n\n    case 1\n    /* AtOrAfter */\n    :\n      return from <= pos && to > pos;\n\n    case 2\n    /* After */\n    :\n      return to > pos;\n\n    case 4\n    /* DontCare */\n    :\n      return true;\n  }\n}\n\nfunction enterUnfinishedNodesBefore(node, pos) {\n  let scan = node.childBefore(pos);\n\n  while (scan) {\n    let last = scan.lastChild;\n    if (!last || last.to != scan.to) break;\n\n    if (last.type.isError && last.from == last.to) {\n      node = scan;\n      scan = last.prevSibling;\n    } else {\n      scan = last;\n    }\n  }\n\n  return node;\n}\n\nfunction resolveNode(node, pos, side, overlays) {\n  var _a; // Move up to a node that actually holds the position, if possible\n\n\n  while (node.from == node.to || (side < 1 ? node.from >= pos : node.from > pos) || (side > -1 ? node.to <= pos : node.to < pos)) {\n    let parent = !overlays && node instanceof TreeNode && node.index < 0 ? null : node.parent;\n    if (!parent) return node;\n    node = parent;\n  } // Must go up out of overlays when those do not overlap with pos\n\n\n  if (overlays) for (let scan = node, parent = scan.parent; parent; scan = parent, parent = scan.parent) {\n    if (scan instanceof TreeNode && scan.index < 0 && ((_a = parent.enter(pos, side, true)) === null || _a === void 0 ? void 0 : _a.from) != scan.from) node = parent;\n  }\n\n  for (;;) {\n    let inner = node.enter(pos, side, overlays);\n    if (!inner) return node;\n    node = inner;\n  }\n}\n\nclass TreeNode {\n  constructor(node, _from, // Index in parent node, set to -1 if the node is not a direct child of _parent.node (overlay)\n  index, _parent) {\n    this.node = node;\n    this._from = _from;\n    this.index = index;\n    this._parent = _parent;\n  }\n\n  get type() {\n    return this.node.type;\n  }\n\n  get name() {\n    return this.node.type.name;\n  }\n\n  get from() {\n    return this._from;\n  }\n\n  get to() {\n    return this._from + this.node.length;\n  }\n\n  nextChild(i, dir, pos, side) {\n    let mode = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n\n    for (let parent = this;;) {\n      for (let {\n        children,\n        positions\n      } = parent.node, e = dir > 0 ? children.length : -1; i != e; i += dir) {\n        let next = children[i],\n            start = positions[i] + parent._from;\n        if (!checkSide(side, pos, start, start + next.length)) continue;\n\n        if (next instanceof TreeBuffer) {\n          if (mode & 2\n          /* NoEnterBuffer */\n          ) continue;\n          let index = next.findChild(0, next.buffer.length, dir, pos - start, side);\n          if (index > -1) return new BufferNode(new BufferContext(parent, next, i, start), null, index);\n        } else if (mode & 1\n        /* Full */\n        || !next.type.isAnonymous || hasChild(next)) {\n          let mounted;\n          if (!(mode & 1\n          /* Full */\n          ) && next.props && (mounted = next.prop(NodeProp.mounted)) && !mounted.overlay) return new TreeNode(mounted.tree, start, i, parent);\n          let inner = new TreeNode(next, start, i, parent);\n          return mode & 1\n          /* Full */\n          || !inner.type.isAnonymous ? inner : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);\n        }\n      }\n\n      if (mode & 1\n      /* Full */\n      || !parent.type.isAnonymous) return null;\n      if (parent.index >= 0) i = parent.index + dir;else i = dir < 0 ? -1 : parent._parent.node.children.length;\n      parent = parent._parent;\n      if (!parent) return null;\n    }\n  }\n\n  get firstChild() {\n    return this.nextChild(0, 1, 0, 4\n    /* DontCare */\n    );\n  }\n\n  get lastChild() {\n    return this.nextChild(this.node.children.length - 1, -1, 0, 4\n    /* DontCare */\n    );\n  }\n\n  childAfter(pos) {\n    return this.nextChild(0, 1, pos, 2\n    /* After */\n    );\n  }\n\n  childBefore(pos) {\n    return this.nextChild(this.node.children.length - 1, -1, pos, -2\n    /* Before */\n    );\n  }\n\n  enter(pos, side) {\n    let overlays = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    let buffers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    let mounted;\n\n    if (overlays && (mounted = this.node.prop(NodeProp.mounted)) && mounted.overlay) {\n      let rPos = pos - this.from;\n\n      for (let {\n        from,\n        to\n      } of mounted.overlay) {\n        if ((side > 0 ? from <= rPos : from < rPos) && (side < 0 ? to >= rPos : to > rPos)) return new TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);\n      }\n    }\n\n    return this.nextChild(0, 1, pos, side, buffers ? 0 : 2\n    /* NoEnterBuffer */\n    );\n  }\n\n  nextSignificantParent() {\n    let val = this;\n\n    while (val.type.isAnonymous && val._parent) val = val._parent;\n\n    return val;\n  }\n\n  get parent() {\n    return this._parent ? this._parent.nextSignificantParent() : null;\n  }\n\n  get nextSibling() {\n    return this._parent && this.index >= 0 ? this._parent.nextChild(this.index + 1, 1, 0, 4\n    /* DontCare */\n    ) : null;\n  }\n\n  get prevSibling() {\n    return this._parent && this.index >= 0 ? this._parent.nextChild(this.index - 1, -1, 0, 4\n    /* DontCare */\n    ) : null;\n  }\n\n  get cursor() {\n    return new TreeCursor(this);\n  }\n\n  get tree() {\n    return this.node;\n  }\n\n  toTree() {\n    return this.node;\n  }\n\n  resolve(pos) {\n    let side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return resolveNode(this, pos, side, false);\n  }\n\n  resolveInner(pos) {\n    let side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return resolveNode(this, pos, side, true);\n  }\n\n  enterUnfinishedNodesBefore(pos) {\n    return enterUnfinishedNodesBefore(this, pos);\n  }\n\n  getChild(type) {\n    let before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let after = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let r = getChildren(this, type, before, after);\n    return r.length ? r[0] : null;\n  }\n\n  getChildren(type) {\n    let before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let after = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    return getChildren(this, type, before, after);\n  } /// @internal\n\n\n  toString() {\n    return this.node.toString();\n  }\n\n}\n\nfunction getChildren(node, type, before, after) {\n  let cur = node.cursor,\n      result = [];\n  if (!cur.firstChild()) return result;\n  if (before != null) while (!cur.type.is(before)) if (!cur.nextSibling()) return result;\n\n  for (;;) {\n    if (after != null && cur.type.is(after)) return result;\n    if (cur.type.is(type)) result.push(cur.node);\n    if (!cur.nextSibling()) return after == null ? result : [];\n  }\n}\n\nclass BufferContext {\n  constructor(parent, buffer, index, start) {\n    this.parent = parent;\n    this.buffer = buffer;\n    this.index = index;\n    this.start = start;\n  }\n\n}\n\nclass BufferNode {\n  constructor(context, _parent, index) {\n    this.context = context;\n    this._parent = _parent;\n    this.index = index;\n    this.type = context.buffer.set.types[context.buffer.buffer[index]];\n  }\n\n  get name() {\n    return this.type.name;\n  }\n\n  get from() {\n    return this.context.start + this.context.buffer.buffer[this.index + 1];\n  }\n\n  get to() {\n    return this.context.start + this.context.buffer.buffer[this.index + 2];\n  }\n\n  child(dir, pos, side) {\n    let {\n      buffer\n    } = this.context;\n    let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);\n    return index < 0 ? null : new BufferNode(this.context, this, index);\n  }\n\n  get firstChild() {\n    return this.child(1, 0, 4\n    /* DontCare */\n    );\n  }\n\n  get lastChild() {\n    return this.child(-1, 0, 4\n    /* DontCare */\n    );\n  }\n\n  childAfter(pos) {\n    return this.child(1, pos, 2\n    /* After */\n    );\n  }\n\n  childBefore(pos) {\n    return this.child(-1, pos, -2\n    /* Before */\n    );\n  }\n\n  enter(pos, side, overlays) {\n    let buffers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    if (!buffers) return null;\n    let {\n      buffer\n    } = this.context;\n    let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);\n    return index < 0 ? null : new BufferNode(this.context, this, index);\n  }\n\n  get parent() {\n    return this._parent || this.context.parent.nextSignificantParent();\n  }\n\n  externalSibling(dir) {\n    return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, 0, 4\n    /* DontCare */\n    );\n  }\n\n  get nextSibling() {\n    let {\n      buffer\n    } = this.context;\n    let after = buffer.buffer[this.index + 3];\n    if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length)) return new BufferNode(this.context, this._parent, after);\n    return this.externalSibling(1);\n  }\n\n  get prevSibling() {\n    let {\n      buffer\n    } = this.context;\n    let parentStart = this._parent ? this._parent.index + 4 : 0;\n    if (this.index == parentStart) return this.externalSibling(-1);\n    return new BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, 0, 4\n    /* DontCare */\n    ));\n  }\n\n  get cursor() {\n    return new TreeCursor(this);\n  }\n\n  get tree() {\n    return null;\n  }\n\n  toTree() {\n    let children = [],\n        positions = [];\n    let {\n      buffer\n    } = this.context;\n    let startI = this.index + 4,\n        endI = buffer.buffer[this.index + 3];\n\n    if (endI > startI) {\n      let from = buffer.buffer[this.index + 1],\n          to = buffer.buffer[this.index + 2];\n      children.push(buffer.slice(startI, endI, from, to));\n      positions.push(0);\n    }\n\n    return new Tree(this.type, children, positions, this.to - this.from);\n  }\n\n  resolve(pos) {\n    let side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return resolveNode(this, pos, side, false);\n  }\n\n  resolveInner(pos) {\n    let side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return resolveNode(this, pos, side, true);\n  }\n\n  enterUnfinishedNodesBefore(pos) {\n    return enterUnfinishedNodesBefore(this, pos);\n  } /// @internal\n\n\n  toString() {\n    return this.context.buffer.childString(this.index);\n  }\n\n  getChild(type) {\n    let before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let after = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let r = getChildren(this, type, before, after);\n    return r.length ? r[0] : null;\n  }\n\n  getChildren(type) {\n    let before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let after = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    return getChildren(this, type, before, after);\n  }\n\n} /// A tree cursor object focuses on a given node in a syntax tree, and\n/// allows you to move to adjacent nodes.\n\n\nclass TreeCursor {\n  /// @internal\n  constructor(node) {\n    let mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this.mode = mode;\n    this.buffer = null;\n    this.stack = [];\n    this.index = 0;\n    this.bufferNode = null;\n\n    if (node instanceof TreeNode) {\n      this.yieldNode(node);\n    } else {\n      this._tree = node.context.parent;\n      this.buffer = node.context;\n\n      for (let n = node._parent; n; n = n._parent) this.stack.unshift(n.index);\n\n      this.bufferNode = node;\n      this.yieldBuf(node.index);\n    }\n  } /// Shorthand for `.type.name`.\n\n\n  get name() {\n    return this.type.name;\n  }\n\n  yieldNode(node) {\n    if (!node) return false;\n    this._tree = node;\n    this.type = node.type;\n    this.from = node.from;\n    this.to = node.to;\n    return true;\n  }\n\n  yieldBuf(index, type) {\n    this.index = index;\n    let {\n      start,\n      buffer\n    } = this.buffer;\n    this.type = type || buffer.set.types[buffer.buffer[index]];\n    this.from = start + buffer.buffer[index + 1];\n    this.to = start + buffer.buffer[index + 2];\n    return true;\n  }\n\n  yield(node) {\n    if (!node) return false;\n\n    if (node instanceof TreeNode) {\n      this.buffer = null;\n      return this.yieldNode(node);\n    }\n\n    this.buffer = node.context;\n    return this.yieldBuf(node.index, node.type);\n  } /// @internal\n\n\n  toString() {\n    return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();\n  } /// @internal\n\n\n  enterChild(dir, pos, side) {\n    if (!this.buffer) return this.yield(this._tree.nextChild(dir < 0 ? this._tree.node.children.length - 1 : 0, dir, pos, side, this.mode));\n    let {\n      buffer\n    } = this.buffer;\n    let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);\n    if (index < 0) return false;\n    this.stack.push(this.index);\n    return this.yieldBuf(index);\n  } /// Move the cursor to this node's first child. When this returns\n  /// false, the node has no child, and the cursor has not been moved.\n\n\n  firstChild() {\n    return this.enterChild(1, 0, 4\n    /* DontCare */\n    );\n  } /// Move the cursor to this node's last child.\n\n\n  lastChild() {\n    return this.enterChild(-1, 0, 4\n    /* DontCare */\n    );\n  } /// Move the cursor to the first child that ends after `pos`.\n\n\n  childAfter(pos) {\n    return this.enterChild(1, pos, 2\n    /* After */\n    );\n  } /// Move to the last child that starts before `pos`.\n\n\n  childBefore(pos) {\n    return this.enterChild(-1, pos, -2\n    /* Before */\n    );\n  } /// Move the cursor to the child around `pos`. If side is -1 the\n  /// child may end at that position, when 1 it may start there. This\n  /// will also enter [overlaid](#common.MountedTree.overlay)\n  /// [mounted](#common.NodeProp^mounted) trees unless `overlays` is\n  /// set to false.\n\n\n  enter(pos, side) {\n    let overlays = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    let buffers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    if (!this.buffer) return this.yield(this._tree.enter(pos, side, overlays && !(this.mode & 1\n    /* Full */\n    ), buffers));\n    return buffers ? this.enterChild(1, pos, side) : false;\n  } /// Move to the node's parent node, if this isn't the top node.\n\n\n  parent() {\n    if (!this.buffer) return this.yieldNode(this.mode & 1\n    /* Full */\n    ? this._tree._parent : this._tree.parent);\n    if (this.stack.length) return this.yieldBuf(this.stack.pop());\n    let parent = this.mode & 1\n    /* Full */\n    ? this.buffer.parent : this.buffer.parent.nextSignificantParent();\n    this.buffer = null;\n    return this.yieldNode(parent);\n  } /// @internal\n\n\n  sibling(dir) {\n    if (!this.buffer) return !this._tree._parent ? false : this.yield(this._tree.index < 0 ? null : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4\n    /* DontCare */\n    , this.mode));\n    let {\n      buffer\n    } = this.buffer,\n        d = this.stack.length - 1;\n\n    if (dir < 0) {\n      let parentStart = d < 0 ? 0 : this.stack[d] + 4;\n      if (this.index != parentStart) return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, 0, 4\n      /* DontCare */\n      ));\n    } else {\n      let after = buffer.buffer[this.index + 3];\n      if (after < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3])) return this.yieldBuf(after);\n    }\n\n    return d < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4\n    /* DontCare */\n    , this.mode)) : false;\n  } /// Move to this node's next sibling, if any.\n\n\n  nextSibling() {\n    return this.sibling(1);\n  } /// Move to this node's previous sibling, if any.\n\n\n  prevSibling() {\n    return this.sibling(-1);\n  }\n\n  atLastNode(dir) {\n    let index,\n        parent,\n        {\n      buffer\n    } = this;\n\n    if (buffer) {\n      if (dir > 0) {\n        if (this.index < buffer.buffer.buffer.length) return false;\n      } else {\n        for (let i = 0; i < this.index; i++) if (buffer.buffer.buffer[i + 3] < this.index) return false;\n      }\n\n      ({\n        index,\n        parent\n      } = buffer);\n    } else {\n      ({\n        index,\n        _parent: parent\n      } = this._tree);\n    }\n\n    for (; parent; ({\n      index,\n      _parent: parent\n    } = parent)) {\n      if (index > -1) for (let i = index + dir, e = dir < 0 ? -1 : parent.node.children.length; i != e; i += dir) {\n        let child = parent.node.children[i];\n        if (this.mode & 1\n        /* Full */\n        || child instanceof TreeBuffer || !child.type.isAnonymous || hasChild(child)) return false;\n      }\n    }\n\n    return true;\n  }\n\n  move(dir, enter) {\n    if (enter && this.enterChild(dir, 0, 4\n    /* DontCare */\n    )) return true;\n\n    for (;;) {\n      if (this.sibling(dir)) return true;\n      if (this.atLastNode(dir) || !this.parent()) return false;\n    }\n  } /// Move to the next node in a\n  /// [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order_(NLR))\n  /// traversal, going from a node to its first child or, if the\n  /// current node is empty or `enter` is false, its next sibling or\n  /// the next sibling of the first parent node that has one.\n\n\n  next() {\n    let enter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    return this.move(1, enter);\n  } /// Move to the next node in a last-to-first pre-order traveral. A\n  /// node is followed by its last child or, if it has none, its\n  /// previous sibling or the previous sibling of the first parent\n  /// node that has one.\n\n\n  prev() {\n    let enter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    return this.move(-1, enter);\n  } /// Move the cursor to the innermost node that covers `pos`. If\n  /// `side` is -1, it will enter nodes that end at `pos`. If it is 1,\n  /// it will enter nodes that start at `pos`.\n\n\n  moveTo(pos) {\n    let side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    // Move up to a node that actually holds the position, if possible\n    while (this.from == this.to || (side < 1 ? this.from >= pos : this.from > pos) || (side > -1 ? this.to <= pos : this.to < pos)) if (!this.parent()) break; // Then scan down into child nodes as far as possible\n\n\n    while (this.enterChild(1, pos, side)) {}\n\n    return this;\n  } /// Get a [syntax node](#common.SyntaxNode) at the cursor's current\n  /// position.\n\n\n  get node() {\n    if (!this.buffer) return this._tree;\n    let cache = this.bufferNode,\n        result = null,\n        depth = 0;\n\n    if (cache && cache.context == this.buffer) {\n      scan: for (let index = this.index, d = this.stack.length; d >= 0;) {\n        for (let c = cache; c; c = c._parent) if (c.index == index) {\n          if (index == this.index) return c;\n          result = c;\n          depth = d + 1;\n          break scan;\n        }\n\n        index = this.stack[--d];\n      }\n    }\n\n    for (let i = depth; i < this.stack.length; i++) result = new BufferNode(this.buffer, result, this.stack[i]);\n\n    return this.bufferNode = new BufferNode(this.buffer, result, this.index);\n  } /// Get the [tree](#common.Tree) that represents the current node, if\n  /// any. Will return null when the node is in a [tree\n  /// buffer](#common.TreeBuffer).\n\n\n  get tree() {\n    return this.buffer ? null : this._tree.node;\n  }\n\n}\n\nfunction hasChild(tree) {\n  return tree.children.some(ch => ch instanceof TreeBuffer || !ch.type.isAnonymous || hasChild(ch));\n}\n\nfunction buildTree(data) {\n  var _a;\n\n  let {\n    buffer,\n    nodeSet,\n    maxBufferLength = DefaultBufferLength,\n    reused = [],\n    minRepeatType = nodeSet.types.length\n  } = data;\n  let cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;\n  let types = nodeSet.types;\n  let contextHash = 0,\n      lookAhead = 0;\n\n  function takeNode(parentStart, minPos, children, positions, inRepeat) {\n    let {\n      id,\n      start,\n      end,\n      size\n    } = cursor;\n    let lookAheadAtStart = lookAhead;\n\n    while (size < 0) {\n      cursor.next();\n\n      if (size == -1\n      /* Reuse */\n      ) {\n        let node = reused[id];\n        children.push(node);\n        positions.push(start - parentStart);\n        return;\n      } else if (size == -3\n      /* ContextChange */\n      ) {\n        // Context change\n        contextHash = id;\n        return;\n      } else if (size == -4\n      /* LookAhead */\n      ) {\n        lookAhead = id;\n        return;\n      } else {\n        throw new RangeError(`Unrecognized record size: ${size}`);\n      }\n    }\n\n    let type = types[id],\n        node,\n        buffer;\n    let startPos = start - parentStart;\n\n    if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos, inRepeat))) {\n      // Small enough for a buffer, and no reused nodes inside\n      let data = new Uint16Array(buffer.size - buffer.skip);\n      let endPos = cursor.pos - buffer.size,\n          index = data.length;\n\n      while (cursor.pos > endPos) index = copyToBuffer(buffer.start, data, index);\n\n      node = new TreeBuffer(data, end - buffer.start, nodeSet);\n      startPos = buffer.start - parentStart;\n    } else {\n      // Make it a node\n      let endPos = cursor.pos - size;\n      cursor.next();\n      let localChildren = [],\n          localPositions = [];\n      let localInRepeat = id >= minRepeatType ? id : -1;\n      let lastGroup = 0,\n          lastEnd = end;\n\n      while (cursor.pos > endPos) {\n        if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {\n          if (cursor.end <= lastEnd - maxBufferLength) {\n            makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart);\n            lastGroup = localChildren.length;\n            lastEnd = cursor.end;\n          }\n\n          cursor.next();\n        } else {\n          takeNode(start, endPos, localChildren, localPositions, localInRepeat);\n        }\n      }\n\n      if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length) makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart);\n      localChildren.reverse();\n      localPositions.reverse();\n\n      if (localInRepeat > -1 && lastGroup > 0) {\n        let make = makeBalanced(type);\n        node = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);\n      } else {\n        node = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end);\n      }\n    }\n\n    children.push(node);\n    positions.push(startPos);\n  }\n\n  function makeBalanced(type) {\n    return (children, positions, length) => {\n      let lookAhead = 0,\n          lastI = children.length - 1,\n          last,\n          lookAheadProp;\n\n      if (lastI >= 0 && (last = children[lastI]) instanceof Tree) {\n        if (!lastI && last.type == type && last.length == length) return last;\n        if (lookAheadProp = last.prop(NodeProp.lookAhead)) lookAhead = positions[lastI] + last.length + lookAheadProp;\n      }\n\n      return makeTree(type, children, positions, length, lookAhead);\n    };\n  }\n\n  function makeRepeatLeaf(children, positions, base, i, from, to, type, lookAhead) {\n    let localChildren = [],\n        localPositions = [];\n\n    while (children.length > i) {\n      localChildren.push(children.pop());\n      localPositions.push(positions.pop() + base - from);\n    }\n\n    children.push(makeTree(nodeSet.types[type], localChildren, localPositions, to - from, lookAhead - to));\n    positions.push(from - base);\n  }\n\n  function makeTree(type, children, positions, length) {\n    let lookAhead = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n    let props = arguments.length > 5 ? arguments[5] : undefined;\n\n    if (contextHash) {\n      let pair = [NodeProp.contextHash, contextHash];\n      props = props ? [pair].concat(props) : [pair];\n    }\n\n    if (lookAhead > 25) {\n      let pair = [NodeProp.lookAhead, lookAhead];\n      props = props ? [pair].concat(props) : [pair];\n    }\n\n    return new Tree(type, children, positions, length, props);\n  }\n\n  function findBufferSize(maxSize, inRepeat) {\n    // Scan through the buffer to find previous siblings that fit\n    // together in a TreeBuffer, and don't contain any reused nodes\n    // (which can't be stored in a buffer).\n    // If `inRepeat` is > -1, ignore node boundaries of that type for\n    // nesting, but make sure the end falls either at the start\n    // (`maxSize`) or before such a node.\n    let fork = cursor.fork();\n    let size = 0,\n        start = 0,\n        skip = 0,\n        minStart = fork.end - maxBufferLength;\n    let result = {\n      size: 0,\n      start: 0,\n      skip: 0\n    };\n\n    scan: for (let minPos = fork.pos - maxSize; fork.pos > minPos;) {\n      let nodeSize = fork.size; // Pretend nested repeat nodes of the same type don't exist\n\n      if (fork.id == inRepeat && nodeSize >= 0) {\n        // Except that we store the current state as a valid return\n        // value.\n        result.size = size;\n        result.start = start;\n        result.skip = skip;\n        skip += 4;\n        size += 4;\n        fork.next();\n        continue;\n      }\n\n      let startPos = fork.pos - nodeSize;\n      if (nodeSize < 0 || startPos < minPos || fork.start < minStart) break;\n      let localSkipped = fork.id >= minRepeatType ? 4 : 0;\n      let nodeStart = fork.start;\n      fork.next();\n\n      while (fork.pos > startPos) {\n        if (fork.size < 0) {\n          if (fork.size == -3\n          /* ContextChange */\n          ) localSkipped += 4;else break scan;\n        } else if (fork.id >= minRepeatType) {\n          localSkipped += 4;\n        }\n\n        fork.next();\n      }\n\n      start = nodeStart;\n      size += nodeSize;\n      skip += localSkipped;\n    }\n\n    if (inRepeat < 0 || size == maxSize) {\n      result.size = size;\n      result.start = start;\n      result.skip = skip;\n    }\n\n    return result.size > 4 ? result : undefined;\n  }\n\n  function copyToBuffer(bufferStart, buffer, index) {\n    let {\n      id,\n      start,\n      end,\n      size\n    } = cursor;\n    cursor.next();\n\n    if (size >= 0 && id < minRepeatType) {\n      let startIndex = index;\n\n      if (size > 4) {\n        let endPos = cursor.pos - (size - 4);\n\n        while (cursor.pos > endPos) index = copyToBuffer(bufferStart, buffer, index);\n      }\n\n      buffer[--index] = startIndex;\n      buffer[--index] = end - bufferStart;\n      buffer[--index] = start - bufferStart;\n      buffer[--index] = id;\n    } else if (size == -3\n    /* ContextChange */\n    ) {\n      contextHash = id;\n    } else if (size == -4\n    /* LookAhead */\n    ) {\n      lookAhead = id;\n    }\n\n    return index;\n  }\n\n  let children = [],\n      positions = [];\n\n  while (cursor.pos > 0) takeNode(data.start || 0, data.bufferStart || 0, children, positions, -1);\n\n  let length = (_a = data.length) !== null && _a !== void 0 ? _a : children.length ? positions[0] + children[0].length : 0;\n  return new Tree(types[data.topID], children.reverse(), positions.reverse(), length);\n}\n\nconst nodeSizeCache = new WeakMap();\n\nfunction nodeSize(balanceType, node) {\n  if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType) return 1;\n  let size = nodeSizeCache.get(node);\n\n  if (size == null) {\n    size = 1;\n\n    for (let child of node.children) {\n      if (child.type != balanceType || !(child instanceof Tree)) {\n        size = 1;\n        break;\n      }\n\n      size += nodeSize(balanceType, child);\n    }\n\n    nodeSizeCache.set(node, size);\n  }\n\n  return size;\n}\n\nfunction balanceRange( // The type the balanced tree's inner nodes.\nbalanceType, // The direct children and their positions\nchildren, positions, // The index range in children/positions to use\nfrom, to, // The start position of the nodes, relative to their parent.\nstart, // Length of the outer node\nlength, // Function to build the top node of the balanced tree\nmkTop, // Function to build internal nodes for the balanced tree\nmkTree) {\n  let total = 0;\n\n  for (let i = from; i < to; i++) total += nodeSize(balanceType, children[i]);\n\n  let maxChild = Math.ceil(total * 1.5 / 8\n  /* BranchFactor */\n  );\n  let localChildren = [],\n      localPositions = [];\n\n  function divide(children, positions, from, to, offset) {\n    for (let i = from; i < to;) {\n      let groupFrom = i,\n          groupStart = positions[i],\n          groupSize = nodeSize(balanceType, children[i]);\n      i++;\n\n      for (; i < to; i++) {\n        let nextSize = nodeSize(balanceType, children[i]);\n        if (groupSize + nextSize >= maxChild) break;\n        groupSize += nextSize;\n      }\n\n      if (i == groupFrom + 1) {\n        if (groupSize > maxChild) {\n          let only = children[groupFrom]; // Only trees can have a size > 1\n\n          divide(only.children, only.positions, 0, only.children.length, positions[groupFrom] + offset);\n          continue;\n        }\n\n        localChildren.push(children[groupFrom]);\n      } else {\n        let length = positions[i - 1] + children[i - 1].length - groupStart;\n        localChildren.push(balanceRange(balanceType, children, positions, groupFrom, i, groupStart, length, null, mkTree));\n      }\n\n      localPositions.push(groupStart + offset - start);\n    }\n  }\n\n  divide(children, positions, from, to, 0);\n  return (mkTop || mkTree)(localChildren, localPositions, length);\n} /// Tree fragments are used during [incremental\n/// parsing](#common.Parser.startParse) to track parts of old trees\n/// that can be reused in a new parse. An array of fragments is used\n/// to track regions of an old tree whose nodes might be reused in new\n/// parses. Use the static\n/// [`applyChanges`](#common.TreeFragment^applyChanges) method to\n/// update fragments for document changes.\n\n\nclass TreeFragment {\n  /// Construct a tree fragment.\n  constructor( /// The start of the unchanged range pointed to by this fragment.\n  /// This refers to an offset in the _updated_ document (as opposed\n  /// to the original tree).\n  from, /// The end of the unchanged range.\n  to, /// The tree that this fragment is based on.\n  tree, /// The offset between the fragment's tree and the document that\n  /// this fragment can be used against. Add this when going from\n  /// document to tree positions, subtract it to go from tree to\n  /// document positions.\n  offset) {\n    let openStart = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    let openEnd = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n    this.from = from;\n    this.to = to;\n    this.tree = tree;\n    this.offset = offset;\n    this.open = (openStart ? 1\n    /* Start */\n    : 0) | (openEnd ? 2\n    /* End */\n    : 0);\n  } /// Whether the start of the fragment represents the start of a\n  /// parse, or the end of a change. (In the second case, it may not\n  /// be safe to reuse some nodes at the start, depending on the\n  /// parsing algorithm.)\n\n\n  get openStart() {\n    return (this.open & 1\n    /* Start */\n    ) > 0;\n  } /// Whether the end of the fragment represents the end of a\n  /// full-document parse, or the start of a change.\n\n\n  get openEnd() {\n    return (this.open & 2\n    /* End */\n    ) > 0;\n  } /// Create a set of fragments from a freshly parsed tree, or update\n  /// an existing set of fragments by replacing the ones that overlap\n  /// with a tree with content from the new tree. When `partial` is\n  /// true, the parse is treated as incomplete, and the resulting\n  /// fragment has [`openEnd`](#common.TreeFragment.openEnd) set to\n  /// true.\n\n\n  static addTree(tree) {\n    let fragments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let partial = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let result = [new TreeFragment(0, tree.length, tree, 0, false, partial)];\n\n    for (let f of fragments) if (f.to > tree.length) result.push(f);\n\n    return result;\n  } /// Apply a set of edits to an array of fragments, removing or\n  /// splitting fragments as necessary to remove edited ranges, and\n  /// adjusting offsets for fragments that moved.\n\n\n  static applyChanges(fragments, changes) {\n    let minGap = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 128;\n    if (!changes.length) return fragments;\n    let result = [];\n    let fI = 1,\n        nextF = fragments.length ? fragments[0] : null;\n\n    for (let cI = 0, pos = 0, off = 0;; cI++) {\n      let nextC = cI < changes.length ? changes[cI] : null;\n      let nextPos = nextC ? nextC.fromA : 1e9;\n      if (nextPos - pos >= minGap) while (nextF && nextF.from < nextPos) {\n        let cut = nextF;\n\n        if (pos >= cut.from || nextPos <= cut.to || off) {\n          let fFrom = Math.max(cut.from, pos) - off,\n              fTo = Math.min(cut.to, nextPos) - off;\n          cut = fFrom >= fTo ? null : new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);\n        }\n\n        if (cut) result.push(cut);\n        if (nextF.to > nextPos) break;\n        nextF = fI < fragments.length ? fragments[fI++] : null;\n      }\n      if (!nextC) break;\n      pos = nextC.toA;\n      off = nextC.toA - nextC.toB;\n    }\n\n    return result;\n  }\n\n} /// A superclass that parsers should extend.\n\n\nclass Parser {\n  /// Start a parse, returning a [partial parse](#common.PartialParse)\n  /// object. [`fragments`](#common.TreeFragment) can be passed in to\n  /// make the parse incremental.\n  ///\n  /// By default, the entire input is parsed. You can pass `ranges`,\n  /// which should be a sorted array of non-empty, non-overlapping\n  /// ranges, to parse only those ranges. The tree returned in that\n  /// case will start at `ranges[0].from`.\n  startParse(input, fragments, ranges) {\n    if (typeof input == \"string\") input = new StringInput(input);\n    ranges = !ranges ? [new Range(0, input.length)] : ranges.length ? ranges.map(r => new Range(r.from, r.to)) : [new Range(0, 0)];\n    return this.createParse(input, fragments || [], ranges);\n  } /// Run a full parse, returning the resulting tree.\n\n\n  parse(input, fragments, ranges) {\n    let parse = this.startParse(input, fragments, ranges);\n\n    for (;;) {\n      let done = parse.advance();\n      if (done) return done;\n    }\n  }\n\n}\n\nclass StringInput {\n  constructor(string) {\n    this.string = string;\n  }\n\n  get length() {\n    return this.string.length;\n  }\n\n  chunk(from) {\n    return this.string.slice(from);\n  }\n\n  get lineChunks() {\n    return false;\n  }\n\n  read(from, to) {\n    return this.string.slice(from, to);\n  }\n\n} /// Create a parse wrapper that, after the inner parse completes,\n/// scans its tree for mixed language regions with the `nest`\n/// function, runs the resulting [inner parses](#common.NestedParse),\n/// and then [mounts](#common.NodeProp^mounted) their results onto the\n/// tree.\n///\n/// The nesting function is passed a cursor to provide context for a\n/// node, but _should not_ move that cursor, only inspect its\n/// properties and optionally access its\n/// [node object](#common.TreeCursor.node).\n\n\nfunction parseMixed(nest) {\n  return (parse, input, fragments, ranges) => new MixedParse(parse, nest, input, fragments, ranges);\n}\n\nclass InnerParse {\n  constructor(parser, parse, overlay, target, ranges) {\n    this.parser = parser;\n    this.parse = parse;\n    this.overlay = overlay;\n    this.target = target;\n    this.ranges = ranges;\n  }\n\n}\n\nclass ActiveOverlay {\n  constructor(parser, predicate, mounts, index, start, target, prev) {\n    this.parser = parser;\n    this.predicate = predicate;\n    this.mounts = mounts;\n    this.index = index;\n    this.start = start;\n    this.target = target;\n    this.prev = prev;\n    this.depth = 0;\n    this.ranges = [];\n  }\n\n}\n\nconst stoppedInner = new NodeProp({\n  perNode: true\n});\n\nclass MixedParse {\n  constructor(base, nest, input, fragments, ranges) {\n    this.nest = nest;\n    this.input = input;\n    this.fragments = fragments;\n    this.ranges = ranges;\n    this.inner = [];\n    this.innerDone = 0;\n    this.baseTree = null;\n    this.stoppedAt = null;\n    this.baseParse = base;\n  }\n\n  advance() {\n    if (this.baseParse) {\n      let done = this.baseParse.advance();\n      if (!done) return null;\n      this.baseParse = null;\n      this.baseTree = done;\n      this.startInner();\n      if (this.stoppedAt != null) for (let inner of this.inner) inner.parse.stopAt(this.stoppedAt);\n    }\n\n    if (this.innerDone == this.inner.length) {\n      let result = this.baseTree;\n      if (this.stoppedAt != null) result = new Tree(result.type, result.children, result.positions, result.length, result.propValues.concat([[stoppedInner, this.stoppedAt]]));\n      return result;\n    }\n\n    let inner = this.inner[this.innerDone],\n        done = inner.parse.advance();\n\n    if (done) {\n      this.innerDone++; // This is a somewhat dodgy but super helpful hack where we\n      // patch up nodes created by the inner parse (and thus\n      // presumably not aliased anywhere else) to hold the information\n      // about the inner parse.\n\n      let props = Object.assign(Object.create(null), inner.target.props);\n      props[NodeProp.mounted.id] = new MountedTree(done, inner.overlay, inner.parser);\n      inner.target.props = props;\n    }\n\n    return null;\n  }\n\n  get parsedPos() {\n    if (this.baseParse) return 0;\n    let pos = this.input.length;\n\n    for (let i = this.innerDone; i < this.inner.length; i++) {\n      if (this.inner[i].ranges[0].from < pos) pos = Math.min(pos, this.inner[i].parse.parsedPos);\n    }\n\n    return pos;\n  }\n\n  stopAt(pos) {\n    this.stoppedAt = pos;\n    if (this.baseParse) this.baseParse.stopAt(pos);else for (let i = this.innerDone; i < this.inner.length; i++) this.inner[i].parse.stopAt(pos);\n  }\n\n  startInner() {\n    let fragmentCursor = new FragmentCursor(this.fragments);\n    let overlay = null;\n    let covered = null;\n    let cursor = new TreeCursor(new TreeNode(this.baseTree, this.ranges[0].from, 0, null), 1\n    /* Full */\n    );\n\n    scan: for (let nest, isCovered; this.stoppedAt == null || cursor.from < this.stoppedAt;) {\n      let enter = true,\n          range;\n\n      if (fragmentCursor.hasNode(cursor)) {\n        if (overlay) {\n          let match = overlay.mounts.find(m => m.frag.from <= cursor.from && m.frag.to >= cursor.to && m.mount.overlay);\n          if (match) for (let r of match.mount.overlay) {\n            let from = r.from + match.pos,\n                to = r.to + match.pos;\n            if (from >= cursor.from && to <= cursor.to) overlay.ranges.push({\n              from,\n              to\n            });\n          }\n        }\n\n        enter = false;\n      } else if (covered && (isCovered = checkCover(covered.ranges, cursor.from, cursor.to))) {\n        enter = isCovered != 2\n        /* Full */\n        ;\n      } else if (!cursor.type.isAnonymous && cursor.from < cursor.to && (nest = this.nest(cursor, this.input))) {\n        if (!cursor.tree) materialize(cursor);\n        let oldMounts = fragmentCursor.findMounts(cursor.from, nest.parser);\n\n        if (typeof nest.overlay == \"function\") {\n          overlay = new ActiveOverlay(nest.parser, nest.overlay, oldMounts, this.inner.length, cursor.from, cursor.tree, overlay);\n        } else {\n          let ranges = punchRanges(this.ranges, nest.overlay || [new Range(cursor.from, cursor.to)]);\n          if (ranges.length) this.inner.push(new InnerParse(nest.parser, nest.parser.startParse(this.input, enterFragments(oldMounts, ranges), ranges), nest.overlay ? nest.overlay.map(r => new Range(r.from - cursor.from, r.to - cursor.from)) : null, cursor.tree, ranges));\n          if (!nest.overlay) enter = false;else if (ranges.length) covered = {\n            ranges,\n            depth: 0,\n            prev: covered\n          };\n        }\n      } else if (overlay && (range = overlay.predicate(cursor))) {\n        if (range === true) range = new Range(cursor.from, cursor.to);\n        if (range.from < range.to) overlay.ranges.push(range);\n      }\n\n      if (enter && cursor.firstChild()) {\n        if (overlay) overlay.depth++;\n        if (covered) covered.depth++;\n      } else {\n        for (;;) {\n          if (cursor.nextSibling()) break;\n          if (!cursor.parent()) break scan;\n\n          if (overlay && ! --overlay.depth) {\n            let ranges = punchRanges(this.ranges, overlay.ranges);\n            if (ranges.length) this.inner.splice(overlay.index, 0, new InnerParse(overlay.parser, overlay.parser.startParse(this.input, enterFragments(overlay.mounts, ranges), ranges), overlay.ranges.map(r => new Range(r.from - overlay.start, r.to - overlay.start)), overlay.target, ranges));\n            overlay = overlay.prev;\n          }\n\n          if (covered && ! --covered.depth) covered = covered.prev;\n        }\n      }\n    }\n  }\n\n}\n\nfunction checkCover(covered, from, to) {\n  for (let range of covered) {\n    if (range.from >= to) break;\n    if (range.to > from) return range.from <= from && range.to >= to ? 2\n    /* Full */\n    : 1\n    /* Partial */\n    ;\n  }\n\n  return 0\n  /* None */\n  ;\n} // Take a piece of buffer and convert it into a stand-alone\n// TreeBuffer.\n\n\nfunction sliceBuf(buf, startI, endI, nodes, positions, off) {\n  if (startI < endI) {\n    let from = buf.buffer[startI + 1],\n        to = buf.buffer[endI - 2];\n    nodes.push(buf.slice(startI, endI, from, to));\n    positions.push(from - off);\n  }\n} // This function takes a node that's in a buffer, and converts it, and\n// its parent buffer nodes, into a Tree. This is again acting on the\n// assumption that the trees and buffers have been constructed by the\n// parse that was ran via the mix parser, and thus aren't shared with\n// any other code, making violations of the immutability safe.\n\n\nfunction materialize(cursor) {\n  let {\n    node\n  } = cursor,\n      depth = 0; // Scan up to the nearest tree\n\n  do {\n    cursor.parent();\n    depth++;\n  } while (!cursor.tree); // Find the index of the buffer in that tree\n\n\n  let i = 0,\n      base = cursor.tree,\n      off = 0;\n\n  for (;; i++) {\n    off = base.positions[i] + cursor.from;\n    if (off <= node.from && off + base.children[i].length >= node.to) break;\n  }\n\n  let buf = base.children[i],\n      b = buf.buffer; // Split a level in the buffer, putting the nodes before and after\n  // the child that contains `node` into new buffers.\n\n  function split(startI, endI, type, innerOffset, length) {\n    let i = startI;\n\n    while (b[i + 2] + off <= node.from) i = b[i + 3];\n\n    let children = [],\n        positions = [];\n    sliceBuf(buf, startI, i, children, positions, innerOffset);\n    let from = b[i + 1],\n        to = b[i + 2];\n    let isTarget = from + off == node.from && to + off == node.to && b[i] == node.type.id;\n    children.push(isTarget ? node.toTree() : split(i + 4, b[i + 3], buf.set.types[b[i]], from, to - from));\n    positions.push(from - innerOffset);\n    sliceBuf(buf, b[i + 3], endI, children, positions, innerOffset);\n    return new Tree(type, children, positions, length);\n  }\n\n  base.children[i] = split(0, b.length, NodeType.none, 0, buf.length); // Move the cursor back to the target node\n\n  for (let d = 0; d <= depth; d++) cursor.childAfter(node.from);\n}\n\nclass StructureCursor {\n  constructor(root, offset) {\n    this.offset = offset;\n    this.done = false;\n    this.cursor = root.fullCursor();\n  } // Move to the first node (in pre-order) that starts at or after `pos`.\n\n\n  moveTo(pos) {\n    let {\n      cursor\n    } = this,\n        p = pos - this.offset;\n\n    while (!this.done && cursor.from < p) {\n      if (cursor.to >= pos && cursor.enter(p, 1, false, false)) ;else if (!cursor.next(false)) this.done = true;\n    }\n  }\n\n  hasNode(cursor) {\n    this.moveTo(cursor.from);\n\n    if (!this.done && this.cursor.from + this.offset == cursor.from && this.cursor.tree) {\n      for (let tree = this.cursor.tree;;) {\n        if (tree == cursor.tree) return true;\n        if (tree.children.length && tree.positions[0] == 0 && tree.children[0] instanceof Tree) tree = tree.children[0];else break;\n      }\n    }\n\n    return false;\n  }\n\n}\n\nclass FragmentCursor {\n  constructor(fragments) {\n    var _a;\n\n    this.fragments = fragments;\n    this.curTo = 0;\n    this.fragI = 0;\n\n    if (fragments.length) {\n      let first = this.curFrag = fragments[0];\n      this.curTo = (_a = first.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : first.to;\n      this.inner = new StructureCursor(first.tree, -first.offset);\n    } else {\n      this.curFrag = this.inner = null;\n    }\n  }\n\n  hasNode(node) {\n    while (this.curFrag && node.from >= this.curTo) this.nextFrag();\n\n    return this.curFrag && this.curFrag.from <= node.from && this.curTo >= node.to && this.inner.hasNode(node);\n  }\n\n  nextFrag() {\n    var _a;\n\n    this.fragI++;\n\n    if (this.fragI == this.fragments.length) {\n      this.curFrag = this.inner = null;\n    } else {\n      let frag = this.curFrag = this.fragments[this.fragI];\n      this.curTo = (_a = frag.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : frag.to;\n      this.inner = new StructureCursor(frag.tree, -frag.offset);\n    }\n  }\n\n  findMounts(pos, parser) {\n    var _a;\n\n    let result = [];\n\n    if (this.inner) {\n      this.inner.cursor.moveTo(pos, 1);\n\n      for (let pos = this.inner.cursor.node; pos; pos = pos.parent) {\n        let mount = (_a = pos.tree) === null || _a === void 0 ? void 0 : _a.prop(NodeProp.mounted);\n\n        if (mount && mount.parser == parser) {\n          for (let i = this.fragI; i < this.fragments.length; i++) {\n            let frag = this.fragments[i];\n            if (frag.from >= pos.to) break;\n            if (frag.tree == this.curFrag.tree) result.push({\n              frag,\n              pos: pos.from - frag.offset,\n              mount\n            });\n          }\n        }\n      }\n    }\n\n    return result;\n  }\n\n}\n\nfunction punchRanges(outer, ranges) {\n  let copy = null,\n      current = ranges;\n\n  for (let i = 1, j = 0; i < outer.length; i++) {\n    let gapFrom = outer[i - 1].to,\n        gapTo = outer[i].from;\n\n    for (; j < current.length; j++) {\n      let r = current[j];\n      if (r.from >= gapTo) break;\n      if (r.to <= gapFrom) continue;\n      if (!copy) current = copy = ranges.slice();\n\n      if (r.from < gapFrom) {\n        copy[j] = new Range(r.from, gapFrom);\n        if (r.to > gapTo) copy.splice(j + 1, 0, new Range(gapTo, r.to));\n      } else if (r.to > gapTo) {\n        copy[j--] = new Range(gapTo, r.to);\n      } else {\n        copy.splice(j--, 1);\n      }\n    }\n  }\n\n  return current;\n}\n\nfunction findCoverChanges(a, b, from, to) {\n  let iA = 0,\n      iB = 0,\n      inA = false,\n      inB = false,\n      pos = -1e9;\n  let result = [];\n\n  for (;;) {\n    let nextA = iA == a.length ? 1e9 : inA ? a[iA].to : a[iA].from;\n    let nextB = iB == b.length ? 1e9 : inB ? b[iB].to : b[iB].from;\n\n    if (inA != inB) {\n      let start = Math.max(pos, from),\n          end = Math.min(nextA, nextB, to);\n      if (start < end) result.push(new Range(start, end));\n    }\n\n    pos = Math.min(nextA, nextB);\n    if (pos == 1e9) break;\n\n    if (nextA == pos) {\n      if (!inA) inA = true;else {\n        inA = false;\n        iA++;\n      }\n    }\n\n    if (nextB == pos) {\n      if (!inB) inB = true;else {\n        inB = false;\n        iB++;\n      }\n    }\n  }\n\n  return result;\n} // Given a number of fragments for the outer tree, and a set of ranges\n// to parse, find fragments for inner trees mounted around those\n// ranges, if any.\n\n\nfunction enterFragments(mounts, ranges) {\n  let result = [];\n\n  for (let {\n    pos,\n    mount,\n    frag\n  } of mounts) {\n    let startPos = pos + (mount.overlay ? mount.overlay[0].from : 0),\n        endPos = startPos + mount.tree.length;\n    let from = Math.max(frag.from, startPos),\n        to = Math.min(frag.to, endPos);\n\n    if (mount.overlay) {\n      let overlay = mount.overlay.map(r => new Range(r.from + pos, r.to + pos));\n      let changes = findCoverChanges(ranges, overlay, from, to);\n\n      for (let i = 0, pos = from;; i++) {\n        let last = i == changes.length,\n            end = last ? to : changes[i].from;\n        if (end > pos) result.push(new TreeFragment(pos, end, mount.tree, -startPos, frag.from >= pos, frag.to <= end));\n        if (last) break;\n        pos = changes[i].to;\n      }\n    } else {\n      result.push(new TreeFragment(from, to, mount.tree, -startPos, frag.from >= startPos, frag.to <= endPos));\n    }\n  }\n\n  return result;\n}\n\nexport { DefaultBufferLength, MountedTree, NodeProp, NodeSet, NodeType, Parser, Tree, TreeBuffer, TreeCursor, TreeFragment, parseMixed };","map":{"version":3,"sources":["C:/Users/pc/Desktop/live-code-editor/client/node_modules/@lezer/common/dist/index.js"],"names":["DefaultBufferLength","nextPropID","Range","constructor","from","to","NodeProp","config","id","perNode","deserialize","Error","add","match","RangeError","NodeType","type","result","undefined","closedBy","str","split","openedBy","group","contextHash","lookAhead","mounted","MountedTree","tree","overlay","parser","noProps","Object","create","name","props","flags","define","spec","length","top","skipped","error","src","Array","isArray","prop","isTop","isSkipped","isError","isAnonymous","is","indexOf","map","direct","node","groups","i","found","none","NodeSet","types","extend","newTypes","newProps","source","assign","push","CachedNode","WeakMap","CachedInnerNode","Tree","children","positions","value","toString","ch","test","JSON","stringify","cursor","pos","side","scope","get","topNode","TreeCursor","moveTo","set","_tree","fullCursor","TreeNode","resolve","resolveNode","resolveInner","iterate","enter","leave","c","mustLeave","firstChild","nextSibling","parent","propValues","balance","balanceRange","makeTree","build","data","buildTree","empty","FlatBufferCursor","buffer","index","start","end","size","next","fork","TreeBuffer","childString","join","endIndex","findChild","startIndex","dir","pick","checkSide","slice","startI","endI","b","copy","Uint16Array","j","enterUnfinishedNodesBefore","scan","childBefore","last","lastChild","prevSibling","overlays","_a","inner","_from","_parent","nextChild","mode","e","BufferNode","BufferContext","hasChild","childAfter","buffers","rPos","nextSignificantParent","val","toTree","getChild","before","after","r","getChildren","cur","context","child","externalSibling","parentStart","stack","bufferNode","yieldNode","n","unshift","yieldBuf","yield","enterChild","pop","sibling","d","atLastNode","move","prev","cache","depth","some","nodeSet","maxBufferLength","reused","minRepeatType","takeNode","minPos","inRepeat","lookAheadAtStart","startPos","findBufferSize","skip","endPos","copyToBuffer","localChildren","localPositions","localInRepeat","lastGroup","lastEnd","makeRepeatLeaf","reverse","make","makeBalanced","lastI","lookAheadProp","base","pair","concat","maxSize","minStart","nodeSize","localSkipped","nodeStart","bufferStart","topID","nodeSizeCache","balanceType","mkTop","mkTree","total","maxChild","Math","ceil","divide","offset","groupFrom","groupStart","groupSize","nextSize","only","TreeFragment","openStart","openEnd","open","addTree","fragments","partial","f","applyChanges","changes","minGap","fI","nextF","cI","off","nextC","nextPos","fromA","cut","fFrom","max","fTo","min","toA","toB","Parser","startParse","input","ranges","StringInput","createParse","parse","done","advance","string","chunk","lineChunks","read","parseMixed","nest","MixedParse","InnerParse","target","ActiveOverlay","predicate","mounts","stoppedInner","innerDone","baseTree","stoppedAt","baseParse","startInner","stopAt","parsedPos","fragmentCursor","FragmentCursor","covered","isCovered","range","hasNode","find","m","frag","mount","checkCover","materialize","oldMounts","findMounts","punchRanges","enterFragments","splice","sliceBuf","buf","nodes","innerOffset","isTarget","StructureCursor","root","p","curTo","fragI","first","curFrag","nextFrag","outer","current","gapFrom","gapTo","findCoverChanges","a","iA","iB","inA","inB","nextA","nextB"],"mappings":"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","sourcesContent":["// FIXME profile adding a per-Tree TreeNode cache, validating it by\n// parent pointer\n/// The default maximum length of a `TreeBuffer` node (1024).\nconst DefaultBufferLength = 1024;\nlet nextPropID = 0;\nclass Range {\n    constructor(from, to) {\n        this.from = from;\n        this.to = to;\n    }\n}\n/// Each [node type](#common.NodeType) or [individual tree](#common.Tree)\n/// can have metadata associated with it in props. Instances of this\n/// class represent prop names.\nclass NodeProp {\n    /// Create a new node prop type.\n    constructor(config = {}) {\n        this.id = nextPropID++;\n        this.perNode = !!config.perNode;\n        this.deserialize = config.deserialize || (() => {\n            throw new Error(\"This node type doesn't define a deserialize function\");\n        });\n    }\n    /// This is meant to be used with\n    /// [`NodeSet.extend`](#common.NodeSet.extend) or\n    /// [`LRParser.configure`](#lr.ParserConfig.props) to compute\n    /// prop values for each node type in the set. Takes a [match\n    /// object](#common.NodeType^match) or function that returns undefined\n    /// if the node type doesn't get this prop, and the prop's value if\n    /// it does.\n    add(match) {\n        if (this.perNode)\n            throw new RangeError(\"Can't add per-node props to node types\");\n        if (typeof match != \"function\")\n            match = NodeType.match(match);\n        return (type) => {\n            let result = match(type);\n            return result === undefined ? null : [this, result];\n        };\n    }\n}\n/// Prop that is used to describe matching delimiters. For opening\n/// delimiters, this holds an array of node names (written as a\n/// space-separated string when declaring this prop in a grammar)\n/// for the node types of closing delimiters that match it.\nNodeProp.closedBy = new NodeProp({ deserialize: str => str.split(\" \") });\n/// The inverse of [`closedBy`](#common.NodeProp^closedBy). This is\n/// attached to closing delimiters, holding an array of node names\n/// of types of matching opening delimiters.\nNodeProp.openedBy = new NodeProp({ deserialize: str => str.split(\" \") });\n/// Used to assign node types to groups (for example, all node\n/// types that represent an expression could be tagged with an\n/// `\"Expression\"` group).\nNodeProp.group = new NodeProp({ deserialize: str => str.split(\" \") });\n/// The hash of the [context](#lr.ContextTracker.constructor)\n/// that the node was parsed in, if any. Used to limit reuse of\n/// contextual nodes.\nNodeProp.contextHash = new NodeProp({ perNode: true });\n/// The distance beyond the end of the node that the tokenizer\n/// looked ahead for any of the tokens inside the node. (The LR\n/// parser only stores this when it is larger than 25, for\n/// efficiency reasons.)\nNodeProp.lookAhead = new NodeProp({ perNode: true });\n/// This per-node prop is used to replace a given node, or part of a\n/// node, with another tree. This is useful to include trees from\n/// different languages.\nNodeProp.mounted = new NodeProp({ perNode: true });\n/// A mounted tree, which can be [stored](#common.NodeProp^mounted) on\n/// a tree node to indicate that parts of its content are\n/// represented by another tree.\nclass MountedTree {\n    constructor(\n    /// The inner tree.\n    tree, \n    /// If this is null, this tree replaces the entire node (it will\n    /// be included in the regular iteration instead of its host\n    /// node). If not, only the given ranges are considered to be\n    /// covered by this tree. This is used for trees that are mixed in\n    /// a way that isn't strictly hierarchical. Such mounted trees are\n    /// only entered by [`resolveInner`](#common.Tree.resolveInner)\n    /// and [`enter`](#common.SyntaxNode.enter).\n    overlay, \n    /// The parser used to create this subtree.\n    parser) {\n        this.tree = tree;\n        this.overlay = overlay;\n        this.parser = parser;\n    }\n}\nconst noProps = Object.create(null);\n/// Each node in a syntax tree has a node type associated with it.\nclass NodeType {\n    /// @internal\n    constructor(\n    /// The name of the node type. Not necessarily unique, but if the\n    /// grammar was written properly, different node types with the\n    /// same name within a node set should play the same semantic\n    /// role.\n    name, \n    /// @internal\n    props, \n    /// The id of this node in its set. Corresponds to the term ids\n    /// used in the parser.\n    id, \n    /// @internal\n    flags = 0) {\n        this.name = name;\n        this.props = props;\n        this.id = id;\n        this.flags = flags;\n    }\n    static define(spec) {\n        let props = spec.props && spec.props.length ? Object.create(null) : noProps;\n        let flags = (spec.top ? 1 /* Top */ : 0) | (spec.skipped ? 2 /* Skipped */ : 0) |\n            (spec.error ? 4 /* Error */ : 0) | (spec.name == null ? 8 /* Anonymous */ : 0);\n        let type = new NodeType(spec.name || \"\", props, spec.id, flags);\n        if (spec.props)\n            for (let src of spec.props) {\n                if (!Array.isArray(src))\n                    src = src(type);\n                if (src) {\n                    if (src[0].perNode)\n                        throw new RangeError(\"Can't store a per-node prop on a node type\");\n                    props[src[0].id] = src[1];\n                }\n            }\n        return type;\n    }\n    /// Retrieves a node prop for this type. Will return `undefined` if\n    /// the prop isn't present on this node.\n    prop(prop) { return this.props[prop.id]; }\n    /// True when this is the top node of a grammar.\n    get isTop() { return (this.flags & 1 /* Top */) > 0; }\n    /// True when this node is produced by a skip rule.\n    get isSkipped() { return (this.flags & 2 /* Skipped */) > 0; }\n    /// Indicates whether this is an error node.\n    get isError() { return (this.flags & 4 /* Error */) > 0; }\n    /// When true, this node type doesn't correspond to a user-declared\n    /// named node, for example because it is used to cache repetition.\n    get isAnonymous() { return (this.flags & 8 /* Anonymous */) > 0; }\n    /// Returns true when this node's name or one of its\n    /// [groups](#common.NodeProp^group) matches the given string.\n    is(name) {\n        if (typeof name == 'string') {\n            if (this.name == name)\n                return true;\n            let group = this.prop(NodeProp.group);\n            return group ? group.indexOf(name) > -1 : false;\n        }\n        return this.id == name;\n    }\n    /// Create a function from node types to arbitrary values by\n    /// specifying an object whose property names are node or\n    /// [group](#common.NodeProp^group) names. Often useful with\n    /// [`NodeProp.add`](#common.NodeProp.add). You can put multiple\n    /// names, separated by spaces, in a single property name to map\n    /// multiple node names to a single value.\n    static match(map) {\n        let direct = Object.create(null);\n        for (let prop in map)\n            for (let name of prop.split(\" \"))\n                direct[name] = map[prop];\n        return (node) => {\n            for (let groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {\n                let found = direct[i < 0 ? node.name : groups[i]];\n                if (found)\n                    return found;\n            }\n        };\n    }\n}\n/// An empty dummy node type to use when no actual type is available.\nNodeType.none = new NodeType(\"\", Object.create(null), 0, 8 /* Anonymous */);\n/// A node set holds a collection of node types. It is used to\n/// compactly represent trees by storing their type ids, rather than a\n/// full pointer to the type object, in a numeric array. Each parser\n/// [has](#lr.LRParser.nodeSet) a node set, and [tree\n/// buffers](#common.TreeBuffer) can only store collections of nodes\n/// from the same set. A set can have a maximum of 2**16 (65536) node\n/// types in it, so that the ids fit into 16-bit typed array slots.\nclass NodeSet {\n    /// Create a set with the given types. The `id` property of each\n    /// type should correspond to its position within the array.\n    constructor(\n    /// The node types in this set, by id.\n    types) {\n        this.types = types;\n        for (let i = 0; i < types.length; i++)\n            if (types[i].id != i)\n                throw new RangeError(\"Node type ids should correspond to array positions when creating a node set\");\n    }\n    /// Create a copy of this set with some node properties added. The\n    /// arguments to this method should be created with\n    /// [`NodeProp.add`](#common.NodeProp.add).\n    extend(...props) {\n        let newTypes = [];\n        for (let type of this.types) {\n            let newProps = null;\n            for (let source of props) {\n                let add = source(type);\n                if (add) {\n                    if (!newProps)\n                        newProps = Object.assign({}, type.props);\n                    newProps[add[0].id] = add[1];\n                }\n            }\n            newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);\n        }\n        return new NodeSet(newTypes);\n    }\n}\nconst CachedNode = new WeakMap(), CachedInnerNode = new WeakMap();\n/// A piece of syntax tree. There are two ways to approach these\n/// trees: the way they are actually stored in memory, and the\n/// convenient way.\n///\n/// Syntax trees are stored as a tree of `Tree` and `TreeBuffer`\n/// objects. By packing detail information into `TreeBuffer` leaf\n/// nodes, the representation is made a lot more memory-efficient.\n///\n/// However, when you want to actually work with tree nodes, this\n/// representation is very awkward, so most client code will want to\n/// use the [`TreeCursor`](#common.TreeCursor) or\n/// [`SyntaxNode`](#common.SyntaxNode) interface instead, which provides\n/// a view on some part of this data structure, and can be used to\n/// move around to adjacent nodes.\nclass Tree {\n    /// Construct a new tree. See also [`Tree.build`](#common.Tree^build).\n    constructor(\n    /// The type of the top node.\n    type, \n    /// This node's child nodes.\n    children, \n    /// The positions (offsets relative to the start of this tree) of\n    /// the children.\n    positions, \n    /// The total length of this tree\n    length, \n    /// Per-node [node props](#common.NodeProp) to associate with this node.\n    props) {\n        this.type = type;\n        this.children = children;\n        this.positions = positions;\n        this.length = length;\n        /// @internal\n        this.props = null;\n        if (props && props.length) {\n            this.props = Object.create(null);\n            for (let [prop, value] of props)\n                this.props[typeof prop == \"number\" ? prop : prop.id] = value;\n        }\n    }\n    /// @internal\n    toString() {\n        let mounted = this.prop(NodeProp.mounted);\n        if (mounted && !mounted.overlay)\n            return mounted.tree.toString();\n        let children = \"\";\n        for (let ch of this.children) {\n            let str = ch.toString();\n            if (str) {\n                if (children)\n                    children += \",\";\n                children += str;\n            }\n        }\n        return !this.type.name ? children :\n            (/\\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) +\n                (children.length ? \"(\" + children + \")\" : \"\");\n    }\n    /// Get a [tree cursor](#common.TreeCursor) rooted at this tree. When\n    /// `pos` is given, the cursor is [moved](#common.TreeCursor.moveTo)\n    /// to the given position and side.\n    cursor(pos, side = 0) {\n        let scope = (pos != null && CachedNode.get(this)) || this.topNode;\n        let cursor = new TreeCursor(scope);\n        if (pos != null) {\n            cursor.moveTo(pos, side);\n            CachedNode.set(this, cursor._tree);\n        }\n        return cursor;\n    }\n    /// Get a [tree cursor](#common.TreeCursor) that, unlike regular\n    /// cursors, doesn't skip through\n    /// [anonymous](#common.NodeType.isAnonymous) nodes and doesn't\n    /// automatically enter mounted nodes.\n    fullCursor() {\n        return new TreeCursor(this.topNode, 1 /* Full */);\n    }\n    /// Get a [syntax node](#common.SyntaxNode) object for the top of the\n    /// tree.\n    get topNode() {\n        return new TreeNode(this, 0, 0, null);\n    }\n    /// Get the [syntax node](#common.SyntaxNode) at the given position.\n    /// If `side` is -1, this will move into nodes that end at the\n    /// position. If 1, it'll move into nodes that start at the\n    /// position. With 0, it'll only enter nodes that cover the position\n    /// from both sides.\n    resolve(pos, side = 0) {\n        let node = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);\n        CachedNode.set(this, node);\n        return node;\n    }\n    /// Like [`resolve`](#common.Tree.resolve), but will enter\n    /// [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node\n    /// pointing into the innermost overlaid tree at the given position\n    /// (with parent links going through all parent structure, including\n    /// the host trees).\n    resolveInner(pos, side = 0) {\n        let node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);\n        CachedInnerNode.set(this, node);\n        return node;\n    }\n    /// Iterate over the tree and its children, calling `enter` for any\n    /// node that touches the `from`/`to` region (if given) before\n    /// running over such a node's children, and `leave` (if given) when\n    /// leaving the node. When `enter` returns `false`, that node will\n    /// not have its children iterated over (or `leave` called).\n    iterate(spec) {\n        let { enter, leave, from = 0, to = this.length } = spec;\n        for (let c = this.cursor(), get = () => c.node;;) {\n            let mustLeave = false;\n            if (c.from <= to && c.to >= from && (c.type.isAnonymous || enter(c.type, c.from, c.to, get) !== false)) {\n                if (c.firstChild())\n                    continue;\n                if (!c.type.isAnonymous)\n                    mustLeave = true;\n            }\n            for (;;) {\n                if (mustLeave && leave)\n                    leave(c.type, c.from, c.to, get);\n                mustLeave = c.type.isAnonymous;\n                if (c.nextSibling())\n                    break;\n                if (!c.parent())\n                    return;\n                mustLeave = true;\n            }\n        }\n    }\n    /// Get the value of the given [node prop](#common.NodeProp) for this\n    /// node. Works with both per-node and per-type props.\n    prop(prop) {\n        return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : undefined;\n    }\n    /// Returns the node's [per-node props](#common.NodeProp.perNode) in a\n    /// format that can be passed to the [`Tree`](#common.Tree)\n    /// constructor.\n    get propValues() {\n        let result = [];\n        if (this.props)\n            for (let id in this.props)\n                result.push([+id, this.props[id]]);\n        return result;\n    }\n    /// Balance the direct children of this tree, producing a copy of\n    /// which may have children grouped into subtrees with type\n    /// [`NodeType.none`](#common.NodeType^none).\n    balance(config = {}) {\n        return this.children.length <= 8 /* BranchFactor */ ? this :\n            balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, (children, positions, length) => new Tree(this.type, children, positions, length, this.propValues), config.makeTree || ((children, positions, length) => new Tree(NodeType.none, children, positions, length)));\n    }\n    /// Build a tree from a postfix-ordered buffer of node information,\n    /// or a cursor over such a buffer.\n    static build(data) { return buildTree(data); }\n}\n/// The empty tree\nTree.empty = new Tree(NodeType.none, [], [], 0);\nclass FlatBufferCursor {\n    constructor(buffer, index) {\n        this.buffer = buffer;\n        this.index = index;\n    }\n    get id() { return this.buffer[this.index - 4]; }\n    get start() { return this.buffer[this.index - 3]; }\n    get end() { return this.buffer[this.index - 2]; }\n    get size() { return this.buffer[this.index - 1]; }\n    get pos() { return this.index; }\n    next() { this.index -= 4; }\n    fork() { return new FlatBufferCursor(this.buffer, this.index); }\n}\n/// Tree buffers contain (type, start, end, endIndex) quads for each\n/// node. In such a buffer, nodes are stored in prefix order (parents\n/// before children, with the endIndex of the parent indicating which\n/// children belong to it)\nclass TreeBuffer {\n    /// Create a tree buffer.\n    constructor(\n    /// The buffer's content.\n    buffer, \n    /// The total length of the group of nodes in the buffer.\n    length, \n    /// The node set used in this buffer.\n    set) {\n        this.buffer = buffer;\n        this.length = length;\n        this.set = set;\n    }\n    /// @internal\n    get type() { return NodeType.none; }\n    /// @internal\n    toString() {\n        let result = [];\n        for (let index = 0; index < this.buffer.length;) {\n            result.push(this.childString(index));\n            index = this.buffer[index + 3];\n        }\n        return result.join(\",\");\n    }\n    /// @internal\n    childString(index) {\n        let id = this.buffer[index], endIndex = this.buffer[index + 3];\n        let type = this.set.types[id], result = type.name;\n        if (/\\W/.test(result) && !type.isError)\n            result = JSON.stringify(result);\n        index += 4;\n        if (endIndex == index)\n            return result;\n        let children = [];\n        while (index < endIndex) {\n            children.push(this.childString(index));\n            index = this.buffer[index + 3];\n        }\n        return result + \"(\" + children.join(\",\") + \")\";\n    }\n    /// @internal\n    findChild(startIndex, endIndex, dir, pos, side) {\n        let { buffer } = this, pick = -1;\n        for (let i = startIndex; i != endIndex; i = buffer[i + 3]) {\n            if (checkSide(side, pos, buffer[i + 1], buffer[i + 2])) {\n                pick = i;\n                if (dir > 0)\n                    break;\n            }\n        }\n        return pick;\n    }\n    /// @internal\n    slice(startI, endI, from, to) {\n        let b = this.buffer;\n        let copy = new Uint16Array(endI - startI);\n        for (let i = startI, j = 0; i < endI;) {\n            copy[j++] = b[i++];\n            copy[j++] = b[i++] - from;\n            copy[j++] = b[i++] - from;\n            copy[j++] = b[i++] - startI;\n        }\n        return new TreeBuffer(copy, to - from, this.set);\n    }\n}\nfunction checkSide(side, pos, from, to) {\n    switch (side) {\n        case -2 /* Before */: return from < pos;\n        case -1 /* AtOrBefore */: return to >= pos && from < pos;\n        case 0 /* Around */: return from < pos && to > pos;\n        case 1 /* AtOrAfter */: return from <= pos && to > pos;\n        case 2 /* After */: return to > pos;\n        case 4 /* DontCare */: return true;\n    }\n}\nfunction enterUnfinishedNodesBefore(node, pos) {\n    let scan = node.childBefore(pos);\n    while (scan) {\n        let last = scan.lastChild;\n        if (!last || last.to != scan.to)\n            break;\n        if (last.type.isError && last.from == last.to) {\n            node = scan;\n            scan = last.prevSibling;\n        }\n        else {\n            scan = last;\n        }\n    }\n    return node;\n}\nfunction resolveNode(node, pos, side, overlays) {\n    var _a;\n    // Move up to a node that actually holds the position, if possible\n    while (node.from == node.to ||\n        (side < 1 ? node.from >= pos : node.from > pos) ||\n        (side > -1 ? node.to <= pos : node.to < pos)) {\n        let parent = !overlays && node instanceof TreeNode && node.index < 0 ? null : node.parent;\n        if (!parent)\n            return node;\n        node = parent;\n    }\n    // Must go up out of overlays when those do not overlap with pos\n    if (overlays)\n        for (let scan = node, parent = scan.parent; parent; scan = parent, parent = scan.parent) {\n            if (scan instanceof TreeNode && scan.index < 0 && ((_a = parent.enter(pos, side, true)) === null || _a === void 0 ? void 0 : _a.from) != scan.from)\n                node = parent;\n        }\n    for (;;) {\n        let inner = node.enter(pos, side, overlays);\n        if (!inner)\n            return node;\n        node = inner;\n    }\n}\nclass TreeNode {\n    constructor(node, _from, \n    // Index in parent node, set to -1 if the node is not a direct child of _parent.node (overlay)\n    index, _parent) {\n        this.node = node;\n        this._from = _from;\n        this.index = index;\n        this._parent = _parent;\n    }\n    get type() { return this.node.type; }\n    get name() { return this.node.type.name; }\n    get from() { return this._from; }\n    get to() { return this._from + this.node.length; }\n    nextChild(i, dir, pos, side, mode = 0) {\n        for (let parent = this;;) {\n            for (let { children, positions } = parent.node, e = dir > 0 ? children.length : -1; i != e; i += dir) {\n                let next = children[i], start = positions[i] + parent._from;\n                if (!checkSide(side, pos, start, start + next.length))\n                    continue;\n                if (next instanceof TreeBuffer) {\n                    if (mode & 2 /* NoEnterBuffer */)\n                        continue;\n                    let index = next.findChild(0, next.buffer.length, dir, pos - start, side);\n                    if (index > -1)\n                        return new BufferNode(new BufferContext(parent, next, i, start), null, index);\n                }\n                else if ((mode & 1 /* Full */) || (!next.type.isAnonymous || hasChild(next))) {\n                    let mounted;\n                    if (!(mode & 1 /* Full */) && next.props && (mounted = next.prop(NodeProp.mounted)) && !mounted.overlay)\n                        return new TreeNode(mounted.tree, start, i, parent);\n                    let inner = new TreeNode(next, start, i, parent);\n                    return (mode & 1 /* Full */) || !inner.type.isAnonymous ? inner\n                        : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);\n                }\n            }\n            if ((mode & 1 /* Full */) || !parent.type.isAnonymous)\n                return null;\n            if (parent.index >= 0)\n                i = parent.index + dir;\n            else\n                i = dir < 0 ? -1 : parent._parent.node.children.length;\n            parent = parent._parent;\n            if (!parent)\n                return null;\n        }\n    }\n    get firstChild() { return this.nextChild(0, 1, 0, 4 /* DontCare */); }\n    get lastChild() { return this.nextChild(this.node.children.length - 1, -1, 0, 4 /* DontCare */); }\n    childAfter(pos) { return this.nextChild(0, 1, pos, 2 /* After */); }\n    childBefore(pos) { return this.nextChild(this.node.children.length - 1, -1, pos, -2 /* Before */); }\n    enter(pos, side, overlays = true, buffers = true) {\n        let mounted;\n        if (overlays && (mounted = this.node.prop(NodeProp.mounted)) && mounted.overlay) {\n            let rPos = pos - this.from;\n            for (let { from, to } of mounted.overlay) {\n                if ((side > 0 ? from <= rPos : from < rPos) &&\n                    (side < 0 ? to >= rPos : to > rPos))\n                    return new TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);\n            }\n        }\n        return this.nextChild(0, 1, pos, side, buffers ? 0 : 2 /* NoEnterBuffer */);\n    }\n    nextSignificantParent() {\n        let val = this;\n        while (val.type.isAnonymous && val._parent)\n            val = val._parent;\n        return val;\n    }\n    get parent() {\n        return this._parent ? this._parent.nextSignificantParent() : null;\n    }\n    get nextSibling() {\n        return this._parent && this.index >= 0 ? this._parent.nextChild(this.index + 1, 1, 0, 4 /* DontCare */) : null;\n    }\n    get prevSibling() {\n        return this._parent && this.index >= 0 ? this._parent.nextChild(this.index - 1, -1, 0, 4 /* DontCare */) : null;\n    }\n    get cursor() { return new TreeCursor(this); }\n    get tree() { return this.node; }\n    toTree() { return this.node; }\n    resolve(pos, side = 0) {\n        return resolveNode(this, pos, side, false);\n    }\n    resolveInner(pos, side = 0) {\n        return resolveNode(this, pos, side, true);\n    }\n    enterUnfinishedNodesBefore(pos) { return enterUnfinishedNodesBefore(this, pos); }\n    getChild(type, before = null, after = null) {\n        let r = getChildren(this, type, before, after);\n        return r.length ? r[0] : null;\n    }\n    getChildren(type, before = null, after = null) {\n        return getChildren(this, type, before, after);\n    }\n    /// @internal\n    toString() { return this.node.toString(); }\n}\nfunction getChildren(node, type, before, after) {\n    let cur = node.cursor, result = [];\n    if (!cur.firstChild())\n        return result;\n    if (before != null)\n        while (!cur.type.is(before))\n            if (!cur.nextSibling())\n                return result;\n    for (;;) {\n        if (after != null && cur.type.is(after))\n            return result;\n        if (cur.type.is(type))\n            result.push(cur.node);\n        if (!cur.nextSibling())\n            return after == null ? result : [];\n    }\n}\nclass BufferContext {\n    constructor(parent, buffer, index, start) {\n        this.parent = parent;\n        this.buffer = buffer;\n        this.index = index;\n        this.start = start;\n    }\n}\nclass BufferNode {\n    constructor(context, _parent, index) {\n        this.context = context;\n        this._parent = _parent;\n        this.index = index;\n        this.type = context.buffer.set.types[context.buffer.buffer[index]];\n    }\n    get name() { return this.type.name; }\n    get from() { return this.context.start + this.context.buffer.buffer[this.index + 1]; }\n    get to() { return this.context.start + this.context.buffer.buffer[this.index + 2]; }\n    child(dir, pos, side) {\n        let { buffer } = this.context;\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);\n        return index < 0 ? null : new BufferNode(this.context, this, index);\n    }\n    get firstChild() { return this.child(1, 0, 4 /* DontCare */); }\n    get lastChild() { return this.child(-1, 0, 4 /* DontCare */); }\n    childAfter(pos) { return this.child(1, pos, 2 /* After */); }\n    childBefore(pos) { return this.child(-1, pos, -2 /* Before */); }\n    enter(pos, side, overlays, buffers = true) {\n        if (!buffers)\n            return null;\n        let { buffer } = this.context;\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);\n        return index < 0 ? null : new BufferNode(this.context, this, index);\n    }\n    get parent() {\n        return this._parent || this.context.parent.nextSignificantParent();\n    }\n    externalSibling(dir) {\n        return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, 0, 4 /* DontCare */);\n    }\n    get nextSibling() {\n        let { buffer } = this.context;\n        let after = buffer.buffer[this.index + 3];\n        if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length))\n            return new BufferNode(this.context, this._parent, after);\n        return this.externalSibling(1);\n    }\n    get prevSibling() {\n        let { buffer } = this.context;\n        let parentStart = this._parent ? this._parent.index + 4 : 0;\n        if (this.index == parentStart)\n            return this.externalSibling(-1);\n        return new BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, 0, 4 /* DontCare */));\n    }\n    get cursor() { return new TreeCursor(this); }\n    get tree() { return null; }\n    toTree() {\n        let children = [], positions = [];\n        let { buffer } = this.context;\n        let startI = this.index + 4, endI = buffer.buffer[this.index + 3];\n        if (endI > startI) {\n            let from = buffer.buffer[this.index + 1], to = buffer.buffer[this.index + 2];\n            children.push(buffer.slice(startI, endI, from, to));\n            positions.push(0);\n        }\n        return new Tree(this.type, children, positions, this.to - this.from);\n    }\n    resolve(pos, side = 0) {\n        return resolveNode(this, pos, side, false);\n    }\n    resolveInner(pos, side = 0) {\n        return resolveNode(this, pos, side, true);\n    }\n    enterUnfinishedNodesBefore(pos) { return enterUnfinishedNodesBefore(this, pos); }\n    /// @internal\n    toString() { return this.context.buffer.childString(this.index); }\n    getChild(type, before = null, after = null) {\n        let r = getChildren(this, type, before, after);\n        return r.length ? r[0] : null;\n    }\n    getChildren(type, before = null, after = null) {\n        return getChildren(this, type, before, after);\n    }\n}\n/// A tree cursor object focuses on a given node in a syntax tree, and\n/// allows you to move to adjacent nodes.\nclass TreeCursor {\n    /// @internal\n    constructor(node, \n    /// @internal\n    mode = 0) {\n        this.mode = mode;\n        this.buffer = null;\n        this.stack = [];\n        this.index = 0;\n        this.bufferNode = null;\n        if (node instanceof TreeNode) {\n            this.yieldNode(node);\n        }\n        else {\n            this._tree = node.context.parent;\n            this.buffer = node.context;\n            for (let n = node._parent; n; n = n._parent)\n                this.stack.unshift(n.index);\n            this.bufferNode = node;\n            this.yieldBuf(node.index);\n        }\n    }\n    /// Shorthand for `.type.name`.\n    get name() { return this.type.name; }\n    yieldNode(node) {\n        if (!node)\n            return false;\n        this._tree = node;\n        this.type = node.type;\n        this.from = node.from;\n        this.to = node.to;\n        return true;\n    }\n    yieldBuf(index, type) {\n        this.index = index;\n        let { start, buffer } = this.buffer;\n        this.type = type || buffer.set.types[buffer.buffer[index]];\n        this.from = start + buffer.buffer[index + 1];\n        this.to = start + buffer.buffer[index + 2];\n        return true;\n    }\n    yield(node) {\n        if (!node)\n            return false;\n        if (node instanceof TreeNode) {\n            this.buffer = null;\n            return this.yieldNode(node);\n        }\n        this.buffer = node.context;\n        return this.yieldBuf(node.index, node.type);\n    }\n    /// @internal\n    toString() {\n        return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();\n    }\n    /// @internal\n    enterChild(dir, pos, side) {\n        if (!this.buffer)\n            return this.yield(this._tree.nextChild(dir < 0 ? this._tree.node.children.length - 1 : 0, dir, pos, side, this.mode));\n        let { buffer } = this.buffer;\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);\n        if (index < 0)\n            return false;\n        this.stack.push(this.index);\n        return this.yieldBuf(index);\n    }\n    /// Move the cursor to this node's first child. When this returns\n    /// false, the node has no child, and the cursor has not been moved.\n    firstChild() { return this.enterChild(1, 0, 4 /* DontCare */); }\n    /// Move the cursor to this node's last child.\n    lastChild() { return this.enterChild(-1, 0, 4 /* DontCare */); }\n    /// Move the cursor to the first child that ends after `pos`.\n    childAfter(pos) { return this.enterChild(1, pos, 2 /* After */); }\n    /// Move to the last child that starts before `pos`.\n    childBefore(pos) { return this.enterChild(-1, pos, -2 /* Before */); }\n    /// Move the cursor to the child around `pos`. If side is -1 the\n    /// child may end at that position, when 1 it may start there. This\n    /// will also enter [overlaid](#common.MountedTree.overlay)\n    /// [mounted](#common.NodeProp^mounted) trees unless `overlays` is\n    /// set to false.\n    enter(pos, side, overlays = true, buffers = true) {\n        if (!this.buffer)\n            return this.yield(this._tree.enter(pos, side, overlays && !(this.mode & 1 /* Full */), buffers));\n        return buffers ? this.enterChild(1, pos, side) : false;\n    }\n    /// Move to the node's parent node, if this isn't the top node.\n    parent() {\n        if (!this.buffer)\n            return this.yieldNode((this.mode & 1 /* Full */) ? this._tree._parent : this._tree.parent);\n        if (this.stack.length)\n            return this.yieldBuf(this.stack.pop());\n        let parent = (this.mode & 1 /* Full */) ? this.buffer.parent : this.buffer.parent.nextSignificantParent();\n        this.buffer = null;\n        return this.yieldNode(parent);\n    }\n    /// @internal\n    sibling(dir) {\n        if (!this.buffer)\n            return !this._tree._parent ? false\n                : this.yield(this._tree.index < 0 ? null\n                    : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4 /* DontCare */, this.mode));\n        let { buffer } = this.buffer, d = this.stack.length - 1;\n        if (dir < 0) {\n            let parentStart = d < 0 ? 0 : this.stack[d] + 4;\n            if (this.index != parentStart)\n                return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, 0, 4 /* DontCare */));\n        }\n        else {\n            let after = buffer.buffer[this.index + 3];\n            if (after < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3]))\n                return this.yieldBuf(after);\n        }\n        return d < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4 /* DontCare */, this.mode)) : false;\n    }\n    /// Move to this node's next sibling, if any.\n    nextSibling() { return this.sibling(1); }\n    /// Move to this node's previous sibling, if any.\n    prevSibling() { return this.sibling(-1); }\n    atLastNode(dir) {\n        let index, parent, { buffer } = this;\n        if (buffer) {\n            if (dir > 0) {\n                if (this.index < buffer.buffer.buffer.length)\n                    return false;\n            }\n            else {\n                for (let i = 0; i < this.index; i++)\n                    if (buffer.buffer.buffer[i + 3] < this.index)\n                        return false;\n            }\n            ({ index, parent } = buffer);\n        }\n        else {\n            ({ index, _parent: parent } = this._tree);\n        }\n        for (; parent; { index, _parent: parent } = parent) {\n            if (index > -1)\n                for (let i = index + dir, e = dir < 0 ? -1 : parent.node.children.length; i != e; i += dir) {\n                    let child = parent.node.children[i];\n                    if ((this.mode & 1 /* Full */) || child instanceof TreeBuffer || !child.type.isAnonymous || hasChild(child))\n                        return false;\n                }\n        }\n        return true;\n    }\n    move(dir, enter) {\n        if (enter && this.enterChild(dir, 0, 4 /* DontCare */))\n            return true;\n        for (;;) {\n            if (this.sibling(dir))\n                return true;\n            if (this.atLastNode(dir) || !this.parent())\n                return false;\n        }\n    }\n    /// Move to the next node in a\n    /// [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order_(NLR))\n    /// traversal, going from a node to its first child or, if the\n    /// current node is empty or `enter` is false, its next sibling or\n    /// the next sibling of the first parent node that has one.\n    next(enter = true) { return this.move(1, enter); }\n    /// Move to the next node in a last-to-first pre-order traveral. A\n    /// node is followed by its last child or, if it has none, its\n    /// previous sibling or the previous sibling of the first parent\n    /// node that has one.\n    prev(enter = true) { return this.move(-1, enter); }\n    /// Move the cursor to the innermost node that covers `pos`. If\n    /// `side` is -1, it will enter nodes that end at `pos`. If it is 1,\n    /// it will enter nodes that start at `pos`.\n    moveTo(pos, side = 0) {\n        // Move up to a node that actually holds the position, if possible\n        while (this.from == this.to ||\n            (side < 1 ? this.from >= pos : this.from > pos) ||\n            (side > -1 ? this.to <= pos : this.to < pos))\n            if (!this.parent())\n                break;\n        // Then scan down into child nodes as far as possible\n        while (this.enterChild(1, pos, side)) { }\n        return this;\n    }\n    /// Get a [syntax node](#common.SyntaxNode) at the cursor's current\n    /// position.\n    get node() {\n        if (!this.buffer)\n            return this._tree;\n        let cache = this.bufferNode, result = null, depth = 0;\n        if (cache && cache.context == this.buffer) {\n            scan: for (let index = this.index, d = this.stack.length; d >= 0;) {\n                for (let c = cache; c; c = c._parent)\n                    if (c.index == index) {\n                        if (index == this.index)\n                            return c;\n                        result = c;\n                        depth = d + 1;\n                        break scan;\n                    }\n                index = this.stack[--d];\n            }\n        }\n        for (let i = depth; i < this.stack.length; i++)\n            result = new BufferNode(this.buffer, result, this.stack[i]);\n        return this.bufferNode = new BufferNode(this.buffer, result, this.index);\n    }\n    /// Get the [tree](#common.Tree) that represents the current node, if\n    /// any. Will return null when the node is in a [tree\n    /// buffer](#common.TreeBuffer).\n    get tree() {\n        return this.buffer ? null : this._tree.node;\n    }\n}\nfunction hasChild(tree) {\n    return tree.children.some(ch => ch instanceof TreeBuffer || !ch.type.isAnonymous || hasChild(ch));\n}\nfunction buildTree(data) {\n    var _a;\n    let { buffer, nodeSet, maxBufferLength = DefaultBufferLength, reused = [], minRepeatType = nodeSet.types.length } = data;\n    let cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;\n    let types = nodeSet.types;\n    let contextHash = 0, lookAhead = 0;\n    function takeNode(parentStart, minPos, children, positions, inRepeat) {\n        let { id, start, end, size } = cursor;\n        let lookAheadAtStart = lookAhead;\n        while (size < 0) {\n            cursor.next();\n            if (size == -1 /* Reuse */) {\n                let node = reused[id];\n                children.push(node);\n                positions.push(start - parentStart);\n                return;\n            }\n            else if (size == -3 /* ContextChange */) { // Context change\n                contextHash = id;\n                return;\n            }\n            else if (size == -4 /* LookAhead */) {\n                lookAhead = id;\n                return;\n            }\n            else {\n                throw new RangeError(`Unrecognized record size: ${size}`);\n            }\n        }\n        let type = types[id], node, buffer;\n        let startPos = start - parentStart;\n        if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos, inRepeat))) {\n            // Small enough for a buffer, and no reused nodes inside\n            let data = new Uint16Array(buffer.size - buffer.skip);\n            let endPos = cursor.pos - buffer.size, index = data.length;\n            while (cursor.pos > endPos)\n                index = copyToBuffer(buffer.start, data, index);\n            node = new TreeBuffer(data, end - buffer.start, nodeSet);\n            startPos = buffer.start - parentStart;\n        }\n        else { // Make it a node\n            let endPos = cursor.pos - size;\n            cursor.next();\n            let localChildren = [], localPositions = [];\n            let localInRepeat = id >= minRepeatType ? id : -1;\n            let lastGroup = 0, lastEnd = end;\n            while (cursor.pos > endPos) {\n                if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {\n                    if (cursor.end <= lastEnd - maxBufferLength) {\n                        makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart);\n                        lastGroup = localChildren.length;\n                        lastEnd = cursor.end;\n                    }\n                    cursor.next();\n                }\n                else {\n                    takeNode(start, endPos, localChildren, localPositions, localInRepeat);\n                }\n            }\n            if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length)\n                makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart);\n            localChildren.reverse();\n            localPositions.reverse();\n            if (localInRepeat > -1 && lastGroup > 0) {\n                let make = makeBalanced(type);\n                node = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);\n            }\n            else {\n                node = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end);\n            }\n        }\n        children.push(node);\n        positions.push(startPos);\n    }\n    function makeBalanced(type) {\n        return (children, positions, length) => {\n            let lookAhead = 0, lastI = children.length - 1, last, lookAheadProp;\n            if (lastI >= 0 && (last = children[lastI]) instanceof Tree) {\n                if (!lastI && last.type == type && last.length == length)\n                    return last;\n                if (lookAheadProp = last.prop(NodeProp.lookAhead))\n                    lookAhead = positions[lastI] + last.length + lookAheadProp;\n            }\n            return makeTree(type, children, positions, length, lookAhead);\n        };\n    }\n    function makeRepeatLeaf(children, positions, base, i, from, to, type, lookAhead) {\n        let localChildren = [], localPositions = [];\n        while (children.length > i) {\n            localChildren.push(children.pop());\n            localPositions.push(positions.pop() + base - from);\n        }\n        children.push(makeTree(nodeSet.types[type], localChildren, localPositions, to - from, lookAhead - to));\n        positions.push(from - base);\n    }\n    function makeTree(type, children, positions, length, lookAhead = 0, props) {\n        if (contextHash) {\n            let pair = [NodeProp.contextHash, contextHash];\n            props = props ? [pair].concat(props) : [pair];\n        }\n        if (lookAhead > 25) {\n            let pair = [NodeProp.lookAhead, lookAhead];\n            props = props ? [pair].concat(props) : [pair];\n        }\n        return new Tree(type, children, positions, length, props);\n    }\n    function findBufferSize(maxSize, inRepeat) {\n        // Scan through the buffer to find previous siblings that fit\n        // together in a TreeBuffer, and don't contain any reused nodes\n        // (which can't be stored in a buffer).\n        // If `inRepeat` is > -1, ignore node boundaries of that type for\n        // nesting, but make sure the end falls either at the start\n        // (`maxSize`) or before such a node.\n        let fork = cursor.fork();\n        let size = 0, start = 0, skip = 0, minStart = fork.end - maxBufferLength;\n        let result = { size: 0, start: 0, skip: 0 };\n        scan: for (let minPos = fork.pos - maxSize; fork.pos > minPos;) {\n            let nodeSize = fork.size;\n            // Pretend nested repeat nodes of the same type don't exist\n            if (fork.id == inRepeat && nodeSize >= 0) {\n                // Except that we store the current state as a valid return\n                // value.\n                result.size = size;\n                result.start = start;\n                result.skip = skip;\n                skip += 4;\n                size += 4;\n                fork.next();\n                continue;\n            }\n            let startPos = fork.pos - nodeSize;\n            if (nodeSize < 0 || startPos < minPos || fork.start < minStart)\n                break;\n            let localSkipped = fork.id >= minRepeatType ? 4 : 0;\n            let nodeStart = fork.start;\n            fork.next();\n            while (fork.pos > startPos) {\n                if (fork.size < 0) {\n                    if (fork.size == -3 /* ContextChange */)\n                        localSkipped += 4;\n                    else\n                        break scan;\n                }\n                else if (fork.id >= minRepeatType) {\n                    localSkipped += 4;\n                }\n                fork.next();\n            }\n            start = nodeStart;\n            size += nodeSize;\n            skip += localSkipped;\n        }\n        if (inRepeat < 0 || size == maxSize) {\n            result.size = size;\n            result.start = start;\n            result.skip = skip;\n        }\n        return result.size > 4 ? result : undefined;\n    }\n    function copyToBuffer(bufferStart, buffer, index) {\n        let { id, start, end, size } = cursor;\n        cursor.next();\n        if (size >= 0 && id < minRepeatType) {\n            let startIndex = index;\n            if (size > 4) {\n                let endPos = cursor.pos - (size - 4);\n                while (cursor.pos > endPos)\n                    index = copyToBuffer(bufferStart, buffer, index);\n            }\n            buffer[--index] = startIndex;\n            buffer[--index] = end - bufferStart;\n            buffer[--index] = start - bufferStart;\n            buffer[--index] = id;\n        }\n        else if (size == -3 /* ContextChange */) {\n            contextHash = id;\n        }\n        else if (size == -4 /* LookAhead */) {\n            lookAhead = id;\n        }\n        return index;\n    }\n    let children = [], positions = [];\n    while (cursor.pos > 0)\n        takeNode(data.start || 0, data.bufferStart || 0, children, positions, -1);\n    let length = (_a = data.length) !== null && _a !== void 0 ? _a : (children.length ? positions[0] + children[0].length : 0);\n    return new Tree(types[data.topID], children.reverse(), positions.reverse(), length);\n}\nconst nodeSizeCache = new WeakMap;\nfunction nodeSize(balanceType, node) {\n    if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType)\n        return 1;\n    let size = nodeSizeCache.get(node);\n    if (size == null) {\n        size = 1;\n        for (let child of node.children) {\n            if (child.type != balanceType || !(child instanceof Tree)) {\n                size = 1;\n                break;\n            }\n            size += nodeSize(balanceType, child);\n        }\n        nodeSizeCache.set(node, size);\n    }\n    return size;\n}\nfunction balanceRange(\n// The type the balanced tree's inner nodes.\nbalanceType, \n// The direct children and their positions\nchildren, positions, \n// The index range in children/positions to use\nfrom, to, \n// The start position of the nodes, relative to their parent.\nstart, \n// Length of the outer node\nlength, \n// Function to build the top node of the balanced tree\nmkTop, \n// Function to build internal nodes for the balanced tree\nmkTree) {\n    let total = 0;\n    for (let i = from; i < to; i++)\n        total += nodeSize(balanceType, children[i]);\n    let maxChild = Math.ceil((total * 1.5) / 8 /* BranchFactor */);\n    let localChildren = [], localPositions = [];\n    function divide(children, positions, from, to, offset) {\n        for (let i = from; i < to;) {\n            let groupFrom = i, groupStart = positions[i], groupSize = nodeSize(balanceType, children[i]);\n            i++;\n            for (; i < to; i++) {\n                let nextSize = nodeSize(balanceType, children[i]);\n                if (groupSize + nextSize >= maxChild)\n                    break;\n                groupSize += nextSize;\n            }\n            if (i == groupFrom + 1) {\n                if (groupSize > maxChild) {\n                    let only = children[groupFrom]; // Only trees can have a size > 1\n                    divide(only.children, only.positions, 0, only.children.length, positions[groupFrom] + offset);\n                    continue;\n                }\n                localChildren.push(children[groupFrom]);\n            }\n            else {\n                let length = positions[i - 1] + children[i - 1].length - groupStart;\n                localChildren.push(balanceRange(balanceType, children, positions, groupFrom, i, groupStart, length, null, mkTree));\n            }\n            localPositions.push(groupStart + offset - start);\n        }\n    }\n    divide(children, positions, from, to, 0);\n    return (mkTop || mkTree)(localChildren, localPositions, length);\n}\n\n/// Tree fragments are used during [incremental\n/// parsing](#common.Parser.startParse) to track parts of old trees\n/// that can be reused in a new parse. An array of fragments is used\n/// to track regions of an old tree whose nodes might be reused in new\n/// parses. Use the static\n/// [`applyChanges`](#common.TreeFragment^applyChanges) method to\n/// update fragments for document changes.\nclass TreeFragment {\n    /// Construct a tree fragment.\n    constructor(\n    /// The start of the unchanged range pointed to by this fragment.\n    /// This refers to an offset in the _updated_ document (as opposed\n    /// to the original tree).\n    from, \n    /// The end of the unchanged range.\n    to, \n    /// The tree that this fragment is based on.\n    tree, \n    /// The offset between the fragment's tree and the document that\n    /// this fragment can be used against. Add this when going from\n    /// document to tree positions, subtract it to go from tree to\n    /// document positions.\n    offset, openStart = false, openEnd = false) {\n        this.from = from;\n        this.to = to;\n        this.tree = tree;\n        this.offset = offset;\n        this.open = (openStart ? 1 /* Start */ : 0) | (openEnd ? 2 /* End */ : 0);\n    }\n    /// Whether the start of the fragment represents the start of a\n    /// parse, or the end of a change. (In the second case, it may not\n    /// be safe to reuse some nodes at the start, depending on the\n    /// parsing algorithm.)\n    get openStart() { return (this.open & 1 /* Start */) > 0; }\n    /// Whether the end of the fragment represents the end of a\n    /// full-document parse, or the start of a change.\n    get openEnd() { return (this.open & 2 /* End */) > 0; }\n    /// Create a set of fragments from a freshly parsed tree, or update\n    /// an existing set of fragments by replacing the ones that overlap\n    /// with a tree with content from the new tree. When `partial` is\n    /// true, the parse is treated as incomplete, and the resulting\n    /// fragment has [`openEnd`](#common.TreeFragment.openEnd) set to\n    /// true.\n    static addTree(tree, fragments = [], partial = false) {\n        let result = [new TreeFragment(0, tree.length, tree, 0, false, partial)];\n        for (let f of fragments)\n            if (f.to > tree.length)\n                result.push(f);\n        return result;\n    }\n    /// Apply a set of edits to an array of fragments, removing or\n    /// splitting fragments as necessary to remove edited ranges, and\n    /// adjusting offsets for fragments that moved.\n    static applyChanges(fragments, changes, minGap = 128) {\n        if (!changes.length)\n            return fragments;\n        let result = [];\n        let fI = 1, nextF = fragments.length ? fragments[0] : null;\n        for (let cI = 0, pos = 0, off = 0;; cI++) {\n            let nextC = cI < changes.length ? changes[cI] : null;\n            let nextPos = nextC ? nextC.fromA : 1e9;\n            if (nextPos - pos >= minGap)\n                while (nextF && nextF.from < nextPos) {\n                    let cut = nextF;\n                    if (pos >= cut.from || nextPos <= cut.to || off) {\n                        let fFrom = Math.max(cut.from, pos) - off, fTo = Math.min(cut.to, nextPos) - off;\n                        cut = fFrom >= fTo ? null : new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);\n                    }\n                    if (cut)\n                        result.push(cut);\n                    if (nextF.to > nextPos)\n                        break;\n                    nextF = fI < fragments.length ? fragments[fI++] : null;\n                }\n            if (!nextC)\n                break;\n            pos = nextC.toA;\n            off = nextC.toA - nextC.toB;\n        }\n        return result;\n    }\n}\n/// A superclass that parsers should extend.\nclass Parser {\n    /// Start a parse, returning a [partial parse](#common.PartialParse)\n    /// object. [`fragments`](#common.TreeFragment) can be passed in to\n    /// make the parse incremental.\n    ///\n    /// By default, the entire input is parsed. You can pass `ranges`,\n    /// which should be a sorted array of non-empty, non-overlapping\n    /// ranges, to parse only those ranges. The tree returned in that\n    /// case will start at `ranges[0].from`.\n    startParse(input, fragments, ranges) {\n        if (typeof input == \"string\")\n            input = new StringInput(input);\n        ranges = !ranges ? [new Range(0, input.length)] : ranges.length ? ranges.map(r => new Range(r.from, r.to)) : [new Range(0, 0)];\n        return this.createParse(input, fragments || [], ranges);\n    }\n    /// Run a full parse, returning the resulting tree.\n    parse(input, fragments, ranges) {\n        let parse = this.startParse(input, fragments, ranges);\n        for (;;) {\n            let done = parse.advance();\n            if (done)\n                return done;\n        }\n    }\n}\nclass StringInput {\n    constructor(string) {\n        this.string = string;\n    }\n    get length() { return this.string.length; }\n    chunk(from) { return this.string.slice(from); }\n    get lineChunks() { return false; }\n    read(from, to) { return this.string.slice(from, to); }\n}\n\n/// Create a parse wrapper that, after the inner parse completes,\n/// scans its tree for mixed language regions with the `nest`\n/// function, runs the resulting [inner parses](#common.NestedParse),\n/// and then [mounts](#common.NodeProp^mounted) their results onto the\n/// tree.\n///\n/// The nesting function is passed a cursor to provide context for a\n/// node, but _should not_ move that cursor, only inspect its\n/// properties and optionally access its\n/// [node object](#common.TreeCursor.node).\nfunction parseMixed(nest) {\n    return (parse, input, fragments, ranges) => new MixedParse(parse, nest, input, fragments, ranges);\n}\nclass InnerParse {\n    constructor(parser, parse, overlay, target, ranges) {\n        this.parser = parser;\n        this.parse = parse;\n        this.overlay = overlay;\n        this.target = target;\n        this.ranges = ranges;\n    }\n}\nclass ActiveOverlay {\n    constructor(parser, predicate, mounts, index, start, target, prev) {\n        this.parser = parser;\n        this.predicate = predicate;\n        this.mounts = mounts;\n        this.index = index;\n        this.start = start;\n        this.target = target;\n        this.prev = prev;\n        this.depth = 0;\n        this.ranges = [];\n    }\n}\nconst stoppedInner = new NodeProp({ perNode: true });\nclass MixedParse {\n    constructor(base, nest, input, fragments, ranges) {\n        this.nest = nest;\n        this.input = input;\n        this.fragments = fragments;\n        this.ranges = ranges;\n        this.inner = [];\n        this.innerDone = 0;\n        this.baseTree = null;\n        this.stoppedAt = null;\n        this.baseParse = base;\n    }\n    advance() {\n        if (this.baseParse) {\n            let done = this.baseParse.advance();\n            if (!done)\n                return null;\n            this.baseParse = null;\n            this.baseTree = done;\n            this.startInner();\n            if (this.stoppedAt != null)\n                for (let inner of this.inner)\n                    inner.parse.stopAt(this.stoppedAt);\n        }\n        if (this.innerDone == this.inner.length) {\n            let result = this.baseTree;\n            if (this.stoppedAt != null)\n                result = new Tree(result.type, result.children, result.positions, result.length, result.propValues.concat([[stoppedInner, this.stoppedAt]]));\n            return result;\n        }\n        let inner = this.inner[this.innerDone], done = inner.parse.advance();\n        if (done) {\n            this.innerDone++;\n            // This is a somewhat dodgy but super helpful hack where we\n            // patch up nodes created by the inner parse (and thus\n            // presumably not aliased anywhere else) to hold the information\n            // about the inner parse.\n            let props = Object.assign(Object.create(null), inner.target.props);\n            props[NodeProp.mounted.id] = new MountedTree(done, inner.overlay, inner.parser);\n            inner.target.props = props;\n        }\n        return null;\n    }\n    get parsedPos() {\n        if (this.baseParse)\n            return 0;\n        let pos = this.input.length;\n        for (let i = this.innerDone; i < this.inner.length; i++) {\n            if (this.inner[i].ranges[0].from < pos)\n                pos = Math.min(pos, this.inner[i].parse.parsedPos);\n        }\n        return pos;\n    }\n    stopAt(pos) {\n        this.stoppedAt = pos;\n        if (this.baseParse)\n            this.baseParse.stopAt(pos);\n        else\n            for (let i = this.innerDone; i < this.inner.length; i++)\n                this.inner[i].parse.stopAt(pos);\n    }\n    startInner() {\n        let fragmentCursor = new FragmentCursor(this.fragments);\n        let overlay = null;\n        let covered = null;\n        let cursor = new TreeCursor(new TreeNode(this.baseTree, this.ranges[0].from, 0, null), 1 /* Full */);\n        scan: for (let nest, isCovered; this.stoppedAt == null || cursor.from < this.stoppedAt;) {\n            let enter = true, range;\n            if (fragmentCursor.hasNode(cursor)) {\n                if (overlay) {\n                    let match = overlay.mounts.find(m => m.frag.from <= cursor.from && m.frag.to >= cursor.to && m.mount.overlay);\n                    if (match)\n                        for (let r of match.mount.overlay) {\n                            let from = r.from + match.pos, to = r.to + match.pos;\n                            if (from >= cursor.from && to <= cursor.to)\n                                overlay.ranges.push({ from, to });\n                        }\n                }\n                enter = false;\n            }\n            else if (covered && (isCovered = checkCover(covered.ranges, cursor.from, cursor.to))) {\n                enter = isCovered != 2 /* Full */;\n            }\n            else if (!cursor.type.isAnonymous && cursor.from < cursor.to && (nest = this.nest(cursor, this.input))) {\n                if (!cursor.tree)\n                    materialize(cursor);\n                let oldMounts = fragmentCursor.findMounts(cursor.from, nest.parser);\n                if (typeof nest.overlay == \"function\") {\n                    overlay = new ActiveOverlay(nest.parser, nest.overlay, oldMounts, this.inner.length, cursor.from, cursor.tree, overlay);\n                }\n                else {\n                    let ranges = punchRanges(this.ranges, nest.overlay || [new Range(cursor.from, cursor.to)]);\n                    if (ranges.length)\n                        this.inner.push(new InnerParse(nest.parser, nest.parser.startParse(this.input, enterFragments(oldMounts, ranges), ranges), nest.overlay ? nest.overlay.map(r => new Range(r.from - cursor.from, r.to - cursor.from)) : null, cursor.tree, ranges));\n                    if (!nest.overlay)\n                        enter = false;\n                    else if (ranges.length)\n                        covered = { ranges, depth: 0, prev: covered };\n                }\n            }\n            else if (overlay && (range = overlay.predicate(cursor))) {\n                if (range === true)\n                    range = new Range(cursor.from, cursor.to);\n                if (range.from < range.to)\n                    overlay.ranges.push(range);\n            }\n            if (enter && cursor.firstChild()) {\n                if (overlay)\n                    overlay.depth++;\n                if (covered)\n                    covered.depth++;\n            }\n            else {\n                for (;;) {\n                    if (cursor.nextSibling())\n                        break;\n                    if (!cursor.parent())\n                        break scan;\n                    if (overlay && !--overlay.depth) {\n                        let ranges = punchRanges(this.ranges, overlay.ranges);\n                        if (ranges.length)\n                            this.inner.splice(overlay.index, 0, new InnerParse(overlay.parser, overlay.parser.startParse(this.input, enterFragments(overlay.mounts, ranges), ranges), overlay.ranges.map(r => new Range(r.from - overlay.start, r.to - overlay.start)), overlay.target, ranges));\n                        overlay = overlay.prev;\n                    }\n                    if (covered && !--covered.depth)\n                        covered = covered.prev;\n                }\n            }\n        }\n    }\n}\nfunction checkCover(covered, from, to) {\n    for (let range of covered) {\n        if (range.from >= to)\n            break;\n        if (range.to > from)\n            return range.from <= from && range.to >= to ? 2 /* Full */ : 1 /* Partial */;\n    }\n    return 0 /* None */;\n}\n// Take a piece of buffer and convert it into a stand-alone\n// TreeBuffer.\nfunction sliceBuf(buf, startI, endI, nodes, positions, off) {\n    if (startI < endI) {\n        let from = buf.buffer[startI + 1], to = buf.buffer[endI - 2];\n        nodes.push(buf.slice(startI, endI, from, to));\n        positions.push(from - off);\n    }\n}\n// This function takes a node that's in a buffer, and converts it, and\n// its parent buffer nodes, into a Tree. This is again acting on the\n// assumption that the trees and buffers have been constructed by the\n// parse that was ran via the mix parser, and thus aren't shared with\n// any other code, making violations of the immutability safe.\nfunction materialize(cursor) {\n    let { node } = cursor, depth = 0;\n    // Scan up to the nearest tree\n    do {\n        cursor.parent();\n        depth++;\n    } while (!cursor.tree);\n    // Find the index of the buffer in that tree\n    let i = 0, base = cursor.tree, off = 0;\n    for (;; i++) {\n        off = base.positions[i] + cursor.from;\n        if (off <= node.from && off + base.children[i].length >= node.to)\n            break;\n    }\n    let buf = base.children[i], b = buf.buffer;\n    // Split a level in the buffer, putting the nodes before and after\n    // the child that contains `node` into new buffers.\n    function split(startI, endI, type, innerOffset, length) {\n        let i = startI;\n        while (b[i + 2] + off <= node.from)\n            i = b[i + 3];\n        let children = [], positions = [];\n        sliceBuf(buf, startI, i, children, positions, innerOffset);\n        let from = b[i + 1], to = b[i + 2];\n        let isTarget = from + off == node.from && to + off == node.to && b[i] == node.type.id;\n        children.push(isTarget ? node.toTree() : split(i + 4, b[i + 3], buf.set.types[b[i]], from, to - from));\n        positions.push(from - innerOffset);\n        sliceBuf(buf, b[i + 3], endI, children, positions, innerOffset);\n        return new Tree(type, children, positions, length);\n    }\n    base.children[i] = split(0, b.length, NodeType.none, 0, buf.length);\n    // Move the cursor back to the target node\n    for (let d = 0; d <= depth; d++)\n        cursor.childAfter(node.from);\n}\nclass StructureCursor {\n    constructor(root, offset) {\n        this.offset = offset;\n        this.done = false;\n        this.cursor = root.fullCursor();\n    }\n    // Move to the first node (in pre-order) that starts at or after `pos`.\n    moveTo(pos) {\n        let { cursor } = this, p = pos - this.offset;\n        while (!this.done && cursor.from < p) {\n            if (cursor.to >= pos && cursor.enter(p, 1, false, false)) ;\n            else if (!cursor.next(false))\n                this.done = true;\n        }\n    }\n    hasNode(cursor) {\n        this.moveTo(cursor.from);\n        if (!this.done && this.cursor.from + this.offset == cursor.from && this.cursor.tree) {\n            for (let tree = this.cursor.tree;;) {\n                if (tree == cursor.tree)\n                    return true;\n                if (tree.children.length && tree.positions[0] == 0 && tree.children[0] instanceof Tree)\n                    tree = tree.children[0];\n                else\n                    break;\n            }\n        }\n        return false;\n    }\n}\nclass FragmentCursor {\n    constructor(fragments) {\n        var _a;\n        this.fragments = fragments;\n        this.curTo = 0;\n        this.fragI = 0;\n        if (fragments.length) {\n            let first = this.curFrag = fragments[0];\n            this.curTo = (_a = first.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : first.to;\n            this.inner = new StructureCursor(first.tree, -first.offset);\n        }\n        else {\n            this.curFrag = this.inner = null;\n        }\n    }\n    hasNode(node) {\n        while (this.curFrag && node.from >= this.curTo)\n            this.nextFrag();\n        return this.curFrag && this.curFrag.from <= node.from && this.curTo >= node.to && this.inner.hasNode(node);\n    }\n    nextFrag() {\n        var _a;\n        this.fragI++;\n        if (this.fragI == this.fragments.length) {\n            this.curFrag = this.inner = null;\n        }\n        else {\n            let frag = this.curFrag = this.fragments[this.fragI];\n            this.curTo = (_a = frag.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : frag.to;\n            this.inner = new StructureCursor(frag.tree, -frag.offset);\n        }\n    }\n    findMounts(pos, parser) {\n        var _a;\n        let result = [];\n        if (this.inner) {\n            this.inner.cursor.moveTo(pos, 1);\n            for (let pos = this.inner.cursor.node; pos; pos = pos.parent) {\n                let mount = (_a = pos.tree) === null || _a === void 0 ? void 0 : _a.prop(NodeProp.mounted);\n                if (mount && mount.parser == parser) {\n                    for (let i = this.fragI; i < this.fragments.length; i++) {\n                        let frag = this.fragments[i];\n                        if (frag.from >= pos.to)\n                            break;\n                        if (frag.tree == this.curFrag.tree)\n                            result.push({\n                                frag,\n                                pos: pos.from - frag.offset,\n                                mount\n                            });\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}\nfunction punchRanges(outer, ranges) {\n    let copy = null, current = ranges;\n    for (let i = 1, j = 0; i < outer.length; i++) {\n        let gapFrom = outer[i - 1].to, gapTo = outer[i].from;\n        for (; j < current.length; j++) {\n            let r = current[j];\n            if (r.from >= gapTo)\n                break;\n            if (r.to <= gapFrom)\n                continue;\n            if (!copy)\n                current = copy = ranges.slice();\n            if (r.from < gapFrom) {\n                copy[j] = new Range(r.from, gapFrom);\n                if (r.to > gapTo)\n                    copy.splice(j + 1, 0, new Range(gapTo, r.to));\n            }\n            else if (r.to > gapTo) {\n                copy[j--] = new Range(gapTo, r.to);\n            }\n            else {\n                copy.splice(j--, 1);\n            }\n        }\n    }\n    return current;\n}\nfunction findCoverChanges(a, b, from, to) {\n    let iA = 0, iB = 0, inA = false, inB = false, pos = -1e9;\n    let result = [];\n    for (;;) {\n        let nextA = iA == a.length ? 1e9 : inA ? a[iA].to : a[iA].from;\n        let nextB = iB == b.length ? 1e9 : inB ? b[iB].to : b[iB].from;\n        if (inA != inB) {\n            let start = Math.max(pos, from), end = Math.min(nextA, nextB, to);\n            if (start < end)\n                result.push(new Range(start, end));\n        }\n        pos = Math.min(nextA, nextB);\n        if (pos == 1e9)\n            break;\n        if (nextA == pos) {\n            if (!inA)\n                inA = true;\n            else {\n                inA = false;\n                iA++;\n            }\n        }\n        if (nextB == pos) {\n            if (!inB)\n                inB = true;\n            else {\n                inB = false;\n                iB++;\n            }\n        }\n    }\n    return result;\n}\n// Given a number of fragments for the outer tree, and a set of ranges\n// to parse, find fragments for inner trees mounted around those\n// ranges, if any.\nfunction enterFragments(mounts, ranges) {\n    let result = [];\n    for (let { pos, mount, frag } of mounts) {\n        let startPos = pos + (mount.overlay ? mount.overlay[0].from : 0), endPos = startPos + mount.tree.length;\n        let from = Math.max(frag.from, startPos), to = Math.min(frag.to, endPos);\n        if (mount.overlay) {\n            let overlay = mount.overlay.map(r => new Range(r.from + pos, r.to + pos));\n            let changes = findCoverChanges(ranges, overlay, from, to);\n            for (let i = 0, pos = from;; i++) {\n                let last = i == changes.length, end = last ? to : changes[i].from;\n                if (end > pos)\n                    result.push(new TreeFragment(pos, end, mount.tree, -startPos, frag.from >= pos, frag.to <= end));\n                if (last)\n                    break;\n                pos = changes[i].to;\n            }\n        }\n        else {\n            result.push(new TreeFragment(from, to, mount.tree, -startPos, frag.from >= startPos, frag.to <= endPos));\n        }\n    }\n    return result;\n}\n\nexport { DefaultBufferLength, MountedTree, NodeProp, NodeSet, NodeType, Parser, Tree, TreeBuffer, TreeCursor, TreeFragment, parseMixed };\n"]},"metadata":{},"sourceType":"module"}