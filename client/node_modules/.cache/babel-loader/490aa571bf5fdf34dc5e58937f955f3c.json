{"ast":null,"code":"import { EditorView } from '@codemirror/view';\nimport { StateEffect, MapMode, StateField, EditorSelection, CharCategory } from '@codemirror/state';\nimport { RangeValue, RangeSet } from '@codemirror/rangeset';\nimport { codePointSize, codePointAt, fromCodePoint } from '@codemirror/text';\nimport { syntaxTree } from '@codemirror/language';\nconst defaults = {\n  brackets: [\"(\", \"[\", \"{\", \"'\", '\"'],\n  before: \")]}'\\\":;>\"\n};\nconst closeBracketEffect = /*@__PURE__*/StateEffect.define({\n  map(value, mapping) {\n    let mapped = mapping.mapPos(value, -1, MapMode.TrackAfter);\n    return mapped == null ? undefined : mapped;\n  }\n\n});\nconst skipBracketEffect = /*@__PURE__*/StateEffect.define({\n  map(value, mapping) {\n    return mapping.mapPos(value);\n  }\n\n});\nconst closedBracket = /*@__PURE__*/new class extends RangeValue {}();\nclosedBracket.startSide = 1;\nclosedBracket.endSide = -1;\nconst bracketState = /*@__PURE__*/StateField.define({\n  create() {\n    return RangeSet.empty;\n  },\n\n  update(value, tr) {\n    if (tr.selection) {\n      let lineStart = tr.state.doc.lineAt(tr.selection.main.head).from;\n      let prevLineStart = tr.startState.doc.lineAt(tr.startState.selection.main.head).from;\n      if (lineStart != tr.changes.mapPos(prevLineStart, -1)) value = RangeSet.empty;\n    }\n\n    value = value.map(tr.changes);\n\n    for (let effect of tr.effects) {\n      if (effect.is(closeBracketEffect)) value = value.update({\n        add: [closedBracket.range(effect.value, effect.value + 1)]\n      });else if (effect.is(skipBracketEffect)) value = value.update({\n        filter: from => from != effect.value\n      });\n    }\n\n    return value;\n  }\n\n});\n/**\nExtension to enable bracket-closing behavior. When a closeable\nbracket is typed, its closing bracket is immediately inserted\nafter the cursor. When closing a bracket directly in front of a\nclosing bracket inserted by the extension, the cursor moves over\nthat bracket.\n*/\n\nfunction closeBrackets() {\n  return [EditorView.inputHandler.of(handleInput), bracketState];\n}\n\nconst definedClosing = \"()[]{}<>\";\n\nfunction closing(ch) {\n  for (let i = 0; i < definedClosing.length; i += 2) if (definedClosing.charCodeAt(i) == ch) return definedClosing.charAt(i + 1);\n\n  return fromCodePoint(ch < 128 ? ch : ch + 1);\n}\n\nfunction config(state, pos) {\n  return state.languageDataAt(\"closeBrackets\", pos)[0] || defaults;\n}\n\nfunction handleInput(view, from, to, insert) {\n  if (view.composing) return false;\n  let sel = view.state.selection.main;\n  if (insert.length > 2 || insert.length == 2 && codePointSize(codePointAt(insert, 0)) == 1 || from != sel.from || to != sel.to) return false;\n  let tr = insertBracket(view.state, insert);\n  if (!tr) return false;\n  view.dispatch(tr);\n  return true;\n}\n/**\nCommand that implements deleting a pair of matching brackets when\nthe cursor is between them.\n*/\n\n\nconst deleteBracketPair = _ref => {\n  let {\n    state,\n    dispatch\n  } = _ref;\n  let conf = config(state, state.selection.main.head);\n  let tokens = conf.brackets || defaults.brackets;\n  let dont = null,\n      changes = state.changeByRange(range => {\n    if (range.empty) {\n      let before = prevChar(state.doc, range.head);\n\n      for (let token of tokens) {\n        if (token == before && nextChar(state.doc, range.head) == closing(codePointAt(token, 0))) return {\n          changes: {\n            from: range.head - token.length,\n            to: range.head + token.length\n          },\n          range: EditorSelection.cursor(range.head - token.length),\n          userEvent: \"delete.backward\"\n        };\n      }\n    }\n\n    return {\n      range: dont = range\n    };\n  });\n  if (!dont) dispatch(state.update(changes, {\n    scrollIntoView: true\n  }));\n  return !dont;\n};\n/**\nClose-brackets related key bindings. Binds Backspace to\n[`deleteBracketPair`](https://codemirror.net/6/docs/ref/#closebrackets.deleteBracketPair).\n*/\n\n\nconst closeBracketsKeymap = [{\n  key: \"Backspace\",\n  run: deleteBracketPair\n}];\n/**\nImplements the extension's behavior on text insertion. If the\ngiven string counts as a bracket in the language around the\nselection, and replacing the selection with it requires custom\nbehavior (inserting a closing version or skipping past a\npreviously-closed bracket), this function returns a transaction\nrepresenting that custom behavior. (You only need this if you want\nto programmatically insert bracketsâ€”the\n[`closeBrackets`](https://codemirror.net/6/docs/ref/#closebrackets.closeBrackets) extension will\ntake care of running this for user input.)\n*/\n\nfunction insertBracket(state, bracket) {\n  let conf = config(state, state.selection.main.head);\n  let tokens = conf.brackets || defaults.brackets;\n\n  for (let tok of tokens) {\n    let closed = closing(codePointAt(tok, 0));\n    if (bracket == tok) return closed == tok ? handleSame(state, tok, tokens.indexOf(tok + tok + tok) > -1) : handleOpen(state, tok, closed, conf.before || defaults.before);\n    if (bracket == closed && closedBracketAt(state, state.selection.main.from)) return handleClose(state, tok, closed);\n  }\n\n  return null;\n}\n\nfunction closedBracketAt(state, pos) {\n  let found = false;\n  state.field(bracketState).between(0, state.doc.length, from => {\n    if (from == pos) found = true;\n  });\n  return found;\n}\n\nfunction nextChar(doc, pos) {\n  let next = doc.sliceString(pos, pos + 2);\n  return next.slice(0, codePointSize(codePointAt(next, 0)));\n}\n\nfunction prevChar(doc, pos) {\n  let prev = doc.sliceString(pos - 2, pos);\n  return codePointSize(codePointAt(prev, 0)) == prev.length ? prev : prev.slice(1);\n}\n\nfunction handleOpen(state, open, close, closeBefore) {\n  let dont = null,\n      changes = state.changeByRange(range => {\n    if (!range.empty) return {\n      changes: [{\n        insert: open,\n        from: range.from\n      }, {\n        insert: close,\n        from: range.to\n      }],\n      effects: closeBracketEffect.of(range.to + open.length),\n      range: EditorSelection.range(range.anchor + open.length, range.head + open.length)\n    };\n    let next = nextChar(state.doc, range.head);\n    if (!next || /\\s/.test(next) || closeBefore.indexOf(next) > -1) return {\n      changes: {\n        insert: open + close,\n        from: range.head\n      },\n      effects: closeBracketEffect.of(range.head + open.length),\n      range: EditorSelection.cursor(range.head + open.length)\n    };\n    return {\n      range: dont = range\n    };\n  });\n  return dont ? null : state.update(changes, {\n    scrollIntoView: true,\n    userEvent: \"input.type\"\n  });\n}\n\nfunction handleClose(state, _open, close) {\n  let dont = null,\n      moved = state.selection.ranges.map(range => {\n    if (range.empty && nextChar(state.doc, range.head) == close) return EditorSelection.cursor(range.head + close.length);\n    return dont = range;\n  });\n  return dont ? null : state.update({\n    selection: EditorSelection.create(moved, state.selection.mainIndex),\n    scrollIntoView: true,\n    effects: state.selection.ranges.map(_ref2 => {\n      let {\n        from\n      } = _ref2;\n      return skipBracketEffect.of(from);\n    })\n  });\n} // Handles cases where the open and close token are the same, and\n// possibly triple quotes (as in `\"\"\"abc\"\"\"`-style quoting).\n\n\nfunction handleSame(state, token, allowTriple) {\n  let dont = null,\n      changes = state.changeByRange(range => {\n    if (!range.empty) return {\n      changes: [{\n        insert: token,\n        from: range.from\n      }, {\n        insert: token,\n        from: range.to\n      }],\n      effects: closeBracketEffect.of(range.to + token.length),\n      range: EditorSelection.range(range.anchor + token.length, range.head + token.length)\n    };\n    let pos = range.head,\n        next = nextChar(state.doc, pos);\n\n    if (next == token) {\n      if (nodeStart(state, pos)) {\n        return {\n          changes: {\n            insert: token + token,\n            from: pos\n          },\n          effects: closeBracketEffect.of(pos + token.length),\n          range: EditorSelection.cursor(pos + token.length)\n        };\n      } else if (closedBracketAt(state, pos)) {\n        let isTriple = allowTriple && state.sliceDoc(pos, pos + token.length * 3) == token + token + token;\n        return {\n          range: EditorSelection.cursor(pos + token.length * (isTriple ? 3 : 1)),\n          effects: skipBracketEffect.of(pos)\n        };\n      }\n    } else if (allowTriple && state.sliceDoc(pos - 2 * token.length, pos) == token + token && nodeStart(state, pos - 2 * token.length)) {\n      return {\n        changes: {\n          insert: token + token + token + token,\n          from: pos\n        },\n        effects: closeBracketEffect.of(pos + token.length),\n        range: EditorSelection.cursor(pos + token.length)\n      };\n    } else if (state.charCategorizer(pos)(next) != CharCategory.Word) {\n      let prev = state.sliceDoc(pos - 1, pos);\n      if (prev != token && state.charCategorizer(pos)(prev) != CharCategory.Word) return {\n        changes: {\n          insert: token + token,\n          from: pos\n        },\n        effects: closeBracketEffect.of(pos + token.length),\n        range: EditorSelection.cursor(pos + token.length)\n      };\n    }\n\n    return {\n      range: dont = range\n    };\n  });\n  return dont ? null : state.update(changes, {\n    scrollIntoView: true,\n    userEvent: \"input.type\"\n  });\n}\n\nfunction nodeStart(state, pos) {\n  let tree = syntaxTree(state).resolveInner(pos + 1);\n  return tree.parent && tree.from == pos;\n}\n\nexport { closeBrackets, closeBracketsKeymap, deleteBracketPair, insertBracket };","map":{"version":3,"sources":["C:/Users/pc/Desktop/live-code-editor/client/node_modules/@codemirror/closebrackets/dist/index.js"],"names":["EditorView","StateEffect","MapMode","StateField","EditorSelection","CharCategory","RangeValue","RangeSet","codePointSize","codePointAt","fromCodePoint","syntaxTree","defaults","brackets","before","closeBracketEffect","define","map","value","mapping","mapped","mapPos","TrackAfter","undefined","skipBracketEffect","closedBracket","startSide","endSide","bracketState","create","empty","update","tr","selection","lineStart","state","doc","lineAt","main","head","from","prevLineStart","startState","changes","effect","effects","is","add","range","filter","closeBrackets","inputHandler","of","handleInput","definedClosing","closing","ch","i","length","charCodeAt","charAt","config","pos","languageDataAt","view","to","insert","composing","sel","insertBracket","dispatch","deleteBracketPair","conf","tokens","dont","changeByRange","prevChar","token","nextChar","cursor","userEvent","scrollIntoView","closeBracketsKeymap","key","run","bracket","tok","closed","handleSame","indexOf","handleOpen","closedBracketAt","handleClose","found","field","between","next","sliceString","slice","prev","open","close","closeBefore","anchor","test","_open","moved","ranges","mainIndex","allowTriple","nodeStart","isTriple","sliceDoc","charCategorizer","Word","tree","resolveInner","parent"],"mappings":"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","sourcesContent":["import { EditorView } from '@codemirror/view';\nimport { StateEffect, MapMode, StateField, EditorSelection, CharCategory } from '@codemirror/state';\nimport { RangeValue, RangeSet } from '@codemirror/rangeset';\nimport { codePointSize, codePointAt, fromCodePoint } from '@codemirror/text';\nimport { syntaxTree } from '@codemirror/language';\n\nconst defaults = {\n    brackets: [\"(\", \"[\", \"{\", \"'\", '\"'],\n    before: \")]}'\\\":;>\"\n};\nconst closeBracketEffect = /*@__PURE__*/StateEffect.define({\n    map(value, mapping) {\n        let mapped = mapping.mapPos(value, -1, MapMode.TrackAfter);\n        return mapped == null ? undefined : mapped;\n    }\n});\nconst skipBracketEffect = /*@__PURE__*/StateEffect.define({\n    map(value, mapping) { return mapping.mapPos(value); }\n});\nconst closedBracket = /*@__PURE__*/new class extends RangeValue {\n};\nclosedBracket.startSide = 1;\nclosedBracket.endSide = -1;\nconst bracketState = /*@__PURE__*/StateField.define({\n    create() { return RangeSet.empty; },\n    update(value, tr) {\n        if (tr.selection) {\n            let lineStart = tr.state.doc.lineAt(tr.selection.main.head).from;\n            let prevLineStart = tr.startState.doc.lineAt(tr.startState.selection.main.head).from;\n            if (lineStart != tr.changes.mapPos(prevLineStart, -1))\n                value = RangeSet.empty;\n        }\n        value = value.map(tr.changes);\n        for (let effect of tr.effects) {\n            if (effect.is(closeBracketEffect))\n                value = value.update({ add: [closedBracket.range(effect.value, effect.value + 1)] });\n            else if (effect.is(skipBracketEffect))\n                value = value.update({ filter: from => from != effect.value });\n        }\n        return value;\n    }\n});\n/**\nExtension to enable bracket-closing behavior. When a closeable\nbracket is typed, its closing bracket is immediately inserted\nafter the cursor. When closing a bracket directly in front of a\nclosing bracket inserted by the extension, the cursor moves over\nthat bracket.\n*/\nfunction closeBrackets() {\n    return [EditorView.inputHandler.of(handleInput), bracketState];\n}\nconst definedClosing = \"()[]{}<>\";\nfunction closing(ch) {\n    for (let i = 0; i < definedClosing.length; i += 2)\n        if (definedClosing.charCodeAt(i) == ch)\n            return definedClosing.charAt(i + 1);\n    return fromCodePoint(ch < 128 ? ch : ch + 1);\n}\nfunction config(state, pos) {\n    return state.languageDataAt(\"closeBrackets\", pos)[0] || defaults;\n}\nfunction handleInput(view, from, to, insert) {\n    if (view.composing)\n        return false;\n    let sel = view.state.selection.main;\n    if (insert.length > 2 || insert.length == 2 && codePointSize(codePointAt(insert, 0)) == 1 ||\n        from != sel.from || to != sel.to)\n        return false;\n    let tr = insertBracket(view.state, insert);\n    if (!tr)\n        return false;\n    view.dispatch(tr);\n    return true;\n}\n/**\nCommand that implements deleting a pair of matching brackets when\nthe cursor is between them.\n*/\nconst deleteBracketPair = ({ state, dispatch }) => {\n    let conf = config(state, state.selection.main.head);\n    let tokens = conf.brackets || defaults.brackets;\n    let dont = null, changes = state.changeByRange(range => {\n        if (range.empty) {\n            let before = prevChar(state.doc, range.head);\n            for (let token of tokens) {\n                if (token == before && nextChar(state.doc, range.head) == closing(codePointAt(token, 0)))\n                    return { changes: { from: range.head - token.length, to: range.head + token.length },\n                        range: EditorSelection.cursor(range.head - token.length),\n                        userEvent: \"delete.backward\" };\n            }\n        }\n        return { range: dont = range };\n    });\n    if (!dont)\n        dispatch(state.update(changes, { scrollIntoView: true }));\n    return !dont;\n};\n/**\nClose-brackets related key bindings. Binds Backspace to\n[`deleteBracketPair`](https://codemirror.net/6/docs/ref/#closebrackets.deleteBracketPair).\n*/\nconst closeBracketsKeymap = [\n    { key: \"Backspace\", run: deleteBracketPair }\n];\n/**\nImplements the extension's behavior on text insertion. If the\ngiven string counts as a bracket in the language around the\nselection, and replacing the selection with it requires custom\nbehavior (inserting a closing version or skipping past a\npreviously-closed bracket), this function returns a transaction\nrepresenting that custom behavior. (You only need this if you want\nto programmatically insert bracketsâ€”the\n[`closeBrackets`](https://codemirror.net/6/docs/ref/#closebrackets.closeBrackets) extension will\ntake care of running this for user input.)\n*/\nfunction insertBracket(state, bracket) {\n    let conf = config(state, state.selection.main.head);\n    let tokens = conf.brackets || defaults.brackets;\n    for (let tok of tokens) {\n        let closed = closing(codePointAt(tok, 0));\n        if (bracket == tok)\n            return closed == tok ? handleSame(state, tok, tokens.indexOf(tok + tok + tok) > -1)\n                : handleOpen(state, tok, closed, conf.before || defaults.before);\n        if (bracket == closed && closedBracketAt(state, state.selection.main.from))\n            return handleClose(state, tok, closed);\n    }\n    return null;\n}\nfunction closedBracketAt(state, pos) {\n    let found = false;\n    state.field(bracketState).between(0, state.doc.length, from => {\n        if (from == pos)\n            found = true;\n    });\n    return found;\n}\nfunction nextChar(doc, pos) {\n    let next = doc.sliceString(pos, pos + 2);\n    return next.slice(0, codePointSize(codePointAt(next, 0)));\n}\nfunction prevChar(doc, pos) {\n    let prev = doc.sliceString(pos - 2, pos);\n    return codePointSize(codePointAt(prev, 0)) == prev.length ? prev : prev.slice(1);\n}\nfunction handleOpen(state, open, close, closeBefore) {\n    let dont = null, changes = state.changeByRange(range => {\n        if (!range.empty)\n            return { changes: [{ insert: open, from: range.from }, { insert: close, from: range.to }],\n                effects: closeBracketEffect.of(range.to + open.length),\n                range: EditorSelection.range(range.anchor + open.length, range.head + open.length) };\n        let next = nextChar(state.doc, range.head);\n        if (!next || /\\s/.test(next) || closeBefore.indexOf(next) > -1)\n            return { changes: { insert: open + close, from: range.head },\n                effects: closeBracketEffect.of(range.head + open.length),\n                range: EditorSelection.cursor(range.head + open.length) };\n        return { range: dont = range };\n    });\n    return dont ? null : state.update(changes, {\n        scrollIntoView: true,\n        userEvent: \"input.type\"\n    });\n}\nfunction handleClose(state, _open, close) {\n    let dont = null, moved = state.selection.ranges.map(range => {\n        if (range.empty && nextChar(state.doc, range.head) == close)\n            return EditorSelection.cursor(range.head + close.length);\n        return dont = range;\n    });\n    return dont ? null : state.update({\n        selection: EditorSelection.create(moved, state.selection.mainIndex),\n        scrollIntoView: true,\n        effects: state.selection.ranges.map(({ from }) => skipBracketEffect.of(from))\n    });\n}\n// Handles cases where the open and close token are the same, and\n// possibly triple quotes (as in `\"\"\"abc\"\"\"`-style quoting).\nfunction handleSame(state, token, allowTriple) {\n    let dont = null, changes = state.changeByRange(range => {\n        if (!range.empty)\n            return { changes: [{ insert: token, from: range.from }, { insert: token, from: range.to }],\n                effects: closeBracketEffect.of(range.to + token.length),\n                range: EditorSelection.range(range.anchor + token.length, range.head + token.length) };\n        let pos = range.head, next = nextChar(state.doc, pos);\n        if (next == token) {\n            if (nodeStart(state, pos)) {\n                return { changes: { insert: token + token, from: pos },\n                    effects: closeBracketEffect.of(pos + token.length),\n                    range: EditorSelection.cursor(pos + token.length) };\n            }\n            else if (closedBracketAt(state, pos)) {\n                let isTriple = allowTriple && state.sliceDoc(pos, pos + token.length * 3) == token + token + token;\n                return { range: EditorSelection.cursor(pos + token.length * (isTriple ? 3 : 1)),\n                    effects: skipBracketEffect.of(pos) };\n            }\n        }\n        else if (allowTriple && state.sliceDoc(pos - 2 * token.length, pos) == token + token &&\n            nodeStart(state, pos - 2 * token.length)) {\n            return { changes: { insert: token + token + token + token, from: pos },\n                effects: closeBracketEffect.of(pos + token.length),\n                range: EditorSelection.cursor(pos + token.length) };\n        }\n        else if (state.charCategorizer(pos)(next) != CharCategory.Word) {\n            let prev = state.sliceDoc(pos - 1, pos);\n            if (prev != token && state.charCategorizer(pos)(prev) != CharCategory.Word)\n                return { changes: { insert: token + token, from: pos },\n                    effects: closeBracketEffect.of(pos + token.length),\n                    range: EditorSelection.cursor(pos + token.length) };\n        }\n        return { range: dont = range };\n    });\n    return dont ? null : state.update(changes, {\n        scrollIntoView: true,\n        userEvent: \"input.type\"\n    });\n}\nfunction nodeStart(state, pos) {\n    let tree = syntaxTree(state).resolveInner(pos + 1);\n    return tree.parent && tree.from == pos;\n}\n\nexport { closeBrackets, closeBracketsKeymap, deleteBracketPair, insertBracket };\n"]},"metadata":{},"sourceType":"module"}