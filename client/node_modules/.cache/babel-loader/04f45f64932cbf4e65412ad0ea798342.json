{"ast":null,"code":"import { parser } from '@lezer/java';\nimport { LRLanguage, indentNodeProp, continuedIndent, flatIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';\nimport { styleTags, tags } from '@codemirror/highlight';\n/**\nA language provider based on the [Lezer Java\nparser](https://github.com/lezer-parser/java), extended with\nhighlighting and indentation information.\n*/\n\nconst javaLanguage = /*@__PURE__*/LRLanguage.define({\n  parser: /*@__PURE__*/parser.configure({\n    props: [/*@__PURE__*/indentNodeProp.add({\n      IfStatement: /*@__PURE__*/continuedIndent({\n        except: /^\\s*({|else\\b)/\n      }),\n      TryStatement: /*@__PURE__*/continuedIndent({\n        except: /^\\s*({|catch|finally)\\b/\n      }),\n      LabeledStatement: flatIndent,\n      SwitchBlock: context => {\n        let after = context.textAfter,\n            closed = /^\\s*\\}/.test(after),\n            isCase = /^\\s*(case|default)\\b/.test(after);\n        return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;\n      },\n      BlockComment: () => -1,\n      Statement: /*@__PURE__*/continuedIndent({\n        except: /^{/\n      })\n    }), /*@__PURE__*/foldNodeProp.add({\n      [\"Block SwitchBlock ClassBody ElementValueArrayInitializer ModuleBody EnumBody \" + \"ConstructorBody InterfaceBody ArrayInitializer\"]: foldInside,\n\n      BlockComment(tree) {\n        return {\n          from: tree.from + 2,\n          to: tree.to - 2\n        };\n      }\n\n    }), /*@__PURE__*/styleTags({\n      null: tags.null,\n      instanceof: tags.operatorKeyword,\n      this: tags.self,\n      \"new super assert open to with void\": tags.keyword,\n      \"class interface extends implements module package import enum\": tags.definitionKeyword,\n      \"switch while for if else case default do break continue return try catch finally throw\": tags.controlKeyword,\n      [\"requires exports opens uses provides public private protected static transitive abstract final \" + \"strictfp synchronized native transient volatile throws\"]: tags.modifier,\n      IntegerLiteral: tags.integer,\n      FloatLiteral: tags.float,\n      StringLiteral: tags.string,\n      CharacterLiteral: tags.character,\n      LineComment: tags.lineComment,\n      BlockComment: tags.blockComment,\n      BooleanLiteral: tags.bool,\n      PrimitiveType: /*@__PURE__*/tags.standard(tags.typeName),\n      TypeName: tags.typeName,\n      Identifier: tags.variableName,\n      \"MethodName/Identifier\": /*@__PURE__*/tags.function(tags.variableName),\n      Definition: /*@__PURE__*/tags.definition(tags.variableName),\n      ArithOp: tags.arithmeticOperator,\n      LogicOp: tags.logicOperator,\n      BitOp: tags.bitwiseOperator,\n      CompareOp: tags.compareOperator,\n      AssignOp: tags.definitionOperator,\n      UpdateOp: tags.updateOperator,\n      Asterisk: tags.punctuation,\n      Label: tags.labelName,\n      \"( )\": tags.paren,\n      \"[ ]\": tags.squareBracket,\n      \"{ }\": tags.brace,\n      \".\": tags.derefOperator,\n      \", ;\": tags.separator\n    })]\n  }),\n  languageData: {\n    commentTokens: {\n      line: \"//\",\n      block: {\n        open: \"/*\",\n        close: \"*/\"\n      }\n    },\n    indentOnInput: /^\\s*(?:case |default:|\\{|\\})$/\n  }\n});\n/**\nJava language support.\n*/\n\nfunction java() {\n  return new LanguageSupport(javaLanguage);\n}\n\nexport { java, javaLanguage };","map":{"version":3,"sources":["C:/Users/pc/Desktop/live-code-editor/client/node_modules/@codemirror/lang-java/dist/index.js"],"names":["parser","LRLanguage","indentNodeProp","continuedIndent","flatIndent","foldNodeProp","foldInside","LanguageSupport","styleTags","tags","javaLanguage","define","configure","props","add","IfStatement","except","TryStatement","LabeledStatement","SwitchBlock","context","after","textAfter","closed","test","isCase","baseIndent","unit","BlockComment","Statement","tree","from","to","null","instanceof","operatorKeyword","this","self","keyword","definitionKeyword","controlKeyword","modifier","IntegerLiteral","integer","FloatLiteral","float","StringLiteral","string","CharacterLiteral","character","LineComment","lineComment","blockComment","BooleanLiteral","bool","PrimitiveType","standard","typeName","TypeName","Identifier","variableName","function","Definition","definition","ArithOp","arithmeticOperator","LogicOp","logicOperator","BitOp","bitwiseOperator","CompareOp","compareOperator","AssignOp","definitionOperator","UpdateOp","updateOperator","Asterisk","punctuation","Label","labelName","paren","squareBracket","brace","derefOperator","separator","languageData","commentTokens","line","block","open","close","indentOnInput","java"],"mappings":"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","sourcesContent":["import { parser } from '@lezer/java';\nimport { LRLanguage, indentNodeProp, continuedIndent, flatIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';\nimport { styleTags, tags } from '@codemirror/highlight';\n\n/**\nA language provider based on the [Lezer Java\nparser](https://github.com/lezer-parser/java), extended with\nhighlighting and indentation information.\n*/\nconst javaLanguage = /*@__PURE__*/LRLanguage.define({\n    parser: /*@__PURE__*/parser.configure({\n        props: [\n            /*@__PURE__*/indentNodeProp.add({\n                IfStatement: /*@__PURE__*/continuedIndent({ except: /^\\s*({|else\\b)/ }),\n                TryStatement: /*@__PURE__*/continuedIndent({ except: /^\\s*({|catch|finally)\\b/ }),\n                LabeledStatement: flatIndent,\n                SwitchBlock: context => {\n                    let after = context.textAfter, closed = /^\\s*\\}/.test(after), isCase = /^\\s*(case|default)\\b/.test(after);\n                    return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;\n                },\n                BlockComment: () => -1,\n                Statement: /*@__PURE__*/continuedIndent({ except: /^{/ })\n            }),\n            /*@__PURE__*/foldNodeProp.add({\n                [\"Block SwitchBlock ClassBody ElementValueArrayInitializer ModuleBody EnumBody \" +\n                    \"ConstructorBody InterfaceBody ArrayInitializer\"]: foldInside,\n                BlockComment(tree) { return { from: tree.from + 2, to: tree.to - 2 }; }\n            }),\n            /*@__PURE__*/styleTags({\n                null: tags.null,\n                instanceof: tags.operatorKeyword,\n                this: tags.self,\n                \"new super assert open to with void\": tags.keyword,\n                \"class interface extends implements module package import enum\": tags.definitionKeyword,\n                \"switch while for if else case default do break continue return try catch finally throw\": tags.controlKeyword,\n                [\"requires exports opens uses provides public private protected static transitive abstract final \" +\n                    \"strictfp synchronized native transient volatile throws\"]: tags.modifier,\n                IntegerLiteral: tags.integer,\n                FloatLiteral: tags.float,\n                StringLiteral: tags.string,\n                CharacterLiteral: tags.character,\n                LineComment: tags.lineComment,\n                BlockComment: tags.blockComment,\n                BooleanLiteral: tags.bool,\n                PrimitiveType: /*@__PURE__*/tags.standard(tags.typeName),\n                TypeName: tags.typeName,\n                Identifier: tags.variableName,\n                \"MethodName/Identifier\": /*@__PURE__*/tags.function(tags.variableName),\n                Definition: /*@__PURE__*/tags.definition(tags.variableName),\n                ArithOp: tags.arithmeticOperator,\n                LogicOp: tags.logicOperator,\n                BitOp: tags.bitwiseOperator,\n                CompareOp: tags.compareOperator,\n                AssignOp: tags.definitionOperator,\n                UpdateOp: tags.updateOperator,\n                Asterisk: tags.punctuation,\n                Label: tags.labelName,\n                \"( )\": tags.paren,\n                \"[ ]\": tags.squareBracket,\n                \"{ }\": tags.brace,\n                \".\": tags.derefOperator,\n                \", ;\": tags.separator\n            })\n        ]\n    }),\n    languageData: {\n        commentTokens: { line: \"//\", block: { open: \"/*\", close: \"*/\" } },\n        indentOnInput: /^\\s*(?:case |default:|\\{|\\})$/\n    }\n});\n/**\nJava language support.\n*/\nfunction java() {\n    return new LanguageSupport(javaLanguage);\n}\n\nexport { java, javaLanguage };\n"]},"metadata":{},"sourceType":"module"}