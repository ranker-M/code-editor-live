{"ast":null,"code":"import { cpp } from \"@codemirror/lang-cpp\";\nimport { html } from \"@codemirror/lang-html\";\nimport { java } from \"@codemirror/lang-java\";\nimport { javascript } from \"@codemirror/lang-javascript\";\nimport { json } from \"@codemirror/lang-json\";\nimport { lezer } from \"@codemirror/lang-lezer\";\nimport { markdown } from \"@codemirror/lang-markdown\";\nimport { php } from \"@codemirror/lang-php\";\nimport { python } from \"@codemirror/lang-python\";\nimport { rust } from \"@codemirror/lang-rust\";\nimport { sql } from \"@codemirror/lang-sql\";\nimport { xml } from \"@codemirror/lang-xml\";\nconst optionList = {\n  \"themes\": [\"dark\", \"light\"],\n  \"languages\": {\n    \"cpp\": {\n      extension: cpp(),\n      fileExtension: \"cpp\"\n    },\n    // \"html\": { extension: html(true, true), fileExtension: \"html\" },\n    \"java\": {\n      extension: java(),\n      fileExtension: \"java\"\n    },\n    \"javascript\": {\n      extension: javascript(),\n      fileExtension: \"js\"\n    },\n    // \"json\": { extension: json(), fileExtension: \"json\" },\n    // \"markdown\": { extension: markdown(), fileExtension: \"md\" },\n    \"php\": {\n      extension: php(),\n      fileExtension: \"php\"\n    },\n    \"python\": {\n      extension: python(),\n      fileExtension: \"py\"\n    },\n    \"rust\": {\n      extension: rust(),\n      fileExtension: \"rs\"\n    },\n    \"sql-schema\": {\n      extension: sql(),\n      fileExtension: \"sql\"\n    },\n    \"sql-queries\": {\n      extension: sql(),\n      fileExtension: \"sql\"\n    },\n    // \"xml\": { extension: xml(), fileExtension: \"xml\" },\n    // \"jsx\": { extension: javascript({ jsx: true }), fileExtension: \"jsx\" },\n    \"typescript\": {\n      extension: javascript({\n        typescript: true\n      }),\n      fileExtension: \"ts\"\n    } // \"tsx\": { extension: javascript({ jsx: true, typescript: true }), fileExtension: \"tsx\" }\n\n  }\n};\nconst exampleCode = {\n  \"cpp\": `#include <iostream>\nusing namespace std;\n\nint main() {\nint i, n;\n    bool isPrime = true;\n\n    cout << \"Enter a positive integer: \";\n    cin >> n;\n\n    // 0 and 1 are not prime numbers\n    if (n == 0 || n == 1) {\n        isPrime = false;\n    }\n    else {\n        for (i = 2; i <= n / 2; ++i) {\n            if (n % i == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n    }\n    if (isPrime)\n        cout << n << \" is a prime number\";\n    else\n        cout << n << \" is not a prime number\";\n\n    return 0;\n}`,\n  // \"html\": ,\n  \"java\": `import java.io.*;\n  \n  /* Name of the class has to be \"Main\" only if the class is public. */\n  class main\n  {\n    public static void main (String[] args) throws java.lang.Exception\n    {\n      BufferedReader r = new BufferedReader (new InputStreamReader (System.in));\n      String s;\n      while (!(s=r.readLine()).startsWith(\"42\")) System.out.println(s);\n    }\n  }\n  \n  // Enter some input in input area\n  // input should contain at least one 42`,\n  \"javascript\": `// Use print() instead of console.log() in Rhino compiler\n\n  importPackage(java.io); \n  importPackage(java.lang);\n  var stdin = new BufferedReader( new InputStreamReader(System['in']) )\n  \n  // take input from the user\n  //print(\"Enter a positive number: \");\n  //var number = parseInt(stdin.readLine());\n  \n  const number=156;\n  let isPrime = true;\n  \n  // check if number is equal to 1\n  if (number === 1) {\n      print(\"1 is neither prime nor composite number.\");\n  }\n  \n  // check if number is greater than 1\n  else if (number > 1) {\n  \n      // looping through 2 to number-1\n      for (let i = 2; i < number; i++) {\n          if (number % i == 0) {\n              isPrime = false;\n              break;\n          }\n      }\n  \n      if (isPrime) {\n          print(number+\" is a prime number\");\n      } else {\n          print(number+\" is a not prime number\");\n      }\n  }\n  \n  // check if number is less than 1\n  else {\n      print(\"The number is not a prime number.\");\n  }`,\n  // \"json\": ,\n  // \"markdown\": ,\n  \"php\": `<?php\n\n    // your code goes here\n        $name = \"lcodeshare\";\n        print \"<h1>Hello User, </h1> <p>Welcome to {$name}</p>\";\n    ?>`,\n  \"python\": `# your code goes here\n# Program to check if a number is prime or not\n\n# num = 407\n\n# To take input from the user\nnum = int(input(\"Enter a number: \"))\n\n# prime numbers are greater than 1\nif num > 1:\n    # check for factors\n    for i in range(2,num):\n        if (num % i) == 0:\n            print(num,\"is not a prime number\")\n            print(i,\"times\",num//i,\"is\",num)\n            break\n    else:\n        print(num,\"is a prime number\")\n\n# if input number is less than\n# or equal to 1, it is not prime\nelse:\n    print(num,\"is not a prime number\")`,\n  \"rust\": `use std::io::stdin;\n     use std::io::BufRead;\n     use std::io::BufReader;\n\n     fn main() {\n         let greetings = [\"Hello\", \"Hola\", \"Bonjour\",\n                          \"Ciao\", \"こんにちは\", \"안녕하세요\",\n                          \"Cześć\", \"Olá\", \"Здравствуйте\",\n                          \"Chào bạn\", \"您好\", \"Hallo\",\n                          \"Hej\", \"Ahoj\", \"سلام\"];\n\n         for (num, greeting) in greetings.iter().enumerate() {\n             print!(\"{} : \", greeting);\n             match num {\n                 0 =>  println!(\"This code is editable and runnable!\"),\n                 1 =>  println!(\"¡Este código es editable y ejecutable!\"),\n                 2 =>  println!(\"Ce code est modifiable et exécutable !\"),\n                 3 =>  println!(\"Questo codice è modificabile ed eseguibile!\"),\n                 4 =>  println!(\"このコードは編集して実行出来ます！\"),\n                 5 =>  println!(\"여기에서 코드를 수정하고 실행할 수 있습니다!\"),\n                 6 =>  println!(\"Ten kod można edytować oraz uruchomić!\"),\n                 7 =>  println!(\"Este código é editável e executável!\"),\n                 8 =>  println!(\"Этот код можно отредактировать и запустить!\"),\n                 9 =>  println!(\"Bạn có thể edit và run code trực tiếp!\"),\n                 10 => println!(\"这段代码是可以编辑并且能够运行的！\"),\n                 11 => println!(\"Dieser Code kann bearbeitet und ausgeführt werden!\"),\n                 12 => println!(\"Den här koden kan redigeras och köras!\"),\n                 13 => println!(\"Tento kód můžete upravit a spustit\"),\n                 14 => println!(\"این کد قابلیت ویرایش و اجرا دارد!\"),\n                 _ =>  {},\n             }\n         }\n     }\n     `,\n  \"sql-queries\": `select * from tbl;`,\n  \"sql-schema\": `-- your code goes here\n  create table tbl(str varchar(20));\n  insert into tbl values('Hello world!');\n  select * from tbl;`,\n  // \"xml\": ,\n  // \"jsx\": ,\n  \"typescript\": `function isPrime(n){\n    for(let i = 2; i < n;i++){\n      if(n % i === 0)\n      return 'notPrime'\n      return 'prime'\n    }\n  }\n  console.log(isPrime(18))\n  \n  function prime(n){\n    for (var i = 0; i <= n; i++) {\n    var isPrime = false;\n    for (var j = 2; j <= i; j++) {\n      if (i % j === 0 && j !== i) {\n        isPrime = true;\n      }\n    }\n    if (isPrime === false) console.log(i);\n  }\n  }\n  prime(100)` // \"tsx\": \n\n};\nexport { optionList, exampleCode };","map":{"version":3,"sources":["C:/Users/pc/Desktop/live-code-editor/client/src/components/CodeEditorImports.js"],"names":["cpp","html","java","javascript","json","lezer","markdown","php","python","rust","sql","xml","optionList","extension","fileExtension","typescript","exampleCode"],"mappings":"AAAA,SAASA,GAAT,QAAoB,sBAApB;AACA,SAASC,IAAT,QAAqB,uBAArB;AACA,SAASC,IAAT,QAAqB,uBAArB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,IAAT,QAAqB,uBAArB;AACA,SAASC,KAAT,QAAsB,wBAAtB;AACA,SAASC,QAAT,QAAyB,2BAAzB;AACA,SAASC,GAAT,QAAoB,sBAApB;AACA,SAASC,MAAT,QAAuB,yBAAvB;AACA,SAASC,IAAT,QAAqB,uBAArB;AACA,SAASC,GAAT,QAAoB,sBAApB;AACA,SAASC,GAAT,QAAoB,sBAApB;AAEA,MAAMC,UAAU,GAAG;AACjB,YAAU,CACR,MADQ,EAER,OAFQ,CADO;AAKjB,eAAa;AACX,WAAO;AAAEC,MAAAA,SAAS,EAAEb,GAAG,EAAhB;AAAoBc,MAAAA,aAAa,EAAE;AAAnC,KADI;AAEX;AACA,YAAQ;AAAED,MAAAA,SAAS,EAAEX,IAAI,EAAjB;AAAqBY,MAAAA,aAAa,EAAE;AAApC,KAHG;AAIX,kBAAc;AAAED,MAAAA,SAAS,EAAEV,UAAU,EAAvB;AAA2BW,MAAAA,aAAa,EAAE;AAA1C,KAJH;AAKX;AACA;AACA,WAAO;AAAED,MAAAA,SAAS,EAAEN,GAAG,EAAhB;AAAoBO,MAAAA,aAAa,EAAE;AAAnC,KAPI;AAQX,cAAU;AAAED,MAAAA,SAAS,EAAEL,MAAM,EAAnB;AAAuBM,MAAAA,aAAa,EAAE;AAAtC,KARC;AASX,YAAQ;AAAED,MAAAA,SAAS,EAAEJ,IAAI,EAAjB;AAAqBK,MAAAA,aAAa,EAAE;AAApC,KATG;AAUX,kBAAc;AAAED,MAAAA,SAAS,EAAEH,GAAG,EAAhB;AAAoBI,MAAAA,aAAa,EAAE;AAAnC,KAVH;AAWX,mBAAe;AAAED,MAAAA,SAAS,EAAEH,GAAG,EAAhB;AAAoBI,MAAAA,aAAa,EAAE;AAAnC,KAXJ;AAYX;AACA;AACA,kBAAc;AAAED,MAAAA,SAAS,EAAEV,UAAU,CAAC;AAAEY,QAAAA,UAAU,EAAE;AAAd,OAAD,CAAvB;AAA+CD,MAAAA,aAAa,EAAE;AAA9D,KAdH,CAeX;;AAfW;AALI,CAAnB;AAwBA,MAAME,WAAW,GAAG;AAClB,SAAQ;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EA7BoB;AA+BlB;AACA,UAAS;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CA9CoB;AA+ClB,gBAAe;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAtFoB;AAuFlB;AACA;AACA,SAAQ;AACV;AACA;AACA;AACA;AACA,OA9FoB;AAgGlB,YACG;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAvHoB;AAwHlB,UAAS;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAzJoB;AA0JlB,iBAAgB,oBA1JE;AA2JlB,gBAAe;AACjB;AACA;AACA,qBA9JoB;AA+JlB;AACA;AACA,gBAAe;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aArLoB,CAsLlB;;AAtLkB,CAApB;AA0LA,SAASJ,UAAT,EAAqBI,WAArB","sourcesContent":["import { cpp } from \"@codemirror/lang-cpp\"\r\nimport { html } from \"@codemirror/lang-html\"\r\nimport { java } from \"@codemirror/lang-java\";\r\nimport { javascript } from \"@codemirror/lang-javascript\";\r\nimport { json } from \"@codemirror/lang-json\";\r\nimport { lezer } from \"@codemirror/lang-lezer\";\r\nimport { markdown } from \"@codemirror/lang-markdown\";\r\nimport { php } from \"@codemirror/lang-php\";\r\nimport { python } from \"@codemirror/lang-python\"\r\nimport { rust } from \"@codemirror/lang-rust\"\r\nimport { sql } from \"@codemirror/lang-sql\"\r\nimport { xml } from \"@codemirror/lang-xml\"\r\n\r\nconst optionList = {\r\n  \"themes\": [\r\n    \"dark\",\r\n    \"light\"\r\n  ],\r\n  \"languages\": {\r\n    \"cpp\": { extension: cpp(), fileExtension: \"cpp\" },\r\n    // \"html\": { extension: html(true, true), fileExtension: \"html\" },\r\n    \"java\": { extension: java(), fileExtension: \"java\" },\r\n    \"javascript\": { extension: javascript(), fileExtension: \"js\" },\r\n    // \"json\": { extension: json(), fileExtension: \"json\" },\r\n    // \"markdown\": { extension: markdown(), fileExtension: \"md\" },\r\n    \"php\": { extension: php(), fileExtension: \"php\" },\r\n    \"python\": { extension: python(), fileExtension: \"py\" },\r\n    \"rust\": { extension: rust(), fileExtension: \"rs\" },\r\n    \"sql-schema\": { extension: sql(), fileExtension: \"sql\" },\r\n    \"sql-queries\": { extension: sql(), fileExtension: \"sql\" },\r\n    // \"xml\": { extension: xml(), fileExtension: \"xml\" },\r\n    // \"jsx\": { extension: javascript({ jsx: true }), fileExtension: \"jsx\" },\r\n    \"typescript\": { extension: javascript({ typescript: true }), fileExtension: \"ts\" },\r\n    // \"tsx\": { extension: javascript({ jsx: true, typescript: true }), fileExtension: \"tsx\" }\r\n  }\r\n};\r\n\r\nconst exampleCode = {\r\n  \"cpp\": `#include <iostream>\r\nusing namespace std;\r\n\r\nint main() {\r\nint i, n;\r\n    bool isPrime = true;\r\n\r\n    cout << \"Enter a positive integer: \";\r\n    cin >> n;\r\n\r\n    // 0 and 1 are not prime numbers\r\n    if (n == 0 || n == 1) {\r\n        isPrime = false;\r\n    }\r\n    else {\r\n        for (i = 2; i <= n / 2; ++i) {\r\n            if (n % i == 0) {\r\n                isPrime = false;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    if (isPrime)\r\n        cout << n << \" is a prime number\";\r\n    else\r\n        cout << n << \" is not a prime number\";\r\n\r\n    return 0;\r\n}`,\r\n\r\n  // \"html\": ,\r\n  \"java\": `import java.io.*;\r\n  \r\n  /* Name of the class has to be \"Main\" only if the class is public. */\r\n  class main\r\n  {\r\n    public static void main (String[] args) throws java.lang.Exception\r\n    {\r\n      BufferedReader r = new BufferedReader (new InputStreamReader (System.in));\r\n      String s;\r\n      while (!(s=r.readLine()).startsWith(\"42\")) System.out.println(s);\r\n    }\r\n  }\r\n  \r\n  // Enter some input in input area\r\n  // input should contain at least one 42`,\r\n  \"javascript\": `// Use print() instead of console.log() in Rhino compiler\r\n\r\n  importPackage(java.io); \r\n  importPackage(java.lang);\r\n  var stdin = new BufferedReader( new InputStreamReader(System['in']) )\r\n  \r\n  // take input from the user\r\n  //print(\"Enter a positive number: \");\r\n  //var number = parseInt(stdin.readLine());\r\n  \r\n  const number=156;\r\n  let isPrime = true;\r\n  \r\n  // check if number is equal to 1\r\n  if (number === 1) {\r\n      print(\"1 is neither prime nor composite number.\");\r\n  }\r\n  \r\n  // check if number is greater than 1\r\n  else if (number > 1) {\r\n  \r\n      // looping through 2 to number-1\r\n      for (let i = 2; i < number; i++) {\r\n          if (number % i == 0) {\r\n              isPrime = false;\r\n              break;\r\n          }\r\n      }\r\n  \r\n      if (isPrime) {\r\n          print(number+\" is a prime number\");\r\n      } else {\r\n          print(number+\" is a not prime number\");\r\n      }\r\n  }\r\n  \r\n  // check if number is less than 1\r\n  else {\r\n      print(\"The number is not a prime number.\");\r\n  }`,\r\n  // \"json\": ,\r\n  // \"markdown\": ,\r\n  \"php\": `<?php\r\n\r\n    // your code goes here\r\n        $name = \"lcodeshare\";\r\n        print \"<h1>Hello User, </h1> <p>Welcome to {$name}</p>\";\r\n    ?>`,\r\n\r\n  \"python\":\r\n    `# your code goes here\r\n# Program to check if a number is prime or not\r\n\r\n# num = 407\r\n\r\n# To take input from the user\r\nnum = int(input(\"Enter a number: \"))\r\n\r\n# prime numbers are greater than 1\r\nif num > 1:\r\n    # check for factors\r\n    for i in range(2,num):\r\n        if (num % i) == 0:\r\n            print(num,\"is not a prime number\")\r\n            print(i,\"times\",num//i,\"is\",num)\r\n            break\r\n    else:\r\n        print(num,\"is a prime number\")\r\n\r\n# if input number is less than\r\n# or equal to 1, it is not prime\r\nelse:\r\n    print(num,\"is not a prime number\")`,\r\n  \"rust\": `use std::io::stdin;\r\n     use std::io::BufRead;\r\n     use std::io::BufReader;\r\n\r\n     fn main() {\r\n         let greetings = [\"Hello\", \"Hola\", \"Bonjour\",\r\n                          \"Ciao\", \"こんにちは\", \"안녕하세요\",\r\n                          \"Cześć\", \"Olá\", \"Здравствуйте\",\r\n                          \"Chào bạn\", \"您好\", \"Hallo\",\r\n                          \"Hej\", \"Ahoj\", \"سلام\"];\r\n\r\n         for (num, greeting) in greetings.iter().enumerate() {\r\n             print!(\"{} : \", greeting);\r\n             match num {\r\n                 0 =>  println!(\"This code is editable and runnable!\"),\r\n                 1 =>  println!(\"¡Este código es editable y ejecutable!\"),\r\n                 2 =>  println!(\"Ce code est modifiable et exécutable !\"),\r\n                 3 =>  println!(\"Questo codice è modificabile ed eseguibile!\"),\r\n                 4 =>  println!(\"このコードは編集して実行出来ます！\"),\r\n                 5 =>  println!(\"여기에서 코드를 수정하고 실행할 수 있습니다!\"),\r\n                 6 =>  println!(\"Ten kod można edytować oraz uruchomić!\"),\r\n                 7 =>  println!(\"Este código é editável e executável!\"),\r\n                 8 =>  println!(\"Этот код можно отредактировать и запустить!\"),\r\n                 9 =>  println!(\"Bạn có thể edit và run code trực tiếp!\"),\r\n                 10 => println!(\"这段代码是可以编辑并且能够运行的！\"),\r\n                 11 => println!(\"Dieser Code kann bearbeitet und ausgeführt werden!\"),\r\n                 12 => println!(\"Den här koden kan redigeras och köras!\"),\r\n                 13 => println!(\"Tento kód můžete upravit a spustit\"),\r\n                 14 => println!(\"این کد قابلیت ویرایش و اجرا دارد!\"),\r\n                 _ =>  {},\r\n             }\r\n         }\r\n     }\r\n     `,\r\n  \"sql-queries\": `select * from tbl;`,\r\n  \"sql-schema\": `-- your code goes here\r\n  create table tbl(str varchar(20));\r\n  insert into tbl values('Hello world!');\r\n  select * from tbl;`,\r\n  // \"xml\": ,\r\n  // \"jsx\": ,\r\n  \"typescript\": `function isPrime(n){\r\n    for(let i = 2; i < n;i++){\r\n      if(n % i === 0)\r\n      return 'notPrime'\r\n      return 'prime'\r\n    }\r\n  }\r\n  console.log(isPrime(18))\r\n  \r\n  function prime(n){\r\n    for (var i = 0; i <= n; i++) {\r\n    var isPrime = false;\r\n    for (var j = 2; j <= i; j++) {\r\n      if (i % j === 0 && j !== i) {\r\n        isPrime = true;\r\n      }\r\n    }\r\n    if (isPrime === false) console.log(i);\r\n  }\r\n  }\r\n  prime(100)`,\r\n  // \"tsx\": \r\n}\r\n\r\n\r\nexport { optionList, exampleCode };\r\n"]},"metadata":{},"sourceType":"module"}